(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.TurtleCoinUtils = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
var asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":3,"./asn1/base":5,"./asn1/constants":9,"./asn1/decoders":11,"./asn1/encoders":14,"bn.js":17}],3:[function(require,module,exports){
var asn1 = require('../asn1');
var inherits = require('inherits');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = require('vm').runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":2,"inherits":100,"vm":156}],4:[function(require,module,exports){
var inherits = require('inherits');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":5,"buffer":48,"inherits":100}],5:[function(require,module,exports){
var base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":4,"./node":6,"./reporter":7}],6:[function(require,module,exports){
var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;
var DecoderBuffer = require('../base').DecoderBuffer;
var assert = require('minimalistic-assert');

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};

},{"../base":5,"minimalistic-assert":105}],7:[function(require,module,exports){
var inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":100}],8:[function(require,module,exports){
var constants = require('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":9}],9:[function(require,module,exports){
var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":8}],10:[function(require,module,exports){
var inherits = require('inherits');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":2,"inherits":100}],11:[function(require,module,exports){
var decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":10,"./pem":12}],12:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"./der":10,"buffer":48,"inherits":100}],13:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../../asn1":2,"buffer":48,"inherits":100}],14:[function(require,module,exports){
var encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":13,"./pem":15}],15:[function(require,module,exports){
var inherits = require('inherits');

var DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"./der":13,"inherits":100}],16:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],17:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buffer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":19}],18:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":19}],19:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],20:[function(require,module,exports){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = require('safe-buffer').Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES

},{"safe-buffer":143}],21:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
var incr32 = require('./incr32')

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher

},{"./aes":20,"./ghash":25,"./incr32":26,"buffer-xor":47,"cipher-base":49,"inherits":100,"safe-buffer":143}],22:[function(require,module,exports){
var ciphers = require('./encrypter')
var deciphers = require('./decrypter')
var modes = require('./modes/list.json')

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":23,"./encrypter":24,"./modes/list.json":34}],23:[function(require,module,exports){
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var MODES = require('./modes')
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

},{"./aes":20,"./authCipher":21,"./modes":33,"./streamCipher":36,"cipher-base":49,"evp_bytestokey":84,"inherits":100,"safe-buffer":143}],24:[function(require,module,exports){
var MODES = require('./modes')
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

},{"./aes":20,"./authCipher":21,"./modes":33,"./streamCipher":36,"cipher-base":49,"evp_bytestokey":84,"inherits":100,"safe-buffer":143}],25:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH

},{"safe-buffer":143}],26:[function(require,module,exports){
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32

},{}],27:[function(require,module,exports){
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":47}],28:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var xor = require('buffer-xor')

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}

},{"buffer-xor":47,"safe-buffer":143}],29:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":143}],30:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":143}],31:[function(require,module,exports){
var xor = require('buffer-xor')
var Buffer = require('safe-buffer').Buffer
var incr32 = require('../incr32')

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

},{"../incr32":26,"buffer-xor":47,"safe-buffer":143}],32:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],33:[function(require,module,exports){
var modeModules = {
  ECB: require('./ecb'),
  CBC: require('./cbc'),
  CFB: require('./cfb'),
  CFB8: require('./cfb8'),
  CFB1: require('./cfb1'),
  OFB: require('./ofb'),
  CTR: require('./ctr'),
  GCM: require('./ctr')
}

var modes = require('./list.json')

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes

},{"./cbc":27,"./cfb":28,"./cfb1":29,"./cfb8":30,"./ctr":31,"./ecb":32,"./list.json":34,"./ofb":35}],34:[function(require,module,exports){
module.exports={
  "aes-128-ecb": {
    "cipher": "AES",
    "key": 128,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-192-ecb": {
    "cipher": "AES",
    "key": 192,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-256-ecb": {
    "cipher": "AES",
    "key": 256,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-128-cbc": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-192-cbc": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-256-cbc": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes128": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes192": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes256": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-128-cfb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-192-cfb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-256-cfb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-128-cfb8": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-192-cfb8": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-256-cfb8": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-128-cfb1": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-192-cfb1": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-256-cfb1": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-128-ofb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-192-ofb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-256-ofb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-128-ctr": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-192-ctr": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-256-ctr": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-128-gcm": {
    "cipher": "AES",
    "key": 128,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-192-gcm": {
    "cipher": "AES",
    "key": 192,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-256-gcm": {
    "cipher": "AES",
    "key": 256,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  }
}

},{}],35:[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
},{"buffer":48,"buffer-xor":47}],36:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher

},{"./aes":20,"cipher-base":49,"inherits":100,"safe-buffer":143}],37:[function(require,module,exports){
var DES = require('browserify-des')
var aes = require('browserify-aes/browser')
var aesModes = require('browserify-aes/modes')
var desModes = require('browserify-des/modes')
var ebtk = require('evp_bytestokey')

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":22,"browserify-aes/modes":33,"browserify-des":38,"browserify-des/modes":39,"evp_bytestokey":84}],38:[function(require,module,exports){
var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}

},{"cipher-base":49,"des.js":57,"inherits":100,"safe-buffer":143}],39:[function(require,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],40:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

}).call(this,require("buffer").Buffer)
},{"bn.js":17,"buffer":48,"randombytes":126}],41:[function(require,module,exports){
module.exports = require('./browser/algorithms.json')

},{"./browser/algorithms.json":42}],42:[function(require,module,exports){
module.exports={
  "sha224WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "RSA-SHA224": {
    "sign": "ecdsa/rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "sha256WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "RSA-SHA256": {
    "sign": "ecdsa/rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "sha384WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "RSA-SHA384": {
    "sign": "ecdsa/rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "sha512WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA512": {
    "sign": "ecdsa/rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    "sign": "rsa",
    "hash": "sha1",
    "id": "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    "sign": "ecdsa",
    "hash": "sha1",
    "id": ""
  },
  "sha256": {
    "sign": "ecdsa",
    "hash": "sha256",
    "id": ""
  },
  "sha224": {
    "sign": "ecdsa",
    "hash": "sha224",
    "id": ""
  },
  "sha384": {
    "sign": "ecdsa",
    "hash": "sha384",
    "id": ""
  },
  "sha512": {
    "sign": "ecdsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-SHA1": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-WITH-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-WITH-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-WITH-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-WITH-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-RIPEMD160": {
    "sign": "dsa",
    "hash": "rmd160",
    "id": ""
  },
  "ripemd160WithRSA": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "RSA-RIPEMD160": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "md5WithRSAEncryption": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  },
  "RSA-MD5": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  }
}

},{}],43:[function(require,module,exports){
module.exports={
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
}

},{}],44:[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash')
var stream = require('stream')
var inherits = require('inherits')
var sign = require('./sign')
var verify = require('./verify')

var algorithms = require('./algorithms.json')
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = new Buffer(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

}).call(this,require("buffer").Buffer)
},{"./algorithms.json":42,"./sign":45,"./verify":46,"buffer":48,"create-hash":52,"inherits":100,"stream":152}],45:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = require('create-hmac')
var crt = require('browserify-rsa')
var EC = require('elliptic').ec
var BN = require('bn.js')
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [ 0 ].concat(r)
  if (s[0] & 0x80) s = [ 0 ].concat(s)

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([ zeros, x ])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([ zeros, out ])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = new Buffer(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([ t, kv.v ])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

}).call(this,require("buffer").Buffer)
},{"./curves.json":43,"bn.js":17,"browserify-rsa":40,"buffer":48,"create-hmac":54,"elliptic":67,"parse-asn1":111}],46:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var BN = require('bn.js')
var EC = require('elliptic').ec
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = new Buffer(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

}).call(this,require("buffer").Buffer)
},{"./curves.json":43,"bn.js":17,"buffer":48,"elliptic":67,"parse-asn1":111}],47:[function(require,module,exports){
(function (Buffer){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this,require("buffer").Buffer)
},{"buffer":48}],48:[function(require,module,exports){
(function (Buffer){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this,require("buffer").Buffer)
},{"base64-js":16,"buffer":48,"ieee754":99}],49:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var StringDecoder = require('string_decoder').StringDecoder
var inherits = require('inherits')

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase

},{"inherits":100,"safe-buffer":143,"stream":152,"string_decoder":153}],50:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":101}],51:[function(require,module,exports){
(function (Buffer){
var elliptic = require('elliptic')
var BN = require('bn.js')

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

}).call(this,require("buffer").Buffer)
},{"bn.js":17,"buffer":48,"elliptic":67}],52:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var MD5 = require('md5.js')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Base = require('cipher-base')

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}

},{"cipher-base":49,"inherits":100,"md5.js":103,"ripemd160":142,"sha.js":145}],53:[function(require,module,exports){
var MD5 = require('md5.js')

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}

},{"md5.js":103}],54:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Legacy = require('./legacy')
var Base = require('cipher-base')
var Buffer = require('safe-buffer').Buffer
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')

var sha = require('sha.js')

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}

},{"./legacy":55,"cipher-base":49,"create-hash/md5":53,"inherits":100,"ripemd160":142,"safe-buffer":143,"sha.js":145}],55:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var Base = require('cipher-base')

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac

},{"cipher-base":49,"inherits":100,"safe-buffer":143}],56:[function(require,module,exports){
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var algos = require('browserify-sign/algos')
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = require('diffie-hellman')

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = require('browserify-sign')

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = require('randomfill')

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}

},{"browserify-cipher":37,"browserify-sign":44,"browserify-sign/algos":41,"create-ecdh":51,"create-hash":52,"create-hmac":54,"diffie-hellman":63,"pbkdf2":113,"public-encrypt":120,"randombytes":126,"randomfill":127}],57:[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":58,"./des/cipher":59,"./des/des":60,"./des/ede":61,"./des/utils":62}],58:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":100,"minimalistic-assert":105}],59:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":105}],60:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var utils = des.utils;
var Cipher = des.Cipher;

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"../des":57,"inherits":100,"minimalistic-assert":105}],61:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var Cipher = des.Cipher;
var DES = des.DES;

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"../des":57,"inherits":100,"minimalistic-assert":105}],62:[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],63:[function(require,module,exports){
(function (Buffer){
var generatePrime = require('./lib/generatePrime')
var primes = require('./lib/primes.json')

var DH = require('./lib/dh')

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

}).call(this,require("buffer").Buffer)
},{"./lib/dh":64,"./lib/generatePrime":65,"./lib/primes.json":66,"buffer":48}],64:[function(require,module,exports){
(function (Buffer){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this,require("buffer").Buffer)
},{"./generatePrime":65,"bn.js":17,"buffer":48,"miller-rabin":104,"randombytes":126}],65:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"bn.js":17,"miller-rabin":104,"randombytes":126}],66:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],67:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":82,"./elliptic/curve":70,"./elliptic/curves":73,"./elliptic/ec":74,"./elliptic/eddsa":77,"./elliptic/utils":81,"brorand":18}],68:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../../elliptic":67,"bn.js":17}],69:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../../elliptic":67,"../curve":70,"bn.js":17,"inherits":100}],70:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":68,"./edwards":69,"./mont":71,"./short":72}],71:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var elliptic = require('../../elliptic');
var utils = elliptic.utils;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../../elliptic":67,"../curve":70,"bn.js":17,"inherits":100}],72:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../../elliptic":67,"../curve":70,"bn.js":17,"inherits":100}],73:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var elliptic = require('../elliptic');

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"../elliptic":67,"./precomputed/secp256k1":80,"hash.js":86}],74:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../../elliptic":67,"./key":75,"./signature":76,"bn.js":17,"hmac-drbg":98}],75:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../../elliptic":67,"bn.js":17}],76:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../../elliptic":67,"bn.js":17}],77:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = elliptic.curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../../elliptic":67,"./key":78,"./signature":79,"hash.js":86}],78:[function(require,module,exports){
'use strict';

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../../elliptic":67}],79:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../../elliptic":67,"bn.js":17}],80:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],81:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.iushrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":17,"minimalistic-assert":105,"minimalistic-crypto-utils":106}],82:[function(require,module,exports){
module.exports={
  "_from": "elliptic@^6.0.0",
  "_id": "elliptic@6.4.1",
  "_inBundle": false,
  "_integrity": "sha512-BsXLz5sqX8OHcsh7CqBMztyXARmGQ3LWPtGjJi6DiJHq5C/qvi9P3OqgswKSDftbu8+IoI/QDTAm2fFnQ9SZSQ==",
  "_location": "/browserify/elliptic",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "elliptic@^6.0.0",
    "name": "elliptic",
    "escapedName": "elliptic",
    "rawSpec": "^6.0.0",
    "saveSpec": null,
    "fetchSpec": "^6.0.0"
  },
  "_requiredBy": [
    "/browserify/browserify-sign",
    "/browserify/create-ecdh"
  ],
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.4.1.tgz",
  "_shasum": "c2d0b7776911b86722c632c3c06c60f2f819939a",
  "_spec": "elliptic@^6.0.0",
  "_where": "C:\\Users\\Brandon\\AppData\\Roaming\\npm\\node_modules\\browserify\\node_modules\\browserify-sign",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bn.js": "^4.4.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.0",
    "inherits": "^2.0.1",
    "minimalistic-assert": "^1.0.0",
    "minimalistic-crypto-utils": "^1.0.0"
  },
  "deprecated": false,
  "description": "EC cryptography",
  "devDependencies": {
    "brfs": "^1.4.3",
    "coveralls": "^2.11.3",
    "grunt": "^0.4.5",
    "grunt-browserify": "^5.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-saucelabs": "^8.6.2",
    "istanbul": "^0.4.2",
    "jscs": "^2.9.0",
    "jshint": "^2.6.0",
    "mocha": "^2.1.0"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/indutny/elliptic",
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "license": "MIT",
  "main": "lib/elliptic.js",
  "name": "elliptic",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "scripts": {
    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "lint": "npm run jscs && npm run jshint",
    "test": "npm run lint && npm run unit",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "version": "grunt dist && git add dist/"
  },
  "version": "6.4.1"
}

},{}],83:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],84:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var MD5 = require('md5.js')

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey

},{"md5.js":103,"safe-buffer":143}],85:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var inherits = require('inherits')

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase

},{"inherits":100,"safe-buffer":143,"stream":152}],86:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":87,"./hash/hmac":88,"./hash/ripemd":89,"./hash/sha":90,"./hash/utils":97}],87:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":97,"minimalistic-assert":105}],88:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":97,"minimalistic-assert":105}],89:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./common":87,"./utils":97}],90:[function(require,module,exports){
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":91,"./sha/224":92,"./sha/256":93,"./sha/384":94,"./sha/512":95}],91:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":87,"../utils":97,"./common":96}],92:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":97,"./256":93}],93:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":87,"../utils":97,"./common":96,"minimalistic-assert":105}],94:[function(require,module,exports){
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":97,"./512":95}],95:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../common":87,"../utils":97,"minimalistic-assert":105}],96:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":97}],97:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"inherits":100,"minimalistic-assert":105}],98:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":86,"minimalistic-assert":105,"minimalistic-crypto-utils":106}],99:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],100:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],101:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],102:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],103:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')
var Buffer = require('safe-buffer').Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

},{"hash-base":85,"inherits":100,"safe-buffer":143}],104:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":17,"brorand":18}],105:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],106:[function(require,module,exports){
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],107:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],108:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict'

var asn1 = require('asn1.js')

exports.certificate = require('./certificate')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"./certificate":109,"asn1.js":2}],109:[function(require,module,exports){
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

'use strict'

var asn = require('asn1.js')

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate

},{"asn1.js":2}],110:[function(require,module,exports){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
var Buffer = require('safe-buffer').Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}

},{"browserify-aes":22,"evp_bytestokey":84,"safe-buffer":143}],111:[function(require,module,exports){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
var Buffer = require('safe-buffer').Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

},{"./aesid.json":107,"./asn1":108,"./fixProc":110,"browserify-aes":22,"pbkdf2":113,"safe-buffer":143}],112:[function(require,module,exports){
(function (process){
// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":119}],113:[function(require,module,exports){
exports.pbkdf2 = require('./lib/async')
exports.pbkdf2Sync = require('./lib/sync')

},{"./lib/async":114,"./lib/sync":117}],114:[function(require,module,exports){
(function (process,global){
var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var sync = require('./sync')
var Buffer = require('safe-buffer').Buffer

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  'sha': 'SHA-1',
  'sha-1': 'SHA-1',
  'sha1': 'SHA-1',
  'sha256': 'SHA-256',
  'sha-256': 'SHA-256',
  'sha384': 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  'sha512': 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}

function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out)
    })
  }, function (e) {
    process.nextTick(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
  }

  checkParameters(password, salt, iterations, keylen)
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./default-encoding":115,"./precondition":116,"./sync":117,"_process":119,"safe-buffer":143}],115:[function(require,module,exports){
(function (process){
var defaultEncoding
/* istanbul ignore next */
if (process.browser) {
  defaultEncoding = 'utf-8'
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
}
module.exports = defaultEncoding

}).call(this,require('_process'))
},{"_process":119}],116:[function(require,module,exports){
(function (Buffer){
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

function checkBuffer (buf, name) {
  if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
    throw new TypeError(name + ' must be a buffer or string')
  }
}

module.exports = function (password, salt, iterations, keylen) {
  checkBuffer(password, 'Password')
  checkBuffer(salt, 'Salt')

  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":101}],117:[function(require,module,exports){
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var Buffer = require('safe-buffer').Buffer
var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(password, salt, iterations, keylen)

  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2

},{"./default-encoding":115,"./precondition":116,"create-hash/md5":53,"ripemd160":142,"safe-buffer":143,"sha.js":145}],118:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


}).call(this,require('_process'))
},{"_process":119}],119:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],120:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt')
exports.privateDecrypt = require('./privateDecrypt')

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}

},{"./privateDecrypt":122,"./publicEncrypt":123}],121:[function(require,module,exports){
var createHash = require('create-hash')
var Buffer = require('safe-buffer').Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}

},{"create-hash":52,"safe-buffer":143}],122:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var crt = require('browserify-rsa')
var createHash = require('create-hash')
var withPublic = require('./withPublic')
var Buffer = require('safe-buffer').Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}

},{"./mgf":121,"./withPublic":124,"./xor":125,"bn.js":17,"browserify-rsa":40,"create-hash":52,"parse-asn1":111,"safe-buffer":143}],123:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var randomBytes = require('randombytes')
var createHash = require('create-hash')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var withPublic = require('./withPublic')
var crt = require('browserify-rsa')
var Buffer = require('safe-buffer').Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}

},{"./mgf":121,"./withPublic":124,"./xor":125,"bn.js":17,"browserify-rsa":40,"create-hash":52,"parse-asn1":111,"randombytes":126,"safe-buffer":143}],124:[function(require,module,exports){
var BN = require('bn.js')
var Buffer = require('safe-buffer').Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic

},{"bn.js":17,"safe-buffer":143}],125:[function(require,module,exports){
module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}

},{}],126:[function(require,module,exports){
(function (process,global){
'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = require('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":119,"safe-buffer":143}],127:[function(require,module,exports){
(function (process,global){
'use strict'

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = require('safe-buffer')
var randombytes = require('randombytes')
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":119,"randombytes":126,"safe-buffer":143}],128:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":129}],129:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};
},{"./_stream_readable":131,"./_stream_writable":133,"core-util-is":50,"inherits":100,"process-nextick-args":118}],130:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":132,"core-util-is":50,"inherits":100}],131:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":129,"./internal/streams/BufferList":134,"./internal/streams/destroy":135,"./internal/streams/stream":136,"_process":119,"core-util-is":50,"events":83,"inherits":100,"isarray":102,"process-nextick-args":118,"safe-buffer":143,"string_decoder/":137,"util":19}],132:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":129,"core-util-is":50,"inherits":100}],133:[function(require,module,exports){
(function (process,global,setImmediate){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)
},{"./_stream_duplex":129,"./internal/streams/destroy":135,"./internal/streams/stream":136,"_process":119,"core-util-is":50,"inherits":100,"process-nextick-args":118,"safe-buffer":143,"timers":154,"util-deprecate":155}],134:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
var util = require('util');

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}
},{"safe-buffer":143,"util":19}],135:[function(require,module,exports){
'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":118}],136:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":83}],137:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":143}],138:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":139}],139:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":129,"./lib/_stream_passthrough.js":130,"./lib/_stream_readable.js":131,"./lib/_stream_transform.js":132,"./lib/_stream_writable.js":133}],140:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":139}],141:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":133}],142:[function(require,module,exports){
'use strict'
var Buffer = require('buffer').Buffer
var inherits = require('inherits')
var HashBase = require('hash-base')

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

},{"buffer":48,"hash-base":85,"inherits":100}],143:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":48}],144:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

},{"safe-buffer":143}],145:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":146,"./sha1":147,"./sha224":148,"./sha256":149,"./sha384":150,"./sha512":151}],146:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

},{"./hash":144,"inherits":100,"safe-buffer":143}],147:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

},{"./hash":144,"inherits":100,"safe-buffer":143}],148:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

},{"./hash":144,"./sha256":149,"inherits":100,"safe-buffer":143}],149:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

},{"./hash":144,"inherits":100,"safe-buffer":143}],150:[function(require,module,exports){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

},{"./hash":144,"./sha512":151,"inherits":100,"safe-buffer":143}],151:[function(require,module,exports){
var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

},{"./hash":144,"inherits":100,"safe-buffer":143}],152:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":83,"inherits":100,"readable-stream/duplex.js":128,"readable-stream/passthrough.js":138,"readable-stream/readable.js":139,"readable-stream/transform.js":140,"readable-stream/writable.js":141}],153:[function(require,module,exports){
arguments[4][137][0].apply(exports,arguments)
},{"dup":137,"safe-buffer":143}],154:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":119,"timers":154}],155:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],156:[function(require,module,exports){
var indexOf = function (xs, item) {
    if (xs.indexOf) return xs.indexOf(item);
    else for (var i = 0; i < xs.length; i++) {
        if (xs[i] === item) return i;
    }
    return -1;
};
var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    if (context) {
        forEach(Object_keys(ctx), function (key) {
            context[key] = ctx[key];
        });
    }

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.isContext = function (context) {
    return context instanceof Context;
};

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{}],157:[function(require,module,exports){
module.exports={
  "coinUnitPlaces": 2,
  "addressPrefix": 3914525,
  "keccakIterations": 1,
  "defaultNetworkFee": 10
}

},{}],158:[function(require,module,exports){
(function (Buffer){
// Copyright (c) Lucas Jones
// Copyright (c) 2014-2017, MyMonero.com
// Copyright (c) 2016, Paul Shapiro
// Copyright (c) 2017, Luigi111
// Copyright (c) 2018, The TurtleCoin Developers
//
// Please see the included LICENSE file for more information.

'use strict'

const BigInteger = require('./lib/biginteger.js')
const Base58 = require('./lib/base58.js')
const Mnemonic = require('./lib/mnemonic.js')
const VarintDecoder = require('varint-decoder')
const SecureRandomString = require('secure-random-string')
const Numeral = require('numeral')

/* These are the JS implementations of the
   crypto functions that we need to do what
   we are trying to do. They are slow and
   painful */
const NACL = require('./lib/nacl-fast-cn.js')
const CNCrypto = require('./lib/crypto.js')
const SHA3 = require('./lib/sha3.js')

/* Try to load the Node C++ Addon module
   so that we can use that as it's a magnitudes
   faster, if not, we'll fall back to the
   JS implementations of the crypto functions */
var TurtleCoinCrypto
try {
  TurtleCoinCrypto = require('turtlecoin-crypto')
} catch (e) {
  /* Silence standardjs check */
  TurtleCoinCrypto = e
  TurtleCoinCrypto = false
}

/* This sets up the ability for the caller to specify
   their own cryptographic functions to use for parts
   of the methods used by this module. It is tracked outside
   of the instance of the module instance as there are
   a number of function calls that are not directly exposed
   to the caller to prevent confusion */
const userCryptoFunctions = {}

const SIZES = {
  HASH: 64,
  KEY: 64,
  PAYMENTID_HEX: 64,
  CHECKSUM: 8,
  ECPOINT: 32,
  GEP3: 160,
  GEP2: 120,
  GEP1P1: 160,
  GECACHED: 160,
  ECSCALAR: 32,
  KEYIMAGE: 32,
  GEDSMP: 160 * 8,
  SIGNATURE: 64
}
const TX_EXTRA_NONCE_MAX_COUNT = 255
const TX_EXTRA_TAGS = {
  PADDING: '00',
  PUBKEY: '01',
  NONCE: '02',
  MERGE_MINING: '03'
}
const TX_EXTRA_NONCE_TAGS = {
  PAYMENT_ID: '00',
  ENCRYPTED_PAYMENT_ID: '01'
}
const UINT64_MAX = BigInteger(2).pow(64)
const CURRENT_TX_VERSION = 1

class CryptoNote {
  constructor (config) {
    this.config = require('./config.json')

    if (config) {
      if (config.coinUnitPlaces) {
        this.config.coinUnitPlaces = config.coinUnitPlaces
      }

      if (config.addressPrefix) {
        this.config.addressPrefix = config.addressPrefix
      }

      if (config.keccakIterations) {
        this.config.keccakIterations = config.keccakIterations
      }

      if (config.defaultNetworkFee) {
        this.config.defaultNetworkFee = config.defaultNetworkFee
      }

      /* The checks below are for detecting customer caller
         cryptographic functions and loading them into the
         stack so that they can be used later throughout the
         module and it's underlying functions */
      if (typeof config.underivePublicKey === 'function') {
        userCryptoFunctions.underivePublicKey = config.underivePublicKey
      }

      if (typeof config.derivePublicKey === 'function') {
        userCryptoFunctions.derivePublicKey = config.derivePublicKey
      }

      if (typeof config.deriveSecretKey === 'function') {
        userCryptoFunctions.deriveSecretKey = config.deriveSecretKey
      }

      if (typeof config.generateKeyImage === 'function') {
        userCryptoFunctions.generateKeyImage = config.generateKeyImage
      }

      if (typeof config.secretKeyToPublicKey === 'function') {
        userCryptoFunctions.secretKeyToPublicKey = config.secretKeyToPublicKey
      }

      if (typeof config.cnFastHash === 'function') {
        userCryptoFunctions.cnFastHash = config.cnFastHash
      }

      if (typeof config.generateRingSignatures === 'function') {
        userCryptoFunctions.generateRingSignatures = config.generateRingSignatures
      }

      if (typeof config.generateKeyDerivation === 'function') {
        userCryptoFunctions.generateKeyDerivation = config.generateKeyDerivation
      }
    }
  }

  createNewSeed (entropy, iterations) {
    iterations = iterations || this.config.keccakIterations

    /* If you don't supply us with entropy, we'll go find our own */
    entropy = entropy || SecureRandomString({ length: 256 })

    /* We're going to take that entropy, throw a random value on
       to it, feed it through a poor very simple PBKDF2 implementation
       to create a seed using the supplied entropy */
    return scReduce32(simpleKdf(entropy + rand32(), iterations))
  }

  createNewAddress (entropy, lang, addressPrefix) {
    addressPrefix = addressPrefix || this.config.addressPrefix

    /* Let's create our new seed */
    const seed = this.createNewSeed(entropy)

    /* Using that seed, let's create our new CryptoNote address */
    return this.createAddressFromSeed(seed, lang, addressPrefix)
  }

  createAddressFromSeed (seed, lang, addressPrefix) {
    addressPrefix = addressPrefix || this.config.addressPrefix

    /* When we have a seed, then we can create a new key
       pair based on that seed */
    lang = lang || 'english'
    var keys = {}

    /* First we create the spend key pair; however,
       if the seed we were supplied isn't 64 characters
       long, we'll pass it through the CN Fast Hash function
       to turn it into 64 characters */
    var first = seed
    if (first.length !== 64) {
      first = cnFastHash(seed)
    }
    keys.spend = generateKeys(first)

    /* If our seed was less than 64 characters, then we
       hash our seed again to get us the necessary data
       to compute our view key pair; otherwise, we use
       the privateSpendKey we just created */
    var second
    if (seed.length !== 64) {
      second = cnFastHash(first)
    } else {
      second = cnFastHash(keys.spend.privateKey)
    }
    keys.view = generateKeys(second)

    /* Once we have our keys, then we can encode the public keys
       out of our view and spend pairs to create our public address */
    keys.address = this.encodeAddress(keys.view.publicKey, keys.spend.publicKey, false, addressPrefix)

    /* As we know the seed, we can encode it to a mnemonic string */
    keys.mnemonic = Mnemonic.encode(seed, lang)

    /* Put the seed in there for good measure */
    keys.seed = seed

    return keys
  }

  createAddressFromMnemonic (mnemonic, lang, addressPrefix) {
    addressPrefix = addressPrefix || this.config.addressPrefix

    /* The mnemonic is just a string representation of the seed
       that was initially used to create our key set */
    lang = lang || 'english'
    const seed = Mnemonic.decode(mnemonic, lang)

    /* As long as we have the seed we can recreate the key pairs
       pretty easily */
    return this.createAddressFromSeed(seed, lang, addressPrefix)
  }

  createAddressFromKeys (privateSpendKey, privateViewKey, addressPrefix) {
    addressPrefix = addressPrefix || this.config.addressPrefix

    let derivedViewKey = scReduce32(cnFastHash(privateSpendKey))

    /* We have our private keys so we can generate everything for use
       later except the mnemonic as we don't have the seed */
    const keys = {
      spend: {
        privateKey: privateSpendKey,
        publicKey: privateKeyToPublicKey(privateSpendKey)
      },
      view: {
        privateKey: privateViewKey,
        publicKey: privateKeyToPublicKey(privateViewKey)
      },
      address: '',
      /* If the view key is derived from the spend key, we can generate a seed */
      mnemonic: derivedViewKey === privateViewKey ? Mnemonic.encode(privateSpendKey) : null,
      seed: null
    }

    /* As we now have all of our keys, we can find out what our
       public address is */
    keys.address = this.encodeAddress(keys.view.publicKey, keys.spend.publicKey, false, addressPrefix)

    return keys
  }

  decodeAddressPrefix (address) {
    /* First we decode the address from Base58 into the raw address */
    var decodedAddress = Base58.decode(address)

    /* Now we need to work in reverse, starting with chopping off
       the checksum which is always the same */
    decodedAddress = decodedAddress.slice(0, -(SIZES.CHECKSUM))

    /* Now we find out how many extra characters there are
       in what's left after we find all of the keys in the address.
       Remember, this works because payment IDs are the same size as keys */
    var prefixLength = decodedAddress.length % SIZES.KEY

    /* Great, now we that we know how long the prefix length is, we
       can grab just that from the front of the address information */
    var prefixDecoded = decodedAddress.slice(0, prefixLength)

    /* Then we can decode it into the integer that it represents */
    var prefixVarint = decodeVarint(prefixDecoded)

    /* This block of code is a hack to figure out what the human readable
       address prefix is. While it has been tested with a few different
       cryptonote addresses from different projects, it is by no means
       guaranteed to work with every project. The reason for this is that
       due to the block encoding used in Base58, it's nearly impossible
       to reliably find out the Base58 version of just the prefix as it
       is not actually long enough to be encoded on its own and get the
       prefix we expect. */

    /* First we need the need to know how long the varint representation
       of the prefix is, we're going to need it later */
    var prefixVarintLength = prefixVarint.toString().length

    /* This is where it starts to get funny. If the length is an even
       number of characters, we'll need to grab the one extra character
       from the address we passed in to get the prefix that we all know
       and love */
    var offset = (prefixVarintLength % 2 === 0) ? 1 : 0

    /* This is kind of goofy. If the address prefix varint is longer
       than 10 characters, then we need to adjust the offset amount
       by the count of remaining characters. This is undoubtedly a
       hack to support obnoxiously long address prefixes */
    if (prefixVarintLength > 10) {
      offset += Math.floor((prefixVarintLength % 10) / 2)
    }

    /* Using all of that above, we can chop off the first couple of
       characters from the supplied address and get something that looks
       like the Base58 prefix we expected. */
    var prefixEncoded = address.slice(0, Math.ceil(prefixVarintLength / 2) + offset)

    return {
      prefix: prefixDecoded,
      base58: prefixEncoded,
      decimal: prefixVarint,
      hexadecimal: prefixVarint.toString(16)
    }
  }

  decodeAddress (address, addressPrefix) {
    addressPrefix = addressPrefix || this.config.addressPrefix

    /* First, we decode the base58 string to hex */
    var decodedAddress = Base58.decode(address)

    /* We need to encode the address prefix from our config
       so that we can compare it later */
    const encodedPrefix = encodeVarint(addressPrefix)

    /* Let's chop off the prefix from the address we decoded */
    var prefix = decodedAddress.slice(0, encodedPrefix.length)

    /* Do they match? They better... */
    if (prefix !== encodedPrefix) {
      throw new Error('Invalid address prefix')
    }

    /* We don't need the prefix in our working space any more */
    decodedAddress = decodedAddress.slice(encodedPrefix.length)

    var paymentId = ''

    /* If the decoded address is longer than a
      public spend key + public view key + checksum
      then it's very likely an integrated address and as
      such, we need to get the payment ID out of there for
      use later otherwise the resulting data does not make
      any sense whatsoever */
    if (decodedAddress.length > ((SIZES.KEY * 2) + SIZES.CHECKSUM)) {
      paymentId = decodedAddress.slice(0, (SIZES.KEY * 2))
      decodedAddress = decodedAddress.slice((SIZES.KEY * 2))
    }

    /* Finish decomposing the decoded address */
    const publicSpend = decodedAddress.slice(0, SIZES.KEY)
    const publicView = decodedAddress.slice(SIZES.KEY, (SIZES.KEY * 2))
    const expectedCheckum = decodedAddress.slice(-(SIZES.CHECKSUM))

    var checksum
    /* Calculate our address checksum */
    if (paymentId.length === 0) {
      /* If there is no payment ID it's pretty simple */
      checksum = cnFastHash(prefix + publicSpend + publicView).slice(0, SIZES.CHECKSUM)
    } else {
      /* If there is a payment ID it's pretty simple as well */
      checksum = cnFastHash(prefix + paymentId + publicSpend + publicView).slice(0, SIZES.CHECKSUM)

      /* As goofy as this sounds, we need to convert the payment
         ID from hex into a string representation so that it returns
         to a human readable form */
      paymentId = Base58.hextostr(paymentId)
    }

    /* If the checksum we found in the address doesn't match the
       checksum that we just computed, then the address is bad */
    if (expectedCheckum !== checksum) {
      throw new Error('Could not parse address: checksum mismatch')
    }

    return {
      publicViewKey: publicView,
      publicSpendKey: publicSpend,
      paymentId: paymentId,
      encodedPrefix: prefix,
      prefix: addressPrefix,
      rawAddress: Base58.decode(address)
    }
  }

  encodeRawAddress (rawAddress) {
    return Base58.encode(rawAddress)
  }

  encodeAddress (publicViewKey, publicSpendKey, paymentId, addressPrefix) {
    addressPrefix = addressPrefix || this.config.addressPrefix
    paymentId = paymentId || false

    if (!isHex64(publicViewKey)) {
      throw new Error('Invalid public view key format')
    }

    if (!isHex64(publicSpendKey)) {
      throw new Error('Invalid public spend key format')
    }

    /* If we included a payment ID it needs to be
       64 hexadecimal characters */
    if (paymentId && !isHex64(paymentId)) {
      throw new Error('Invalid payment ID format')
    }

    var rawAddress = []

    /* Encode our configured address prefix so that we can throw
       it on the front of our address */
    const encodedPrefix = encodeVarint(addressPrefix)
    rawAddress.push(encodedPrefix)

    /* Is there a payment ID? If so, that comes next */
    if (paymentId) {
      paymentId = Base58.strtohex(paymentId)
      rawAddress.push(paymentId)
    }

    /* Then toss on our publicSpendKey followed by our public
       view key */
    rawAddress.push(publicSpendKey.toString())
    rawAddress.push(publicViewKey.toString())
    rawAddress = rawAddress.join('')

    /* Generate the checksum and toss that on the end */
    const checksum = cnFastHash(rawAddress).slice(0, 8)
    rawAddress += checksum

    /* Finally, encode all that to Base58 */
    return Base58.encode(rawAddress)
  }

  createIntegratedAddress (address, paymentId, addressPrefix) {
    addressPrefix = addressPrefix || this.config.addressPrefix

    /* Decode our address */
    var addr = this.decodeAddress(address)
    /* Encode the address but this time include the payment ID */
    return this.encodeAddress(addr.publicViewKey, addr.publicSpendKey, paymentId, addressPrefix)
  }

  privateKeyToPublicKey (privateKey) {
    return privateKeyToPublicKey(privateKey)
  }

  scanTransactionOutputs (transactionPublicKey, outputs, privateViewKey, publicSpendKey, privateSpendKey) {
    /* Given the transaction public key and the array of outputs, let's see if
       any of the outputs belong to us */

    var ourOutputs = []

    for (var i = 0; i < outputs.length; i++) {
      var output = outputs[i]

      /* Check to see if this output belongs to us */
      var ourOutput = this.isOurTransactionOutput(transactionPublicKey, output, privateViewKey, publicSpendKey, privateSpendKey)
      if (ourOutput) {
        ourOutputs.push(ourOutput)
      }
    }

    return ourOutputs
  }

  isOurTransactionOutput (transactionPublicKey, output, privateViewKey, publicSpendKey, privateSpendKey) {
    privateSpendKey = privateSpendKey || false
    output = output || {}

    if (!isHex64(transactionPublicKey)) {
      throw new Error('Invalid transaction public key format')
    }

    if (!isHex64(privateViewKey)) {
      throw new Error('Invalid private view key format')
    }

    if (!isHex64(publicSpendKey)) {
      throw new Error('Invalid public spend key format')
    }

    if (privateSpendKey && !isHex64(privateSpendKey)) {
      throw new Error('Invalid private spend key format')
    }

    if (typeof output.index === 'undefined' || typeof output.key === 'undefined') {
      throw new Error('Output object not of correct type')
    }

    /* Generate the key deriviation from the random transaction public key and our private view key */
    const derivedKey = this.generateKeyDerivation(transactionPublicKey, privateViewKey)

    /* Derive the transfer public key from the derived key, the output index, and our public spend key */
    const publicEphemeral = derivePublicKey(derivedKey, output.index, publicSpendKey)

    /* If the derived transfer public key matches the output key then this output belongs to us */
    if (output.key === publicEphemeral) {
      output.input = {}
      output.input.transactionKey = {
        publicKey: transactionPublicKey,
        privateKey: derivedKey
      }
      output.input.publicEphemeral = publicEphemeral

      if (privateSpendKey) {
        /* Derive the key image private key from the derived key, the output index, and our spend secret key */
        const privateEphemeral = deriveSecretKey(derivedKey, output.index, privateSpendKey)

        /* Generate the key image */
        const keyImage = generateKeyImage(publicEphemeral, privateEphemeral)

        output.input.privateEphemeral = privateEphemeral
        output.keyImage = keyImage
      }

      return output
    }

    return false
  }

  generateKeyImage (transactionPublicKey, privateViewKey, publicSpendKey, privateSpendKey, outputIndex) {
    if (!isHex64(transactionPublicKey)) {
      throw new Error('Invalid transaction public key format')
    }

    if (!isHex64(privateViewKey)) {
      throw new Error('Invalid private view key format')
    }
    /* Generate the key deriviation from the random transaction public key and our private view key */
    let derivation = this.generateKeyDerivation(transactionPublicKey, privateViewKey)

    return this.generateKeyImagePrimitive(publicSpendKey, privateSpendKey, outputIndex, derivation)
  }

  /* If the user already has a derivation, they can pass that in instead of
     the privateViewKey and transactionPublicKey */
  generateKeyImagePrimitive (publicSpendKey, privateSpendKey, outputIndex, derivation) {
    if (!isHex64(publicSpendKey)) {
      throw new Error('Invalid public spend key format')
    }

    if (!isHex64(privateSpendKey)) {
      throw new Error('Invalid private spend key format')
    }

    /* Derive the transfer public key from the derived key, the output index, and our public spend key */
    const publicEphemeral = derivePublicKey(derivation, outputIndex, publicSpendKey)

    /* Derive the key image private key from the derived key, the output index, and our spend secret key */
    const privateEphemeral = deriveSecretKey(derivation, outputIndex, privateSpendKey)

    /* Generate the key image */
    const keyImage = generateKeyImage(publicEphemeral, privateEphemeral)

    return [keyImage, privateEphemeral]
  }

  /* This method is designed to create new outputs for use
     during transaction creation */
  createTransactionOutputs (address, amount) {
    amount = amount || false

    /* If we didn't specify an amount we can't send anything */
    if (!amount || amount < 0) {
      throw new Error('You must specify a valid amount')
    }

    const result = []

    /* Decode the address into it's important bits */
    var addressDecoded = this.decodeAddress(address)

    /* Now we need to decompose the amount into "pretty" amounts
       that we can actually mix later. We're doing this by
       converting the amount to a character array and reversing
       it so that we have the digits in each place */
    var amountChars = amount.toString().split('').reverse()

    /* Loop through the amount characters */
    for (var i = 0; i < amountChars.length; i++) {
      /* Create pretty amounts */
      var amt = parseInt(amountChars[i]) * Math.pow(10, i)

      if (amt !== 0) {
        result.push({
          amount: amt,
          keys: addressDecoded
        })
      }
    }

    return result
  }

  createTransactionStructure (ourKeys, newOutputs, ourOutputs, randomOuts, mixin, feeAmount, paymentId, unlockTime) {
    return createTransaction(ourKeys, newOutputs, ourOutputs, randomOuts, mixin, feeAmount, paymentId, unlockTime)
  }

  createTransaction (ourKeys, newOutputs, ourOutputs, randomOuts, mixin, feeAmount, paymentId, unlockTime) {
    var tx = this.createTransactionStructure(ourKeys, newOutputs, ourOutputs, randomOuts, mixin, feeAmount, paymentId, unlockTime)
    var serializedTransaction = serializeTransaction(tx)
    var txnHash = cnFastHash(serializedTransaction)

    return {
      transaction: tx,
      rawTransaction: serializedTransaction,
      hash: txnHash
    }
  }

  serializeTransaction (transaction) {
    return serializeTransaction(transaction, false)
  }

  formatMoney (amount) {
    var places = ''
    for (var i = 0; i < this.config.coinUnitPlaces; i++) {
      places += '0'
    }
    return Numeral(amount / Math.pow(10, this.config.coinUnitPlaces)).format('0,0.' + places)
  }

  generateKeyDerivation (transactionPublicKey, privateViewKey) {
    return generateKeyDerivation(transactionPublicKey, privateViewKey)
  }

  underivePublicKey (derivation, outputIndex, outputKey) {
    if (!isHex64(derivation)) {
      throw new Error('Invalid derivation key format')
    }

    if (userCryptoFunctions.underivePublicKey) {
      userCryptoFunctions.underivePublicKey(derivation, outputIndex, outputKey)
    } else if (TurtleCoinCrypto) {
      return TurtleCoinCrypto.underivePublicKey(derivation, outputIndex, outputKey)
    } else {
      const RingSigs = require('./lib/ringsigs.js')

      return RingSigs.underivePublicKey(derivation, outputIndex, outputKey)
    }
  }
}

/* Internal support functions */
function isHex (str) {
  const regex = new RegExp('^[0-9a-fA-F]{' + str.length + '}$')
  return regex.test(str)
}

function isHex64 (str) {
  const regex = new RegExp('^[0-9a-fA-F]{64}$')
  return regex.test(str)
}

function swapEndian (hex) {
  if (hex.length % 2 !== 0) {
    throw new Error('Hex string length must be a multiple of 2!')
  }
  var result = ''

  var loopCount = hex.length / 2
  for (var i = 1; i <= loopCount; i++) {
    result += hex.substr(0 - 2 * i, 2)
  }

  return result
}

function d2h (integer) {
  if (typeof integer !== 'string' && integer.toString().length > 15) {
    throw new Error('Integer should be entered as a string for precision')
  }

  var padding = ''
  for (var i = 0; i < 64; i++) {
    padding += '0'
  }

  const result = (padding + BigInteger(integer).toString(16).toLowerCase()).slice(-(SIZES.KEY))
  return result
}

function d2s (integer) {
  return swapEndian(d2h(integer))
}

function hex2bin (hex) {
  if (hex.length % 2 !== 0) {
    throw new Error('Hex string has invalid length')
  }

  var result = new Uint8Array(hex.length / 2)
  var hexLength = hex.length / 2
  for (var i = 0; i < hexLength; i++) {
    result[i] = parseInt(hex.slice(i * 2, i * 2 + 2), 16)
  }

  return result
}

function bin2hex (bin) {
  var result = []
  for (var i = 0; i < bin.length; ++i) {
    result.push(('0' + bin[i].toString(16)).slice(-2))
  }

  return result.join('')
}

function str2bin (str) {
  var result = new Uint8Array(str.length)
  for (var i = 0; i < str.length; i++) {
    result[i] = str.charCodeAt(i)
  }

  return result
}

function rand32 () {
  /* Go get 256-bits (32 bytes) of random data */
  return Mnemonic.random(256)
}

function encodeVarint (i) {
  i = BigInteger(i)

  var result = ''
  while (i.compare(0x80) >= 0) {
    result += ('0' + ((i.lowVal() & 0x7f) | 0x80).toString(16)).slice(-2)
    i = i.divide(BigInteger(2).pow(7))
  }
  result += ('0' + i.toJSValue().toString(16)).slice(-2)

  return result
}

function decodeVarint (hex) {
  const buffer = Buffer.from(hex, 'hex')
  return parseInt(VarintDecoder(buffer))
}

function scReduce (hex, size) {
  size = size || 64
  var input = hex2bin(hex)
  if (input.length !== size) {
    throw new Error('Invalid input length')
  }

  var memory = CNCrypto._malloc(size)
  CNCrypto.HEAPU8.set(input, memory)
  CNCrypto.ccall('sc_reduce32', 'void', ['number'], [memory])

  var result = CNCrypto.HEAPU8.subarray(memory, memory + size)
  CNCrypto._free(memory)

  return bin2hex(result)
}

function scReduce32 (hex) {
  if (TurtleCoinCrypto) {
    return TurtleCoinCrypto.scReduce32(hex)
  } else {
    return scReduce(hex, 32)
  }
}

function geScalarMult (publicKey, privateKey) {
  if (!isHex64(publicKey)) {
    throw new Error('Invalid public key format')
  }

  if (!isHex64(privateKey)) {
    throw new Error('Invalid secret key format')
  }

  return bin2hex(NACL.ll.geScalarmult(hex2bin(publicKey), hex2bin(privateKey)))
}

function getScalarMultBase (privateKey) {
  return privateKeyToPublicKey(privateKey)
}

function derivePublicKey (derivation, outputIndex, publicKey) {
  if (derivation.length !== (SIZES.ECPOINT * 2)) {
    throw new Error('Invalid derivation length')
  }

  if (!isHex64(publicKey)) {
    throw new Error('Invalid public key format')
  }

  if (userCryptoFunctions.derivePublicKey) {
    return userCryptoFunctions.derivePublicKey(derivation, outputIndex, publicKey)
  } else if (TurtleCoinCrypto) {
    return TurtleCoinCrypto.derivePublicKey(derivation, outputIndex, publicKey)
  } else {
    var s = derivationToScalar(derivation, outputIndex)
    return bin2hex(NACL.ll.geAdd(hex2bin(publicKey), hex2bin(getScalarMultBase(s))))
  }
}

function deriveSecretKey (derivation, outputIndex, privateKey) {
  if (derivation.length !== (SIZES.ECPOINT * 2)) {
    throw new Error('Invalid derivation length')
  }

  if (!isHex64(privateKey)) {
    throw new Error('Invalid secret key format')
  }

  if (userCryptoFunctions.deriveSecretKey) {
    return userCryptoFunctions.deriveSecretKey(derivation, outputIndex, privateKey)
  } else if (TurtleCoinCrypto) {
    return TurtleCoinCrypto.deriveSecretKey(derivation, outputIndex, privateKey)
  } else {
    var m = CNCrypto._malloc(SIZES.ECSCALAR)
    var b = hex2bin(derivationToScalar(derivation, outputIndex))
    CNCrypto.HEAPU8.set(b, m)

    var baseM = CNCrypto._malloc(SIZES.ECSCALAR)
    CNCrypto.HEAPU8.set(hex2bin(privateKey), baseM)

    var derivedM = CNCrypto._malloc(SIZES.ECSCALAR)
    CNCrypto.ccall('sc_add', 'void', ['number', 'number', 'number'], [derivedM, baseM, m])

    var result = CNCrypto.HEAPU8.subarray(derivedM, derivedM + SIZES.ECSCALAR)
    CNCrypto._free(m)
    CNCrypto._free(baseM)
    CNCrypto._free(derivedM)

    return bin2hex(result)
  }
}

function generateKeyImage (publicKey, privateKey) {
  if (!isHex64(publicKey)) {
    throw new Error('Invalid public key format')
  }

  if (!isHex64(privateKey)) {
    throw new Error('Invalid secret key format')
  }

  if (userCryptoFunctions.generateKeyImage) {
    return userCryptoFunctions.generateKeyImage(publicKey, privateKey)
  } else if (TurtleCoinCrypto) {
    return TurtleCoinCrypto.generateKeyImage(publicKey, privateKey)
  } else {
    const RingSigs = require('./lib/ringsigs.js')

    return RingSigs.generate_key_image(publicKey, privateKey)
  }
}

function hashToScalar (buf) {
  const hash = cnFastHash(buf)
  return scReduce32(hash)
}

function derivationToScalar (derivation, outputIndex) {
  var buf = ''

  if (derivation.length !== (SIZES.ECPOINT * 2)) {
    throw new Error('Invalid derivation length')
  }

  buf += derivation

  var enc = encodeVarint(outputIndex)
  if (enc.length > (10 * 2)) {
    throw new Error('outputIndex does not fit in 64-bit varint')
  }

  buf += enc
  return hashToScalar(buf)
}

function privateKeyToPublicKey (privateKey) {
  if (privateKey.length !== SIZES.KEY) {
    throw new Error('Invalid secret key length')
  }

  if (userCryptoFunctions.secretKeyToPublicKey) {
    return userCryptoFunctions.secretKeyToPublicKey(privateKey)
  } else if (TurtleCoinCrypto) {
    return TurtleCoinCrypto.secretKeyToPublicKey(privateKey)
  } else {
    return bin2hex(NACL.ll.geScalarmultBase(hex2bin(privateKey)))
  }
}

function cnFastHash (input) {
  if (input.length % 2 !== 0 || !isHex(input)) {
    throw new Error('Invalid input: ' + input)
  }

  if (userCryptoFunctions.cnFastHash) {
    return userCryptoFunctions.cnFastHash(input)
  } else if (TurtleCoinCrypto) {
    return TurtleCoinCrypto.cnFastHash(input)
  } else {
    return SHA3.keccak_256(hex2bin(input))
  }
}

function simpleKdf (str, iterations) {
  /* This is a very simple implementation of a
     psuedo PBKDF2 function */
  var hex = bin2hex(str2bin(str))
  for (var n = 0; n < iterations; ++n) {
    hex = cnFastHash(hex)
  }
  return hex
}

function generateKeys (seed) {
  if (seed.length !== 64) {
    throw new Error('Invalid seed length')
  }

  var privateKey = scReduce32(seed)
  var publicKey = privateKeyToPublicKey(privateKey)

  return {
    privateKey: privateKey,
    publicKey: publicKey
  }
}

function randomKeypair () {
  /* Generate a random key pair */
  return generateKeys(simpleKdf(rand32(), 1))
}

/* This method calculates our relative offset positions for
   the globalIndexes for inclusion in a new transaction */
function absoluteToRelativeOffsets (offsets) {
  if (offsets.length === 0) {
    return offsets
  }

  for (var i = offsets.length - 1; i >= 1; --i) {
    offsets[i] = BigInteger(offsets[i]).subtract(offsets[i - 1]).toString()
  }

  /* All the other offsets are strings, not numbers. It still works, but, muh
     autism */
  offsets[0] = offsets[0].toString()

  return offsets
}

function addTransactionPublicKeyToExtra (extra, transactionPublicKey) {
  if (!isHex64(transactionPublicKey)) {
    throw new Error('Invalid Transaction Public Key Format')
  }

  extra += TX_EXTRA_TAGS.PUBKEY
  extra += transactionPublicKey

  return extra
}

function getPaymentIdNonce (paymentId) {
  if (!isHex64(paymentId)) {
    throw new Error('Payment ID must be 64 hexadecimal characters')
  }

  return TX_EXTRA_NONCE_TAGS.PAYMENT_ID + paymentId
}

function addNonceToExtra (extra, nonce) {
  if ((nonce.length % 2) !== 0) {
    throw new Error('Invalid extra nonce')
  }

  if ((nonce.length / 2) > TX_EXTRA_NONCE_MAX_COUNT) {
    throw new Error('Extra nonce must be at most ' + TX_EXTRA_NONCE_MAX_COUNT + ' bytes')
  }

  /* Add the NONCE tag */
  extra += TX_EXTRA_TAGS.NONCE

  /* Encode the length of the NONCE */
  extra += ('0' + (nonce.length / 2).toString(16)).slice(-2)

  /* Add the NONCE */
  extra += nonce

  return extra
}

function generateRingSignature (transactionPrefixHash, keyImage, inputKeys, privateKey, realIndex) {
  var sigs = []

  if (!isHex64(keyImage)) {
    throw new Error('Invalid Key Image format')
  }

  if (!isHex64(privateKey)) {
    throw new Error('Invalid secret key format')
  }

  if (!isHex64(transactionPrefixHash)) {
    throw new Error('Invalid transaction prefix hash format')
  }

  if (realIndex >= inputKeys.length || realIndex < 0) {
    throw new Error('Invalid realIndex supplied')
  }

  if (userCryptoFunctions.generateRingSignatures) {
    return userCryptoFunctions.generateRingSignatures(transactionPrefixHash, keyImage, inputKeys, privateKey, realIndex)
  } else if (TurtleCoinCrypto) {
    return TurtleCoinCrypto.generateRingSignatures(transactionPrefixHash, keyImage, inputKeys, privateKey, realIndex)
  } else {
    const RingSigs = require('./lib/ringsigs.js')

    var cSigs = new RingSigs.VectorString()
    var cInputKeys = new RingSigs.VectorString()

    inputKeys.forEach((key) => {
      cInputKeys.push_back(key)
    })

    cSigs = RingSigs.generateRingSignatures(transactionPrefixHash, keyImage, cInputKeys, privateKey, realIndex)

    for (var i = 0; i < cSigs.size(); i++) {
      sigs.push(cSigs.get(i))
    }

    return sigs
  }
}

function createTransaction (newOutputs, ourOutputs, randomOutputs, mixin, feeAmount, paymentId, unlockTime) {
  unlockTime = unlockTime || 0
  randomOutputs = randomOutputs || []

  /* Verify that we've been passed an array of outputs */
  if (!Array.isArray(newOutputs)) {
    throw new Error('newOutputs must be an array')
  }

  /* Verify that we've been passed an array of our outputs (our funds) */
  if (!Array.isArray(ourOutputs)) {
    throw new Error('ourOutputs must be an array')
  }

  /* Make sure that if we are to use mixins that we've been given the
     correct number of sets of random outputs */
  if (randomOutputs.length !== ourOutputs.length && mixin !== 0) {
    throw new Error('Not enough random outputs sets were supplied with the transaction')
  }

  /* Make sure that there are the correct number of random outputs
     in each one of the sets that we were passed */
  for (var i = 0; i < randomOutputs.length; i++) {
    if ((randomOutputs[i] || []).length < mixin) {
      throw new Error('There are not enough outputs to mix with in the random outputs sets')
    }
  }

  /* Make sure that we're not trying to send more money than
     is actually possible within the confines of a uint64 */
  var neededMoney = BigInteger.ZERO
  for (i = 0; i < newOutputs.length; i++) {
    neededMoney = neededMoney.add(newOutputs[i].amount)
    if (neededMoney.compare(UINT64_MAX) !== -1) {
      throw new Error('Total output amount exceeds UINT64_MAX')
    }
  }

  /* Make sure that we're not trying to spend more money than
     is actually possible within the confines of a uint64 */
  var foundMoney = BigInteger.ZERO
  for (i = 0; i < ourOutputs.length; i++) {
    foundMoney = foundMoney.add(ourOutputs[i].amount)
    if (foundMoney.compare(UINT64_MAX) !== -1) {
      throw new Error('Total input amount exceeds UINT64_MAX')
    }
  }

  /* Validate that we're spending all of the necessary funds
     and that the transaction balances properly. We do this
     relatively early as everything starts to get a little
     more computationally expensive from here on out */
  var change = BigInteger.ZERO
  var cmp = neededMoney.compare(foundMoney)
  if (cmp < 0) {
    change = foundMoney.subtract(neededMoney)
    if (change.compare(feeAmount) !== 0) {
      throw new Error('We have not spent all of what we have passed in')
    }
  } else if (cmp > 0) {
    throw new Error('We need more money than was currently supplied for the transaction')
  }

  /* Create our transaction inputs using the helper function */
  var transactionInputs = createTransactionInputs(ourOutputs, randomOutputs, mixin)

  /* Prepare our transaction outputs using the helper function */
  var transactionOutputs = prepareTransactionOutputs(newOutputs)

  var transactionExtra = ''
  /* If we have a payment ID we need to add it to tx_extra */
  if (isHex64(paymentId)) {
    const nonce = getPaymentIdNonce(paymentId)
    transactionExtra = addNonceToExtra(transactionExtra, nonce)
  }

  /* Start constructing our actual transaction */
  const tx = {
    unlockTime: unlockTime,
    version: CURRENT_TX_VERSION,
    extra: transactionExtra,
    transactionKeys: transactionOutputs.transactionKeys,
    vin: [],
    vout: [],
    signatures: []
  }

  transactionInputs.sort(function (a, b) {
    return (BigInteger.parse(a.keyImage, 16).compare(BigInteger.parse(b.keyImage, 16)) * -1)
  })

  transactionInputs.forEach((input) => {
    const inputToKey = {
      type: 'input_to_key',
      amount: input.amount,
      keyImage: input.keyImage,
      keyOffsets: []
    }

    input.outputs.forEach((output) => {
      inputToKey.keyOffsets.push(output.index)
    })

    inputToKey.keyOffsets = absoluteToRelativeOffsets(inputToKey.keyOffsets)

    tx.vin.push(inputToKey)
  })

  transactionOutputs.outputs.forEach((output) => {
    tx.vout.push(output)
  })

  tx.extra = addTransactionPublicKeyToExtra(tx.extra, transactionOutputs.transactionKeys.publicKey)

  const txPrefixHash = getTransactionPrefixHash(tx)

  for (i = 0; i < transactionInputs.length; i++) {
    var txInput = transactionInputs[i]

    var srcKeys = []
    txInput.outputs.forEach((out) => {
      srcKeys.push(out.key)
    })

    const sigs = generateRingSignature(txPrefixHash, txInput.keyImage, srcKeys, txInput.input.privateEphemeral, txInput.realOutputIndex)
    tx.signatures.push(sigs)
  }

  return tx
}

/* This method is designed to create mixed inputs for use
   during transaction construction */
function createTransactionInputs (ourOutputs, randomOutputs, mixin) {
  /* Make sure that if we are to use mixins that we've been given the
     correct number of sets of random outputs */
  if (ourOutputs.length !== randomOutputs.length && mixin !== 0) {
    throw new Error('There are not enough random output sets to mix with the real outputs')
  }

  /* Make sure that there are the correct number of random outputs
     in each one of the sets that we were passed */
  for (var i = 0; i < randomOutputs.length; i++) {
    if ((randomOutputs[i] || []).length < mixin) {
      throw new Error('There are not enough outputs to mix with in the random outputs sets')
    }
  }

  var mixedInputs = []

  /* Loop through our outputs that we're using to send funds */
  for (i = 0; i < ourOutputs.length; i++) {
    const mixedOutputs = []
    const realOutput = ourOutputs[i]

    /* If we're using mixins, then we need to use the random outputs */
    if (mixin !== 0) {
      /* Select our set of random outputs */
      const fakeOutputs = randomOutputs[i]

      /* Sort the random outputs by their global indexes */
      fakeOutputs.sort((a, b) => {
        return BigInteger(a.globalIndex).compare(b.globalIndex)
      })

      /* Insert the fake outputs into our array of mixed outputs */
      fakeOutputs.forEach((output) => {
        /* User can pass in extra outputs to let us continue if we get our
           own output as one to mix with. (See below). Continue once we've
           got enough. */
        if (mixedOutputs.length === mixin) {
          return
        }
        /* Can't mix with ourself, skip this iteration. Still might be able to
           succeed if given more outputs than mixin */
        if (output.globalIndex === realOutput.globalIndex) {
          return
        }
        mixedOutputs.push({
          key: output.key,
          index: output.globalIndex
        })
      })

      if (mixedOutputs.length < mixin) {
        throw new Error('It is impossible to mix with yourself. Find some more random outputs and try again.')
      }
    }

    /* Insert our real output into the stack of mixed outputs */
    mixedOutputs.push({
      key: realOutput.key,
      index: realOutput.globalIndex
    })

    /* Sort the outputs again by `globalIndex` */
    mixedOutputs.sort((a, b) => { return BigInteger(a.index).compare(b.index) })

    /* Set up our actual input, some extra information is added here
       to save time later */
    const input = {
      amount: realOutput.amount,
      realOutputIndex: 0,
      keyImage: realOutput.keyImage || false,
      input: realOutput.input,
      outputs: mixedOutputs
    }

    /* Loop through the mixed outputs and look for our real input
       as we'll need to know which one it is in the array later */
    for (var j = 0; j < mixedOutputs.length; j++) {
      if (mixedOutputs[j].index === realOutput.globalIndex) {
        input.realOutputIndex = j
      }
    }

    /* Push the input on to our stack */
    mixedInputs.push(input)
  }

  /* Return the array of mixed inputs */
  return mixedInputs
}

function prepareTransactionOutputs (outputs) {
  if (!Array.isArray(outputs)) {
    throw new Error('Must supply an array of outputs')
  }

  /* Generate a transaction key pair */
  const transactionKeys = randomKeypair()

  /* Sort our outputs by amount */
  outputs.sort((a, b) => (a.amount > b.amount) ? 1 : ((b.amount > a.amount) ? -1 : 0))

  const preparedOutputs = []
  for (var i = 0; i < outputs.length; i++) {
    var output = outputs[i]
    if (output.amount <= 0) {
      throw new Error('Cannot have an amount <= 0')
    }

    var outDerivation = generateKeyDerivation(output.keys.publicViewKey, transactionKeys.privateKey)

    /* Generate the one time output key */
    const outEphemeralPub = derivePublicKey(outDerivation, i, output.keys.publicSpendKey)

    /* Push it on to our stack */
    preparedOutputs.push({
      amount: output.amount,
      target: {
        data: outEphemeralPub
      },
      type: 'txout_to_key'
    })
  }

  return { transactionKeys, outputs: preparedOutputs }
}

function getTransactionPrefixHash (tx) {
  /* Serialize the transaction as a string (blob) but
     do not include the signatures */
  var prefix = serializeTransaction(tx, true)

  /* Hash it */
  return cnFastHash(prefix)
}

function serializeTransaction (tx, headerOnly) {
  headerOnly = headerOnly || false

  var buf = ''
  buf += encodeVarint(tx.version)
  buf += encodeVarint(tx.unlockTime)

  /* Loop through the transaction inputs and put them in the buffer */
  buf += encodeVarint(tx.vin.length)
  for (var i = 0; i < tx.vin.length; i++) {
    var vin = tx.vin[i]
    switch (vin.type.toLowerCase()) {
      case 'input_to_key':
        buf += '02'
        buf += encodeVarint(vin.amount)
        buf += encodeVarint(vin.keyOffsets.length)
        for (var j = 0; j < vin.keyOffsets.length; j++) {
          buf += encodeVarint(vin.keyOffsets[j])
        }
        buf += vin.keyImage
        break
      default:
        throw new Error('Unhandled transaction input type: ' + vin.type)
    }
  }

  /* Loop through the transaction outputs and put them in the buffer */
  buf += encodeVarint(tx.vout.length)
  for (i = 0; i < tx.vout.length; i++) {
    var vout = tx.vout[i]
    buf += encodeVarint(vout.amount)
    switch (vout.type.toLowerCase()) {
      case 'txout_to_key':
        buf += '02'
        buf += vout.target.data
        break
      default:
        throw new Error('Unhandled transacount output type: ' + vout.type)
    }
  }

  /* If we supplied extra data, it needs to be hexadecimal */
  if (!isHex(tx.extra)) {
    throw new Error('Transaction extra has invalid hexadecimal data')
  }

  buf += encodeVarint(tx.extra.length / 2)
  buf += tx.extra

  /* Loop through the transaction signatures if this is a full transaction payload
     and put them in the buffer */
  if (!headerOnly) {
    if (tx.vin.length !== tx.signatures.length) {
      throw new Error('Number of signatures supplied does not equal the number of inputs used')
    }
    for (i = 0; i < tx.vin.length; i++) {
      for (j = 0; j < tx.signatures[i].length; j++) {
        buf += tx.signatures[i][j]
      }
    }
  }

  return buf
}

function generateKeyDerivation (transactionPublicKey, privateViewKey) {
  if (!isHex64(transactionPublicKey)) {
    throw new Error('Invalid public key format')
  }

  if (!isHex64(privateViewKey)) {
    throw new Error('Invalid secret key format')
  }

  if (userCryptoFunctions.generateKeyDerivation) {
    return userCryptoFunctions.generateKeyDerivation(privateViewKey, transactionPublicKey)
  } else if (TurtleCoinCrypto) {
    return TurtleCoinCrypto.generateKeyDerivation(privateViewKey, transactionPublicKey)
  } else {
    var p = geScalarMult(transactionPublicKey, privateViewKey)
    return geScalarMult(p, d2s(8))
  }
}

module.exports = {
  CryptoNote
}

}).call(this,require("buffer").Buffer)
},{"./config.json":157,"./lib/base58.js":159,"./lib/biginteger.js":160,"./lib/crypto.js":161,"./lib/mnemonic.js":162,"./lib/nacl-fast-cn.js":163,"./lib/ringsigs.js":164,"./lib/sha3.js":165,"buffer":48,"numeral":195,"secure-random-string":196,"turtlecoin-crypto":197,"varint-decoder":198}],159:[function(require,module,exports){
// Copyright (c) 2014-2018, MyMonero.com
// Copyright (c) 2018, The TurtleCoin Developers
//
// Please see the included LICENSE file for more information.

const BigInteger = require('./biginteger.js')

var Base58 = (function () {
  var b58 = {}

  var alphabetStr = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
  var alphabet = []
  for (var i = 0; i < alphabetStr.length; i++) {
    alphabet.push(alphabetStr.charCodeAt(i))
  }
  var encodedBlockSizes = [0, 2, 3, 5, 6, 7, 9, 10, 11]

  var alphabetSize = alphabet.length
  var fullBlockSize = 8
  var fullEncodedBlockSize = 11

  var UINT64_MAX = new BigInteger(2).pow(64)

  function hextobin (hex) {
    if (hex.length % 2 !== 0) throw new Error('Hex string has invalid length!')
    var res = new Uint8Array(hex.length / 2)
    for (var i = 0; i < hex.length / 2; ++i) {
      res[i] = parseInt(hex.slice(i * 2, i * 2 + 2), 16)
    }
    return res
  }
  b58.hextobin = hextobin

  function bintohex (bin) {
    var out = []
    for (var i = 0; i < bin.length; ++i) {
      out.push(('0' + bin[i].toString(16)).slice(-2))
    }
    return out.join('')
  }
  b58.bintohex = bintohex

  function strtobin (str) {
    var res = new Uint8Array(str.length)
    for (var i = 0; i < str.length; i++) {
      res[i] = str.charCodeAt(i)
    }
    return res
  }
  b58.strtobin = strtobin

  function hextostr (hex) {
    var h2b = hextobin(hex)
    var res = ''
    for (var i = 0; i < h2b.length; i++) {
      res = res + String.fromCharCode(h2b[i])
    }
    return res
  }
  b58.hextostr = hextostr

  function strtohex (str) {
    return bintohex(strtobin(str))
  }
  b58.strtohex = strtohex

  function bintostr (bin) {
    var out = []
    for (var i = 0; i < bin.length; i++) {
      out.push(String.fromCharCode(bin[i]))
    }
    return out.join('')
  }

  function uint8BeTo64 (data) {
    if (data.length < 1 || data.length > 8) {
      throw new Error('Invalid input length')
    }
    var res = BigInteger.ZERO
    var twopow8 = new BigInteger(2).pow(8)
    var i = 0
    switch (9 - data.length) {
      case 1:
        res = res.add(data[i++])
        /* falls through */
      case 2:
        res = res.multiply(twopow8).add(data[i++])
        /* falls through */
      case 3:
        res = res.multiply(twopow8).add(data[i++])
        /* falls through */
      case 4:
        res = res.multiply(twopow8).add(data[i++])
        /* falls through */
      case 5:
        res = res.multiply(twopow8).add(data[i++])
        /* falls through */
      case 6:
        res = res.multiply(twopow8).add(data[i++])
        /* falls through */
      case 7:
        res = res.multiply(twopow8).add(data[i++])
        /* falls through */
      case 8:
        res = res.multiply(twopow8).add(data[i++])
        break
      default:
        throw new Error('Impossible condition')
    }
    return res
  }

  function uint64To8be (num, size) {
    var res = new Uint8Array(size)
    if (size < 1 || size > 8) {
      throw new Error('Invalid input length')
    }
    var twopow8 = new BigInteger(2).pow(8)
    for (var i = size - 1; i >= 0; i--) {
      res[i] = num.remainder(twopow8).toJSValue()
      num = num.divide(twopow8)
    }
    return res
  }

  b58.encode_block = function (data, buf, index) {
    if (data.length < 1 || data.length > fullEncodedBlockSize) {
      throw new Error('Invalid block length: ' + data.length)
    }
    var num = uint8BeTo64(data)
    var i = encodedBlockSizes[data.length] - 1
    while (num.compare(0) === 1) {
      var div = num.divRem(alphabetSize)
      var remainder = div[1]
      num = div[0]
      buf[index + i] = alphabet[remainder.toJSValue()]
      i--
    }
    return buf
  }

  b58.encode = function (hex) {
    var data = hextobin(hex)
    if (data.length === 0) {
      return ''
    }
    var fullBlockCount = Math.floor(data.length / fullBlockSize)
    var lastBlockSize = data.length % fullBlockSize
    var resSize = fullBlockCount * fullEncodedBlockSize + encodedBlockSizes[lastBlockSize]

    var res = new Uint8Array(resSize)
    var i
    for (i = 0; i < resSize; ++i) {
      res[i] = alphabet[0]
    }
    for (i = 0; i < fullBlockCount; i++) {
      res = b58.encode_block(data.subarray(i * fullBlockSize, i * fullBlockSize + fullBlockSize), res, i * fullEncodedBlockSize)
    }
    if (lastBlockSize > 0) {
      res = b58.encode_block(data.subarray(fullBlockCount * fullBlockSize, fullBlockCount * fullBlockSize + lastBlockSize), res, fullBlockCount * fullEncodedBlockSize)
    }
    return bintostr(res)
  }

  b58.decode_block = function (data, buf, index) {
    if (data.length < 1 || data.length > fullEncodedBlockSize) {
      throw new Error('Invalid block length: ' + data.length)
    }

    var resSize = encodedBlockSizes.indexOf(data.length)
    if (resSize <= 0) {
      throw new Error('Invalid block size')
    }
    var resNum = new BigInteger(0)
    var order = new BigInteger(1)
    for (var i = data.length - 1; i >= 0; i--) {
      var digit = alphabet.indexOf(data[i])
      if (digit < 0) {
        throw new Error('Invalid symbol')
      }
      var product = order.multiply(digit).add(resNum)
      if (product.compare(UINT64_MAX) === 1) {
        throw new Error('Overflow')
      }
      resNum = product
      order = order.multiply(alphabetSize)
    }
    if (resSize < fullBlockSize && (new BigInteger(2).pow(8 * resSize).compare(resNum) <= 0)) {
      throw new Error('Overflow 2')
    }
    buf.set(uint64To8be(resNum, resSize), index)
    return buf
  }

  b58.decode = function (enc) {
    enc = strtobin(enc)
    if (enc.length === 0) {
      return ''
    }
    var fullBlockCount = Math.floor(enc.length / fullEncodedBlockSize)
    var lastBlockSize = enc.length % fullEncodedBlockSize
    var lastBlockDecodedSize = encodedBlockSizes.indexOf(lastBlockSize)
    if (lastBlockDecodedSize < 0) {
      throw new Error('Invalid encoded length')
    }
    var dataSize = fullBlockCount * fullBlockSize + lastBlockDecodedSize
    var data = new Uint8Array(dataSize)
    for (var i = 0; i < fullBlockCount; i++) {
      data = b58.decode_block(enc.subarray(i * fullEncodedBlockSize, i * fullEncodedBlockSize + fullEncodedBlockSize), data, i * fullBlockSize)
    }
    if (lastBlockSize > 0) {
      data = b58.decode_block(enc.subarray(fullBlockCount * fullEncodedBlockSize, fullBlockCount * fullEncodedBlockSize + lastBlockSize), data, fullBlockCount * fullBlockSize)
    }
    return bintohex(data)
  }

  return b58
})()

module.exports = Base58

},{"./biginteger.js":160}],160:[function(require,module,exports){
// Copyright (c) 2009, Matthew Crumley <email@matthewcrumley.com>
// Copyright (c) 2010-2011, John Tobey <John.Tobey@gmail.com>
// Copyright (c) 2018, The TurtleCoin Developers
//
// Please see the included LICENSE file for more information.

/*
    Class: BigInteger
    An arbitrarily-large integer.

    <BigInteger> objects should be considered immutable. None of the "built-in"
    methods modify *this* or their arguments. All properties should be
    considered private.

    All the methods of <BigInteger> instances can be called "statically". The
    static versions are convenient if you don't already have a <BigInteger>
    object.

    As an example, these calls are equivalent.

    > BigInteger(4).multiply(5); // returns BigInteger(20);
    > BigInteger.multiply(4, 5); // returns BigInteger(20);

    > var a = 42;
    > var a = BigInteger.toJSValue("0b101010"); // Not completely useless...
  */

var CONSTRUCT = {} // Unique token to call "private" version of constructor

/*
    Constructor: BigInteger()
    Convert a value to a <BigInteger>.

    Although <BigInteger()> is the constructor for <BigInteger> objects, it is
    best not to call it as a constructor. If *n* is a <BigInteger> object, it is
    simply returned as-is. Otherwise, <BigInteger()> is equivalent to <parse>
    without a radix argument.

    > var n0 = BigInteger();      // Same as <BigInteger.ZERO>
    > var n1 = BigInteger("123"); // Create a new <BigInteger> with value 123
    > var n2 = BigInteger(123);   // Create a new <BigInteger> with value 123
    > var n3 = BigInteger(n2);    // Return n2, unchanged

    The constructor form only takes an array and a sign. *n* must be an
    array of numbers in little-endian order, where each digit is between 0
    and BigInteger.base.  The second parameter sets the sign: -1 for
    negative, +1 for positive, or 0 for zero. The array is *not copied and
    may be modified*. If the array contains only zeros, the sign parameter
    is ignored and is forced to zero.

    > new BigInteger([5], -1): create a new BigInteger with value -5

    Parameters:

      n - Value to convert to a <BigInteger>.

    Returns:

      A <BigInteger> value.

    See Also:

      <parse>, <BigInteger>
  */
function BigInteger (n, s, token) {
  this._d = 0
  this._s = 0

  if (token !== CONSTRUCT) {
    if (n instanceof BigInteger) {
      return n
    } else if (typeof n === 'undefined') {
      return ZERO
    }
    return BigInteger.parse(n)
  }

  n = n || [] // Provide the nullary constructor for subclasses.
  while (n.length && !n[n.length - 1]) {
    --n.length
  }
  this._d = n
  this._s = n.length ? (s || 1) : 0
}

BigInteger._construct = function (n, s) {
  return new BigInteger(n, s, CONSTRUCT)
}

// Base-10 speedup hacks in parse, toString, exp10 and log functions
// require base to be a power of 10. 10^7 is the largest such power
// that won't cause a precision loss when digits are multiplied.
var bigIntegerBase = 10000000
var bigIntegerBaseLog10 = 7

BigInteger.base = bigIntegerBase
BigInteger.base_log10 = bigIntegerBaseLog10

var ZERO = new BigInteger([], 0, CONSTRUCT)
// Constant: ZERO
// <BigInteger> 0.
BigInteger.ZERO = ZERO

var ONE = new BigInteger([1], 1, CONSTRUCT)
// Constant: ONE
// <BigInteger> 1.
BigInteger.ONE = ONE

var M_ONE = new BigInteger(ONE._d, -1, CONSTRUCT)
// Constant: M_ONE
// <BigInteger> -1.
BigInteger.M_ONE = M_ONE

// Constant: _0
// Shortcut for <ZERO>.
BigInteger._0 = ZERO

// Constant: _1
// Shortcut for <ONE>.
BigInteger._1 = ONE

/*
    Constant: small
    Array of <BigIntegers> from 0 to 36.

    These are used internally for parsing, but useful when you need a "small"
    <BigInteger>.

    See Also:

      <ZERO>, <ONE>, <_0>, <_1>
  */
BigInteger.small = [
  ZERO,
  ONE,
  /* Assuming bigIntegerBase > 36 */
  new BigInteger([2], 1, CONSTRUCT),
  new BigInteger([3], 1, CONSTRUCT),
  new BigInteger([4], 1, CONSTRUCT),
  new BigInteger([5], 1, CONSTRUCT),
  new BigInteger([6], 1, CONSTRUCT),
  new BigInteger([7], 1, CONSTRUCT),
  new BigInteger([8], 1, CONSTRUCT),
  new BigInteger([9], 1, CONSTRUCT),
  new BigInteger([10], 1, CONSTRUCT),
  new BigInteger([11], 1, CONSTRUCT),
  new BigInteger([12], 1, CONSTRUCT),
  new BigInteger([13], 1, CONSTRUCT),
  new BigInteger([14], 1, CONSTRUCT),
  new BigInteger([15], 1, CONSTRUCT),
  new BigInteger([16], 1, CONSTRUCT),
  new BigInteger([17], 1, CONSTRUCT),
  new BigInteger([18], 1, CONSTRUCT),
  new BigInteger([19], 1, CONSTRUCT),
  new BigInteger([20], 1, CONSTRUCT),
  new BigInteger([21], 1, CONSTRUCT),
  new BigInteger([22], 1, CONSTRUCT),
  new BigInteger([23], 1, CONSTRUCT),
  new BigInteger([24], 1, CONSTRUCT),
  new BigInteger([25], 1, CONSTRUCT),
  new BigInteger([26], 1, CONSTRUCT),
  new BigInteger([27], 1, CONSTRUCT),
  new BigInteger([28], 1, CONSTRUCT),
  new BigInteger([29], 1, CONSTRUCT),
  new BigInteger([30], 1, CONSTRUCT),
  new BigInteger([31], 1, CONSTRUCT),
  new BigInteger([32], 1, CONSTRUCT),
  new BigInteger([33], 1, CONSTRUCT),
  new BigInteger([34], 1, CONSTRUCT),
  new BigInteger([35], 1, CONSTRUCT),
  new BigInteger([36], 1, CONSTRUCT)
]

// Used for parsing/radix conversion
BigInteger.digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')

/*
    Method: toString
    Convert a <BigInteger> to a string.

    When *base* is greater than 10, letters are upper case.

    Parameters:

      base - Optional base to represent the number in (default is base 10).
           Must be between 2 and 36 inclusive, or an Error will be thrown.

    Returns:

      The string representation of the <BigInteger>.
  */
BigInteger.prototype.toString = function (base) {
  base = +base || 10
  if (base < 2 || base > 36) {
    throw new Error('illegal radix ' + base + '.')
  }
  if (this._s === 0) {
    return '0'
  }
  if (base === 10) {
    var str = this._s < 0 ? '-' : ''
    str += this._d[this._d.length - 1].toString()
    for (var i = this._d.length - 2; i >= 0; i--) {
      var group = this._d[i].toString()
      while (group.length < bigIntegerBaseLog10) group = '0' + group
      str += group
    }
    return str
  } else {
    var numerals = BigInteger.digits
    base = BigInteger.small[base]
    var sign = this._s

    var n = this.abs()
    var digits = []
    var digit

    while (n._s !== 0) {
      var divmod = n.divRem(base)
      n = divmod[0]
      digit = divmod[1]
      // TODO: This could be changed to unshift instead of reversing at the end.
      // Benchmark both to compare speeds.
      digits.push(numerals[digit.valueOf()])
    }
    return (sign < 0 ? '-' : '') + digits.reverse().join('')
  }
}

// Verify strings for parsing
BigInteger.radixRegex = [
  /^$/,
  /^$/,
  /^[01]*$/,
  /^[012]*$/,
  /^[0-3]*$/,
  /^[0-4]*$/,
  /^[0-5]*$/,
  /^[0-6]*$/,
  /^[0-7]*$/,
  /^[0-8]*$/,
  /^[0-9]*$/,
  /^[0-9aA]*$/,
  /^[0-9abAB]*$/,
  /^[0-9abcABC]*$/,
  /^[0-9a-dA-D]*$/,
  /^[0-9a-eA-E]*$/,
  /^[0-9a-fA-F]*$/,
  /^[0-9a-gA-G]*$/,
  /^[0-9a-hA-H]*$/,
  /^[0-9a-iA-I]*$/,
  /^[0-9a-jA-J]*$/,
  /^[0-9a-kA-K]*$/,
  /^[0-9a-lA-L]*$/,
  /^[0-9a-mA-M]*$/,
  /^[0-9a-nA-N]*$/,
  /^[0-9a-oA-O]*$/,
  /^[0-9a-pA-P]*$/,
  /^[0-9a-qA-Q]*$/,
  /^[0-9a-rA-R]*$/,
  /^[0-9a-sA-S]*$/,
  /^[0-9a-tA-T]*$/,
  /^[0-9a-uA-U]*$/,
  /^[0-9a-vA-V]*$/,
  /^[0-9a-wA-W]*$/,
  /^[0-9a-xA-X]*$/,
  /^[0-9a-yA-Y]*$/,
  /^[0-9a-zA-Z]*$/
]

/*
    Function: parse
    Parse a string into a <BigInteger>.

    *base* is optional but, if provided, must be from 2 to 36 inclusive. If
    *base* is not provided, it will be guessed based on the leading characters
    of *s* as follows:

    - "0x" or "0X": *base* = 16
    - "0c" or "0C": *base* = 8
    - "0b" or "0B": *base* = 2
    - else: *base* = 10

    If no base is provided, or *base* is 10, the number can be in exponential
    form. For example, these are all valid:

    > BigInteger.parse("1e9");              // Same as "1000000000"
    > BigInteger.parse("1.234*10^3");       // Same as 1234
    > BigInteger.parse("56789 * 10 ** -2"); // Same as 567

    If any characters fall outside the range defined by the radix, an exception
    will be thrown.

    Parameters:

      s - The string to parse.
      base - Optional radix (default is to guess based on *s*).

    Returns:

      a <BigInteger> instance.
  */
BigInteger.parse = function (s, base) {
  // Expands a number in exponential form to decimal form.
  // expandExponential("-13.441*10^5") === "1344100";
  // expandExponential("1.12300e-1") === "0.112300";
  // expandExponential(1000000000000000000000000000000) === "1000000000000000000000000000000";
  function expandExponential (str) {
    str = str.replace(/\s*[*xX]\s*10\s*(\^|\*\*)\s*/, 'e')

    return str.replace(/^([+-])?(\d+)\.?(\d*)[eE]([+-]?\d+)$/, function (x, s, n, f, c) {
      c = +c
      var l = c < 0
      var i = n.length + c
      x = (l ? n : f).length
      c = ((c = Math.abs(c)) >= x ? c - x + l : 0)
      var z = (new Array(c + 1)).join('0')
      var r = n + f
      var result = (s || '') + (l ? r = z + r : r += z).substr(0, i += l ? z.length : 0) + (i < r.length ? '.' + r.substr(i) : '')
      return result
    })
  }

  s = s.toString()
  if (typeof base === 'undefined' || +base === 10) {
    s = expandExponential(s)
  }

  var prefixRE
  if (typeof base === 'undefined') {
    prefixRE = '0[xcb]'
  } else if (base === 16) {
    prefixRE = '0x'
  } else if (base === 8) {
    prefixRE = '0c'
  } else if (base === 2) {
    prefixRE = '0b'
  } else {
    prefixRE = ''
  }
  var parts = new RegExp('^([+\\-]?)(' + prefixRE + ')?([0-9a-z]*)(?:\\.\\d*)?$', 'i').exec(s)
  if (parts) {
    var sign = parts[1] || '+'
    var baseSection = parts[2] || ''
    var digits = parts[3] || ''

    if (typeof base === 'undefined') {
      // Guess base
      if (baseSection === '0x' || baseSection === '0X') { // Hex
        base = 16
      } else if (baseSection === '0c' || baseSection === '0C') { // Octal
        base = 8
      } else if (baseSection === '0b' || baseSection === '0B') { // Binary
        base = 2
      } else {
        base = 10
      }
    } else if (base < 2 || base > 36) {
      throw new Error('Illegal radix ' + base + '.')
    }

    base = +base

    // Check for digits outside the range
    if (!(BigInteger.radixRegex[base].test(digits))) {
      throw new Error('Bad digit for radix ' + base)
    }

    // Strip leading zeros, and convert to array
    digits = digits.replace(/^0+/, '').split('')
    if (digits.length === 0) {
      return ZERO
    }

    // Get the sign (we know it's not zero)
    sign = (sign === '-') ? -1 : 1

    // Optimize 10
    if (base === 10) {
      var d = []
      while (digits.length >= bigIntegerBaseLog10) {
        d.push(parseInt(digits.splice(digits.length - BigInteger.base_log10, BigInteger.base_log10).join(''), 10))
      }
      d.push(parseInt(digits.join(''), 10))
      return new BigInteger(d, sign, CONSTRUCT)
    }

    // Do the conversion
    d = ZERO
    base = BigInteger.small[base]
    var small = BigInteger.small
    for (var i = 0; i < digits.length; i++) {
      d = d.multiply(base).add(small[parseInt(digits[i], 36)])
    }
    return new BigInteger(d._d, sign, CONSTRUCT)
  } else {
    throw new Error('Invalid BigInteger format: ' + s)
  }
}

/*
    Function: add
    Add two <BigIntegers>.

    Parameters:

      n - The number to add to *this*. Will be converted to a <BigInteger>.

    Returns:

      The numbers added together.

    See Also:

      <subtract>, <multiply>, <quotient>, <next>
  */
BigInteger.prototype.add = function (n) {
  if (this._s === 0) {
    return new BigInteger(n)
  }

  n = new BigInteger(n)
  if (n._s === 0) {
    return this
  }
  if (this._s !== n._s) {
    n = n.negate()
    return this.subtract(n)
  }

  var a = this._d
  var b = n._d
  var al = a.length
  var bl = b.length
  var sum = new Array(Math.max(al, bl) + 1)
  var size = Math.min(al, bl)
  var carry = 0
  var digit

  for (var i = 0; i < size; i++) {
    digit = a[i] + b[i] + carry
    sum[i] = digit % bigIntegerBase
    carry = (digit / bigIntegerBase) | 0
  }
  if (bl > al) {
    a = b
    al = bl
  }
  for (i = size; carry && i < al; i++) {
    digit = a[i] + carry
    sum[i] = digit % bigIntegerBase
    carry = (digit / bigIntegerBase) | 0
  }
  if (carry) {
    sum[i] = carry
  }

  for (; i < al; i++) {
    sum[i] = a[i]
  }

  return new BigInteger(sum, this._s, CONSTRUCT)
}

/*
    Function: negate
    Get the additive inverse of a <BigInteger>.

    Returns:

      A <BigInteger> with the same magnatude, but with the opposite sign.

    See Also:

      <abs>
  */
BigInteger.prototype.negate = function () {
  return new BigInteger(this._d, (-this._s) | 0, CONSTRUCT)
}

/*
    Function: abs
    Get the absolute value of a <BigInteger>.

    Returns:

      A <BigInteger> with the same magnatude, but always positive (or zero).

    See Also:

      <negate>
  */
BigInteger.prototype.abs = function () {
  return (this._s < 0) ? this.negate() : this
}

/*
    Function: subtract
    Subtract two <BigIntegers>.

    Parameters:

      n - The number to subtract from *this*. Will be converted to a <BigInteger>.

    Returns:

      The *n* subtracted from *this*.

    See Also:

      <add>, <multiply>, <quotient>, <prev>
  */
BigInteger.prototype.subtract = function (n) {
  if (this._s === 0) {
    return new BigInteger(n).negate()
  }

  n = new BigInteger(n)
  if (n._s === 0) {
    return this
  }
  if (this._s !== n._s) {
    n = n.negate()
    return this.add(n)
  }

  var m = this
  // negative - negative => -|a| - -|b| => -|a| + |b| => |b| - |a|
  if (this._s < 0) {
    m = new BigInteger(n._d, 1, CONSTRUCT)
    n = new BigInteger(this._d, 1, CONSTRUCT)
  }

  // Both are positive => a - b
  var sign = m.compareAbs(n)
  if (sign === 0) {
    return ZERO
  } else if (sign < 0) {
    // swap m and n
    var t = n
    n = m
    m = t
  }

  // a > b
  var a = m._d
  var b = n._d
  var al = a.length
  var bl = b.length
  var diff = new Array(al) // al >= bl since a > b
  var borrow = 0
  var i
  var digit

  for (i = 0; i < bl; i++) {
    digit = a[i] - borrow - b[i]
    if (digit < 0) {
      digit += bigIntegerBase
      borrow = 1
    } else {
      borrow = 0
    }
    diff[i] = digit
  }
  for (i = bl; i < al; i++) {
    digit = a[i] - borrow
    if (digit < 0) {
      digit += bigIntegerBase
    } else {
      diff[i++] = digit
      break
    }
    diff[i] = digit
  }
  for (; i < al; i++) {
    diff[i] = a[i]
  }

  return new BigInteger(diff, sign, CONSTRUCT)
};

(function () {
  function addOne (n, sign) {
    var a = n._d
    var sum = a.slice()
    var i = 0

    while (true) {
      var digit = (a[i] || 0) + 1
      sum[i] = digit % bigIntegerBase
      if (digit <= bigIntegerBase - 1) {
        break
      }
      ++i
    }

    return new BigInteger(sum, sign, CONSTRUCT)
  }

  function subtractOne (n, sign) {
    var a = n._d
    var sum = a.slice()
    var i = 0

    while (true) {
      var digit = (a[i] || 0) - 1
      if (digit < 0) {
        sum[i] = digit + bigIntegerBase
      } else {
        sum[i] = digit
        break
      }
      ++i
    }

    return new BigInteger(sum, sign, CONSTRUCT)
  }

  /*
      Function: next
      Get the next <BigInteger> (add one).

      Returns:

        *this* + 1.

      See Also:

        <add>, <prev>
    */
  BigInteger.prototype.next = function () {
    switch (this._s) {
      case 0:
        return ONE
      case -1:
        return subtractOne(this, -1)
        // case 1:
      default:
        return addOne(this, 1)
    }
  }

  /*
      Function: prev
      Get the previous <BigInteger> (subtract one).

      Returns:

        *this* - 1.

      See Also:

        <next>, <subtract>
    */
  BigInteger.prototype.prev = function () {
    switch (this._s) {
      case 0:
        return M_ONE
      case -1:
        return addOne(this, -1)
        // case 1:
      default:
        return subtractOne(this, 1)
    }
  }
})()

/*
    Function: compareAbs
    Compare the absolute value of two <BigIntegers>.

    Calling <compareAbs> is faster than calling <abs> twice, then <compare>.

    Parameters:

      n - The number to compare to *this*. Will be converted to a <BigInteger>.

    Returns:

      -1, 0, or +1 if *|this|* is less than, equal to, or greater than *|n|*.

    See Also:

      <compare>, <abs>
  */
BigInteger.prototype.compareAbs = function (n) {
  if (this === n) {
    return 0
  }

  if (!(n instanceof BigInteger)) {
    if (!isFinite(n)) {
      return (isNaN(n) ? n : -1)
    }
    n = new BigInteger(n)
  }

  if (this._s === 0) {
    return (n._s !== 0) ? -1 : 0
  }
  if (n._s === 0) {
    return 1
  }

  var l = this._d.length
  var nl = n._d.length
  if (l < nl) {
    return -1
  } else if (l > nl) {
    return 1
  }

  var a = this._d
  var b = n._d
  for (var i = l - 1; i >= 0; i--) {
    if (a[i] !== b[i]) {
      return a[i] < b[i] ? -1 : 1
    }
  }

  return 0
}

/*
    Function: compare
    Compare two <BigIntegers>.

    Parameters:

      n - The number to compare to *this*. Will be converted to a <BigInteger>.

    Returns:

      -1, 0, or +1 if *this* is less than, equal to, or greater than *n*.

    See Also:

      <compareAbs>, <isPositive>, <isNegative>, <isUnit>
  */
BigInteger.prototype.compare = function (n) {
  if (this === n) {
    return 0
  }

  n = new BigInteger(n)

  if (this._s === 0) {
    return -n._s
  }

  if (this._s === n._s) { // both positive or both negative
    var cmp = this.compareAbs(n)
    return cmp * this._s
  } else {
    return this._s
  }
}

/*
    Function: isUnit
    Return true iff *this* is either 1 or -1.

    Returns:

      true if *this* compares equal to <BigInteger.ONE> or <BigInteger.M_ONE>.

    See Also:

      <isZero>, <isNegative>, <isPositive>, <compareAbs>, <compare>,
      <BigInteger.ONE>, <BigInteger.M_ONE>
  */
BigInteger.prototype.isUnit = function () {
  return this === ONE ||
      this === M_ONE ||
      (this._d.length === 1 && this._d[0] === 1)
}

/*
    Function: multiply
    Multiply two <BigIntegers>.

    Parameters:

      n - The number to multiply *this* by. Will be converted to a
      <BigInteger>.

    Returns:

      The numbers multiplied together.

    See Also:

      <add>, <subtract>, <quotient>, <square>
  */
BigInteger.prototype.multiply = function (n) {
  // TODO: Consider adding Karatsuba multiplication for large numbers
  if (this._s === 0) {
    return ZERO
  }

  n = new BigInteger(n)
  if (n._s === 0) {
    return ZERO
  }
  if (this.isUnit()) {
    if (this._s < 0) {
      return n.negate()
    }
    return n
  }
  if (n.isUnit()) {
    if (n._s < 0) {
      return this.negate()
    }
    return this
  }
  if (this === n) {
    return this.square()
  }

  var r = (this._d.length >= n._d.length)
  var a = (r ? this : n)._d // a will be longer than b
  var b = (r ? n : this)._d
  var al = a.length
  var bl = b.length

  var pl = al + bl
  var partial = new Array(pl)
  var i
  for (i = 0; i < pl; i++) {
    partial[i] = 0
  }

  for (i = 0; i < bl; i++) {
    var carry = 0
    var bi = b[i]
    var jlimit = al + i
    var digit
    for (var j = i; j < jlimit; j++) {
      digit = partial[j] + bi * a[j - i] + carry
      carry = (digit / bigIntegerBase) | 0
      partial[j] = (digit % bigIntegerBase) | 0
    }
    if (carry) {
      digit = partial[j] + carry
      carry = (digit / bigIntegerBase) | 0
      partial[j] = digit % bigIntegerBase
    }
  }
  return new BigInteger(partial, this._s * n._s, CONSTRUCT)
}

// Multiply a BigInteger by a single-digit native number
// Assumes that this and n are >= 0
// This is not really intended to be used outside the library itself
BigInteger.prototype.multiplySingleDigit = function (n) {
  if (n === 0 || this._s === 0) {
    return ZERO
  }
  if (n === 1) {
    return this
  }

  var digit
  if (this._d.length === 1) {
    digit = this._d[0] * n
    if (digit >= bigIntegerBase) {
      return new BigInteger([(digit % bigIntegerBase) | 0,
        (digit / bigIntegerBase) | 0], 1, CONSTRUCT)
    }
    return new BigInteger([digit], 1, CONSTRUCT)
  }

  if (n === 2) {
    return this.add(this)
  }
  if (this.isUnit()) {
    return new BigInteger([n], 1, CONSTRUCT)
  }

  var a = this._d
  var al = a.length

  var pl = al + 1
  var partial = new Array(pl)
  for (var i = 0; i < pl; i++) {
    partial[i] = 0
  }

  var carry = 0
  for (var j = 0; j < al; j++) {
    digit = n * a[j] + carry
    carry = (digit / bigIntegerBase) | 0
    partial[j] = (digit % bigIntegerBase) | 0
  }
  if (carry) {
    partial[j] = carry
  }

  return new BigInteger(partial, 1, CONSTRUCT)
}

/*
    Function: square
    Multiply a <BigInteger> by itself.

    This is slightly faster than regular multiplication, since it removes the
    duplicated multiplcations.

    Returns:

      > this.multiply(this)

    See Also:
      <multiply>
  */
BigInteger.prototype.square = function () {
  // Normally, squaring a 10-digit number would take 100 multiplications.
  // Of these 10 are unique diagonals, of the remaining 90 (100-10), 45 are repeated.
  // This procedure saves (N*(N-1))/2 multiplications, (e.g., 45 of 100 multiplies).
  // Based on code by Gary Darby, Intellitech Systems Inc., www.DelphiForFun.org

  if (this._s === 0) {
    return ZERO
  }
  if (this.isUnit()) {
    return ONE
  }

  var digits = this._d
  var length = digits.length
  var imult1 = new Array(length + length + 1)
  var product, carry, k
  var i

  // Calculate diagonal
  for (i = 0; i < length; i++) {
    k = i * 2
    product = digits[i] * digits[i]
    carry = (product / bigIntegerBase) | 0
    imult1[k] = product % bigIntegerBase
    imult1[k + 1] = carry
  }

  // Calculate repeating part
  for (i = 0; i < length; i++) {
    carry = 0
    k = i * 2 + 1
    for (var j = i + 1; j < length; j++, k++) {
      product = digits[j] * digits[i] * 2 + imult1[k] + carry
      carry = (product / bigIntegerBase) | 0
      imult1[k] = product % bigIntegerBase
    }
    k = length + i
    var digit = carry + imult1[k]
    carry = (digit / bigIntegerBase) | 0
    imult1[k] = digit % bigIntegerBase
    imult1[k + 1] += carry
  }

  return new BigInteger(imult1, 1, CONSTRUCT)
}

/*
    Function: quotient
    Divide two <BigIntegers> and truncate towards zero.

    <quotient> throws an exception if *n* is zero.

    Parameters:

      n - The number to divide *this* by. Will be converted to a <BigInteger>.

    Returns:

      The *this* / *n*, truncated to an integer.

    See Also:

      <add>, <subtract>, <multiply>, <divRem>, <remainder>
  */
BigInteger.prototype.quotient = function (n) {
  return this.divRem(n)[0]
}

/*
    Function: divide
    Deprecated synonym for <quotient>.
  */
BigInteger.prototype.divide = BigInteger.prototype.quotient

/*
    Function: remainder
    Calculate the remainder of two <BigIntegers>.

    <remainder> throws an exception if *n* is zero.

    Parameters:

      n - The remainder after *this* is divided *this* by *n*. Will be
        converted to a <BigInteger>.

    Returns:

      *this* % *n*.

    See Also:

      <divRem>, <quotient>
  */
BigInteger.prototype.remainder = function (n) {
  return this.divRem(n)[1]
}

/*
    Function: divRem
    Calculate the integer quotient and remainder of two <BigIntegers>.

    <divRem> throws an exception if *n* is zero.

    Parameters:

      n - The number to divide *this* by. Will be converted to a <BigInteger>.

    Returns:

      A two-element array containing the quotient and the remainder.

      > a.divRem(b)

      is exactly equivalent to

      > [a.quotient(b), a.remainder(b)]

      except it is faster, because they are calculated at the same time.

    See Also:

      <quotient>, <remainder>
  */
BigInteger.prototype.divRem = function (n) {
  n = new BigInteger(n)
  if (n._s === 0) {
    throw new Error('Divide by zero')
  }
  if (this._s === 0) {
    return [ZERO, ZERO]
  }
  if (n._d.length === 1) {
    return this.divRemSmall(n._s * n._d[0])
  }

  // Test for easy cases -- |n1| <= |n2|
  switch (this.compareAbs(n)) {
    case 0: // n1 === n2
      return [this._s === n._s ? ONE : M_ONE, ZERO]
    case -1: // |n1| < |n2|
      return [ZERO, this]
  }

  var sign = this._s * n._s
  var a = n.abs()
  var bDigits = this._d
  var bIndex = bDigits.length
  var quot = []
  var guess

  var part = new BigInteger([], 0, CONSTRUCT)

  while (bIndex) {
    part._d.unshift(bDigits[--bIndex])
    part = new BigInteger(part._d, 1, CONSTRUCT)

    if (part.compareAbs(n) < 0) {
      quot.push(0)
      continue
    }
    if (part._s === 0) {
      guess = 0
    } else {
      var xlen = part._d.length
      var ylen = a._d.length
      var highx = part._d[xlen - 1] * bigIntegerBase + part._d[xlen - 2]
      var highy = a._d[ylen - 1] * bigIntegerBase + a._d[ylen - 2]
      if (part._d.length > a._d.length) {
        // The length of part._d can either match a._d length,
        // or exceed it by one.
        highx = (highx + 1) * bigIntegerBase
      }
      guess = Math.ceil(highx / highy)
    }
    do {
      var check = a.multiplySingleDigit(guess)
      if (check.compareAbs(part) <= 0) {
        break
      }
      guess--
    } while (guess)

    quot.push(guess)
    if (!guess) {
      continue
    }
    var diff = part.subtract(check)
    part._d = diff._d.slice()
  }

  return [new BigInteger(quot.reverse(), sign, CONSTRUCT),
    new BigInteger(part._d, this._s, CONSTRUCT)]
}

// Throws an exception if n is outside of (-BigInteger.base, -1] or
// [1, BigInteger.base).  It's not necessary to call this, since the
// other division functions will call it if they are able to.
BigInteger.prototype.divRemSmall = function (n) {
  var r
  n = +n
  if (n === 0) {
    throw new Error('Divide by zero')
  }

  var ns = n < 0 ? -1 : 1
  var sign = this._s * ns
  n = Math.abs(n)

  if (n < 1 || n >= bigIntegerBase) {
    throw new Error('Argument out of range')
  }

  if (this._s === 0) {
    return [ZERO, ZERO]
  }

  if (n === 1 || n === -1) {
    return [(sign === 1) ? this.abs() : new BigInteger(this._d, sign, CONSTRUCT), ZERO]
  }

  // 2 <= n < bigIntegerBase

  // divide a single digit by a single digit
  if (this._d.length === 1) {
    var q = new BigInteger([(this._d[0] / n) | 0], 1, CONSTRUCT)
    r = new BigInteger([(this._d[0] % n) | 0], 1, CONSTRUCT)
    if (sign < 0) {
      q = q.negate()
    }
    if (this._s < 0) {
      r = r.negate()
    }
    return [q, r]
  }

  var digits = this._d.slice()
  var quot = new Array(digits.length)
  var part = 0
  var diff = 0
  var i = 0
  var guess

  while (digits.length) {
    part = part * bigIntegerBase + digits[digits.length - 1]
    if (part < n) {
      quot[i++] = 0
      digits.pop()
      diff = bigIntegerBase * diff + part
      continue
    }
    if (part === 0) {
      guess = 0
    } else {
      guess = (part / n) | 0
    }

    var check = n * guess
    diff = part - check
    quot[i++] = guess
    if (!guess) {
      digits.pop()
      continue
    }

    digits.pop()
    part = diff
  }

  r = new BigInteger([diff], 1, CONSTRUCT)
  if (this._s < 0) {
    r = r.negate()
  }
  return [new BigInteger(quot.reverse(), sign, CONSTRUCT), r]
}

/*
    Function: isEven
    Return true iff *this* is divisible by two.

    Note that <BigInteger.ZERO> is even.

    Returns:

      true if *this* is even, false otherwise.

    See Also:

      <isOdd>
  */
BigInteger.prototype.isEven = function () {
  var digits = this._d
  return this._s === 0 || digits.length === 0 || (digits[0] % 2) === 0
}

/*
    Function: isOdd
    Return true iff *this* is not divisible by two.

    Returns:

      true if *this* is odd, false otherwise.

    See Also:

      <isEven>
  */
BigInteger.prototype.isOdd = function () {
  return !this.isEven()
}

/*
    Function: sign
    Get the sign of a <BigInteger>.

    Returns:

      * -1 if *this* < 0
      * 0 if *this* === 0
      * +1 if *this* > 0

    See Also:

      <isZero>, <isPositive>, <isNegative>, <compare>, <BigInteger.ZERO>
  */
BigInteger.prototype.sign = function () {
  return this._s
}

/*
    Function: isPositive
    Return true iff *this* > 0.

    Returns:

      true if *this*.compare(<BigInteger.ZERO>) === 1.

    See Also:

      <sign>, <isZero>, <isNegative>, <isUnit>, <compare>, <BigInteger.ZERO>
  */
BigInteger.prototype.isPositive = function () {
  return this._s > 0
}

/*
    Function: isNegative
    Return true iff *this* < 0.

    Returns:

      true if *this*.compare(<BigInteger.ZERO>) === -1.

    See Also:

      <sign>, <isPositive>, <isZero>, <isUnit>, <compare>, <BigInteger.ZERO>
  */
BigInteger.prototype.isNegative = function () {
  return this._s < 0
}

/*
    Function: isZero
    Return true iff *this* === 0.

    Returns:

      true if *this*.compare(<BigInteger.ZERO>) === 0.

    See Also:

      <sign>, <isPositive>, <isNegative>, <isUnit>, <BigInteger.ZERO>
  */
BigInteger.prototype.isZero = function () {
  return this._s === 0
}

/*
    Function: exp10
    Multiply a <BigInteger> by a power of 10.

    This is equivalent to, but faster than

    > if (n >= 0) {
    >     return this.multiply(BigInteger("1e" + n));
    > }
    > else { // n <= 0
    >     return this.quotient(BigInteger("1e" + -n));
    > }

    Parameters:

      n - The power of 10 to multiply *this* by. *n* is converted to a
      javascipt number and must be no greater than <BigInteger.MAX_EXP>
      (0x7FFFFFFF), or an exception will be thrown.

    Returns:

      *this* * (10 ** *n*), truncated to an integer if necessary.

    See Also:

      <pow>, <multiply>
  */
BigInteger.prototype.exp10 = function (n) {
  n = +n
  if (n === 0) {
    return this
  }
  if (Math.abs(n) > Number(MAX_EXP)) {
    throw new Error('exponent too large in BigInteger.exp10')
  }
  // Optimization for this === 0. This also keeps us from having to trim zeros in the positive n case
  if (this._s === 0) {
    return ZERO
  }
  if (n > 0) {
    var k = new BigInteger(this._d.slice(), this._s, CONSTRUCT)

    for (; n >= bigIntegerBaseLog10; n -= bigIntegerBaseLog10) {
      k._d.unshift(0)
    }
    if (n === 0) { return k }
    k._s = 1
    k = k.multiplySingleDigit(Math.pow(10, n))
    return (this._s < 0 ? k.negate() : k)
  } else if (-n >= this._d.length * bigIntegerBaseLog10) {
    return ZERO
  } else {
    k = new BigInteger(this._d.slice(), this._s, CONSTRUCT)

    for (n = -n; n >= bigIntegerBaseLog10; n -= bigIntegerBaseLog10) {
      k._d.shift()
    }
    return (n === 0) ? k : k.divRemSmall(Math.pow(10, n))[0]
  }
}

/*
    Function: pow
    Raise a <BigInteger> to a power.

    In this implementation, 0**0 is 1.

    Parameters:

      n - The exponent to raise *this* by. *n* must be no greater than
      <BigInteger.MAX_EXP> (0x7FFFFFFF), or an exception will be thrown.

    Returns:

      *this* raised to the *nth* power.

    See Also:

      <modPow>
  */
BigInteger.prototype.pow = function (n) {
  if (this.isUnit()) {
    if (this._s > 0) {
      return this
    } else {
      return new BigInteger(n).isOdd() ? this : this.negate()
    }
  }

  n = new BigInteger(n)
  if (n._s === 0) {
    return ONE
  } else if (n._s < 0) {
    if (this._s === 0) {
      throw new Error('Divide by zero')
    } else {
      return ZERO
    }
  }
  if (this._s === 0) {
    return ZERO
  }
  if (n.isUnit()) {
    return this
  }

  if (n.compareAbs(MAX_EXP) > 0) {
    throw new Error('exponent too large in BigInteger.pow')
  }
  var x = this
  var aux = ONE
  var two = BigInteger.small[2]

  while (n.isPositive()) {
    if (n.isOdd()) {
      aux = aux.multiply(x)
      if (n.isUnit()) {
        return aux
      }
    }
    x = x.square()
    n = n.quotient(two)
  }

  return aux
}

/*
    Function: modPow
    Raise a <BigInteger> to a power (mod m).

    Because it is reduced by a modulus, <modPow> is not limited by
    <BigInteger.MAX_EXP> like <pow>.

    Parameters:

      exponent - The exponent to raise *this* by. Must be positive.
      modulus - The modulus.

    Returns:

      *this* ^ *exponent* (mod *modulus*).

    See Also:

      <pow>, <mod>
  */
BigInteger.prototype.modPow = function (exponent, modulus) {
  var result = ONE
  var base = this

  while (exponent.isPositive()) {
    if (exponent.isOdd()) {
      result = result.multiply(base).remainder(modulus)
    }

    exponent = exponent.quotient(BigInteger.small[2])
    if (exponent.isPositive()) {
      base = base.square().remainder(modulus)
    }
  }

  return result
}

/*
    Function: log
    Get the natural logarithm of a <BigInteger> as a native JavaScript number.

    This is equivalent to

    > Math.log(this.toJSValue())

    but handles values outside of the native number range.

    Returns:

      log( *this* )

    See Also:

      <toJSValue>
  */
BigInteger.prototype.log = function () {
  switch (this._s) {
    case 0: return -Infinity
    case -1: return NaN
    default: // Fall through.
  }

  var l = this._d.length

  if (l * bigIntegerBaseLog10 < 30) {
    return Math.log(this.valueOf())
  }

  var N = Math.ceil(30 / bigIntegerBaseLog10)
  var firstNdigits = this._d.slice(l - N)
  return Math.log((new BigInteger(firstNdigits, 1, CONSTRUCT)).valueOf()) + (l - N) * Math.log(bigIntegerBase)
}

/*
    Function: valueOf
    Convert a <BigInteger> to a native JavaScript integer.

    This is called automatically by JavaScipt to convert a <BigInteger> to a
    native value.

    Returns:

      > parseInt(this.toString(), 10)

    See Also:

      <toString>, <toJSValue>
  */
BigInteger.prototype.valueOf = function () {
  return parseInt(this.toString(), 10)
}

/*
    Function: toJSValue
    Convert a <BigInteger> to a native JavaScript integer.

    This is the same as valueOf, but more explicitly named.

    Returns:

      > parseInt(this.toString(), 10)

    See Also:

      <toString>, <valueOf>
  */
BigInteger.prototype.toJSValue = function () {
  return parseInt(this.toString(), 10)
}

/*
   Function: lowVal
   Author: Lucas Jones
   */
BigInteger.prototype.lowVal = function () {
  return this._d[0] || 0
}

var MAX_EXP = new BigInteger(0x7FFFFFFF)
// Constant: MAX_EXP
// The largest exponent allowed in <pow> and <exp10> (0x7FFFFFFF or 2147483647).
BigInteger.MAX_EXP = MAX_EXP;

(function () {
  function makeUnary (fn) {
    return function (a) {
      return fn.call(new BigInteger(a))
    }
  }

  function makeBinary (fn) {
    return function (a, b) {
      return fn.call(new BigInteger(a), new BigInteger(b))
    }
  }

  function makeTrinary (fn) {
    return function (a, b, c) {
      return fn.call(new BigInteger(a), new BigInteger(b), new BigInteger(c))
    }
  }

  (function () {
    var i, fn
    var unary = 'toJSValue,isEven,isOdd,sign,isZero,isNegative,abs,isUnit,square,negate,isPositive,toString,next,prev,log'.split(',')
    var binary = 'compare,remainder,divRem,subtract,add,quotient,divide,multiply,pow,compareAbs'.split(',')
    var trinary = ['modPow']

    for (i = 0; i < unary.length; i++) {
      fn = unary[i]
      BigInteger[fn] = makeUnary(BigInteger.prototype[fn])
    }

    for (i = 0; i < binary.length; i++) {
      fn = binary[i]
      BigInteger[fn] = makeBinary(BigInteger.prototype[fn])
    }

    for (i = 0; i < trinary.length; i++) {
      fn = trinary[i]
      BigInteger[fn] = makeTrinary(BigInteger.prototype[fn])
    }

    BigInteger.exp10 = function (x, n) {
      return new BigInteger(x).exp10(n)
    }
  })()
})()

module.exports = BigInteger

},{}],161:[function(require,module,exports){
(function (process,Buffer,__dirname){
// Copyright (c) 2014-2017, MyMonero.com
// Copyright (c) 2018, The TurtleCoin Developers
//
// Please see the included LICENSE file for more information.

var Module
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {}
var moduleOverrides = {}
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key]
  }
}

var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function'
var ENVIRONMENT_IS_WEB = typeof window === 'object'
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function'
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER

if (ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WEB) {
  if (!Module['print']) {
    Module['print'] = function print (x) {
      process['stdout'].write(x + '\n')
    }
  }
  if (!Module['printErr']) {
    Module['printErr'] = function printErr (x) {
      process['stderr'].write(x + '\n')
    }
  }
  var nodeFS = require('fs')
  var nodePath = require('path')
  Module['read'] = function read (filename, binary) {
    filename = nodePath['normalize'](filename)
    var ret = nodeFS['readFileSync'](filename)
    if (!ret && filename !== nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename)
      ret = nodeFS['readFileSync'](filename)
    }
    if (ret && !binary) ret = ret.toString()
    return ret
  }
  Module['readBinary'] = function readBinary (filename) {
    return Module['read'](filename, true)
  }
  Module['load'] = function load (f) {
    globalEval(read(f))
  }
  Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/')
  Module['arguments'] = process['argv'].slice(2)
  if (typeof module !== 'undefined') {
    module['exports'] = Module
  }
} else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print
  if (typeof printErr !== 'undefined') Module['printErr'] = printErr
  if (typeof read !== 'undefined') {
    Module['read'] = read
  } else {
    Module['read'] = function read () {
      throw 'no read() available (jsc?)'
    }
  }
  Module['readBinary'] = function readBinary (f) {
    return read(f, 'binary')
  }
  if (typeof scriptArgs !== 'undefined') {
    Module['arguments'] = scriptArgs
  } else if (typeof arguments !== 'undefined') {
    Module['arguments'] = arguments
  }
  this['Module'] = Module
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read (url) {
    var xhr = new XMLHttpRequest()
    xhr.open('GET', url, false)
    xhr.send(null)
    return xhr.responseText
  }
  if (typeof arguments !== 'undefined') {
    Module['arguments'] = arguments
  }
  if (typeof console !== 'undefined') {
    if (!Module['print']) {
      Module['print'] = function print (x) {
        console.log(x)
      }
    }
    if (!Module['printErr']) {
      Module['printErr'] = function printErr (x) {
        console.log(x)
      }
    }
  } else {
    var TRY_USE_DUMP = false
    if (!Module['print']) {
      Module['print'] = TRY_USE_DUMP && typeof dump !== 'undefined' ? function (x) {
        dump(x)
      } : function (x) {}
    }
  }
  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module
  } else {
    Module['load'] = importScripts
  }
} else {
  throw 'Unknown runtime environment. Where are we?'
}

function globalEval (x) {
  eval.call(null, x)
}
if (!Module['load'] === 'undefined' && Module['read']) {
  Module['load'] = function load (f) {
    globalEval(Module['read'](f))
  }
}
if (!Module['print']) {
  Module['print'] = function () {}
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print']
}
if (!Module['arguments']) {
  Module['arguments'] = []
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program'
}
Module.print = Module['print']
Module.printErr = Module['printErr']
Module['preRun'] = []
Module['postRun'] = []
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key]
  }
}
var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value
  },
  getTempRet0: function () {
    return tempRet0
  },
  stackSave: function () {
    return STACKTOP
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4
    if (quantum === 1) return target
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target / quantum) * quantum
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' + target + ')+' + (quantum - 1) + ')&' + -quantum + ')'
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES
  },
  isPointerType: function isPointerType (type) {
    return type[type.length - 1] === '*'
  },
  isStructType: function isStructType (type) {
    if (isPointerType(type)) return false
    if (isArrayType(type)) return true
    if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true
    return type[0] === '%'
  },
  INT_TYPES: {
    'i1': 0,
    'i8': 0,
    'i16': 0,
    'i32': 0,
    'i64': 0
  },
  FLOAT_TYPES: {
    'float': 0,
    'double': 0
  },
  or64: function (x, y) {
    var l = x | 0 | (y | 0)
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296
    return l + h
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0)
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296
    return l + h
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0)
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296
    return l + h
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1':
      case 'i8':
        return 1
      case 'i16':
        return 2
      case 'i32':
        return 4
      case 'i64':
        return 8
      case 'float':
        return 4
      case 'double':
        return 8
      default:
      {
        if (type[type.length - 1] === '*') {
          return Runtime.QUANTUM_SIZE
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1))
          assert(bits % 8 === 0)
          return bits / 8
        } else {
          return 0
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE)
  },
  dedup: function dedup (items, ident) {
    var seen = {}
    if (ident) {
      return items.filter(function (item) {
        if (seen[item[ident]]) return false
        seen[item[ident]] = true
        return true
      })
    } else {
      return items.filter(function (item) {
        if (seen[item]) return false
        seen[item] = true
        return true
      })
    }
  },
  set: function set () {
    var args = typeof arguments[0] === 'object' ? arguments[0] : arguments
    var ret = {}
    for (var i = 0; i < args.length; i++) {
      ret[args[i]] = 0
    }
    return ret
  },
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    if (!vararg && (type === 'i64' || type === 'double')) return 8
    if (!type) return Math.min(size, 8)
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE)
  },
  calculateStructAlignment: function calculateStructAlignment (type) {
    type.flatSize = 0
    type.alignSize = 0
    var diffs = []
    var prev = -1
    var index = 0
    type.flatIndexes = type.fields.map(function (field) {
      index++
      var size, alignSize
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field)
        alignSize = Runtime.getAlignSize(field, size)
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          size = 0
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize)
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE
          }
        } else {
          size = Types.types[field].flatSize
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize)
        }
      } else if (field[0] === 'b') {
        size = field.substr(1) | 0
        alignSize = 1
      } else if (field[0] === '<') {
        size = alignSize = Types.types[field].flatSize
      } else if (field[0] === 'i') {
        size = alignSize = parseInt(field.substr(1)) / 8
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field)
      } else {
        assert(false, 'invalid type for calculateStructAlignment')
      }
      if (type.packed) alignSize = 1
      type.alignSize = Math.max(type.alignSize, alignSize)
      var curr = Runtime.alignMemory(type.flatSize, alignSize)
      type.flatSize = curr + size
      if (prev >= 0) {
        diffs.push(curr - prev)
      }
      prev = curr
      return curr
    })
    if (type.name_ && type.name_[0] === '[') {
      type.flatSize = parseInt(type.name_.substr(1)) * type.flatSize / 2
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize)
    if (diffs.length === 0) {
      type.flatFactor = type.flatSize
    } else if (Runtime.dedup(diffs).length === 1) {
      type.flatFactor = diffs[0]
    }
    type.needsFlattening = type.flatFactor !== 1
    return type.flatIndexes
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment
    if (typeName) {
      offset = offset || 0
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName]
      if (!type) return null
      if (type.fields.length !== struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo')
        return null
      }
      alignment = type.flatIndexes
    } else {
      var type = {
        fields: struct.map(function (item) {
          return item[0]
        })
      }
      alignment = Runtime.calculateStructAlignment(type)
    }
    var ret = {
      __size__: type.flatSize
    }
    if (typeName) {
      struct.forEach(function (item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset
        } else {
          var key
          for (var k in item) key = k
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i])
        }
      })
    } else {
      struct.forEach(function (item, i) {
        ret[item[1]] = alignment[i]
      })
    }
    return ret
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args)
      args.splice(0, 0, ptr)
      return Module['dynCall_' + sig].apply(null, args)
    } else {
      return Module['dynCall_' + sig].call(null, ptr)
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func
        return 2 * (1 + i)
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.'
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index - 2) / 2] = null
  },
  getAsmConst: function (code, numArgs) {
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {}
    var func = Runtime.asmConstCache[code]
    if (func) return func
    var args = []
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i)
    }
    var source = Pointer_stringify(code)
    if (source[0] === '"') {
      if (source.indexOf('"', 1) === source.length - 1) {
        source = source.substr(1, source.length - 2)
      } else {
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)')
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })')
    } catch (e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)')
      throw e
    }
    return Runtime.asmConstCache[code] = evalled
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {}
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1
      Module.printErr(text)
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig)
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {}
    }
    var sigCache = Runtime.funcWrappers[sig]
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper () {
        return Runtime.dynCall(sig, func, arguments)
      }
    }
    return sigCache[func]
  },
  UTF8Processor: function () {
    var buffer = []
    var needed = 0
    this.processCChar = function (code) {
      code = code & 255
      if (buffer.length === 0) {
        if ((code & 128) === 0) {
          return String.fromCharCode(code)
        }
        buffer.push(code)
        if ((code & 224) === 192) {
          needed = 1
        } else if ((code & 240) === 224) {
          needed = 2
        } else {
          needed = 3
        }
        return ''
      }
      if (needed) {
        buffer.push(code)
        needed--
        if (needed > 0) return ''
      }
      var c1 = buffer[0]
      var c2 = buffer[1]
      var c3 = buffer[2]
      var c4 = buffer[3]
      var ret
      if (buffer.length === 2) {
        ret = String.fromCharCode((c1 & 31) << 6 | c2 & 63)
      } else if (buffer.length === 3) {
        ret = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63)
      } else {
        var codePoint = (c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63
        ret = String.fromCharCode(Math.floor((codePoint - 65536) / 1024) + 55296, (codePoint - 65536) % 1024 + 56320)
      }
      buffer.length = 0
      return ret
    }
    this.processJSString = function processJSString (string) {
      string = unescape(encodeURIComponent(string))
      var ret = []
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i))
      }
      return ret
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work'
  },
  stackAlloc: function (size) {
    var ret = STACKTOP
    STACKTOP = STACKTOP + size | 0
    STACKTOP = STACKTOP + 7 & -8
    return ret
  },
  staticAlloc: function (size) {
    var ret = STATICTOP
    STATICTOP = STATICTOP + size | 0
    STATICTOP = STATICTOP + 7 & -8
    return ret
  },
  dynamicAlloc: function (size) {
    var ret = DYNAMICTOP
    DYNAMICTOP = DYNAMICTOP + size | 0
    DYNAMICTOP = DYNAMICTOP + 7 & -8
    if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory()
    return ret
  },
  alignMemory: function (size, quantum) {
    var ret = size = Math.ceil(size / (quantum || 8)) * (quantum || 8)
    return ret
  },
  makeBigInt: function (low, high, unsigned) {
    var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * +4294967296 : +(low >>> 0) + +(high | 0) * +4294967296
    return ret
  },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
Module['Runtime'] = Runtime

function getSafeHeapType (bytes, isFloat) {
  switch (bytes) {
    case 1:
      return 'i8'
    case 2:
      return 'i16'
    case 4:
      return isFloat ? 'float' : 'i32'
    case 8:
      return 'double'
    default:
      assert(0)
  }
}

function SAFE_HEAP_STORE (dest, value, bytes, isFloat) {
  if (dest <= 0) abort('segmentation fault storing ' + bytes + ' bytes to address ' + dest)
  if (dest % bytes !== 0) abort('alignment error storing to address ' + dest + ', which was expected to be aligned to a multiple of ' + bytes)
  if (dest + bytes > Math.max(DYNAMICTOP, STATICTOP)) abort('segmentation fault, exceeded the top of the available heap when storing ' + bytes + ' bytes to address ' + dest + '. STATICTOP=' + STATICTOP + ', DYNAMICTOP=' + DYNAMICTOP)
  assert(DYNAMICTOP <= TOTAL_MEMORY)
  setValue(dest, value, getSafeHeapType(bytes, isFloat), 1)
}

function SAFE_HEAP_LOAD (dest, bytes, isFloat, unsigned) {
  if (dest <= 0) abort('segmentation fault loading ' + bytes + ' bytes from address ' + dest)
  if (dest % bytes !== 0) abort('alignment error loading from address ' + dest + ', which was expected to be aligned to a multiple of ' + bytes)
  if (dest + bytes > Math.max(DYNAMICTOP, STATICTOP)) abort('segmentation fault, exceeded the top of the available heap when loading ' + bytes + ' bytes from address ' + dest + '. STATICTOP=' + STATICTOP + ', DYNAMICTOP=' + DYNAMICTOP)
  assert(DYNAMICTOP <= TOTAL_MEMORY)
  var type = getSafeHeapType(bytes, isFloat)
  var ret = getValue(dest, type, 1)
  if (unsigned) ret = unSign(ret, parseInt(type.substr(1)), 1)
  return ret
}

function SAFE_FT_MASK (value, mask) {
  var ret = value & mask
  if (ret !== value) {
    abort('Function table mask error: function pointer is ' + value + ' which is masked by ' + mask + ', the likely cause of this is that the function pointer is being called by the wrong type.')
  }
  return ret
}
var __THREW__ = 0
var ABORT = false
var EXITSTATUS = 0
var undef = 0
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat
var tempI64, tempI64b
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9

function assert (condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text)
  }
}
var globalScope = this

function getCFunc (ident) {
  var func = Module['_' + ident]
  if (!func) {
    try {
      func = eval('_' + ident)
    } catch (e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)')
  return func
}
var cwrap, ccall;
(function () {
  var stack = 0
  var JSfuncs = {
    'stackSave': function () {
      stack = Runtime.stackSave()
    },
    'stackRestore': function () {
      Runtime.stackRestore(stack)
    },
    'arrayToC': function (arr) {
      var ret = Runtime.stackAlloc(arr.length)
      writeArrayToMemory(arr, ret)
      return ret
    },
    'stringToC': function (str) {
      var ret = 0
      if (str !== null && str !== undefined && str !== 0) {
        ret = Runtime.stackAlloc(str.length + 1)
        writeStringToMemory(str, ret)
      }
      return ret
    }
  }
  var toC = {
    'string': JSfuncs['stringToC'],
    'array': JSfuncs['arrayToC']
  }
  ccall = function ccallFunc (ident, returnType, argTypes, args) {
    var func = getCFunc(ident)
    var cArgs = []
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]]
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave()
          cArgs[i] = converter(args[i])
        } else {
          cArgs[i] = args[i]
        }
      }
    }
    var ret = func.apply(null, cArgs)
    if (returnType === 'string') ret = Pointer_stringify(ret)
    if (stack !== 0) JSfuncs['stackRestore']()
    return ret
  }
  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/

  function parseJSFunc (jsfunc) {
    var matches = jsfunc.toString().match(sourceRegex)
    if (matches) {
      var parsed = matches.slice(1);
      return {
        arguments: parsed[0],
        body: parsed[1],
        returnValue: parsed[2]
      }
    } else {
      return undefined
    }
  }
  var JSsource = {}
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      func = parseJSFunc(JSfuncs[fun]);
      if (func) {
        JSsource[fun] = func
      }
    }
  }
  cwrap = function cwrap (ident, returnType, argTypes) {
    argTypes = argTypes || []
    var cfunc = getCFunc(ident)
    var numericArgs = argTypes.every(function (type) {
      return type === 'number'
    })
    var numericRet = returnType !== 'string'
    if (numericRet && numericArgs) {
      return cfunc
    }
    var argNames = argTypes.map(function (x, i) {
      return '$' + i
    })
    var funcstr = '(function(' + argNames.join(',') + ') {'
    var nargs = argTypes.length
    if (!numericArgs) {
      funcstr += JSsource['stackSave'].body + ';'
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i]

        var type = argTypes[i]
        if (type === 'number') continue
        var convertCode = JSsource[type + 'ToC']
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';'
        funcstr += convertCode.body + ';'
        funcstr += arg + '=' + convertCode.returnValue + ';'
      }
    }
    var cfuncname = parseJSFunc(function () {
      return cfunc
    }).returnValue
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');'
    if (!numericRet) {
      var strgfy = parseJSFunc(function () {
        return Pointer_stringify
      }).returnValue
      funcstr += 'ret = ' + strgfy + '(ret);'
    }
    if (!numericArgs) {
      funcstr += JSsource['stackRestore'].body + ';'
    }
    funcstr += 'return ret})'
    return eval(funcstr)
  }
})()
Module['cwrap'] = cwrap
Module['ccall'] = ccall

function setValue (ptr, value, type, noSafe) {
  type = type || 'i8'
  if (type.charAt(type.length - 1) === '*') type = 'i32'
  if (noSafe) {
    switch (type) {
      case 'i1':
        HEAP8[ptr >> 0] = value
        break
      case 'i8':
        HEAP8[ptr >> 0] = value
        break
      case 'i16':
        HEAP16[ptr >> 1] = value
        break
      case 'i32':
        HEAP32[ptr >> 2] = value
        break
      case 'i64':
        tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1]
        break
      case 'float':
        HEAPF32[ptr >> 2] = value
        break
      case 'double':
        HEAPF64[ptr >> 3] = value
        break
      default:
        abort('invalid type for setValue: ' + type)
    }
  } else {
    switch (type) {
      case 'i1':
        SAFE_HEAP_STORE(ptr | 0, value | 0, 1, 0) | 0
        break
      case 'i8':
        SAFE_HEAP_STORE(ptr | 0, value | 0, 1, 0) | 0
        break
      case 'i16':
        SAFE_HEAP_STORE(ptr | 0, value | 0, 2, 0) | 0
        break
      case 'i32':
        SAFE_HEAP_STORE(ptr | 0, value | 0, 4, 0) | 0
        break
      case 'i64':
        tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0)], SAFE_HEAP_STORE(ptr | 0, tempI64[0] | 0, 4, 0) | 0, SAFE_HEAP_STORE(ptr + 4 | 0, tempI64[1] | 0, 4, 0) | 0
        break
      case 'float':
        +SAFE_HEAP_STORE(ptr | 0, +value, 4, 1)
        break
      case 'double':
        +SAFE_HEAP_STORE(ptr | 0, +value, 8, 1)
        break
      default:
        abort('invalid type for setValue: ' + type)
    }
  }
}
Module['setValue'] = setValue

function getValue (ptr, type, noSafe) {
  type = type || 'i8'
  if (type.charAt(type.length - 1) === '*') type = 'i32'
  if (noSafe) {
    switch (type) {
      case 'i1':
        return HEAP8[ptr >> 0]
      case 'i8':
        return HEAP8[ptr >> 0]
      case 'i16':
        return HEAP16[ptr >> 1]
      case 'i32':
        return HEAP32[ptr >> 2]
      case 'i64':
        return HEAP32[ptr >> 2]
      case 'float':
        return HEAPF32[ptr >> 2]
      case 'double':
        return HEAPF64[ptr >> 3]
      default:
        abort('invalid type for setValue: ' + type)
    }
  } else {
    switch (type) {
      case 'i1':
        return SAFE_HEAP_LOAD(ptr | 0, 1, 0, 0) | 0
      case 'i8':
        return SAFE_HEAP_LOAD(ptr | 0, 1, 0, 0) | 0
      case 'i16':
        return SAFE_HEAP_LOAD(ptr | 0, 2, 0, 0) | 0
      case 'i32':
        return SAFE_HEAP_LOAD(ptr | 0, 4, 0, 0) | 0
      case 'i64':
        return SAFE_HEAP_LOAD(ptr | 0, 8, 0, 0) | 0
      case 'float':
        return +SAFE_HEAP_LOAD(ptr | 0, 4, 1, 0)
      case 'double':
        return +SAFE_HEAP_LOAD(ptr | 0, 8, 1, 0)
      default:
        abort('invalid type for setValue: ' + type)
    }
  }
  return null
}
Module['getValue'] = getValue
var ALLOC_NORMAL = 0
var ALLOC_STACK = 1
var ALLOC_STATIC = 2
var ALLOC_DYNAMIC = 3
var ALLOC_NONE = 4
Module['ALLOC_NORMAL'] = ALLOC_NORMAL
Module['ALLOC_STACK'] = ALLOC_STACK
Module['ALLOC_STATIC'] = ALLOC_STATIC
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC
Module['ALLOC_NONE'] = ALLOC_NONE

function allocate (slab, types, allocator, ptr) {
  var zeroinit, size
  if (typeof slab === 'number') {
    zeroinit = true
    size = slab
  } else {
    zeroinit = false
    size = slab.length
  }
  var singleType = typeof types === 'string' ? types : null
  var ret
  if (allocator === ALLOC_NONE) {
    ret = ptr
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length))
  }
  if (zeroinit) {
    var ptr = ret

    var stop
    assert((ret & 3) === 0)
    stop = ret + (size & ~3)
    for (; ptr < stop; ptr += 4) {
      HEAP32[ptr >> 2] = 0
    }
    stop = ret + size
    while (ptr < stop) {
      HEAP8[ptr++ >> 0] = 0
    }
    return ret
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret)
    } else {
      HEAPU8.set(new Uint8Array(slab), ret)
    }
    return ret
  }
  var i = 0

  var type; var typeSize; var previousType
  while (i < size) {
    var curr = slab[i]
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr)
    }
    type = singleType || types[i]
    if (type === 0) {
      i++
      continue
    }
    if (type === 'i64') type = 'i32'
    setValue(ret + i, curr, type)
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type)
      previousType = type
    }
    i += typeSize
  }
  return ret
}
Module['allocate'] = allocate

function Pointer_stringify (ptr, length) {
  var hasUtf = false
  var t
  var i = 0
  while (1) {
    t = SAFE_HEAP_LOAD(ptr + i | 0, 1, 0, 1) | 0
    if (t >= 128) hasUtf = true
    else if (t === 0 && !length) break
    i++
    if (length && i === length) break
  }
  if (!length) length = i
  var ret = ''
  if (!hasUtf) {
    var MAX_CHUNK = 1024
    var curr
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)))
      ret = ret ? ret + curr : curr
      ptr += MAX_CHUNK
      length -= MAX_CHUNK
    }
    return ret
  }
  var utf8 = new Runtime.UTF8Processor()
  for (i = 0; i < length; i++) {
    t = SAFE_HEAP_LOAD(ptr + i | 0, 1, 0, 1) | 0
    ret += utf8.processCChar(t)
  }
  return ret
}
Module['Pointer_stringify'] = Pointer_stringify

function UTF16ToString (ptr) {
  var i = 0
  var str = ''
  while (1) {
    var codeUnit = SAFE_HEAP_LOAD(ptr + i * 2 | 0, 2, 0, 0) | 0
    if (codeUnit === 0) return str
    ++i
    str += String.fromCharCode(codeUnit)
  }
}
Module['UTF16ToString'] = UTF16ToString

function stringToUTF16 (str, outPtr) {
  for (var i = 0; i < str.length; ++i) {
    var codeUnit = str.charCodeAt(i)
    SAFE_HEAP_STORE(outPtr + i * 2 | 0, codeUnit | 0, 2, 0) | 0
  }
  SAFE_HEAP_STORE(outPtr + str.length * 2 | 0, 0 | 0, 2, 0) | 0
}
Module['stringToUTF16'] = stringToUTF16

function UTF32ToString (ptr) {
  var i = 0
  var str = ''
  while (1) {
    var utf32 = SAFE_HEAP_LOAD(ptr + i * 4 | 0, 4, 0, 0) | 0
    if (utf32 === 0) return str
    ++i
    if (utf32 >= 65536) {
      var ch = utf32 - 65536
      str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023)
    } else {
      str += String.fromCharCode(utf32)
    }
  }
}
Module['UTF32ToString'] = UTF32ToString

function stringToUTF32 (str, outPtr) {
  var iChar = 0
  for (var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    var codeUnit = str.charCodeAt(iCodeUnit)
    if (codeUnit >= 55296 && codeUnit <= 57343) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit)
      codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023
    }
    SAFE_HEAP_STORE(outPtr + iChar * 4 | 0, codeUnit | 0, 4, 0) | 0
    ++iChar
  }
  SAFE_HEAP_STORE(outPtr + iChar * 4 | 0, 0 | 0, 4, 0) | 0
}
Module['stringToUTF32'] = stringToUTF32

function demangle (func) {
  var hasLibcxxabi = !!Module['___cxa_demangle']
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length)
      writeStringToMemory(func.substr(1), buf)
      var status = _malloc(4)
      var ret = Module['___cxa_demangle'](buf, 0, 0, status)
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret)
      }
    } catch (e) {} finally {
      if (buf) _free(buf)
      if (status) _free(status)
      if (ret) _free(ret)
    }
  }
  var i = 3
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  }
  var subs = []
  var first = true

  function dump (x) {
    if (x) Module.print(x)
    Module.print(func)
    var pre = ''
    for (var a = 0; a < i; a++) pre += ' '
    Module.print(pre + '^')
  }

  function parseNested () {
    i++
    if (func[i] === 'K') i++
    var parts = []
    while (func[i] !== 'E') {
      if (func[i] === 'S') {
        i++
        var next = func.indexOf('_', i)
        var num = func.substring(i, next) || 0
        parts.push(subs[num] || '?')
        i = next + 1
        continue
      }
      if (func[i] === 'C') {
        parts.push(parts[parts.length - 1])
        i += 2
        continue
      }
      var size = parseInt(func.substr(i))
      var pre = size.toString().length
      if (!size || !pre) {
        i--
        break
      }
      var curr = func.substr(i + pre, size)
      parts.push(curr)
      subs.push(curr)
      i += pre + size
    }
    i++
    return parts
  }

  function parse (rawList, limit, allowVoid) {
    limit = limit || Infinity
    var ret = ''

    var list = []

    function flushList () {
      return '(' + list.join(', ') + ')'
    }
    var name
    if (func[i] === 'N') {
      name = parseNested().join('::')
      limit--
      if (limit === 0) return rawList ? [name] : name
    } else {
      if (func[i] === 'K' || first && func[i] === 'L') i++
      var size = parseInt(func.substr(i))
      if (size) {
        var pre = size.toString().length
        name = func.substr(i + pre, size)
        i += pre + size
      }
    }
    first = false
    if (func[i] === 'I') {
      i++
      var iList = parse(true)
      var iRet = parse(true, 1, true)
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>'
    } else {
      ret = name
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      var c = func[i++]
      if (c in basicTypes) {
        list.push(basicTypes[c])
      } else {
        switch (c) {
          case 'P':
            list.push(parse(true, 1, true)[0] + '*')
            break
          case 'R':
            list.push(parse(true, 1, true)[0] + '&')
            break
          case 'L':
            {
              i++
              var end = func.indexOf('E', i)
              var size = end - i; list.push(func.substr(i, size)); i += size + 2
              break
            };
          case 'A':
            {
              var size = parseInt(func.substr(i)); i += size.toString().length
              if (func[i] !== '_') throw '?'; i++; list.push(parse(true, 1, true)[0] + ' [' + size + ']')
              break
            };
          case 'E':
            break paramLoop
          default:
            ret += '?' + c
            break paramLoop
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []
    if (rawList) {
      if (ret) {
        list.push(ret + '?')
      }
      return list
    } else {
      return ret + flushList()
    }
  }
  var final = func
  try {
    if (func === 'Object._main' || func === '_main') {
      return 'main()'
    }
    if (typeof func === 'number') func = Pointer_stringify(func)
    if (func[0] !== '_') return func
    if (func[1] !== '_') return func
    if (func[2] !== 'Z') return func
    switch (func[3]) {
      case 'n':
        return 'operator new()'
      case 'd':
        return 'operator delete()'
    }
    final = parse()
  } catch (e) {
    final += '?'
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling')
  }
  return final
}

function demangleAll (text) {
  return text.replace(/__Z[\w\d_]+/g, function (x) {
    var y = demangle(x)
    return x === y ? x : x + ' [' + y + ']'
  })
}

function jsStackTrace () {
  var err = new Error()
  if (!err.stack) {
    try {
      throw new Error(0)
    } catch (e) {
      err = e
    }
    if (!err.stack) {
      return '(no stack trace available)'
    }
  }
  return err.stack.toString()
}

function stackTrace () {
  return demangleAll(jsStackTrace())
}
Module['stackTrace'] = stackTrace
var PAGE_SIZE = 4096

function alignMemoryPage (x) {
  return x + 4095 & -4096
}
var HEAP
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64
var STATIC_BASE = 0

var STATICTOP = 0

var staticSealed = false
var STACK_BASE = 0

var STACKTOP = 0

var STACK_MAX = 0
var DYNAMIC_BASE = 0

var DYNAMICTOP = 0

function enlargeMemory () {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.')
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152
var totalMemory = 4096
while (totalMemory < TOTAL_MEMORY || totalMemory < 2 * TOTAL_STACK) {
  if (totalMemory < 16 * 1024 * 1024) {
    totalMemory *= 2
  } else {
    totalMemory += 16 * 1024 * 1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable')
  TOTAL_MEMORY = totalMemory
}
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1))['subarray'] && !!(new Int32Array(1))['set'], 'JS engine does not provide full typed array support')
var buffer = new ArrayBuffer(TOTAL_MEMORY)
HEAP8 = new Int8Array(buffer)
HEAP16 = new Int16Array(buffer)
HEAP32 = new Int32Array(buffer)
HEAPU8 = new Uint8Array(buffer)
HEAPU16 = new Uint16Array(buffer)
HEAPU32 = new Uint32Array(buffer)
HEAPF32 = new Float32Array(buffer)
HEAPF64 = new Float64Array(buffer)
HEAP32[0] = 255
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system')
Module['HEAP'] = HEAP
Module['HEAP8'] = HEAP8
Module['HEAP16'] = HEAP16
Module['HEAP32'] = HEAP32
Module['HEAPU8'] = HEAPU8
Module['HEAPU16'] = HEAPU16
Module['HEAPU32'] = HEAPU32
Module['HEAPF32'] = HEAPF32
Module['HEAPF64'] = HEAPF64

function callRuntimeCallbacks (callbacks) {
  while (callbacks.length > 0) {
    var callback = callbacks.shift()
    if (typeof callback === 'function') {
      callback()
      continue
    }
    var func = callback.func
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func)
      } else {
        Runtime.dynCall('vi', func, [callback.arg])
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg)
    }
  }
}
var __ATPRERUN__ = []
var __ATINIT__ = []
var __ATMAIN__ = []
var __ATEXIT__ = []
var __ATPOSTRUN__ = []
var runtimeInitialized = false
var runtimeExited = false

function preRun () {
  if (Module['preRun']) {
    if (typeof Module['preRun'] === 'function') Module['preRun'] = [Module['preRun']]
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift())
    }
  }
  callRuntimeCallbacks(__ATPRERUN__)
}

function ensureInitRuntime () {
  if (runtimeInitialized) return
  runtimeInitialized = true
  callRuntimeCallbacks(__ATINIT__)
}

function preMain () {
  callRuntimeCallbacks(__ATMAIN__)
}

function exitRuntime () {
  callRuntimeCallbacks(__ATEXIT__)
  runtimeExited = true
}

function postRun () {
  if (Module['postRun']) {
    if (typeof Module['postRun'] === 'function') Module['postRun'] = [Module['postRun']]
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift())
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__)
}

function addOnPreRun (cb) {
  __ATPRERUN__.unshift(cb)
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun

function addOnInit (cb) {
  __ATINIT__.unshift(cb)
}
Module['addOnInit'] = Module.addOnInit = addOnInit

function addOnPreMain (cb) {
  __ATMAIN__.unshift(cb)
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain

function addOnExit (cb) {
  __ATEXIT__.unshift(cb)
}
Module['addOnExit'] = Module.addOnExit = addOnExit

function addOnPostRun (cb) {
  __ATPOSTRUN__.unshift(cb)
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun

function intArrayFromString (stringy, dontAddNull, length) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy)
  if (length) {
    ret.length = length
  }
  if (!dontAddNull) {
    ret.push(0)
  }
  return ret
}
Module['intArrayFromString'] = intArrayFromString

function intArrayToString (array) {
  var ret = []
  for (var i = 0; i < array.length; i++) {
    var chr = array[i]
    if (chr > 255) {
      chr &= 255
    }
    ret.push(String.fromCharCode(chr))
  }
  return ret.join('')
}
Module['intArrayToString'] = intArrayToString

function writeStringToMemory (string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull)
  var i = 0
  while (i < array.length) {
    var chr = array[i]
    SAFE_HEAP_STORE(buffer + i | 0, chr | 0, 1, 0) | 0
    i = i + 1
  }
}
Module['writeStringToMemory'] = writeStringToMemory

function writeArrayToMemory (array, buffer) {
  for (var i = 0; i < array.length; i++) {
    SAFE_HEAP_STORE(buffer + i | 0, array[i] | 0, 1, 0) | 0
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory

function writeAsciiToMemory (str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    SAFE_HEAP_STORE(buffer + i | 0, str.charCodeAt(i) | 0, 1, 0) | 0
  }
  if (!dontAddNull) SAFE_HEAP_STORE(buffer + str.length | 0, 0 | 0, 1, 0) | 0
}
Module['writeAsciiToMemory'] = writeAsciiToMemory

function unSign (value, bits, ignore) {
  if (value >= 0) {
    return value
  }
  return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value
}

function reSign (value, bits, ignore) {
  if (value <= 0) {
    return value
  }
  var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1)
  if (value >= half && (bits <= 32 || value > half)) {
    value = -2 * half + value
  }
  return value
}
if (!Math['imul'] || Math['imul'](4294967295, 5) !== -5) {
  Math['imul'] = function imul (a, b) {
    var ah = a >>> 16
    var al = a & 65535
    var bh = b >>> 16
    var bl = b & 65535
    return al * bl + (ah * bl + al * bh << 16) | 0
  }
}
Math.imul = Math['imul']
var Math_abs = Math.abs
var Math_cos = Math.cos
var Math_sin = Math.sin
var Math_tan = Math.tan
var Math_acos = Math.acos
var Math_asin = Math.asin
var Math_atan = Math.atan
var Math_atan2 = Math.atan2
var Math_exp = Math.exp
var Math_log = Math.log
var Math_sqrt = Math.sqrt
var Math_ceil = Math.ceil
var Math_floor = Math.floor
var Math_pow = Math.pow
var Math_imul = Math.imul
var Math_fround = Math.fround
var Math_min = Math.min
var runDependencies = 0
var runDependencyWatcher = null
var dependenciesFulfilled = null

function addRunDependency (id) {
  runDependencies++
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies)
  }
}
Module['addRunDependency'] = addRunDependency

function removeRunDependency (id) {
  runDependencies--
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies)
  }
  if (runDependencies === 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher)
      runDependencyWatcher = null
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled
      dependenciesFulfilled = null
      callback()
    }
  }
}
Module['removeRunDependency'] = removeRunDependency
Module['preloadedImages'] = {}
Module['preloadedAudios'] = {}
var memoryInitializer = null
STATIC_BASE = 8
STATICTOP = STATIC_BASE + Runtime.alignMemory(32659)
__ATINIT__.push()
allocate([40, 102, 101, 95, 97, 100, 100, 40, 121, 44, 32, 119, 44, 32, 120, 41, 44, 32, 33, 102, 101, 95, 105, 115, 110, 111, 110, 122, 101, 114, 111, 40, 121, 41, 41, 0, 0, 0, 0, 0, 47, 104, 111, 109, 101, 47, 108, 117, 99, 97, 115, 47, 116, 104, 105, 110, 45, 119, 97, 108, 108, 101, 116, 47, 99, 114, 121, 112, 116, 111, 45, 111, 112, 115, 46, 99, 0, 0, 0, 0, 103, 101, 95, 102, 114, 111, 109, 102, 101, 95, 102, 114, 111, 109, 98, 121, 116, 101, 115, 95, 118, 97, 114, 116, 105, 109, 101, 0, 0, 0, 0, 0, 102, 101, 95, 105, 115, 110, 111, 110, 122, 101, 114, 111, 40, 114, 45, 62, 88, 41, 0, 0, 0, 0, 0, 0, 33, 102, 101, 95, 105, 115, 110, 111, 110, 122, 101, 114, 111, 40, 99, 104, 101, 99, 107, 95, 118, 41, 0, 0, 40, 40, 40, 98, 32, 45, 32, 49, 41, 32, 38, 32, 126, 98, 41, 32, 124, 32, 40, 40, 98, 32, 45, 32, 50, 41, 32, 38, 32, 126, 40, 98, 32, 45, 32, 49, 41, 41, 41, 32, 61, 61, 32, 40, 117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 41, 32, 45, 49, 0, 0, 0, 0, 102, 101, 95, 99, 109, 111, 118, 0, 182, 120, 89, 255, 133, 114, 211, 0, 189, 110, 21, 255, 15, 10, 106, 0, 41, 192, 1, 0, 152, 232, 121, 255, 188, 60, 160, 255, 153, 113, 206, 255, 0, 183, 226, 254, 180, 13, 72, 255, 176, 160, 14, 254, 211, 201, 134, 255, 158, 24, 143, 0, 127, 105, 53, 0, 96, 12, 189, 0, 167, 215, 251, 255, 159, 76, 128, 254, 106, 101, 225, 255, 30, 252, 4, 0, 146, 12, 174, 0, 89, 241, 178, 254, 10, 229, 166, 255, 123, 221, 42, 254, 30, 20, 212, 0, 82, 128, 3, 0, 48, 209, 243, 0, 119, 121, 64, 255, 50, 227, 156, 255, 0, 110, 197, 1, 103, 27, 144, 0, 133, 59, 140, 1, 189, 241, 36, 255, 248, 37, 195, 1, 96, 220, 55, 0, 183, 76, 62, 255, 195, 66, 61, 0, 50, 76, 164, 1, 225, 164, 76, 255, 76, 61, 163, 255, 117, 62, 31, 0, 81, 145, 64, 255, 118, 65, 14, 0, 162, 115, 214, 255, 6, 138, 46, 0, 124, 230, 244, 255, 10, 138, 143, 0, 52, 26, 194, 0, 184, 244, 76, 0, 129, 143, 41, 1, 190, 244, 19, 255, 123, 170, 122, 255, 98, 129, 68, 0, 121, 213, 147, 0, 86, 101, 30, 255, 161, 103, 155, 0, 140, 89, 67, 255, 239, 229, 190, 1, 67, 11, 181, 0, 198, 240, 137, 254, 238, 69, 188, 255, 234, 113, 60, 255, 37, 255, 57, 255, 69, 178, 182, 254, 128, 208, 179, 0, 118, 26, 125, 254, 3, 7, 214, 255, 241, 50, 77, 255, 85, 203, 197, 255, 211, 135, 250, 255, 25, 48, 100, 255, 187, 213, 180, 254, 17, 88, 105, 0, 83, 209, 158, 1, 5, 115, 98, 0, 4, 174, 60, 254, 171, 55, 110, 255, 217, 181, 17, 255, 20, 188, 170, 0, 146, 156, 102, 254, 87, 214, 174, 255, 114, 122, 155, 1, 233, 44, 170, 0, 127, 8, 239, 1, 214, 236, 234, 0, 175, 5, 219, 0, 49, 106, 61, 255, 6, 66, 208, 255, 2, 106, 110, 255, 81, 234, 19, 255, 215, 107, 192, 255, 67, 151, 238, 0, 19, 42, 108, 255, 229, 85, 113, 1, 50, 68, 135, 255, 17, 106, 9, 0, 50, 103, 1, 255, 80, 1, 168, 1, 35, 152, 30, 255, 16, 168, 185, 1, 56, 89, 232, 255, 101, 210, 252, 0, 41, 250, 71, 0, 204, 170, 79, 255, 14, 46, 239, 255, 80, 77, 239, 0, 189, 214, 75, 255, 17, 141, 249, 0, 38, 80, 76, 255, 190, 85, 117, 0, 86, 228, 170, 0, 156, 216, 208, 1, 195, 207, 164, 255, 150, 66, 76, 255, 175, 225, 16, 255, 141, 80, 98, 1, 76, 219, 242, 0, 198, 162, 114, 0, 46, 218, 152, 0, 155, 43, 241, 254, 155, 160, 104, 255, 178, 9, 252, 254, 100, 110, 212, 0, 14, 5, 167, 0, 233, 239, 163, 255, 28, 151, 157, 1, 101, 146, 10, 255, 254, 158, 70, 254, 71, 249, 228, 0, 88, 30, 50, 0, 68, 58, 160, 255, 191, 24, 104, 1, 129, 66, 129, 255, 192, 50, 85, 255, 8, 179, 138, 255, 38, 250, 201, 0, 115, 80, 160, 0, 131, 230, 113, 0, 125, 88, 147, 0, 90, 68, 199, 0, 253, 76, 158, 0, 28, 255, 118, 0, 113, 250, 254, 0, 66, 75, 46, 0, 230, 218, 43, 0, 229, 120, 186, 1, 148, 68, 43, 0, 136, 124, 238, 1, 187, 107, 197, 255, 84, 53, 246, 255, 51, 116, 254, 255, 51, 187, 165, 0, 2, 17, 175, 0, 66, 84, 160, 1, 247, 58, 30, 0, 35, 65, 53, 254, 69, 236, 191, 0, 45, 134, 245, 1, 163, 123, 221, 0, 32, 110, 20, 255, 52, 23, 165, 0, 186, 214, 71, 0, 233, 176, 96, 0, 242, 239, 54, 1, 57, 89, 138, 0, 83, 0, 84, 255, 136, 160, 100, 0, 92, 142, 120, 254, 104, 124, 190, 0, 181, 177, 62, 255, 250, 41, 85, 0, 152, 130, 42, 1, 96, 252, 246, 0, 151, 151, 63, 254, 239, 133, 62, 0, 32, 56, 156, 0, 45, 167, 189, 255, 142, 133, 179, 1, 131, 86, 211, 0, 187, 179, 150, 254, 250, 170, 14, 255, 68, 113, 21, 255, 222, 186, 59, 255, 66, 7, 241, 1, 69, 6, 72, 0, 86, 156, 108, 254, 55, 167, 89, 0, 109, 52, 219, 254, 13, 176, 23, 255, 196, 44, 106, 255, 239, 149, 71, 255, 164, 140, 125, 255, 159, 173, 1, 0, 51, 41, 231, 0, 145, 62, 33, 0, 138, 111, 93, 1, 185, 83, 69, 0, 144, 115, 46, 0, 97, 151, 16, 255, 24, 228, 26, 0, 49, 217, 226, 0, 113, 75, 234, 254, 193, 153, 12, 255, 182, 48, 96, 255, 14, 13, 26, 0, 128, 195, 249, 254, 69, 193, 59, 0, 132, 37, 81, 254, 125, 106, 60, 0, 214, 240, 169, 1, 164, 227, 66, 0, 210, 163, 78, 0, 37, 52, 151, 0, 99, 77, 26, 0, 238, 156, 213, 255, 213, 192, 209, 1, 73, 46, 84, 0, 20, 65, 41, 1, 54, 206, 79, 0, 201, 131, 146, 254, 170, 111, 24, 255, 177, 33, 50, 254, 171, 38, 203, 255, 78, 247, 116, 0, 209, 221, 153, 0, 133, 128, 178, 1, 58, 44, 25, 0, 201, 39, 59, 1, 189, 19, 252, 0, 49, 229, 210, 1, 117, 187, 117, 0, 181, 179, 184, 1, 0, 114, 219, 0, 48, 94, 147, 0, 245, 41, 56, 0, 125, 13, 204, 254, 244, 173, 119, 0, 44, 221, 32, 254, 84, 234, 20, 0, 249, 160, 198, 1, 236, 126, 234, 255, 143, 62, 221, 0, 129, 89, 214, 255, 55, 139, 5, 254, 68, 20, 191, 255, 14, 204, 178, 1, 35, 195, 217, 0, 47, 51, 206, 1, 38, 246, 165, 0, 206, 27, 6, 254, 158, 87, 36, 0, 217, 52, 146, 255, 125, 123, 215, 255, 85, 60, 31, 255, 171, 13, 7, 0, 218, 245, 88, 254, 252, 35, 60, 0, 55, 214, 160, 255, 133, 101, 56, 0, 224, 32, 19, 254, 147, 64, 234, 0, 26, 145, 162, 1, 114, 118, 125, 0, 248, 252, 250, 0, 101, 94, 196, 255, 198, 141, 226, 254, 51, 42, 182, 0, 135, 12, 9, 254, 109, 172, 210, 255, 197, 236, 194, 1, 241, 65, 154, 0, 48, 156, 47, 255, 153, 67, 55, 255, 218, 165, 34, 254, 74, 180, 179, 0, 218, 66, 71, 1, 88, 122, 99, 0, 212, 181, 219, 255, 92, 42, 231, 255, 239, 0, 154, 0, 245, 77, 183, 255, 94, 81, 170, 1, 18, 213, 216, 0, 171, 93, 71, 0, 52, 94, 248, 0, 18, 151, 161, 254, 197, 209, 66, 255, 174, 244, 15, 254, 162, 48, 183, 0, 49, 61, 240, 254, 182, 93, 195, 0, 199, 228, 6, 1, 200, 5, 17, 255, 137, 45, 237, 255, 108, 148, 4, 0, 90, 79, 237, 255, 39, 63, 77, 255, 53, 82, 207, 1, 142, 22, 118, 255, 101, 232, 18, 1, 92, 26, 67, 0, 5, 200, 88, 255, 33, 168, 138, 255, 149, 225, 72, 0, 2, 209, 27, 255, 44, 245, 168, 1, 220, 237, 17, 255, 30, 211, 105, 254, 141, 238, 221, 0, 128, 80, 245, 254, 111, 254, 14, 0, 222, 95, 190, 1, 223, 9, 241, 0, 146, 76, 212, 255, 108, 205, 104, 255, 63, 117, 153, 0, 144, 69, 48, 0, 35, 228, 111, 0, 192, 33, 193, 255, 112, 214, 190, 254, 115, 152, 151, 0, 23, 102, 88, 0, 51, 74, 248, 0, 226, 199, 143, 254, 204, 162, 101, 255, 208, 97, 189, 1, 245, 104, 18, 0, 230, 246, 30, 255, 23, 148, 69, 0, 110, 88, 52, 254, 226, 181, 89, 255, 208, 47, 90, 254, 114, 161, 80, 255, 33, 116, 248, 0, 179, 152, 87, 255, 69, 144, 177, 1, 88, 238, 26, 255, 58, 32, 113, 1, 1, 77, 69, 0, 59, 121, 52, 255, 152, 238, 83, 0, 52, 8, 193, 0, 231, 39, 233, 255, 199, 34, 138, 0, 222, 68, 173, 0, 91, 57, 242, 254, 220, 210, 127, 255, 192, 7, 246, 254, 151, 35, 187, 0, 195, 236, 165, 0, 111, 93, 206, 0, 212, 247, 133, 1, 154, 133, 209, 255, 155, 231, 10, 0, 64, 78, 38, 0, 122, 249, 100, 1, 30, 19, 97, 255, 62, 91, 249, 1, 248, 133, 77, 0, 197, 63, 168, 254, 116, 10, 82, 0, 184, 236, 113, 254, 212, 203, 194, 255, 61, 100, 252, 254, 36, 5, 202, 255, 119, 91, 153, 255, 129, 79, 29, 0, 103, 103, 171, 254, 237, 215, 111, 255, 216, 53, 69, 0, 239, 240, 23, 0, 194, 149, 221, 255, 38, 225, 222, 0, 232, 255, 180, 254, 118, 82, 133, 255, 57, 209, 177, 1, 139, 232, 133, 0, 158, 176, 46, 254, 194, 115, 46, 0, 88, 247, 229, 1, 28, 103, 191, 0, 221, 222, 175, 254, 149, 235, 44, 0, 151, 228, 25, 254, 218, 105, 103, 0, 142, 85, 210, 0, 149, 129, 190, 255, 213, 65, 94, 254, 117, 134, 224, 255, 82, 198, 117, 0, 157, 221, 220, 0, 163, 101, 36, 0, 197, 114, 37, 0, 104, 172, 166, 254, 11, 182, 0, 0, 81, 72, 188, 255, 97, 188, 16, 255, 69, 6, 10, 0, 199, 147, 145, 255, 8, 9, 115, 1, 65, 214, 175, 255, 217, 173, 209, 0, 80, 127, 166, 0, 247, 229, 4, 254, 167, 183, 124, 255, 90, 28, 204, 254, 175, 59, 240, 255, 11, 41, 248, 1, 108, 40, 51, 255, 144, 177, 195, 254, 150, 250, 126, 0, 138, 91, 65, 1, 120, 60, 222, 255, 245, 193, 239, 0, 29, 214, 189, 255, 128, 2, 25, 0, 80, 154, 162, 0, 77, 220, 107, 1, 234, 205, 74, 255, 54, 166, 103, 255, 116, 72, 9, 0, 228, 94, 47, 255, 30, 200, 25, 255, 35, 214, 89, 255, 61, 176, 140, 255, 83, 226, 163, 255, 75, 130, 172, 0, 128, 38, 17, 0, 95, 137, 152, 255, 215, 124, 159, 1, 79, 93, 0, 0, 148, 82, 157, 254, 195, 130, 251, 255, 40, 202, 76, 255, 251, 126, 224, 0, 157, 99, 62, 254, 207, 7, 225, 255, 96, 68, 195, 0, 140, 186, 157, 255, 131, 19, 231, 255, 42, 128, 254, 0, 52, 219, 61, 254, 102, 203, 72, 0, 141, 7, 11, 255, 186, 164, 213, 0, 31, 122, 119, 0, 133, 242, 145, 0, 208, 252, 232, 255, 91, 213, 182, 255, 143, 4, 250, 254, 249, 215, 74, 0, 165, 30, 111, 1, 171, 9, 223, 0, 229, 123, 34, 1, 92, 130, 26, 255, 77, 155, 45, 1, 195, 139, 28, 255, 59, 224, 78, 0, 136, 17, 247, 0, 108, 121, 32, 0, 79, 250, 189, 255, 96, 227, 252, 254, 38, 241, 62, 0, 62, 174, 125, 255, 155, 111, 93, 255, 10, 230, 206, 1, 97, 197, 40, 255, 0, 49, 57, 254, 65, 250, 13, 0, 18, 251, 150, 255, 220, 109, 210, 255, 5, 174, 166, 254, 44, 129, 189, 0, 235, 35, 147, 255, 37, 247, 141, 255, 72, 141, 4, 255, 103, 107, 255, 0, 247, 90, 4, 0, 53, 44, 42, 0, 2, 30, 240, 0, 4, 59, 63, 0, 88, 78, 36, 0, 113, 167, 180, 0, 190, 71, 193, 255, 199, 158, 164, 255, 58, 8, 172, 0, 77, 33, 12, 0, 65, 63, 3, 0, 153, 77, 33, 255, 172, 254, 102, 1, 228, 221, 4, 255, 87, 30, 254, 1, 146, 41, 86, 255, 138, 204, 239, 254, 108, 141, 17, 255, 187, 242, 135, 0, 210, 208, 127, 0, 68, 45, 14, 254, 73, 96, 62, 0, 81, 60, 24, 255, 170, 6, 36, 255, 3, 249, 26, 0, 35, 213, 109, 0, 22, 129, 54, 255, 21, 35, 225, 255, 234, 61, 56, 255, 58, 217, 6, 0, 143, 124, 88, 0, 236, 126, 66, 0, 209, 38, 183, 255, 34, 238, 6, 255, 174, 145, 102, 0, 95, 22, 211, 0, 196, 15, 153, 254, 46, 84, 232, 255, 117, 34, 146, 1, 231, 250, 74, 255, 27, 134, 100, 1, 92, 187, 195, 255, 170, 198, 112, 0, 120, 28, 42, 0, 209, 70, 67, 0, 29, 81, 31, 0, 29, 168, 100, 1, 169, 173, 160, 0, 107, 35, 117, 0, 62, 96, 59, 255, 81, 12, 69, 1, 135, 239, 190, 255, 220, 252, 18, 0, 163, 220, 58, 255, 137, 137, 188, 255, 83, 102, 109, 0, 96, 6, 76, 0, 234, 222, 210, 255, 185, 174, 205, 1, 60, 158, 213, 255, 13, 241, 214, 0, 172, 129, 140, 0, 93, 104, 242, 0, 192, 156, 251, 0, 43, 117, 30, 0, 225, 81, 158, 0, 127, 232, 218, 0, 226, 28, 203, 0, 233, 27, 151, 255, 117, 43, 5, 255, 242, 14, 47, 255, 33, 20, 6, 0, 137, 251, 44, 254, 27, 31, 245, 255, 183, 214, 125, 254, 40, 121, 149, 0, 186, 158, 213, 255, 89, 8, 227, 0, 69, 88, 0, 254, 203, 135, 225, 0, 201, 174, 203, 0, 147, 71, 184, 0, 18, 121, 41, 254, 94, 5, 78, 0, 224, 214, 240, 254, 36, 5, 180, 0, 251, 135, 231, 1, 163, 138, 212, 0, 210, 249, 116, 254, 88, 129, 187, 0, 19, 8, 49, 254, 62, 14, 144, 255, 159, 76, 211, 0, 214, 51, 82, 0, 109, 117, 228, 254, 103, 223, 203, 255, 75, 252, 15, 1, 154, 71, 220, 255, 23, 13, 91, 1, 141, 168, 96, 255, 181, 182, 133, 0, 250, 51, 55, 0, 234, 234, 212, 254, 175, 63, 158, 0, 39, 240, 52, 1, 158, 189, 36, 255, 213, 40, 85, 1, 32, 180, 247, 255, 19, 102, 26, 1, 84, 24, 97, 255, 69, 21, 222, 0, 148, 139, 122, 255, 220, 213, 235, 1, 232, 203, 255, 0, 121, 57, 147, 0, 227, 7, 154, 0, 53, 22, 147, 1, 72, 1, 225, 0, 82, 134, 48, 254, 83, 60, 157, 255, 145, 72, 169, 0, 34, 103, 239, 0, 198, 233, 47, 0, 116, 19, 4, 255, 184, 106, 9, 255, 183, 129, 83, 0, 36, 176, 230, 1, 34, 103, 72, 0, 219, 162, 134, 0, 245, 42, 158, 0, 32, 149, 96, 254, 165, 44, 144, 0, 202, 239, 72, 254, 215, 150, 5, 0, 42, 66, 36, 1, 132, 215, 175, 0, 86, 174, 86, 255, 26, 197, 156, 255, 49, 232, 135, 254, 103, 182, 82, 0, 253, 128, 176, 1, 153, 178, 122, 0, 245, 250, 10, 0, 236, 24, 178, 0, 137, 106, 132, 0, 40, 29, 41, 0, 50, 30, 152, 255, 124, 105, 38, 0, 230, 191, 75, 0, 143, 43, 170, 0, 44, 131, 20, 255, 44, 13, 23, 255, 237, 255, 155, 1, 159, 109, 100, 255, 112, 181, 24, 255, 104, 220, 108, 0, 55, 211, 131, 0, 99, 12, 213, 255, 152, 151, 145, 255, 238, 5, 159, 0, 97, 155, 8, 0, 33, 108, 81, 0, 1, 3, 103, 0, 62, 109, 34, 255, 250, 155, 180, 0, 32, 71, 195, 255, 38, 70, 145, 1, 159, 95, 245, 0, 69, 229, 101, 1, 136, 28, 240, 0, 79, 224, 25, 0, 78, 110, 121, 255, 248, 168, 124, 0, 187, 128, 247, 0, 2, 147, 235, 254, 79, 11, 132, 0, 70, 58, 12, 1, 181, 8, 163, 255, 79, 137, 133, 255, 37, 170, 11, 255, 141, 243, 85, 255, 176, 231, 215, 255, 204, 150, 164, 255, 239, 215, 39, 255, 46, 87, 156, 254, 8, 163, 88, 255, 172, 34, 232, 0, 66, 44, 102, 255, 27, 54, 41, 254, 236, 99, 87, 255, 41, 123, 169, 1, 52, 114, 43, 0, 117, 134, 40, 0, 155, 134, 26, 0, 231, 207, 91, 254, 35, 132, 38, 255, 19, 102, 125, 254, 36, 227, 133, 255, 118, 3, 113, 255, 29, 13, 124, 0, 152, 96, 74, 1, 88, 146, 206, 255, 167, 191, 220, 254, 162, 18, 88, 255, 182, 100, 23, 0, 31, 117, 52, 0, 81, 46, 106, 1, 12, 2, 7, 0, 69, 80, 201, 1, 209, 246, 172, 0, 12, 48, 141, 1, 224, 211, 88, 0, 116, 226, 159, 0, 122, 98, 130, 0, 65, 236, 234, 1, 225, 226, 9, 255, 207, 226, 123, 1, 89, 214, 59, 0, 112, 135, 88, 1, 90, 244, 203, 255, 49, 11, 38, 1, 129, 108, 186, 0, 89, 112, 15, 1, 101, 46, 204, 255, 127, 204, 45, 254, 79, 255, 221, 255, 51, 73, 18, 255, 127, 42, 101, 255, 241, 21, 202, 0, 160, 227, 7, 0, 105, 50, 236, 0, 79, 52, 197, 255, 104, 202, 208, 1, 180, 15, 16, 0, 101, 197, 78, 255, 98, 77, 203, 0, 41, 185, 241, 1, 35, 193, 124, 0, 35, 155, 23, 255, 207, 53, 192, 0, 11, 125, 163, 1, 249, 158, 185, 255, 4, 131, 48, 0, 21, 93, 111, 255, 61, 121, 231, 1, 69, 200, 36, 255, 185, 48, 185, 255, 111, 238, 21, 255, 39, 50, 25, 255, 99, 215, 163, 255, 87, 212, 30, 255, 164, 147, 5, 255, 128, 6, 35, 1, 108, 223, 110, 255, 194, 76, 178, 0, 74, 101, 180, 0, 243, 47, 48, 0, 174, 25, 43, 255, 82, 173, 253, 1, 54, 114, 192, 255, 40, 55, 91, 0, 215, 108, 176, 255, 11, 56, 7, 0, 224, 233, 76, 0, 209, 98, 202, 254, 242, 25, 125, 0, 44, 193, 93, 254, 203, 8, 177, 0, 135, 176, 19, 0, 112, 71, 213, 255, 206, 59, 176, 1, 4, 67, 26, 0, 14, 143, 213, 254, 42, 55, 208, 255, 60, 67, 120, 0, 193, 21, 163, 0, 99, 164, 115, 0, 10, 20, 118, 0, 156, 212, 222, 254, 160, 7, 217, 255, 114, 245, 76, 1, 117, 59, 123, 0, 176, 194, 86, 254, 213, 15, 176, 0, 78, 206, 207, 254, 213, 129, 59, 0, 233, 251, 22, 1, 96, 55, 152, 255, 236, 255, 15, 255, 197, 89, 84, 255, 93, 149, 133, 0, 174, 160, 113, 0, 234, 99, 169, 255, 152, 116, 88, 0, 144, 164, 83, 255, 95, 29, 198, 255, 34, 47, 15, 255, 99, 120, 134, 255, 5, 236, 193, 0, 249, 247, 126, 255, 147, 187, 30, 0, 50, 230, 117, 255, 108, 217, 219, 255, 163, 81, 166, 255, 72, 25, 169, 254, 155, 121, 79, 255, 28, 155, 89, 254, 7, 126, 17, 0, 147, 65, 33, 1, 47, 234, 253, 0, 26, 51, 18, 0, 105, 83, 199, 255, 163, 196, 230, 0, 113, 248, 164, 0, 226, 254, 218, 0, 189, 209, 203, 255, 164, 247, 222, 254, 255, 35, 165, 0, 4, 188, 243, 1, 127, 179, 71, 0, 37, 237, 254, 255, 100, 186, 240, 0, 5, 57, 71, 254, 103, 72, 73, 255, 244, 18, 81, 254, 229, 210, 132, 255, 238, 6, 180, 255, 11, 229, 174, 255, 227, 221, 192, 1, 17, 49, 28, 0, 163, 215, 196, 254, 9, 118, 4, 255, 51, 240, 71, 0, 113, 129, 109, 255, 76, 240, 231, 0, 188, 177, 127, 0, 125, 71, 44, 1, 26, 175, 243, 0, 94, 169, 25, 254, 27, 230, 29, 0, 15, 139, 119, 1, 168, 170, 186, 255, 172, 197, 76, 255, 252, 75, 188, 0, 137, 124, 196, 0, 72, 22, 96, 255, 45, 151, 249, 1, 220, 145, 100, 0, 64, 192, 159, 255, 120, 239, 226, 0, 129, 178, 146, 0, 0, 192, 125, 0, 235, 138, 234, 0, 183, 157, 146, 0, 83, 199, 192, 255, 184, 172, 72, 255, 73, 225, 128, 0, 77, 6, 250, 255, 186, 65, 67, 0, 104, 246, 207, 0, 188, 32, 138, 255, 218, 24, 242, 0, 67, 138, 81, 254, 237, 129, 121, 255, 20, 207, 150, 1, 41, 199, 16, 255, 6, 20, 128, 0, 159, 118, 5, 0, 181, 16, 143, 255, 220, 38, 15, 0, 23, 64, 147, 254, 73, 26, 13, 0, 87, 228, 57, 1, 204, 124, 128, 0, 43, 24, 223, 0, 219, 99, 199, 0, 22, 75, 20, 255, 19, 27, 126, 0, 157, 62, 215, 0, 110, 29, 230, 0, 179, 167, 255, 1, 54, 252, 190, 0, 221, 204, 182, 254, 179, 158, 65, 255, 81, 157, 3, 0, 194, 218, 159, 0, 170, 223, 0, 0, 224, 11, 32, 255, 38, 197, 98, 0, 168, 164, 37, 0, 23, 88, 7, 1, 164, 186, 110, 0, 96, 36, 134, 0, 234, 242, 229, 0, 250, 121, 19, 0, 242, 254, 112, 255, 3, 47, 94, 1, 9, 239, 6, 255, 81, 134, 153, 254, 214, 253, 168, 255, 67, 124, 224, 0, 245, 95, 74, 0, 28, 30, 44, 254, 1, 109, 220, 255, 178, 89, 89, 0, 252, 36, 76, 0, 24, 198, 46, 255, 76, 77, 111, 0, 134, 234, 136, 255, 39, 94, 29, 0, 185, 72, 234, 255, 70, 68, 135, 255, 231, 102, 7, 254, 77, 231, 140, 0, 167, 47, 58, 1, 148, 97, 118, 255, 16, 27, 225, 1, 166, 206, 143, 255, 110, 178, 214, 255, 180, 131, 162, 0, 143, 141, 225, 1, 13, 218, 78, 255, 114, 153, 33, 1, 98, 104, 204, 0, 175, 114, 117, 1, 167, 206, 75, 0, 202, 196, 83, 1, 58, 64, 67, 0, 138, 47, 111, 1, 196, 247, 128, 255, 137, 224, 224, 254, 158, 112, 207, 0, 154, 100, 255, 1, 134, 37, 107, 0, 198, 128, 79, 255, 127, 209, 155, 255, 163, 254, 185, 254, 60, 14, 243, 0, 31, 219, 112, 254, 29, 217, 65, 0, 200, 13, 116, 254, 123, 60, 196, 255, 224, 59, 184, 254, 242, 89, 196, 0, 123, 16, 75, 254, 149, 16, 206, 0, 69, 254, 48, 1, 231, 116, 223, 255, 209, 160, 65, 1, 200, 80, 98, 0, 37, 194, 184, 254, 148, 63, 34, 0, 139, 240, 65, 255, 217, 144, 132, 255, 56, 38, 45, 254, 199, 120, 210, 0, 108, 177, 166, 255, 160, 222, 4, 0, 220, 126, 119, 254, 165, 107, 160, 255, 82, 220, 248, 1, 241, 175, 136, 0, 144, 141, 23, 255, 169, 138, 84, 0, 160, 137, 78, 255, 226, 118, 80, 255, 52, 27, 132, 255, 63, 96, 139, 255, 152, 250, 39, 0, 188, 155, 15, 0, 232, 51, 150, 254, 40, 15, 232, 255, 240, 229, 9, 255, 137, 175, 27, 255, 75, 73, 97, 1, 218, 212, 11, 0, 135, 5, 162, 1, 107, 185, 213, 0, 2, 249, 107, 255, 40, 242, 70, 0, 219, 200, 25, 0, 25, 157, 13, 0, 67, 82, 80, 255, 196, 249, 23, 255, 145, 20, 149, 0, 50, 72, 146, 0, 94, 76, 148, 1, 24, 251, 65, 0, 31, 192, 23, 0, 184, 212, 201, 255, 123, 233, 162, 1, 247, 173, 72, 0, 162, 87, 219, 254, 126, 134, 89, 0, 159, 11, 12, 254, 166, 105, 29, 0, 73, 27, 228, 1, 113, 120, 183, 255, 66, 163, 109, 1, 212, 143, 11, 255, 159, 231, 168, 1, 255, 128, 90, 0, 57, 14, 58, 254, 89, 52, 10, 255, 253, 8, 163, 1, 0, 145, 210, 255, 10, 129, 85, 1, 46, 181, 27, 0, 103, 136, 160, 254, 126, 188, 209, 255, 34, 35, 111, 0, 215, 219, 24, 255, 212, 11, 214, 254, 101, 5, 118, 0, 232, 197, 133, 255, 223, 167, 109, 255, 237, 80, 86, 255, 70, 139, 94, 0, 158, 193, 191, 1, 155, 15, 51, 255, 15, 190, 115, 0, 78, 135, 207, 255, 249, 10, 27, 1, 181, 125, 233, 0, 95, 172, 13, 254, 170, 213, 161, 255, 39, 236, 138, 255, 95, 93, 87, 255, 190, 128, 95, 0, 125, 15, 206, 0, 166, 150, 159, 0, 227, 15, 158, 255, 206, 158, 120, 255, 42, 141, 128, 0, 101, 178, 120, 1, 156, 109, 131, 0, 218, 14, 44, 254, 247, 168, 206, 255, 212, 112, 28, 0, 112, 17, 228, 255, 90, 16, 37, 1, 197, 222, 108, 0, 254, 207, 83, 255, 9, 90, 243, 255, 243, 244, 172, 0, 26, 88, 115, 255, 205, 116, 122, 0, 191, 230, 193, 0, 180, 100, 11, 1, 217, 37, 96, 255, 154, 78, 156, 0, 235, 234, 31, 255, 206, 178, 178, 255, 149, 192, 251, 0, 182, 250, 135, 0, 246, 22, 105, 0, 124, 193, 109, 255, 2, 210, 149, 255, 169, 17, 170, 0, 0, 96, 110, 255, 117, 9, 8, 1, 50, 123, 40, 255, 193, 189, 99, 0, 34, 227, 160, 0, 48, 80, 70, 254, 211, 51, 236, 0, 45, 122, 245, 254, 44, 174, 8, 0, 173, 37, 233, 255, 158, 65, 171, 0, 122, 69, 215, 255, 90, 80, 2, 255, 131, 106, 96, 254, 227, 114, 135, 0, 205, 49, 119, 254, 176, 62, 64, 255, 82, 51, 17, 255, 241, 20, 243, 255, 130, 13, 8, 254, 128, 217, 243, 255, 162, 27, 1, 254, 90, 118, 241, 0, 246, 198, 246, 255, 55, 16, 118, 255, 200, 159, 157, 0, 163, 17, 1, 0, 140, 107, 121, 0, 85, 161, 118, 255, 38, 0, 149, 0, 156, 47, 238, 0, 9, 166, 166, 1, 75, 98, 181, 255, 50, 74, 25, 0, 66, 15, 47, 0, 139, 225, 159, 0, 76, 3, 142, 255, 14, 238, 184, 0, 11, 207, 53, 255, 183, 192, 186, 1, 171, 32, 174, 255, 191, 76, 221, 1, 247, 170, 219, 0, 25, 172, 50, 254, 217, 9, 233, 0, 203, 126, 68, 255, 183, 92, 48, 0, 127, 167, 183, 1, 65, 49, 254, 0, 16, 63, 127, 1, 254, 21, 170, 255, 59, 224, 127, 254, 22, 48, 63, 255, 27, 78, 130, 254, 40, 195, 29, 0, 250, 132, 112, 254, 35, 203, 144, 0, 104, 169, 168, 0, 207, 253, 30, 255, 104, 40, 38, 254, 94, 228, 88, 0, 206, 16, 128, 255, 212, 55, 122, 255, 223, 22, 234, 0, 223, 197, 127, 0, 253, 181, 181, 1, 145, 102, 118, 0, 236, 153, 36, 255, 212, 217, 72, 255, 20, 38, 24, 254, 138, 62, 62, 0, 152, 140, 4, 0, 230, 220, 99, 255, 1, 21, 212, 255, 148, 201, 231, 0, 244, 123, 9, 254, 0, 171, 210, 0, 51, 58, 37, 255, 1, 255, 14, 255, 244, 183, 145, 254, 0, 242, 166, 0, 22, 74, 132, 0, 121, 216, 41, 0, 95, 195, 114, 254, 133, 24, 151, 255, 156, 226, 231, 255, 247, 5, 77, 255, 246, 148, 115, 254, 225, 92, 81, 255, 222, 80, 246, 254, 170, 123, 89, 255, 74, 199, 141, 0, 29, 20, 8, 255, 138, 136, 70, 255, 93, 75, 92, 0, 221, 147, 49, 254, 52, 126, 226, 0, 229, 124, 23, 0, 46, 9, 181, 0, 205, 64, 52, 1, 131, 254, 28, 0, 151, 158, 212, 0, 131, 64, 78, 0, 206, 25, 171, 0, 0, 230, 139, 0, 191, 253, 110, 254, 103, 247, 167, 0, 64, 40, 40, 1, 42, 165, 241, 255, 59, 75, 228, 254, 124, 243, 189, 255, 196, 92, 178, 255, 130, 140, 86, 255, 141, 89, 56, 1, 147, 198, 5, 255, 203, 248, 158, 254, 144, 162, 141, 0, 11, 172, 226, 0, 130, 42, 21, 255, 1, 167, 143, 255, 144, 36, 36, 255, 48, 88, 164, 254, 168, 170, 220, 0, 98, 71, 214, 0, 91, 208, 79, 0, 159, 76, 201, 1, 166, 42, 214, 255, 69, 255, 0, 255, 6, 128, 125, 255, 190, 1, 140, 0, 146, 83, 218, 255, 215, 238, 72, 1, 122, 127, 53, 0, 189, 116, 165, 255, 84, 8, 66, 255, 214, 3, 208, 255, 213, 110, 133, 0, 195, 168, 44, 1, 158, 231, 69, 0, 162, 64, 200, 254, 91, 58, 104, 0, 182, 58, 187, 254, 249, 228, 136, 0, 203, 134, 76, 254, 99, 221, 233, 0, 75, 254, 214, 254, 80, 69, 154, 0, 64, 152, 248, 254, 236, 136, 202, 255, 157, 105, 153, 254, 149, 175, 20, 0, 22, 35, 19, 255, 124, 121, 233, 0, 186, 250, 198, 254, 132, 229, 139, 0, 137, 80, 174, 255, 165, 125, 68, 0, 144, 202, 148, 254, 235, 239, 248, 0, 135, 184, 118, 0, 101, 94, 17, 255, 122, 72, 70, 254, 69, 130, 146, 0, 127, 222, 248, 1, 69, 127, 118, 255, 30, 82, 215, 254, 188, 74, 19, 255, 229, 167, 194, 254, 117, 25, 66, 255, 65, 234, 56, 254, 213, 22, 156, 0, 151, 59, 93, 254, 45, 28, 27, 255, 186, 126, 164, 255, 32, 6, 239, 0, 127, 114, 99, 1, 219, 52, 2, 255, 99, 96, 166, 254, 62, 190, 126, 255, 108, 222, 168, 1, 75, 226, 174, 0, 230, 226, 199, 0, 60, 117, 218, 255, 252, 248, 20, 1, 214, 188, 204, 0, 31, 194, 134, 254, 123, 69, 192, 255, 169, 173, 36, 254, 55, 98, 91, 0, 223, 42, 102, 254, 137, 1, 102, 0, 157, 90, 25, 0, 239, 122, 64, 255, 252, 6, 233, 0, 7, 54, 20, 255, 82, 116, 174, 0, 135, 37, 54, 255, 15, 186, 125, 0, 227, 112, 175, 255, 100, 180, 225, 255, 42, 237, 244, 255, 244, 173, 226, 254, 248, 18, 33, 0, 171, 99, 150, 255, 74, 235, 50, 255, 117, 82, 32, 254, 106, 168, 237, 0, 207, 109, 208, 1, 228, 9, 186, 0, 135, 60, 169, 254, 179, 92, 143, 0, 244, 170, 104, 255, 235, 45, 124, 255, 70, 99, 186, 0, 117, 137, 183, 0, 224, 31, 215, 0, 40, 9, 100, 0, 26, 16, 95, 1, 68, 217, 87, 0, 8, 151, 20, 255, 26, 100, 58, 255, 176, 165, 203, 1, 52, 118, 70, 0, 7, 32, 254, 254, 244, 254, 245, 255, 167, 144, 194, 255, 125, 113, 23, 255, 176, 121, 181, 0, 136, 84, 209, 0, 138, 6, 30, 255, 89, 48, 28, 0, 33, 155, 14, 255, 25, 240, 154, 0, 141, 205, 109, 1, 70, 115, 62, 255, 20, 40, 107, 254, 138, 154, 199, 255, 94, 223, 226, 255, 157, 171, 38, 0, 163, 177, 25, 254, 45, 118, 3, 255, 14, 222, 23, 1, 209, 190, 81, 255, 118, 123, 232, 1, 13, 213, 101, 255, 123, 55, 123, 254, 27, 246, 165, 0, 50, 99, 76, 255, 140, 214, 32, 255, 97, 65, 67, 255, 24, 12, 28, 0, 174, 86, 78, 1, 64, 247, 96, 0, 160, 135, 67, 0, 66, 55, 243, 255, 147, 204, 96, 255, 26, 6, 33, 255, 98, 51, 83, 1, 153, 213, 208, 255, 2, 184, 54, 255, 25, 218, 11, 0, 49, 67, 246, 254, 18, 149, 72, 255, 13, 25, 72, 0, 42, 79, 214, 0, 42, 4, 38, 1, 27, 139, 144, 255, 149, 187, 23, 0, 18, 164, 132, 0, 245, 84, 184, 254, 120, 198, 104, 255, 126, 218, 96, 0, 56, 117, 234, 255, 13, 29, 214, 254, 68, 47, 10, 255, 167, 154, 132, 254, 152, 38, 198, 0, 66, 178, 89, 255, 200, 46, 171, 255, 13, 99, 83, 255, 210, 187, 253, 255, 170, 45, 42, 1, 138, 209, 124, 0, 214, 162, 141, 0, 12, 230, 156, 0, 102, 36, 112, 254, 3, 147, 67, 0, 52, 215, 123, 255, 233, 171, 54, 255, 98, 137, 62, 0, 247, 218, 39, 255, 231, 218, 236, 0, 247, 191, 127, 0, 195, 146, 84, 0, 165, 176, 92, 255, 19, 212, 94, 255, 17, 74, 227, 0, 88, 40, 153, 1, 198, 147, 1, 255, 206, 67, 245, 254, 240, 3, 218, 255, 61, 141, 213, 255, 97, 183, 106, 0, 195, 232, 235, 254, 95, 86, 154, 0, 209, 48, 205, 254, 118, 209, 241, 255, 240, 120, 223, 1, 213, 29, 159, 0, 163, 127, 147, 255, 13, 218, 93, 0, 85, 24, 68, 254, 70, 20, 80, 255, 189, 5, 140, 1, 82, 97, 254, 255, 99, 99, 191, 255, 132, 84, 133, 255, 107, 218, 116, 255, 112, 122, 46, 0, 105, 17, 32, 0, 194, 160, 63, 255, 68, 222, 39, 1, 216, 253, 92, 0, 177, 105, 205, 255, 149, 201, 195, 0, 42, 225, 11, 255, 40, 162, 115, 0, 9, 7, 81, 0, 165, 218, 219, 0, 180, 22, 0, 254, 29, 146, 252, 255, 146, 207, 225, 1, 180, 135, 96, 0, 31, 163, 112, 0, 177, 11, 219, 255, 133, 12, 193, 254, 43, 78, 50, 0, 65, 113, 121, 1, 59, 217, 6, 255, 110, 94, 24, 1, 112, 172, 111, 0, 7, 15, 96, 0, 36, 85, 123, 0, 71, 150, 21, 255, 208, 73, 188, 0, 192, 11, 167, 1, 213, 245, 34, 0, 9, 230, 92, 0, 162, 142, 39, 255, 215, 90, 27, 0, 98, 97, 89, 0, 94, 79, 211, 0, 90, 157, 240, 0, 95, 220, 126, 1, 102, 176, 226, 0, 36, 30, 224, 254, 35, 31, 127, 0, 231, 232, 115, 1, 85, 83, 130, 0, 210, 73, 245, 255, 47, 143, 114, 255, 68, 65, 197, 0, 59, 72, 62, 255, 183, 133, 173, 254, 93, 121, 118, 255, 59, 177, 81, 255, 234, 69, 173, 255, 205, 128, 177, 0, 220, 244, 51, 0, 26, 244, 209, 1, 73, 222, 77, 255, 163, 8, 96, 254, 150, 149, 211, 0, 158, 254, 203, 1, 54, 127, 139, 0, 161, 224, 59, 0, 4, 109, 22, 255, 222, 42, 45, 255, 208, 146, 102, 255, 236, 142, 187, 0, 50, 205, 245, 255, 10, 74, 89, 254, 48, 79, 142, 0, 222, 76, 130, 255, 30, 166, 63, 0, 236, 12, 13, 255, 49, 184, 244, 0, 187, 113, 102, 0, 218, 101, 253, 0, 153, 57, 182, 254, 32, 150, 42, 0, 25, 198, 146, 1, 237, 241, 56, 0, 140, 68, 5, 0, 91, 164, 172, 255, 78, 145, 186, 254, 67, 52, 205, 0, 219, 207, 129, 1, 109, 115, 17, 0, 54, 143, 58, 1, 21, 248, 120, 255, 179, 255, 30, 0, 193, 236, 66, 255, 1, 255, 7, 255, 253, 192, 48, 255, 19, 69, 217, 1, 3, 214, 0, 255, 64, 101, 146, 1, 223, 125, 35, 255, 235, 73, 179, 255, 249, 167, 226, 0, 225, 175, 10, 1, 97, 162, 58, 0, 106, 112, 171, 1, 84, 172, 5, 255, 133, 140, 178, 255, 134, 245, 142, 0, 97, 90, 125, 255, 186, 203, 185, 255, 223, 77, 23, 255, 192, 92, 106, 0, 15, 198, 115, 255, 217, 152, 248, 0, 171, 178, 120, 255, 228, 134, 53, 0, 176, 54, 193, 1, 250, 251, 53, 0, 213, 10, 100, 1, 34, 199, 106, 0, 151, 31, 244, 254, 172, 224, 87, 255, 14, 237, 23, 255, 253, 85, 26, 255, 127, 39, 116, 255, 172, 104, 100, 0, 251, 14, 70, 255, 212, 208, 138, 255, 253, 211, 250, 0, 176, 49, 165, 0, 15, 76, 123, 255, 37, 218, 160, 255, 92, 135, 16, 1, 10, 126, 114, 255, 70, 5, 224, 255, 247, 249, 141, 0, 68, 20, 60, 1, 241, 210, 189, 255, 195, 217, 187, 1, 151, 3, 113, 0, 151, 92, 174, 0, 231, 62, 178, 255, 219, 183, 225, 0, 23, 23, 33, 255, 205, 181, 80, 0, 57, 184, 248, 255, 67, 180, 1, 255, 90, 123, 93, 255, 39, 0, 162, 255, 96, 248, 52, 255, 84, 66, 140, 0, 34, 127, 228, 255, 194, 138, 7, 1, 166, 110, 188, 0, 21, 17, 155, 1, 154, 190, 198, 255, 214, 80, 59, 255, 18, 7, 143, 0, 72, 29, 226, 1, 199, 217, 249, 0, 232, 161, 71, 1, 149, 190, 201, 0, 217, 175, 95, 254, 113, 147, 67, 255, 138, 143, 199, 255, 127, 204, 1, 0, 29, 182, 83, 1, 206, 230, 155, 255, 186, 204, 60, 0, 10, 125, 85, 255, 232, 96, 25, 255, 255, 89, 247, 255, 213, 254, 175, 1, 232, 193, 81, 0, 28, 43, 156, 254, 12, 69, 8, 0, 147, 24, 248, 0, 18, 198, 49, 0, 134, 60, 35, 0, 118, 246, 18, 255, 49, 88, 254, 254, 228, 21, 186, 255, 182, 65, 112, 1, 219, 22, 1, 255, 22, 126, 52, 255, 189, 53, 49, 255, 112, 25, 143, 0, 38, 127, 55, 255, 226, 101, 163, 254, 208, 133, 61, 255, 137, 69, 174, 1, 190, 118, 145, 255, 60, 98, 219, 255, 217, 13, 245, 255, 250, 136, 10, 0, 84, 254, 226, 0, 201, 31, 125, 1, 240, 51, 251, 255, 31, 131, 130, 255, 2, 138, 50, 255, 215, 215, 177, 1, 223, 12, 238, 255, 252, 149, 56, 255, 124, 91, 68, 255, 72, 126, 170, 254, 119, 255, 100, 0, 130, 135, 232, 255, 14, 79, 178, 0, 250, 131, 197, 0, 138, 198, 208, 0, 121, 216, 139, 254, 119, 18, 36, 255, 29, 193, 122, 0, 16, 42, 45, 255, 213, 240, 235, 1, 230, 190, 169, 255, 198, 35, 228, 254, 110, 173, 72, 0, 214, 221, 241, 255, 56, 148, 135, 0, 192, 117, 78, 254, 141, 93, 207, 255, 143, 65, 149, 0, 21, 18, 98, 255, 95, 44, 244, 1, 106, 191, 77, 0, 254, 85, 8, 254, 214, 110, 176, 255, 73, 173, 19, 254, 160, 196, 199, 255, 237, 90, 144, 0, 193, 172, 113, 255, 200, 155, 136, 254, 228, 90, 221, 0, 137, 49, 74, 1, 164, 221, 215, 255, 209, 189, 5, 255, 105, 236, 55, 255, 42, 31, 129, 1, 193, 255, 236, 0, 46, 217, 60, 0, 138, 88, 187, 255, 226, 82, 236, 255, 81, 69, 151, 255, 142, 190, 16, 1, 13, 134, 8, 0, 127, 122, 48, 255, 81, 64, 156, 0, 171, 243, 139, 0, 237, 35, 246, 0, 122, 143, 193, 254, 212, 122, 146, 0, 95, 41, 255, 1, 87, 132, 77, 0, 4, 212, 31, 0, 17, 31, 78, 0, 39, 45, 173, 254, 24, 142, 217, 255, 95, 9, 6, 255, 227, 83, 6, 0, 98, 59, 130, 254, 62, 30, 33, 0, 8, 115, 211, 1, 162, 97, 128, 255, 7, 184, 23, 254, 116, 28, 168, 255, 248, 138, 151, 255, 98, 244, 240, 0, 186, 118, 130, 0, 114, 248, 235, 255, 105, 173, 200, 1, 160, 124, 71, 255, 94, 36, 164, 1, 175, 65, 146, 255, 238, 241, 170, 254, 202, 198, 197, 0, 228, 71, 138, 254, 45, 246, 109, 255, 194, 52, 158, 0, 133, 187, 176, 0, 83, 252, 154, 254, 89, 189, 221, 255, 170, 73, 252, 0, 148, 58, 125, 0, 36, 68, 51, 254, 42, 69, 177, 255, 168, 76, 86, 255, 38, 100, 204, 255, 38, 53, 35, 0, 175, 19, 97, 0, 225, 238, 253, 255, 81, 81, 135, 0, 210, 27, 255, 254, 235, 73, 107, 0, 8, 207, 115, 0, 82, 127, 136, 0, 84, 99, 21, 254, 207, 19, 136, 0, 100, 164, 101, 0, 80, 208, 77, 255, 132, 207, 237, 255, 15, 3, 15, 255, 33, 166, 110, 0, 156, 95, 85, 255, 37, 185, 111, 1, 150, 106, 35, 255, 166, 151, 76, 0, 114, 87, 135, 255, 159, 194, 64, 0, 12, 122, 31, 255, 232, 7, 101, 254, 173, 119, 98, 0, 154, 71, 220, 254, 191, 57, 53, 255, 168, 232, 160, 255, 224, 32, 99, 255, 218, 156, 165, 0, 151, 153, 163, 0, 217, 13, 148, 1, 197, 113, 89, 0, 149, 28, 161, 254, 207, 23, 30, 0, 105, 132, 227, 255, 54, 230, 94, 255, 133, 173, 204, 255, 92, 183, 157, 255, 88, 144, 252, 254, 102, 33, 90, 0, 159, 97, 3, 0, 181, 218, 155, 255, 240, 114, 119, 0, 106, 214, 53, 255, 165, 190, 115, 1, 152, 91, 225, 255, 88, 106, 44, 255, 208, 61, 113, 0, 151, 52, 124, 0, 191, 27, 156, 255, 110, 54, 236, 1, 14, 30, 166, 255, 39, 127, 207, 1, 229, 199, 28, 0, 188, 228, 188, 254, 100, 157, 235, 0, 246, 218, 183, 1, 107, 22, 193, 255, 206, 160, 95, 0, 76, 239, 147, 0, 207, 161, 117, 0, 51, 166, 2, 255, 52, 117, 10, 254, 73, 56, 227, 255, 152, 193, 225, 0, 132, 94, 136, 255, 101, 191, 209, 0, 32, 107, 229, 255, 198, 43, 180, 1, 100, 210, 118, 0, 114, 67, 153, 255, 23, 88, 26, 255, 89, 154, 92, 1, 220, 120, 140, 255, 144, 114, 207, 255, 252, 115, 250, 255, 34, 206, 72, 0, 138, 133, 127, 255, 8, 178, 124, 1, 87, 75, 97, 0, 15, 229, 92, 254, 240, 67, 131, 255, 118, 123, 227, 254, 146, 120, 104, 255, 145, 213, 255, 1, 129, 187, 70, 255, 219, 119, 54, 0, 1, 19, 173, 0, 45, 150, 148, 1, 248, 83, 72, 0, 203, 233, 169, 1, 142, 107, 56, 0, 247, 249, 38, 1, 45, 242, 80, 255, 30, 233, 103, 0, 96, 82, 70, 0, 23, 201, 111, 0, 81, 39, 30, 255, 161, 183, 78, 255, 194, 234, 33, 255, 68, 227, 140, 254, 216, 206, 116, 0, 70, 27, 235, 255, 104, 144, 79, 0, 164, 230, 93, 254, 214, 135, 156, 0, 154, 187, 242, 254, 188, 20, 131, 255, 36, 109, 174, 0, 159, 112, 241, 0, 5, 110, 149, 1, 36, 165, 218, 0, 166, 29, 19, 1, 178, 46, 73, 0, 93, 43, 32, 254, 248, 189, 237, 0, 102, 155, 141, 0, 201, 93, 195, 255, 241, 139, 253, 255, 15, 111, 98, 255, 108, 65, 163, 254, 155, 79, 190, 255, 73, 174, 193, 254, 246, 40, 48, 255, 107, 88, 11, 254, 202, 97, 85, 255, 253, 204, 18, 255, 113, 242, 66, 0, 110, 160, 194, 254, 208, 18, 186, 0, 81, 21, 60, 0, 188, 104, 167, 255, 124, 166, 97, 254, 210, 133, 142, 0, 56, 242, 137, 254, 41, 111, 130, 0, 111, 151, 58, 1, 111, 213, 141, 255, 183, 172, 241, 255, 38, 6, 196, 255, 185, 7, 123, 255, 46, 11, 246, 0, 245, 105, 119, 1, 15, 2, 161, 255, 8, 206, 45, 255, 18, 202, 74, 255, 83, 124, 115, 1, 212, 141, 157, 0, 83, 8, 209, 254, 139, 15, 232, 255, 172, 54, 173, 254, 50, 247, 132, 0, 214, 189, 213, 0, 144, 184, 105, 0, 223, 254, 248, 0, 255, 147, 240, 255, 23, 188, 72, 0, 7, 51, 54, 0, 188, 25, 180, 254, 220, 180, 0, 255, 83, 160, 20, 0, 163, 189, 243, 255, 58, 209, 194, 255, 87, 73, 60, 0, 106, 24, 49, 0, 245, 249, 220, 0, 22, 173, 167, 0, 118, 11, 195, 255, 19, 126, 237, 0, 110, 159, 37, 255, 59, 82, 47, 0, 180, 187, 86, 0, 188, 148, 208, 1, 100, 37, 133, 255, 7, 112, 193, 0, 129, 188, 156, 255, 84, 106, 129, 255, 133, 225, 202, 0, 14, 236, 111, 255, 40, 20, 101, 0, 172, 172, 49, 254, 51, 54, 74, 255, 251, 185, 184, 255, 93, 155, 224, 255, 180, 249, 224, 1, 230, 178, 146, 0, 72, 57, 54, 254, 178, 62, 184, 0, 119, 205, 72, 0, 185, 239, 253, 255, 61, 15, 218, 0, 196, 67, 56, 255, 234, 32, 171, 1, 46, 219, 228, 0, 208, 108, 234, 255, 20, 63, 232, 255, 165, 53, 199, 1, 133, 228, 5, 255, 52, 205, 107, 0, 74, 238, 140, 255, 150, 156, 219, 254, 239, 172, 178, 255, 251, 189, 223, 254, 32, 142, 211, 255, 218, 15, 138, 1, 241, 196, 80, 0, 28, 36, 98, 254, 22, 234, 199, 0, 61, 237, 220, 255, 246, 57, 37, 0, 142, 17, 142, 255, 157, 62, 26, 0, 43, 238, 95, 254, 3, 217, 6, 255, 213, 25, 240, 1, 39, 220, 174, 255, 154, 205, 48, 254, 19, 13, 192, 255, 244, 34, 54, 254, 140, 16, 155, 0, 240, 181, 5, 254, 155, 193, 60, 0, 166, 128, 4, 255, 36, 145, 56, 255, 150, 240, 219, 0, 120, 51, 145, 0, 82, 153, 42, 1, 140, 236, 146, 0, 107, 92, 248, 1, 189, 10, 3, 0, 63, 136, 242, 0, 211, 39, 24, 0, 19, 202, 161, 1, 173, 27, 186, 255, 210, 204, 239, 254, 41, 209, 162, 255, 182, 254, 159, 255, 172, 116, 52, 0, 195, 103, 222, 254, 205, 69, 59, 0, 53, 22, 41, 1, 218, 48, 194, 0, 80, 210, 242, 0, 210, 188, 207, 0, 187, 161, 161, 254, 216, 17, 1, 0, 136, 225, 113, 0, 250, 184, 63, 0, 223, 30, 98, 254, 77, 168, 162, 0, 59, 53, 175, 0, 19, 201, 10, 255, 139, 224, 194, 0, 147, 193, 154, 255, 212, 189, 12, 254, 1, 200, 174, 255, 50, 133, 113, 1, 94, 179, 90, 0, 173, 182, 135, 0, 94, 177, 113, 0, 43, 89, 215, 255, 136, 252, 106, 255, 123, 134, 83, 254, 5, 245, 66, 255, 82, 49, 39, 1, 220, 2, 224, 0, 97, 129, 177, 0, 77, 59, 89, 0, 61, 29, 155, 1, 203, 171, 220, 255, 92, 78, 139, 0, 145, 33, 181, 255, 169, 24, 141, 1, 55, 150, 179, 0, 139, 60, 80, 255, 218, 39, 97, 0, 2, 147, 107, 255, 60, 248, 72, 0, 173, 230, 47, 1, 6, 83, 182, 255, 16, 105, 162, 254, 137, 212, 81, 255, 180, 184, 134, 1, 39, 222, 164, 255, 221, 105, 251, 1, 239, 112, 125, 0, 63, 7, 97, 0, 63, 104, 227, 255, 148, 58, 12, 0, 90, 60, 224, 255, 84, 212, 252, 0, 79, 215, 168, 0, 248, 221, 199, 1, 115, 121, 1, 0, 36, 172, 120, 0, 32, 162, 187, 255, 57, 107, 49, 255, 147, 42, 21, 0, 106, 198, 43, 1, 57, 74, 87, 0, 126, 203, 81, 255, 129, 135, 195, 0, 140, 31, 177, 0, 221, 139, 194, 0, 3, 222, 215, 0, 131, 68, 231, 0, 177, 86, 178, 254, 124, 151, 180, 0, 184, 124, 38, 1, 70, 163, 17, 0, 249, 251, 181, 1, 42, 55, 227, 0, 226, 161, 44, 0, 23, 236, 110, 0, 51, 149, 142, 1, 93, 5, 236, 0, 218, 183, 106, 254, 67, 24, 77, 0, 40, 245, 209, 255, 222, 121, 153, 0, 165, 57, 30, 0, 83, 125, 60, 0, 70, 38, 82, 1, 229, 6, 188, 0, 109, 222, 157, 255, 55, 118, 63, 255, 205, 151, 186, 0, 227, 33, 149, 255, 254, 176, 246, 1, 227, 177, 227, 0, 34, 106, 163, 254, 176, 43, 79, 0, 106, 95, 78, 1, 185, 241, 122, 255, 185, 14, 61, 0, 36, 1, 202, 0, 13, 178, 162, 255, 247, 11, 132, 0, 161, 230, 92, 1, 65, 1, 185, 255, 212, 50, 165, 1, 141, 146, 64, 255, 158, 242, 218, 0, 21, 164, 125, 0, 213, 139, 122, 1, 67, 71, 87, 0, 203, 158, 178, 1, 151, 92, 43, 0, 152, 111, 5, 255, 39, 3, 239, 255, 217, 255, 250, 255, 176, 63, 71, 255, 74, 245, 77, 1, 250, 174, 18, 255, 34, 49, 227, 255, 246, 46, 251, 255, 154, 35, 48, 1, 125, 157, 61, 255, 106, 36, 78, 255, 97, 236, 153, 0, 136, 187, 120, 255, 113, 134, 171, 255, 19, 213, 217, 254, 216, 94, 209, 255, 252, 5, 61, 0, 94, 3, 202, 0, 3, 26, 183, 255, 64, 191, 43, 255, 30, 23, 21, 0, 129, 141, 77, 255, 102, 120, 7, 1, 194, 76, 140, 0, 188, 175, 52, 255, 17, 81, 148, 0, 232, 86, 55, 1, 225, 48, 172, 0, 134, 42, 42, 255, 238, 50, 47, 0, 169, 18, 254, 0, 20, 147, 87, 255, 14, 195, 239, 255, 69, 247, 23, 0, 238, 229, 128, 255, 177, 49, 112, 0, 168, 98, 251, 255, 121, 71, 248, 0, 243, 8, 145, 254, 246, 227, 153, 255, 219, 169, 177, 254, 251, 139, 165, 255, 12, 163, 185, 255, 164, 40, 171, 255, 153, 159, 27, 254, 243, 109, 91, 255, 222, 24, 112, 1, 18, 214, 231, 0, 107, 157, 181, 254, 195, 147, 0, 255, 194, 99, 104, 255, 89, 140, 190, 255, 177, 66, 126, 254, 106, 185, 66, 0, 49, 218, 31, 0, 252, 174, 158, 0, 188, 79, 230, 1, 238, 41, 224, 0, 212, 234, 8, 1, 136, 11, 181, 0, 166, 117, 83, 255, 68, 195, 94, 0, 46, 132, 201, 0, 240, 152, 88, 0, 164, 57, 69, 254, 160, 224, 42, 255, 59, 215, 67, 255, 119, 195, 141, 255, 36, 180, 121, 254, 207, 47, 8, 255, 174, 210, 223, 0, 101, 197, 68, 255, 255, 82, 141, 1, 250, 137, 233, 0, 97, 86, 133, 1, 16, 80, 69, 0, 132, 131, 159, 0, 116, 93, 100, 0, 45, 141, 139, 0, 152, 172, 157, 255, 90, 43, 91, 0, 71, 153, 46, 0, 39, 16, 112, 255, 217, 136, 97, 255, 220, 198, 25, 254, 177, 53, 49, 0, 222, 88, 134, 255, 128, 15, 60, 0, 207, 192, 169, 255, 192, 116, 209, 255, 106, 78, 211, 1, 200, 213, 183, 255, 7, 12, 122, 254, 222, 203, 60, 255, 33, 110, 199, 254, 251, 106, 117, 0, 228, 225, 4, 1, 120, 58, 7, 255, 221, 193, 84, 254, 112, 133, 27, 0, 189, 200, 201, 255, 139, 135, 150, 0, 234, 55, 176, 255, 61, 50, 65, 0, 152, 108, 169, 255, 220, 85, 1, 255, 112, 135, 227, 0, 162, 26, 186, 0, 207, 96, 185, 254, 244, 136, 107, 0, 93, 153, 50, 1, 198, 97, 151, 0, 110, 11, 86, 255, 143, 117, 174, 255, 115, 212, 200, 0, 5, 202, 183, 0, 237, 164, 10, 254, 185, 239, 62, 0, 236, 120, 18, 254, 98, 123, 99, 255, 168, 201, 194, 254, 46, 234, 214, 0, 191, 133, 49, 255, 99, 169, 119, 0, 190, 187, 35, 1, 115, 21, 45, 255, 249, 131, 72, 0, 112, 6, 123, 255, 214, 49, 181, 254, 166, 233, 34, 0, 92, 197, 102, 254, 253, 228, 205, 255, 3, 59, 201, 1, 42, 98, 46, 0, 219, 37, 35, 255, 169, 195, 38, 0, 94, 124, 193, 1, 156, 43, 223, 0, 95, 72, 133, 254, 120, 206, 191, 0, 122, 197, 239, 255, 177, 187, 79, 255, 254, 46, 2, 1, 250, 167, 190, 0, 84, 129, 19, 0, 203, 113, 166, 255, 249, 31, 189, 254, 72, 157, 202, 255, 208, 71, 73, 255, 207, 24, 72, 0, 10, 16, 18, 1, 210, 81, 76, 255, 88, 208, 192, 255, 126, 243, 107, 255, 238, 141, 120, 255, 199, 121, 234, 255, 137, 12, 59, 255, 36, 220, 123, 255, 148, 179, 60, 254, 240, 12, 29, 0, 66, 0, 97, 1, 36, 30, 38, 255, 115, 1, 93, 255, 96, 103, 231, 255, 197, 158, 59, 1, 192, 164, 240, 0, 202, 202, 57, 255, 24, 174, 48, 0, 89, 77, 155, 1, 42, 76, 215, 0, 244, 151, 233, 0, 23, 48, 81, 0, 239, 127, 52, 254, 227, 130, 37, 255, 248, 116, 93, 1, 124, 132, 118, 0, 173, 254, 192, 1, 6, 235, 83, 255, 110, 175, 231, 1, 251, 28, 182, 0, 129, 249, 93, 254, 84, 184, 128, 0, 76, 181, 62, 0, 175, 128, 186, 0, 100, 53, 136, 254, 109, 29, 226, 0, 221, 233, 58, 1, 20, 99, 74, 0, 0, 22, 160, 0, 134, 13, 21, 0, 9, 52, 55, 255, 17, 89, 140, 0, 175, 34, 59, 0, 84, 165, 119, 255, 224, 226, 234, 255, 7, 72, 166, 255, 123, 115, 255, 1, 18, 214, 246, 0, 250, 7, 71, 1, 217, 220, 185, 0, 212, 35, 76, 255, 38, 125, 175, 0, 189, 97, 210, 0, 114, 238, 44, 255, 41, 188, 169, 254, 45, 186, 154, 0, 81, 92, 22, 0, 132, 160, 193, 0, 121, 208, 98, 255, 13, 81, 44, 255, 203, 156, 82, 0, 71, 58, 21, 255, 208, 114, 191, 254, 50, 38, 147, 0, 154, 216, 195, 0, 101, 25, 18, 0, 60, 250, 215, 255, 233, 132, 235, 255, 103, 175, 142, 1, 16, 14, 92, 0, 141, 31, 110, 254, 238, 241, 45, 255, 153, 217, 239, 1, 97, 168, 47, 255, 249, 85, 16, 1, 28, 175, 62, 255, 57, 254, 54, 0, 222, 231, 126, 0, 166, 45, 117, 254, 18, 189, 96, 255, 228, 76, 50, 0, 200, 244, 94, 0, 198, 152, 120, 1, 68, 34, 69, 255, 12, 65, 160, 254, 101, 19, 90, 0, 167, 197, 120, 255, 68, 54, 185, 255, 41, 218, 188, 0, 113, 168, 48, 0, 88, 105, 189, 1, 26, 82, 32, 255, 185, 93, 164, 1, 228, 240, 237, 255, 66, 182, 53, 0, 171, 197, 92, 255, 107, 9, 233, 1, 199, 120, 144, 255, 78, 49, 10, 255, 109, 170, 105, 255, 90, 4, 31, 255, 28, 244, 113, 255, 74, 58, 11, 0, 62, 220, 246, 255, 121, 154, 200, 254, 144, 210, 178, 255, 126, 57, 129, 1, 43, 250, 14, 255, 101, 111, 28, 1, 47, 86, 241, 255, 61, 70, 150, 255, 53, 73, 5, 255, 30, 26, 158, 0, 209, 26, 86, 0, 138, 237, 74, 0, 164, 95, 188, 0, 142, 60, 29, 254, 162, 116, 248, 255, 187, 175, 160, 0, 151, 18, 16, 0, 209, 111, 65, 254, 203, 134, 39, 255, 88, 108, 49, 255, 131, 26, 71, 255, 221, 27, 215, 254, 104, 105, 93, 255, 31, 236, 31, 254, 135, 0, 211, 255, 143, 127, 110, 1, 212, 73, 229, 0, 233, 67, 167, 254, 195, 1, 208, 255, 132, 17, 221, 255, 51, 217, 90, 0, 67, 235, 50, 255, 223, 210, 143, 0, 179, 53, 130, 1, 233, 106, 198, 0, 217, 173, 220, 255, 112, 229, 24, 255, 175, 154, 93, 254, 71, 203, 246, 255, 48, 66, 133, 255, 3, 136, 230, 255, 23, 221, 113, 254, 235, 111, 213, 0, 170, 120, 95, 254, 251, 221, 2, 0, 45, 130, 158, 254, 105, 94, 217, 255, 242, 52, 180, 254, 213, 68, 45, 255, 104, 38, 28, 0, 244, 158, 76, 0, 161, 200, 96, 255, 207, 53, 13, 255, 187, 67, 148, 0, 170, 54, 248, 0, 119, 162, 178, 255, 83, 20, 11, 0, 42, 42, 192, 1, 146, 159, 163, 255, 183, 232, 111, 0, 77, 229, 21, 255, 71, 53, 143, 0, 27, 76, 34, 0, 246, 136, 47, 255, 219, 39, 182, 255, 92, 224, 201, 1, 19, 142, 14, 255, 69, 182, 241, 255, 163, 118, 245, 0, 9, 109, 106, 1, 170, 181, 247, 255, 78, 47, 238, 255, 84, 210, 176, 255, 213, 107, 139, 0, 39, 38, 11, 0, 72, 21, 150, 0, 72, 130, 69, 0, 205, 77, 155, 254, 142, 133, 21, 0, 71, 111, 172, 254, 226, 42, 59, 255, 179, 0, 215, 1, 33, 128, 241, 0, 234, 252, 13, 1, 184, 79, 8, 0, 110, 30, 73, 255, 246, 141, 189, 0, 170, 207, 218, 1, 74, 154, 69, 255, 138, 246, 49, 255, 155, 32, 100, 0, 125, 74, 105, 255, 90, 85, 61, 255, 35, 229, 177, 255, 62, 125, 193, 255, 153, 86, 188, 1, 73, 120, 212, 0, 209, 123, 246, 254, 135, 209, 38, 255, 151, 58, 44, 1, 92, 69, 214, 255, 14, 12, 88, 255, 252, 153, 166, 255, 253, 207, 112, 255, 60, 78, 83, 255, 227, 124, 110, 0, 180, 96, 252, 255, 53, 117, 33, 254, 164, 220, 82, 255, 41, 1, 27, 255, 38, 164, 166, 255, 164, 99, 169, 254, 61, 144, 70, 255, 192, 166, 18, 0, 107, 250, 66, 0, 197, 65, 50, 0, 1, 179, 18, 255, 255, 104, 1, 255, 43, 153, 35, 255, 80, 111, 168, 0, 110, 175, 168, 0, 41, 105, 45, 255, 219, 14, 205, 255, 164, 233, 140, 254, 43, 1, 118, 0, 233, 67, 195, 0, 178, 82, 159, 255, 138, 87, 122, 255, 212, 238, 90, 255, 144, 35, 124, 254, 25, 140, 164, 0, 251, 215, 44, 254, 133, 70, 107, 255, 101, 227, 80, 254, 92, 169, 55, 0, 215, 42, 49, 0, 114, 180, 85, 255, 33, 232, 27, 1, 172, 213, 25, 0, 62, 176, 123, 254, 32, 133, 24, 255, 225, 191, 62, 0, 93, 70, 153, 0, 181, 42, 104, 1, 22, 191, 224, 255, 200, 200, 140, 255, 249, 234, 37, 0, 149, 57, 141, 0, 195, 56, 208, 255, 254, 130, 70, 255, 32, 173, 240, 255, 29, 220, 199, 0, 110, 100, 115, 255, 132, 229, 249, 0, 228, 233, 223, 255, 37, 216, 209, 254, 178, 177, 209, 255, 183, 45, 165, 254, 224, 97, 114, 0, 137, 97, 168, 255, 225, 222, 172, 0, 165, 13, 49, 1, 210, 235, 204, 255, 252, 4, 28, 254, 70, 160, 151, 0, 232, 190, 52, 254, 83, 248, 93, 255, 62, 215, 77, 1, 175, 175, 179, 255, 160, 50, 66, 0, 121, 48, 208, 0, 63, 169, 209, 255, 0, 210, 200, 0, 224, 187, 44, 1, 73, 162, 82, 0, 9, 176, 143, 255, 19, 76, 193, 255, 29, 59, 167, 1, 24, 43, 154, 0, 28, 190, 190, 0, 141, 188, 129, 0, 232, 235, 203, 255, 234, 0, 109, 255, 54, 65, 159, 0, 60, 88, 232, 255, 121, 253, 150, 254, 252, 233, 131, 255, 198, 110, 41, 1, 83, 77, 71, 255, 200, 22, 59, 254, 106, 253, 242, 255, 21, 12, 207, 255, 237, 66, 189, 0, 90, 198, 202, 1, 225, 172, 127, 0, 53, 22, 202, 0, 56, 230, 132, 0, 1, 86, 183, 0, 109, 190, 42, 0, 243, 68, 174, 1, 109, 228, 154, 0, 200, 177, 122, 1, 35, 160, 183, 255, 177, 48, 85, 255, 90, 218, 169, 255, 248, 152, 78, 0, 202, 254, 110, 0, 6, 52, 43, 0, 142, 98, 65, 255, 63, 145, 22, 0, 70, 106, 93, 0, 232, 138, 107, 1, 110, 179, 61, 255, 211, 129, 218, 1, 242, 209, 92, 0, 35, 90, 217, 1, 182, 143, 106, 255, 116, 101, 217, 255, 114, 250, 221, 255, 173, 204, 6, 0, 60, 150, 163, 0, 73, 172, 44, 255, 239, 110, 80, 255, 237, 76, 153, 254, 161, 140, 249, 0, 149, 232, 229, 0, 133, 31, 40, 255, 174, 164, 119, 0, 113, 51, 214, 0, 129, 228, 2, 254, 64, 34, 243, 0, 107, 227, 244, 255, 174, 106, 200, 255, 84, 153, 70, 1, 50, 35, 16, 0, 250, 74, 216, 254, 236, 189, 66, 255, 153, 249, 13, 0, 230, 178, 4, 255, 221, 41, 238, 0, 118, 227, 121, 255, 94, 87, 140, 254, 254, 119, 92, 0, 73, 239, 246, 254, 117, 87, 128, 0, 19, 211, 145, 255, 177, 46, 252, 0, 229, 91, 246, 1, 69, 128, 247, 255, 202, 77, 54, 1, 8, 11, 9, 255, 153, 96, 166, 0, 217, 214, 173, 255, 134, 192, 2, 1, 0, 207, 0, 0, 189, 174, 107, 1, 140, 134, 100, 0, 158, 193, 243, 1, 182, 102, 171, 0, 235, 154, 51, 0, 142, 5, 123, 255, 60, 168, 89, 1, 217, 14, 92, 255, 19, 214, 5, 1, 211, 167, 254, 0, 44, 6, 202, 254, 120, 18, 236, 255, 15, 113, 184, 255, 184, 223, 139], 'i8', ALLOC_NONE, Runtime.GLOBAL_BASE)
allocate([40, 177, 119, 254, 182, 123, 90, 255, 176, 165, 176, 0, 247, 77, 194, 0, 27, 234, 120, 0, 231, 0, 214, 255, 59, 39, 30, 0, 125, 99, 145, 255, 150, 68, 68, 1, 141, 222, 248, 0, 153, 123, 210, 255, 110, 127, 152, 255, 229, 33, 214, 1, 135, 221, 197, 0, 137, 97, 2, 0, 12, 143, 204, 255, 81, 41, 188, 0, 115, 79, 130, 255, 94, 3, 132, 0, 152, 175, 187, 255, 124, 141, 10, 255, 126, 192, 179, 255, 11, 103, 198, 0, 149, 6, 45, 0, 219, 85, 187, 1, 230, 18, 178, 255, 72, 182, 152, 0, 3, 198, 184, 255, 128, 112, 224, 1, 97, 161, 230, 0, 254, 99, 38, 255, 58, 159, 197, 0, 151, 66, 219, 0, 59, 69, 143, 255, 185, 112, 249, 0, 119, 136, 47, 255, 123, 130, 132, 0, 168, 71, 95, 255, 113, 176, 40, 1, 232, 185, 173, 0, 207, 93, 117, 1, 68, 157, 108, 255, 102, 5, 147, 254, 49, 97, 33, 0, 89, 65, 111, 254, 247, 30, 163, 255, 124, 217, 221, 1, 102, 250, 216, 0, 198, 174, 75, 254, 57, 55, 18, 0, 227, 5, 236, 1, 229, 213, 173, 0, 201, 109, 218, 1, 49, 233, 239, 0, 30, 55, 158, 1, 25, 178, 106, 0, 155, 111, 188, 1, 94, 126, 140, 0, 215, 31, 238, 1, 77, 240, 16, 0, 213, 242, 25, 1, 38, 71, 168, 0, 205, 186, 93, 254, 49, 211, 140, 255, 219, 0, 180, 255, 134, 118, 165, 0, 160, 147, 134, 255, 110, 186, 35, 255, 198, 243, 42, 0, 243, 146, 119, 0, 134, 235, 163, 1, 4, 241, 135, 255, 193, 46, 193, 254, 103, 180, 79, 255, 225, 4, 184, 254, 242, 118, 130, 0, 146, 135, 176, 1, 234, 111, 30, 0, 69, 66, 213, 254, 41, 96, 123, 0, 121, 94, 42, 255, 178, 191, 195, 255, 46, 130, 42, 0, 117, 84, 8, 255, 233, 49, 214, 254, 238, 122, 109, 0, 6, 71, 89, 1, 236, 211, 123, 0, 244, 13, 48, 254, 119, 148, 14, 0, 114, 28, 86, 255, 75, 237, 25, 255, 145, 229, 16, 254, 129, 100, 53, 255, 134, 150, 120, 254, 168, 157, 50, 0, 23, 72, 104, 255, 224, 49, 14, 0, 255, 123, 22, 255, 151, 185, 151, 255, 170, 80, 184, 1, 134, 182, 20, 0, 41, 100, 101, 1, 153, 33, 16, 0, 76, 154, 111, 1, 86, 206, 234, 255, 192, 160, 164, 254, 165, 123, 93, 255, 1, 216, 164, 254, 67, 17, 175, 255, 169, 11, 59, 255, 158, 41, 61, 255, 73, 188, 14, 255, 195, 6, 137, 255, 22, 147, 29, 255, 20, 103, 3, 255, 246, 130, 227, 255, 122, 40, 128, 0, 226, 47, 24, 254, 35, 36, 32, 0, 152, 186, 183, 255, 69, 202, 20, 0, 195, 133, 195, 0, 222, 51, 247, 0, 169, 171, 94, 1, 183, 0, 160, 255, 64, 205, 18, 1, 156, 83, 15, 255, 197, 58, 249, 254, 251, 89, 110, 255, 50, 10, 88, 254, 51, 43, 216, 0, 98, 242, 198, 1, 245, 151, 113, 0, 171, 236, 194, 1, 197, 31, 199, 255, 229, 81, 38, 1, 41, 59, 20, 0, 253, 104, 230, 0, 152, 93, 14, 255, 246, 242, 146, 254, 214, 169, 240, 255, 240, 102, 108, 254, 160, 167, 236, 0, 154, 218, 188, 0, 150, 233, 202, 255, 27, 19, 250, 1, 2, 71, 133, 255, 175, 12, 63, 1, 145, 183, 198, 0, 104, 120, 115, 255, 130, 251, 247, 0, 17, 212, 167, 255, 62, 123, 132, 255, 247, 100, 189, 0, 155, 223, 152, 0, 143, 197, 33, 0, 155, 59, 44, 255, 150, 93, 240, 1, 127, 3, 87, 255, 95, 71, 207, 1, 167, 85, 1, 255, 188, 152, 116, 255, 10, 23, 23, 0, 137, 195, 93, 1, 54, 98, 97, 0, 240, 0, 168, 255, 148, 188, 127, 0, 134, 107, 151, 0, 76, 253, 171, 0, 90, 132, 192, 0, 146, 22, 54, 0, 224, 66, 54, 254, 230, 186, 229, 255, 39, 182, 196, 0, 148, 251, 130, 255, 65, 131, 108, 254, 128, 1, 160, 0, 169, 49, 167, 254, 199, 254, 148, 255, 251, 6, 131, 0, 187, 254, 129, 255, 85, 82, 62, 0, 178, 23, 58, 255, 254, 132, 5, 0, 164, 213, 39, 0, 134, 252, 146, 254, 37, 53, 81, 255, 155, 134, 82, 0, 205, 167, 238, 255, 94, 45, 180, 255, 132, 40, 161, 0, 254, 111, 112, 1, 54, 75, 217, 0, 179, 230, 221, 1, 235, 94, 191, 255, 23, 243, 48, 1, 202, 145, 203, 255, 39, 118, 42, 255, 117, 141, 253, 0, 254, 0, 222, 0, 43, 251, 50, 0, 54, 169, 234, 1, 80, 68, 208, 0, 148, 203, 243, 254, 145, 7, 135, 0, 6, 254, 0, 0, 252, 185, 127, 0, 98, 8, 129, 255, 38, 35, 72, 255, 211, 36, 220, 1, 40, 26, 89, 0, 168, 64, 197, 254, 3, 222, 239, 255, 2, 83, 215, 254, 180, 159, 105, 0, 58, 115, 194, 0, 186, 116, 106, 255, 229, 247, 219, 255, 129, 118, 193, 0, 202, 174, 183, 1, 166, 161, 72, 0, 201, 107, 147, 254, 237, 136, 74, 0, 233, 230, 106, 1, 105, 111, 168, 0, 64, 224, 30, 1, 1, 229, 3, 0, 102, 151, 175, 255, 194, 238, 228, 255, 254, 250, 212, 0, 187, 237, 121, 0, 67, 251, 96, 1, 197, 30, 11, 0, 183, 95, 204, 0, 205, 89, 138, 0, 64, 221, 37, 1, 255, 223, 30, 255, 178, 48, 211, 255, 241, 200, 90, 255, 167, 209, 96, 255, 57, 130, 221, 0, 46, 114, 200, 255, 61, 184, 66, 0, 55, 182, 24, 254, 110, 182, 33, 0, 171, 190, 232, 255, 114, 94, 31, 0, 18, 221, 8, 0, 47, 231, 254, 0, 255, 112, 83, 0, 118, 15, 215, 255, 173, 25, 40, 254, 192, 193, 31, 255, 238, 21, 146, 255, 171, 193, 118, 255, 101, 234, 53, 254, 131, 212, 112, 0, 89, 192, 107, 1, 8, 208, 27, 0, 181, 217, 15, 255, 231, 149, 232, 0, 140, 236, 126, 0, 144, 9, 199, 255, 12, 79, 181, 254, 147, 182, 202, 255, 19, 109, 182, 255, 49, 212, 225, 0, 74, 163, 203, 0, 175, 233, 148, 0, 26, 112, 51, 0, 193, 193, 9, 255, 15, 135, 249, 0, 150, 227, 130, 0, 204, 0, 219, 1, 24, 242, 205, 0, 238, 208, 117, 255, 22, 244, 112, 0, 26, 229, 34, 0, 37, 80, 188, 255, 38, 45, 206, 254, 240, 90, 225, 255, 29, 3, 47, 255, 42, 224, 76, 0, 186, 243, 167, 0, 32, 132, 15, 255, 5, 51, 125, 0, 139, 135, 24, 0, 6, 241, 219, 0, 172, 229, 133, 255, 246, 214, 50, 0, 231, 11, 207, 255, 191, 126, 83, 1, 180, 163, 170, 255, 245, 56, 24, 1, 178, 164, 211, 255, 3, 16, 202, 1, 98, 57, 118, 255, 141, 131, 89, 254, 33, 51, 24, 0, 243, 149, 91, 255, 253, 52, 14, 0, 35, 169, 67, 254, 49, 30, 88, 255, 179, 27, 36, 255, 165, 140, 183, 0, 58, 189, 151, 0, 88, 31, 0, 0, 75, 169, 66, 0, 66, 101, 199, 255, 24, 216, 199, 1, 121, 196, 26, 255, 14, 79, 203, 254, 240, 226, 81, 255, 94, 28, 10, 255, 83, 193, 240, 255, 204, 193, 131, 255, 94, 15, 86, 0, 218, 40, 157, 0, 51, 193, 209, 0, 0, 242, 177, 0, 102, 185, 247, 0, 158, 109, 116, 0, 38, 135, 91, 0, 223, 175, 149, 0, 220, 66, 1, 255, 86, 60, 232, 0, 25, 96, 37, 255, 225, 122, 162, 1, 215, 187, 168, 255, 158, 157, 46, 0, 56, 171, 162, 0, 232, 240, 101, 1, 122, 22, 9, 0, 51, 9, 21, 255, 53, 25, 238, 255, 217, 30, 232, 254, 125, 169, 148, 0, 13, 232, 102, 0, 148, 9, 37, 0, 165, 97, 141, 1, 228, 131, 41, 0, 222, 15, 243, 255, 254, 18, 17, 0, 6, 60, 237, 1, 106, 3, 113, 0, 59, 132, 189, 0, 92, 112, 30, 0, 105, 208, 213, 0, 48, 84, 179, 255, 187, 121, 231, 254, 27, 216, 109, 255, 162, 221, 107, 254, 73, 239, 195, 255, 250, 31, 57, 255, 149, 135, 89, 255, 185, 23, 115, 1, 3, 163, 157, 255, 18, 112, 250, 0, 25, 57, 187, 255, 161, 96, 164, 0, 47, 16, 243, 0, 12, 141, 251, 254, 67, 234, 184, 255, 41, 18, 161, 0, 175, 6, 96, 255, 160, 172, 52, 254, 24, 176, 183, 255, 198, 193, 85, 1, 124, 121, 137, 255, 151, 50, 114, 255, 220, 203, 60, 255, 207, 239, 5, 1, 0, 38, 107, 255, 55, 238, 94, 254, 70, 152, 94, 0, 213, 220, 77, 1, 120, 17, 69, 255, 85, 164, 190, 255, 203, 234, 81, 0, 38, 49, 37, 254, 61, 144, 124, 0, 137, 78, 49, 254, 168, 247, 48, 0, 95, 164, 252, 0, 105, 169, 135, 0, 253, 228, 134, 0, 64, 166, 75, 0, 81, 73, 20, 255, 207, 210, 10, 0, 234, 106, 150, 255, 94, 34, 90, 255, 254, 159, 57, 254, 220, 133, 99, 0, 139, 147, 180, 254, 24, 23, 185, 0, 41, 57, 30, 255, 189, 97, 76, 0, 65, 187, 223, 255, 224, 172, 37, 255, 34, 62, 95, 1, 231, 144, 240, 0, 77, 106, 126, 254, 64, 152, 91, 0, 29, 98, 155, 0, 226, 251, 53, 255, 234, 211, 5, 255, 144, 203, 222, 255, 164, 176, 221, 254, 5, 231, 24, 0, 179, 122, 205, 0, 36, 1, 134, 255, 125, 70, 151, 254, 97, 228, 252, 0, 172, 129, 23, 254, 48, 90, 209, 255, 150, 224, 82, 1, 84, 134, 30, 0, 241, 196, 46, 0, 103, 113, 234, 255, 46, 101, 121, 254, 40, 124, 250, 255, 135, 45, 242, 254, 9, 249, 168, 255, 140, 108, 131, 255, 143, 163, 171, 0, 50, 173, 199, 255, 88, 222, 142, 255, 200, 95, 158, 0, 142, 192, 163, 255, 7, 117, 135, 0, 111, 124, 22, 0, 236, 12, 65, 254, 68, 38, 65, 255, 227, 174, 254, 0, 244, 245, 38, 0, 240, 50, 208, 255, 161, 63, 250, 0, 60, 209, 239, 0, 122, 35, 19, 0, 14, 33, 230, 254, 2, 159, 113, 0, 106, 20, 127, 255, 228, 205, 96, 0, 137, 210, 174, 254, 180, 212, 144, 255, 89, 98, 154, 1, 34, 88, 139, 0, 167, 162, 112, 1, 65, 110, 197, 0, 241, 37, 169, 0, 66, 56, 131, 255, 10, 201, 83, 254, 133, 253, 187, 255, 177, 112, 45, 254, 196, 251, 0, 0, 196, 250, 151, 255, 238, 232, 214, 255, 150, 209, 205, 0, 28, 240, 118, 0, 71, 76, 83, 1, 236, 99, 91, 0, 42, 250, 131, 1, 96, 18, 64, 255, 118, 222, 35, 0, 113, 214, 203, 255, 122, 119, 184, 255, 66, 19, 36, 0, 204, 64, 249, 0, 146, 89, 139, 0, 134, 62, 135, 1, 104, 233, 101, 0, 188, 84, 26, 0, 49, 249, 129, 0, 208, 214, 75, 255, 207, 130, 77, 255, 115, 175, 235, 0, 171, 2, 137, 255, 175, 145, 186, 1, 55, 245, 135, 255, 154, 86, 181, 1, 100, 58, 246, 255, 109, 199, 60, 255, 82, 204, 134, 255, 215, 49, 230, 1, 140, 229, 192, 255, 222, 193, 251, 255, 81, 136, 15, 255, 179, 149, 162, 255, 23, 39, 29, 255, 7, 95, 75, 254, 191, 81, 222, 0, 241, 81, 90, 255, 107, 49, 201, 255, 244, 211, 157, 0, 222, 140, 149, 255, 65, 219, 56, 254, 189, 246, 90, 255, 178, 59, 157, 1, 48, 219, 52, 0, 98, 34, 215, 0, 28, 17, 187, 255, 175, 169, 24, 0, 92, 79, 161, 255, 236, 200, 194, 1, 147, 143, 234, 0, 229, 225, 7, 1, 197, 168, 14, 0, 235, 51, 53, 1, 253, 120, 174, 0, 197, 6, 168, 255, 202, 117, 171, 0, 163, 21, 206, 0, 114, 85, 90, 255, 15, 41, 10, 255, 194, 19, 99, 0, 65, 55, 216, 254, 162, 146, 116, 0, 50, 206, 212, 255, 64, 146, 29, 255, 158, 158, 131, 1, 100, 165, 130, 255, 172, 23, 129, 255, 125, 53, 9, 255, 15, 193, 18, 1, 26, 49, 11, 255, 181, 174, 201, 1, 135, 201, 14, 255, 100, 19, 149, 0, 219, 98, 79, 0, 42, 99, 143, 254, 96, 0, 48, 255, 197, 249, 83, 254, 104, 149, 79, 255, 235, 110, 136, 254, 82, 128, 44, 255, 65, 41, 36, 254, 88, 211, 10, 0, 187, 121, 187, 0, 98, 134, 199, 0, 171, 188, 179, 254, 210, 11, 238, 255, 66, 123, 130, 254, 52, 234, 61, 0, 48, 113, 23, 254, 6, 86, 120, 255, 119, 178, 245, 0, 87, 129, 201, 0, 242, 141, 209, 0, 202, 114, 85, 0, 148, 22, 161, 0, 103, 195, 48, 0, 25, 49, 171, 255, 138, 67, 130, 0, 182, 73, 122, 254, 148, 24, 130, 0, 211, 229, 154, 0, 32, 155, 158, 0, 84, 105, 61, 0, 177, 194, 9, 255, 166, 89, 86, 1, 54, 83, 187, 0, 249, 40, 117, 255, 109, 3, 215, 255, 53, 146, 44, 1, 63, 47, 179, 0, 194, 216, 3, 254, 14, 84, 136, 0, 136, 177, 13, 255, 72, 243, 186, 255, 117, 17, 125, 255, 211, 58, 211, 255, 93, 79, 223, 0, 90, 88, 245, 255, 139, 209, 111, 255, 70, 222, 47, 0, 10, 246, 79, 255, 198, 217, 178, 0, 227, 225, 11, 1, 78, 126, 179, 255, 62, 43, 126, 0, 103, 148, 35, 0, 129, 8, 165, 254, 245, 240, 148, 0, 61, 51, 142, 0, 81, 208, 134, 0, 15, 137, 115, 255, 211, 119, 236, 255, 159, 245, 248, 255, 2, 134, 136, 255, 230, 139, 58, 1, 160, 164, 254, 0, 114, 85, 141, 255, 49, 166, 182, 255, 144, 70, 84, 1, 85, 182, 7, 0, 46, 53, 93, 0, 9, 166, 161, 255, 55, 162, 178, 255, 45, 184, 188, 0, 146, 28, 44, 254, 169, 90, 49, 0, 120, 178, 241, 1, 14, 123, 127, 255, 7, 241, 199, 1, 189, 66, 50, 255, 198, 143, 101, 254, 189, 243, 135, 255, 141, 24, 24, 254, 75, 97, 87, 0, 118, 251, 154, 1, 237, 54, 156, 0, 171, 146, 207, 255, 131, 196, 246, 255, 136, 64, 113, 1, 151, 232, 57, 0, 240, 218, 115, 0, 49, 61, 27, 255, 64, 129, 73, 1, 252, 169, 27, 255, 40, 132, 10, 1, 90, 201, 193, 255, 252, 121, 240, 1, 186, 206, 41, 0, 43, 198, 97, 0, 145, 100, 183, 0, 204, 216, 80, 254, 172, 150, 65, 0, 249, 229, 196, 254, 104, 123, 73, 255, 77, 104, 96, 254, 130, 180, 8, 0, 104, 123, 57, 0, 220, 202, 229, 255, 102, 249, 211, 0, 86, 14, 232, 255, 182, 78, 209, 0, 239, 225, 164, 0, 106, 13, 32, 255, 120, 73, 17, 255, 134, 67, 233, 0, 83, 254, 181, 0, 183, 236, 112, 1, 48, 64, 131, 255, 241, 216, 243, 255, 65, 193, 226, 0, 206, 241, 100, 254, 100, 134, 166, 255, 237, 202, 197, 0, 55, 13, 81, 0, 32, 124, 102, 255, 40, 228, 177, 0, 118, 181, 31, 1, 231, 160, 134, 255, 119, 187, 202, 0, 0, 142, 60, 255, 128, 38, 189, 255, 166, 201, 150, 0, 207, 120, 26, 1, 54, 184, 172, 0, 12, 242, 204, 254, 133, 66, 230, 0, 34, 38, 31, 1, 184, 112, 80, 0, 32, 51, 165, 254, 191, 243, 55, 0, 58, 73, 146, 254, 155, 167, 205, 255, 100, 104, 152, 255, 197, 254, 207, 255, 173, 19, 247, 0, 238, 10, 202, 0, 239, 151, 242, 0, 94, 59, 39, 255, 240, 29, 102, 255, 10, 92, 154, 255, 229, 84, 219, 255, 161, 129, 80, 0, 208, 90, 204, 1, 240, 219, 174, 255, 158, 102, 145, 1, 53, 178, 76, 255, 52, 108, 168, 1, 83, 222, 107, 0, 211, 36, 109, 0, 118, 58, 56, 0, 8, 29, 22, 0, 237, 160, 199, 0, 170, 209, 157, 0, 137, 71, 47, 0, 143, 86, 32, 0, 198, 242, 2, 0, 212, 48, 136, 1, 92, 172, 186, 0, 230, 151, 105, 1, 96, 191, 229, 0, 138, 80, 191, 254, 240, 216, 130, 255, 98, 43, 6, 254, 168, 196, 49, 0, 253, 18, 91, 1, 144, 73, 121, 0, 61, 146, 39, 1, 63, 104, 24, 255, 184, 165, 112, 254, 126, 235, 98, 0, 80, 213, 98, 255, 123, 60, 87, 255, 82, 140, 245, 1, 223, 120, 173, 255, 15, 198, 134, 1, 206, 60, 239, 0, 231, 234, 92, 255, 33, 238, 19, 255, 165, 113, 142, 1, 176, 119, 38, 0, 160, 43, 166, 254, 239, 91, 105, 0, 107, 61, 194, 1, 25, 4, 68, 0, 15, 139, 51, 0, 164, 132, 106, 255, 34, 116, 46, 254, 168, 95, 197, 0, 137, 212, 23, 0, 72, 156, 58, 0, 137, 112, 69, 254, 150, 105, 154, 255, 236, 201, 157, 0, 23, 212, 154, 255, 136, 82, 227, 254, 226, 59, 221, 255, 95, 149, 192, 0, 81, 118, 52, 255, 33, 43, 215, 1, 14, 147, 75, 255, 89, 156, 121, 254, 14, 18, 79, 0, 147, 208, 139, 1, 151, 218, 62, 255, 156, 88, 8, 1, 210, 184, 98, 255, 20, 175, 123, 255, 102, 83, 229, 0, 220, 65, 116, 1, 150, 250, 4, 255, 92, 142, 220, 255, 34, 247, 66, 255, 204, 225, 179, 254, 151, 81, 151, 0, 71, 40, 236, 255, 138, 63, 62, 0, 6, 79, 240, 255, 183, 185, 181, 0, 118, 50, 27, 0, 63, 227, 192, 0, 123, 99, 58, 1, 50, 224, 155, 255, 17, 225, 223, 254, 220, 224, 77, 255, 14, 44, 123, 1, 141, 128, 175, 0, 248, 212, 200, 0, 150, 59, 183, 255, 147, 97, 29, 0, 150, 204, 181, 0, 253, 37, 71, 0, 145, 85, 119, 0, 154, 200, 186, 0, 2, 128, 249, 255, 83, 24, 124, 0, 14, 87, 143, 0, 168, 51, 245, 1, 124, 151, 231, 255, 208, 240, 197, 1, 124, 190, 185, 0, 48, 58, 246, 0, 20, 233, 232, 0, 125, 18, 98, 255, 13, 254, 31, 255, 245, 177, 130, 255, 108, 142, 35, 0, 171, 125, 242, 254, 140, 12, 34, 255, 165, 161, 162, 0, 206, 205, 101, 0, 247, 25, 34, 1, 100, 145, 57, 0, 39, 70, 57, 0, 118, 204, 203, 255, 242, 0, 162, 0, 165, 244, 30, 0, 198, 116, 226, 0, 128, 111, 153, 255, 140, 54, 182, 1, 60, 122, 15, 255, 155, 58, 57, 1, 54, 50, 198, 0, 171, 211, 29, 255, 107, 138, 167, 255, 173, 107, 199, 255, 109, 161, 193, 0, 89, 72, 242, 255, 206, 115, 89, 255, 250, 254, 142, 254, 177, 202, 94, 255, 81, 89, 50, 0, 7, 105, 66, 255, 25, 254, 255, 254, 203, 64, 23, 255, 79, 222, 108, 255, 39, 249, 75, 0, 241, 124, 50, 0, 239, 152, 133, 0, 221, 241, 105, 0, 147, 151, 98, 0, 213, 161, 121, 254, 242, 49, 137, 0, 233, 37, 249, 254, 42, 183, 27, 0, 184, 119, 230, 255, 217, 32, 163, 255, 208, 251, 228, 1, 137, 62, 131, 255, 79, 64, 9, 254, 94, 48, 113, 0, 17, 138, 50, 254, 193, 255, 22, 0, 247, 18, 197, 1, 67, 55, 104, 0, 16, 205, 95, 255, 48, 37, 66, 0, 55, 156, 63, 1, 64, 82, 74, 255, 200, 53, 71, 254, 239, 67, 125, 0, 26, 224, 222, 0, 223, 137, 93, 255, 30, 224, 202, 255, 9, 220, 132, 0, 198, 38, 235, 1, 102, 141, 86, 0, 60, 43, 81, 1, 136, 28, 26, 0, 233, 36, 8, 254, 207, 242, 148, 0, 164, 162, 63, 0, 51, 46, 224, 255, 114, 48, 79, 255, 9, 175, 226, 0, 222, 3, 193, 255, 47, 160, 232, 255, 255, 93, 105, 254, 14, 42, 230, 0, 26, 138, 82, 1, 208, 43, 244, 0, 27, 39, 38, 255, 98, 208, 127, 255, 64, 149, 182, 255, 5, 250, 209, 0, 187, 60, 28, 254, 49, 25, 218, 255, 169, 116, 205, 255, 119, 18, 120, 0, 156, 116, 147, 255, 132, 53, 109, 255, 13, 10, 202, 0, 110, 83, 167, 0, 157, 219, 137, 255, 6, 3, 130, 255, 50, 167, 30, 255, 60, 159, 47, 255, 129, 128, 157, 254, 94, 3, 189, 0, 3, 166, 68, 0, 83, 223, 215, 0, 150, 90, 194, 1, 15, 168, 65, 0, 227, 83, 51, 255, 205, 171, 66, 255, 54, 187, 60, 1, 152, 102, 45, 255, 119, 154, 225, 0, 240, 247, 136, 0, 100, 197, 178, 255, 139, 71, 223, 255, 204, 82, 16, 1, 41, 206, 42, 255, 156, 192, 221, 255, 216, 123, 244, 255, 218, 218, 185, 255, 187, 186, 239, 255, 252, 172, 160, 255, 195, 52, 22, 0, 144, 174, 181, 254, 187, 100, 115, 255, 211, 78, 176, 255, 27, 7, 193, 0, 147, 213, 104, 255, 90, 201, 10, 255, 80, 123, 66, 1, 22, 33, 186, 0, 1, 7, 99, 254, 30, 206, 10, 0, 229, 234, 5, 0, 53, 30, 210, 0, 138, 8, 220, 254, 71, 55, 167, 0, 72, 225, 86, 1, 118, 190, 188, 0, 254, 193, 101, 1, 171, 249, 172, 255, 94, 158, 183, 254, 93, 2, 108, 255, 176, 93, 76, 255, 73, 99, 79, 255, 74, 64, 129, 254, 246, 46, 65, 0, 99, 241, 127, 254, 246, 151, 102, 255, 44, 53, 208, 254, 59, 102, 234, 0, 154, 175, 164, 255, 88, 242, 32, 0, 111, 38, 1, 0, 255, 182, 190, 255, 115, 176, 15, 254, 169, 60, 129, 0, 122, 237, 241, 0, 90, 76, 63, 0, 62, 74, 120, 255, 122, 195, 110, 0, 119, 4, 178, 0, 222, 242, 210, 0, 130, 33, 46, 254, 156, 40, 41, 0, 167, 146, 112, 1, 49, 163, 111, 255, 121, 176, 235, 0, 76, 207, 14, 255, 3, 25, 198, 1, 41, 235, 213, 0, 85, 36, 214, 1, 49, 92, 109, 255, 200, 24, 30, 254, 168, 236, 195, 0, 145, 39, 124, 1, 236, 195, 149, 0, 90, 36, 184, 255, 67, 85, 170, 255, 38, 35, 26, 254, 131, 124, 68, 255, 239, 155, 35, 255, 54, 201, 164, 0, 196, 22, 117, 255, 49, 15, 205, 0, 24, 224, 29, 1, 126, 113, 144, 0, 117, 21, 182, 0, 203, 159, 141, 0, 223, 135, 77, 0, 176, 230, 176, 255, 190, 229, 215, 255, 99, 37, 181, 255, 51, 21, 138, 255, 25, 189, 89, 255, 49, 48, 165, 254, 152, 45, 247, 0, 170, 108, 222, 0, 80, 202, 5, 0, 27, 69, 103, 254, 204, 22, 129, 255, 180, 252, 62, 254, 210, 1, 91, 255, 146, 110, 254, 255, 219, 162, 28, 0, 223, 252, 213, 1, 59, 8, 33, 0, 206, 16, 244, 0, 129, 211, 48, 0, 107, 160, 208, 0, 112, 59, 209, 0, 109, 77, 216, 254, 34, 21, 185, 255, 246, 99, 56, 255, 179, 139, 19, 255, 185, 29, 50, 255, 84, 89, 19, 0, 74, 250, 98, 255, 225, 42, 200, 255, 192, 217, 205, 255, 210, 16, 167, 0, 99, 132, 95, 1, 43, 230, 57, 0, 254, 11, 203, 255, 99, 188, 63, 255, 119, 193, 251, 254, 80, 105, 54, 0, 232, 181, 189, 1, 183, 69, 112, 255, 208, 171, 165, 255, 47, 109, 180, 255, 123, 83, 165, 0, 146, 162, 52, 255, 154, 11, 4, 255, 151, 227, 90, 255, 146, 137, 97, 254, 61, 233, 41, 255, 94, 42, 55, 255, 108, 164, 236, 0, 152, 68, 254, 0, 10, 140, 131, 255, 10, 106, 79, 254, 243, 158, 137, 0, 67, 178, 66, 254, 177, 123, 198, 255, 15, 62, 34, 0, 197, 88, 42, 255, 149, 95, 177, 255, 152, 0, 198, 255, 149, 254, 113, 255, 225, 90, 163, 255, 125, 217, 247, 0, 18, 17, 224, 0, 128, 66, 120, 254, 192, 25, 9, 255, 50, 221, 205, 0, 49, 212, 70, 0, 233, 255, 164, 0, 2, 209, 9, 0, 221, 52, 219, 254, 172, 224, 244, 255, 94, 56, 206, 1, 242, 179, 2, 255, 31, 91, 164, 1, 230, 46, 138, 255, 189, 230, 220, 0, 57, 47, 61, 255, 111, 11, 157, 0, 177, 91, 152, 0, 28, 230, 98, 0, 97, 87, 126, 0, 198, 89, 145, 255, 167, 79, 107, 0, 249, 77, 160, 1, 29, 233, 230, 255, 150, 21, 86, 254, 60, 11, 193, 0, 151, 37, 36, 254, 185, 150, 243, 255, 228, 212, 83, 1, 172, 151, 180, 0, 201, 169, 155, 0, 244, 60, 234, 0, 142, 235, 4, 1, 67, 218, 60, 0, 192, 113, 75, 1, 116, 243, 207, 255, 65, 172, 155, 0, 81, 30, 156, 255, 80, 72, 33, 254, 18, 231, 109, 255, 142, 107, 21, 254, 125, 26, 132, 255, 176, 16, 59, 255, 150, 201, 58, 0, 206, 169, 201, 0, 208, 121, 226, 0, 40, 172, 14, 255, 150, 61, 94, 255, 56, 57, 156, 255, 141, 60, 145, 255, 45, 108, 149, 255, 238, 145, 155, 255, 209, 85, 31, 254, 192, 12, 210, 0, 99, 98, 93, 254, 152, 16, 151, 0, 225, 185, 220, 0, 141, 235, 44, 255, 160, 172, 21, 254, 71, 26, 31, 255, 13, 64, 93, 254, 28, 56, 198, 0, 177, 62, 248, 1, 182, 8, 241, 0, 166, 101, 148, 255, 78, 81, 133, 255, 129, 222, 215, 1, 188, 169, 129, 255, 232, 7, 97, 0, 49, 112, 60, 255, 217, 229, 251, 0, 119, 108, 138, 0, 39, 19, 123, 254, 131, 49, 235, 0, 132, 84, 145, 0, 130, 230, 148, 255, 25, 74, 187, 0, 5, 245, 54, 255, 185, 219, 241, 1, 18, 194, 228, 255, 241, 202, 102, 0, 105, 113, 202, 0, 155, 235, 79, 0, 21, 9, 178, 255, 156, 1, 239, 0, 200, 148, 61, 0, 115, 247, 210, 255, 49, 221, 135, 0, 58, 189, 8, 1, 35, 46, 9, 0, 81, 65, 5, 255, 52, 158, 185, 255, 125, 116, 46, 255, 74, 140, 13, 255, 210, 92, 172, 254, 147, 23, 71, 0, 217, 224, 253, 254, 115, 108, 180, 255, 145, 58, 48, 254, 219, 177, 24, 255, 156, 255, 60, 1, 154, 147, 242, 0, 253, 134, 87, 0, 53, 75, 229, 0, 48, 195, 222, 255, 31, 175, 50, 255, 156, 210, 120, 255, 208, 35, 222, 255, 18, 248, 179, 1, 2, 10, 101, 255, 157, 194, 248, 255, 158, 204, 101, 255, 104, 254, 197, 255, 79, 62, 4, 0, 178, 172, 101, 1, 96, 146, 251, 255, 65, 10, 156, 0, 2, 137, 165, 255, 116, 4, 231, 0, 242, 215, 1, 0, 19, 35, 29, 255, 43, 161, 79, 0, 59, 149, 246, 1, 251, 66, 176, 0, 200, 33, 3, 255, 80, 110, 142, 255, 195, 161, 17, 1, 228, 56, 66, 255, 123, 47, 145, 254, 132, 4, 164, 0, 67, 174, 172, 0, 25, 253, 114, 0, 87, 97, 87, 1, 250, 220, 84, 0, 96, 91, 200, 255, 37, 125, 59, 0, 19, 65, 118, 0, 161, 52, 241, 255, 237, 172, 6, 255, 176, 191, 255, 255, 1, 65, 130, 254, 223, 190, 230, 0, 101, 253, 231, 255, 146, 35, 109, 0, 250, 29, 77, 1, 49, 0, 19, 0, 123, 90, 155, 1, 22, 86, 32, 255, 218, 213, 65, 0, 111, 93, 127, 0, 60, 93, 169, 255, 8, 127, 182, 0, 17, 186, 14, 254, 253, 137, 246, 255, 213, 25, 48, 254, 76, 238, 0, 255, 248, 92, 70, 255, 99, 224, 139, 0, 184, 9, 255, 1, 7, 164, 208, 0, 205, 131, 198, 1, 87, 214, 199, 0, 130, 214, 95, 0, 221, 149, 222, 0, 23, 38, 171, 254, 197, 110, 213, 0, 43, 115, 140, 254, 215, 177, 118, 0, 96, 52, 66, 1, 117, 158, 237, 0, 14, 64, 182, 255, 46, 63, 174, 255, 158, 95, 190, 255, 225, 205, 177, 255, 43, 5, 142, 255, 172, 99, 212, 255, 244, 187, 147, 0, 29, 51, 153, 255, 228, 116, 24, 254, 30, 101, 207, 0, 19, 246, 150, 255, 134, 231, 5, 0, 125, 134, 226, 1, 77, 65, 98, 0, 236, 130, 33, 255, 5, 110, 62, 0, 69, 108, 127, 255, 7, 113, 22, 0, 145, 20, 83, 254, 194, 161, 231, 255, 131, 181, 60, 0, 217, 209, 177, 255, 229, 148, 212, 254, 3, 131, 184, 0, 117, 177, 187, 1, 28, 14, 31, 255, 176, 102, 80, 0, 50, 84, 151, 255, 125, 31, 54, 255, 21, 157, 133, 255, 19, 179, 139, 1, 224, 232, 26, 0, 34, 117, 170, 255, 167, 252, 171, 255, 73, 141, 206, 254, 129, 250, 35, 0, 72, 79, 236, 1, 220, 229, 20, 255, 41, 202, 173, 255, 99, 76, 238, 255, 198, 22, 224, 255, 108, 198, 195, 255, 36, 141, 96, 1, 236, 158, 59, 255, 106, 100, 87, 0, 110, 226, 2, 0, 227, 234, 222, 0, 154, 93, 119, 255, 74, 112, 164, 255, 67, 91, 2, 255, 21, 145, 33, 255, 102, 214, 137, 255, 175, 230, 103, 254, 163, 246, 166, 0, 93, 247, 116, 254, 167, 224, 28, 255, 220, 2, 57, 1, 171, 206, 84, 0, 123, 228, 17, 255, 27, 120, 119, 0, 119, 11, 147, 1, 180, 47, 225, 255, 104, 200, 185, 254, 165, 2, 114, 0, 77, 78, 212, 0, 45, 154, 177, 255, 24, 196, 121, 254, 82, 157, 182, 0, 90, 16, 190, 1, 12, 147, 197, 0, 95, 239, 152, 255, 11, 235, 71, 0, 86, 146, 119, 255, 172, 134, 214, 0, 60, 131, 196, 0, 161, 225, 129, 0, 31, 130, 120, 254, 95, 200, 51, 0, 105, 231, 210, 255, 58, 9, 148, 255, 43, 168, 221, 255, 124, 237, 142, 0, 198, 211, 50, 254, 46, 245, 103, 0, 164, 248, 84, 0, 152, 70, 208, 255, 180, 117, 177, 0, 70, 79, 185, 0, 243, 74, 32, 0, 149, 156, 207, 0, 197, 196, 161, 1, 245, 53, 239, 0, 15, 93, 246, 254, 139, 240, 49, 255, 196, 88, 36, 255, 162, 38, 123, 0, 128, 200, 157, 1, 174, 76, 103, 255, 173, 169, 34, 254, 216, 1, 171, 255, 114, 51, 17, 0, 136, 228, 194, 0, 110, 150, 56, 254, 106, 246, 159, 0, 19, 184, 79, 255, 150, 77, 240, 255, 155, 80, 162, 0, 0, 53, 169, 255, 29, 151, 86, 0, 68, 94, 16, 0, 92, 7, 110, 254, 98, 117, 149, 255, 249, 77, 230, 255, 253, 10, 140, 0, 214, 124, 92, 254, 35, 118, 235, 0, 89, 48, 57, 1, 22, 53, 166, 0, 184, 144, 61, 255, 179, 255, 194, 0, 214, 248, 61, 254, 59, 110, 246, 0, 121, 21, 81, 254, 166, 3, 228, 0, 106, 64, 26, 255, 69, 232, 134, 255, 242, 220, 53, 254, 46, 220, 85, 0, 113, 149, 247, 255, 97, 179, 103, 255, 190, 127, 11, 0, 135, 209, 182, 0, 95, 52, 129, 1, 170, 144, 206, 255, 122, 200, 204, 255, 168, 100, 146, 0, 60, 144, 149, 254, 70, 60, 40, 0, 122, 52, 177, 255, 246, 211, 101, 255, 174, 237, 8, 0, 7, 51, 120, 0, 19, 31, 173, 0, 126, 239, 156, 255, 143, 189, 203, 0, 196, 128, 88, 255, 233, 133, 226, 255, 30, 125, 173, 255, 201, 108, 50, 0, 123, 100, 59, 255, 254, 163, 3, 1, 221, 148, 181, 255, 214, 136, 57, 254, 222, 180, 137, 255, 207, 88, 54, 255, 28, 33, 251, 255, 67, 214, 52, 1, 210, 208, 100, 0, 81, 170, 94, 0, 145, 40, 53, 0, 224, 111, 231, 254, 35, 28, 244, 255, 226, 199, 195, 254, 238, 17, 230, 0, 217, 217, 164, 254, 169, 157, 221, 0, 218, 46, 162, 1, 199, 207, 163, 255, 108, 115, 162, 1, 14, 96, 187, 255, 118, 60, 76, 0, 184, 159, 152, 0, 209, 231, 71, 254, 42, 164, 186, 255, 186, 153, 51, 254, 221, 171, 182, 255, 162, 142, 173, 0, 235, 47, 193, 0, 7, 139, 16, 1, 95, 164, 64, 255, 16, 221, 166, 0, 219, 197, 16, 0, 132, 29, 44, 255, 100, 69, 117, 255, 60, 235, 88, 254, 40, 81, 173, 0, 71, 190, 61, 255, 187, 88, 157, 0, 231, 11, 23, 0, 237, 117, 164, 0, 225, 168, 223, 255, 154, 114, 116, 255, 163, 152, 242, 1, 24, 32, 170, 0, 125, 98, 113, 254, 168, 19, 76, 0, 17, 157, 220, 254, 155, 52, 5, 0, 19, 111, 161, 255, 71, 90, 252, 255, 173, 110, 240, 0, 10, 198, 121, 255, 253, 255, 240, 255, 66, 123, 210, 0, 221, 194, 215, 254, 121, 163, 17, 255, 225, 7, 99, 0, 190, 49, 182, 0, 115, 9, 133, 1, 232, 26, 138, 255, 213, 68, 132, 0, 44, 119, 122, 255, 179, 98, 51, 0, 149, 90, 106, 0, 71, 50, 230, 255, 10, 153, 118, 255, 177, 70, 25, 0, 165, 87, 205, 0, 55, 138, 234, 0, 238, 30, 97, 0, 113, 155, 207, 0, 98, 153, 127, 0, 34, 107, 219, 254, 117, 114, 172, 255, 76, 180, 255, 254, 242, 57, 179, 255, 221, 34, 172, 254, 56, 162, 49, 255, 83, 3, 255, 255, 113, 221, 189, 255, 188, 25, 228, 254, 16, 88, 89, 255, 71, 28, 198, 254, 22, 17, 149, 255, 243, 121, 254, 255, 107, 202, 99, 255, 9, 206, 14, 1, 220, 47, 153, 0, 107, 137, 39, 1, 97, 49, 194, 255, 149, 51, 197, 254, 186, 58, 11, 255, 107, 43, 232, 1, 200, 6, 14, 255, 181, 133, 65, 254, 221, 228, 171, 255, 123, 62, 231, 1, 227, 234, 179, 255, 34, 189, 212, 254, 244, 187, 249, 0, 190, 13, 80, 1, 130, 89, 1, 0, 223, 133, 173, 0, 9, 222, 198, 255, 66, 127, 74, 0, 167, 216, 93, 255, 155, 168, 198, 1, 66, 145, 0, 0, 68, 102, 46, 1, 172, 90, 154, 0, 216, 128, 75, 255, 160, 40, 51, 0, 158, 17, 27, 1, 124, 240, 49, 0, 236, 202, 176, 255, 151, 124, 192, 255, 38, 193, 190, 0, 95, 182, 61, 0, 163, 147, 124, 255, 255, 165, 51, 255, 28, 40, 17, 254, 215, 96, 78, 0, 86, 145, 218, 254, 31, 36, 202, 255, 86, 9, 5, 0, 111, 41, 200, 255, 237, 108, 97, 0, 57, 62, 44, 0, 117, 184, 15, 1, 45, 241, 116, 0, 152, 1, 220, 255, 157, 165, 188, 0, 250, 15, 131, 1, 60, 44, 125, 255, 65, 220, 251, 255, 75, 50, 184, 0, 53, 90, 128, 255, 231, 80, 194, 255, 136, 129, 127, 1, 21, 18, 187, 255, 45, 58, 161, 255, 71, 147, 34, 0, 174, 249, 11, 254, 35, 141, 29, 0, 239, 68, 177, 255, 115, 110, 58, 0, 238, 190, 177, 1, 87, 245, 166, 255, 190, 49, 247, 255, 146, 83, 184, 255, 173, 14, 39, 255, 146, 215, 104, 0, 142, 223, 120, 0, 149, 200, 155, 255, 212, 207, 145, 1, 16, 181, 217, 0, 173, 32, 87, 255, 255, 35, 181, 0, 119, 223, 161, 1, 200, 223, 94, 255, 70, 6, 186, 255, 192, 67, 85, 255, 50, 169, 152, 0, 144, 26, 123, 255, 56, 243, 179, 254, 20, 68, 136, 0, 39, 140, 188, 254, 253, 208, 5, 255, 200, 115, 135, 1, 43, 172, 229, 255, 156, 104, 187, 0, 151, 251, 167, 0, 52, 135, 23, 0, 151, 153, 72, 0, 147, 197, 107, 254, 148, 158, 5, 255, 238, 143, 206, 0, 126, 153, 137, 255, 88, 152, 197, 254, 7, 68, 167, 0, 252, 159, 165, 255, 239, 78, 54, 255, 24, 63, 55, 255, 38, 222, 94, 0, 237, 183, 12, 255, 206, 204, 210, 0, 19, 39, 246, 254, 30, 74, 231, 0, 135, 108, 29, 1, 179, 115, 0, 0, 117, 118, 116, 1, 132, 6, 252, 255, 145, 129, 161, 1, 105, 67, 141, 0, 82, 37, 226, 255, 238, 226, 228, 255, 204, 214, 129, 254, 162, 123, 100, 255, 185, 121, 234, 0, 45, 108, 231, 0, 66, 8, 56, 255, 132, 136, 128, 0, 172, 224, 66, 254, 175, 157, 188, 0, 230, 223, 226, 254, 242, 219, 69, 0, 184, 14, 119, 1, 82, 162, 56, 0, 114, 123, 20, 0, 162, 103, 85, 255, 49, 239, 99, 254, 156, 135, 215, 0, 111, 255, 167, 254, 39, 196, 214, 0, 144, 38, 79, 1, 249, 168, 125, 0, 155, 97, 156, 255, 23, 52, 219, 255, 150, 22, 144, 0, 44, 149, 165, 255, 40, 127, 183, 0, 196, 77, 233, 255, 118, 129, 210, 255, 170, 135, 230, 255, 214, 119, 198, 0, 233, 240, 35, 0, 253, 52, 7, 255, 117, 102, 48, 255, 21, 204, 154, 255, 179, 136, 177, 255, 23, 2, 3, 1, 149, 130, 89, 255, 252, 17, 159, 1, 70, 60, 26, 0, 144, 107, 17, 0, 180, 190, 60, 255, 56, 182, 59, 255, 110, 71, 54, 255, 198, 18, 129, 255, 149, 224, 87, 255, 223, 21, 152, 255, 138, 22, 182, 255, 250, 156, 205, 0, 236, 45, 208, 255, 79, 148, 242, 1, 101, 70, 209, 0, 103, 78, 174, 0, 101, 144, 172, 255, 152, 136, 237, 1, 191, 194, 136, 0, 113, 80, 125, 1, 152, 4, 141, 0, 155, 150, 53, 255, 196, 116, 245, 0, 239, 114, 73, 254, 19, 82, 17, 255, 124, 125, 234, 255, 40, 52, 191, 0, 42, 210, 158, 255, 155, 132, 165, 0, 178, 5, 42, 1, 64, 92, 40, 255, 36, 85, 77, 255, 178, 228, 118, 0, 137, 66, 96, 254, 115, 226, 66, 0, 110, 240, 69, 254, 151, 111, 80, 0, 167, 174, 236, 255, 227, 108, 107, 255, 188, 242, 65, 255, 183, 81, 255, 0, 57, 206, 181, 255, 47, 34, 181, 255, 213, 240, 158, 1, 71, 75, 95, 0, 156, 40, 24, 255, 102, 210, 81, 0, 171, 199, 228, 255, 154, 34, 41, 0, 227, 175, 75, 0, 21, 239, 195, 0, 138, 229, 95, 1, 76, 192, 49, 0, 117, 123, 87, 1, 227, 225, 130, 0, 125, 62, 63, 255, 2, 198, 171, 0, 254, 36, 13, 254, 145, 186, 206, 0, 148, 255, 244, 255, 35, 0, 166, 0, 30, 150, 219, 1, 92, 228, 212, 0, 92, 198, 60, 254, 62, 133, 200, 255, 201, 41, 59, 0, 125, 238, 109, 255, 180, 163, 238, 1, 140, 122, 82, 0, 9, 22, 88, 255, 197, 157, 47, 255, 153, 94, 57, 0, 88, 30, 182, 0, 84, 161, 85, 0, 178, 146, 124, 0, 166, 166, 7, 255, 21, 208, 223, 0, 156, 182, 242, 0, 155, 121, 185, 0, 83, 156, 174, 254, 154, 16, 118, 255, 186, 83, 232, 1, 223, 58, 121, 255, 29, 23, 88, 0, 35, 125, 127, 255, 170, 5, 149, 254, 164, 12, 130, 255, 155, 196, 29, 0, 161, 96, 136, 0, 7, 35, 29, 1, 162, 37, 251, 0, 3, 46, 242, 255, 0, 217, 188, 0, 57, 174, 226, 1, 206, 233, 2, 0, 57, 187, 136, 254, 123, 189, 9, 255, 201, 117, 127, 255, 186, 36, 204, 0, 231, 25, 216, 0, 80, 78, 105, 0, 19, 134, 129, 255, 148, 203, 68, 0, 141, 81, 125, 254, 248, 165, 200, 255, 214, 144, 135, 0, 151, 55, 166, 255, 38, 235, 91, 0, 21, 46, 154, 0, 223, 254, 150, 255, 35, 153, 180, 255, 125, 176, 29, 1, 43, 98, 30, 255, 216, 122, 230, 255, 233, 160, 12, 0, 57, 185, 12, 254, 240, 113, 7, 255, 5, 9, 16, 254, 26, 91, 108, 0, 109, 198, 203, 0, 8, 147, 40, 0, 129, 134, 228, 255, 124, 186, 40, 255, 114, 98, 132, 254, 166, 132, 23, 0, 99, 69, 44, 0, 9, 242, 238, 255, 184, 53, 59, 0, 132, 129, 102, 255, 52, 32, 243, 254, 147, 223, 200, 255, 123, 83, 179, 254, 135, 144, 201, 255, 141, 37, 56, 1, 151, 60, 227, 255, 90, 73, 156, 1, 203, 172, 187, 0, 80, 151, 47, 255, 94, 137, 231, 255, 36, 191, 59, 255, 225, 209, 181, 255, 74, 215, 213, 254, 6, 118, 179, 255, 153, 54, 193, 1, 50, 0, 231, 0, 104, 157, 72, 1, 140, 227, 154, 255, 182, 226, 16, 254, 96, 225, 92, 255, 115, 20, 170, 254, 6, 250, 78, 0, 248, 75, 173, 255, 53, 89, 6, 255, 0, 180, 118, 0, 72, 173, 1, 0, 64, 8, 206, 1, 174, 133, 223, 0, 185, 62, 133, 255, 214, 11, 98, 0, 197, 31, 208, 0, 171, 167, 244, 255, 22, 231, 181, 1, 150, 218, 185, 0, 247, 169, 97, 1, 165, 139, 247, 255, 47, 120, 149, 1, 103, 248, 51, 0, 60, 69, 28, 254, 25, 179, 196, 0, 124, 7, 218, 254, 58, 107, 81, 0, 184, 233, 156, 255, 252, 74, 36, 0, 118, 188, 67, 0, 141, 95, 53, 255, 222, 94, 165, 254, 46, 61, 53, 0, 206, 59, 115, 255, 47, 236, 250, 255, 74, 5, 32, 1, 129, 154, 238, 255, 106, 32, 226, 0, 121, 187, 61, 255, 3, 166, 241, 254, 67, 170, 172, 255, 29, 216, 178, 255, 23, 201, 252, 0, 253, 110, 243, 0, 200, 125, 57, 0, 109, 192, 96, 255, 52, 115, 238, 0, 38, 121, 243, 255, 201, 56, 33, 0, 194, 118, 130, 0, 75, 96, 25, 255, 170, 30, 230, 254, 39, 63, 253, 0, 36, 45, 250, 255, 251, 1, 239, 0, 160, 212, 92, 1, 45, 209, 237, 0, 243, 33, 87, 254, 237, 84, 201, 255, 212, 18, 157, 254, 212, 99, 127, 255, 217, 98, 16, 254, 139, 172, 239, 0, 168, 201, 130, 255, 143, 193, 169, 255, 238, 151, 193, 1, 215, 104, 41, 0, 239, 61, 165, 254, 2, 3, 242, 0, 22, 203, 177, 254, 177, 204, 22, 0, 149, 129, 213, 254, 31, 11, 41, 255, 0, 159, 121, 254, 160, 25, 114, 255, 162, 80, 200, 0, 157, 151, 11, 0, 154, 134, 78, 1, 216, 54, 252, 0, 48, 103, 133, 0, 105, 220, 197, 0, 253, 168, 77, 254, 53, 179, 23, 0, 24, 121, 240, 1, 255, 46, 96, 255, 107, 60, 135, 254, 98, 205, 249, 255, 63, 249, 119, 255, 120, 59, 211, 255, 114, 180, 55, 254, 91, 85, 237, 0, 149, 212, 77, 1, 56, 73, 49, 0, 86, 198, 150, 0, 93, 209, 160, 0, 69, 205, 182, 255, 244, 90, 43, 0, 20, 36, 176, 0, 122, 116, 221, 0, 51, 167, 39, 1, 231, 1, 63, 255, 13, 197, 134, 0, 3, 209, 34, 255, 135, 59, 202, 0, 167, 100, 78, 0, 47, 223, 76, 0, 185, 60, 62, 0, 178, 166, 123, 1, 132, 12, 161, 255, 61, 174, 43, 0, 195, 69, 144, 0, 127, 47, 191, 1, 34, 44, 78, 0, 57, 234, 52, 1, 255, 22, 40, 255, 246, 94, 146, 0, 83, 228, 128, 0, 60, 78, 224, 255, 0, 96, 210, 255, 153, 175, 236, 0, 159, 21, 73, 0, 180, 115, 196, 254, 131, 225, 106, 0, 255, 167, 134, 0, 159, 8, 112, 255, 120, 68, 194, 255, 176, 196, 198, 255, 118, 48, 168, 255, 93, 169, 1, 0, 112, 200, 102, 1, 74, 24, 254, 0, 19, 141, 4, 254, 142, 62, 63, 0, 131, 179, 187, 255, 77, 156, 155, 255, 119, 86, 164, 0, 170, 208, 146, 255, 208, 133, 154, 255, 148, 155, 58, 255, 162, 120, 232, 254, 252, 213, 155, 0, 241, 13, 42, 0, 94, 50, 131, 0, 179, 170, 112, 0, 140, 83, 151, 255, 55, 119, 84, 1, 140, 35, 239, 255, 153, 45, 67, 1, 236, 175, 39, 0, 54, 151, 103, 255, 158, 42, 65, 255, 196, 239, 135, 254, 86, 53, 203, 0, 149, 97, 47, 254, 216, 35, 17, 255, 70, 3, 70, 1, 103, 36, 90, 255, 40, 26, 173, 0, 184, 48, 13, 0, 163, 219, 217, 255, 81, 6, 1, 255, 221, 170, 108, 254, 233, 208, 93, 0, 100, 201, 249, 254, 86, 36, 35, 255, 209, 154, 30, 1, 227, 201, 251, 255, 2, 189, 167, 254, 100, 57, 3, 0, 13, 128, 41, 0, 197, 100, 75, 0, 150, 204, 235, 255, 145, 174, 59, 0, 120, 248, 149, 255, 85, 55, 225, 0, 114, 210, 53, 254, 199, 204, 119, 0, 14, 247, 74, 1, 63, 251, 129, 0, 67, 104, 151, 1, 135, 130, 80, 0, 79, 89, 55, 255, 117, 230, 157, 255, 25, 96, 143, 0, 213, 145, 5, 0, 69, 241, 120, 1, 149, 243, 95, 255, 114, 42, 20, 0, 131, 72, 2, 0, 154, 53, 20, 255, 73, 62, 109, 0, 196, 102, 152, 0, 41, 12, 204, 255, 122, 38, 11, 1, 250, 10, 145, 0, 207, 125, 148, 0, 246, 244, 222, 255, 41, 32, 85, 1, 112, 213, 126, 0, 162, 249, 86, 1, 71, 198, 127, 255, 81, 9, 21, 1, 98, 39, 4, 255, 204, 71, 45, 1, 75, 111, 137, 0, 234, 59, 231, 0, 32, 48, 95, 255, 204, 31, 114, 1, 29, 196, 181, 255, 51, 241, 167, 254, 93, 109, 142, 0, 104, 144, 45, 0, 235, 12, 181, 255, 52, 112, 164, 0, 76, 254, 202, 255, 174, 14, 162, 0, 61, 235, 147, 255, 43, 64, 185, 254, 233, 125, 217, 0, 243, 88, 167, 254, 74, 49, 8, 0, 156, 204, 66, 0, 124, 214, 123, 0, 38, 221, 118, 1, 146, 112, 236, 0, 114, 98, 177, 0, 151, 89, 199, 0, 87, 197, 112, 0, 185, 149, 161, 0, 44, 96, 165, 0, 248, 179, 20, 255, 188, 219, 216, 254, 40, 62, 13, 0, 243, 142, 141, 0, 229, 227, 206, 255, 172, 202, 35, 255, 117, 176, 225, 255, 82, 110, 38, 1, 42, 245, 14, 255, 20, 83, 97, 0, 49, 171, 10, 0, 242, 119, 120, 0, 25, 232, 61, 0, 212, 240, 147, 255, 4, 115, 56, 255, 145, 17, 239, 254, 202, 17, 251, 255, 249, 18, 245, 255, 99, 117, 239, 0, 184, 4, 179, 255, 246, 237, 51, 255, 37, 239, 137, 255, 166, 112, 166, 255, 81, 188, 33, 255, 185, 250, 142, 255, 54, 187, 173, 0, 208, 112, 201, 0, 246, 43, 228, 1, 104, 184, 88, 255, 212, 52, 196, 255, 51, 117, 108, 255, 254, 117, 155, 0, 46, 91, 15, 255, 87, 14, 144, 255, 87, 227, 204, 0, 83, 26, 83, 1, 159, 76, 227, 0, 159, 27, 213, 1, 24, 151, 108, 0, 117, 144, 179, 254, 137, 209, 82, 0, 38, 159, 10, 0, 115, 133, 201, 0, 223, 182, 156, 1, 110, 196, 93, 255, 57, 60, 233, 0, 5, 167, 105, 255, 154, 197, 164, 0, 96, 34, 186, 255, 147, 133, 37, 1, 220, 99, 190, 0, 1, 167, 84, 255, 20, 145, 171, 0, 194, 197, 251, 254, 95, 78, 133, 255, 252, 248, 243, 255, 225, 93, 131, 255, 187, 134, 196, 255, 216, 153, 170, 0, 20, 118, 158, 254, 140, 1, 118, 0, 86, 158, 15, 1, 45, 211, 41, 255, 147, 1, 100, 254, 113, 116, 76, 255, 211, 127, 108, 1, 103, 15, 48, 0, 193, 16, 102, 1, 69, 51, 95, 255, 107, 128, 157, 0, 137, 171, 233, 0, 90, 124, 144, 1, 106, 161, 182, 0, 175, 76, 236, 1, 200, 141, 172, 255, 163, 58, 104, 0, 233, 180, 52, 255, 240, 253, 14, 255, 162, 113, 254, 255, 38, 239, 138, 254, 52, 46, 166, 0, 241, 101, 33, 254, 131, 186, 156, 0, 111, 208, 62, 255, 124, 94, 160, 255, 31, 172, 254, 0, 112, 174, 56, 255, 188, 99, 27, 255, 67, 138, 251, 0, 125, 58, 128, 1, 156, 152, 174, 255, 178, 12, 247, 255, 252, 84, 158, 0, 82, 197, 14, 254, 172, 200, 83, 255, 37, 39, 46, 1, 106, 207, 167, 0, 24, 189, 34, 0, 131, 178, 144, 0, 206, 213, 4, 0, 161, 226, 210, 0, 72, 51, 105, 255, 97, 45, 187, 255, 78, 184, 223, 255, 176, 29, 251, 0, 79, 160, 86, 255, 116, 37, 178, 0, 82, 77, 213, 1, 82, 84, 141, 255, 226, 101, 212, 1, 175, 88, 199, 255, 245, 94, 247, 1, 172, 118, 109, 255, 166, 185, 190, 0, 131, 181, 120, 0, 87, 254, 93, 255, 134, 240, 73, 255, 32, 245, 143, 255, 139, 162, 103, 255, 179, 98, 18, 254, 217, 204, 112, 0, 147, 223, 120, 255, 53, 10, 243, 0, 166, 140, 150, 0, 125, 80, 200, 255, 14, 109, 219, 255, 91, 218, 1, 255, 252, 252, 47, 254, 109, 156, 116, 255, 115, 49, 127, 1, 204, 87, 211, 255, 148, 202, 217, 255, 26, 85, 249, 255, 14, 245, 134, 1, 76, 89, 169, 255, 242, 45, 230, 0, 59, 98, 172, 255, 114, 73, 132, 254, 78, 155, 49, 255, 158, 126, 84, 0, 49, 175, 43, 255, 16, 182, 84, 255, 157, 103, 35, 0, 104, 193, 109, 255, 67, 221, 154, 0, 201, 172, 1, 254, 8, 162, 88, 0, 165, 1, 29, 255, 125, 155, 229, 255, 30, 154, 220, 1, 103, 239, 92, 0, 220, 1, 109, 255, 202, 198, 1, 0, 94, 2, 142, 1, 36, 54, 44, 0, 235, 226, 158, 255, 170, 251, 214, 255, 185, 77, 9, 0, 97, 74, 242, 0, 219, 163, 149, 255, 240, 35, 118, 255, 223, 114, 88, 254, 192, 199, 3, 0, 106, 37, 24, 255, 201, 161, 118, 255, 97, 89, 99, 1, 224, 58, 103, 255, 101, 199, 147, 254, 222, 60, 99, 0, 234, 25, 59, 1, 52, 135, 27, 0, 102, 3, 91, 254, 168, 216, 235, 0, 229, 232, 136, 0, 104, 60, 129, 0, 46, 168, 238, 0, 39, 191, 67, 0, 75, 163, 47, 0, 143, 97, 98, 255, 56, 216, 168, 1, 168, 233, 252, 255, 35, 111, 22, 255, 92, 84, 43, 0, 26, 200, 87, 1, 91, 253, 152, 0, 202, 56, 70, 0, 142, 8, 77, 0, 80, 10, 175, 1, 252, 199, 76, 0, 22, 110, 82, 255, 129, 1, 194, 0, 11, 128, 61, 1, 87, 14, 145, 255, 253, 222, 190, 1, 15, 72, 174, 0, 85, 163, 86, 254, 58, 99, 44, 255, 45, 24, 188, 254, 26, 205, 15, 0, 19, 229, 210, 254, 248, 67, 195, 0, 99, 71, 184, 0, 154, 199, 37, 255, 151, 243, 121, 255, 38, 51, 75, 255, 201, 85, 130, 254, 44, 65, 250, 0, 57, 147, 243, 254, 146, 43, 59, 255, 89, 28, 53, 0, 33, 84, 24, 255, 179, 51, 18, 254, 189, 70, 83, 0, 11, 156, 179, 1, 98, 134, 119, 0, 158, 111, 111, 0, 119, 154, 73, 255, 200, 63, 140, 254, 45, 13, 13, 255, 154, 192, 2, 254, 81, 72, 42, 0, 46, 160, 185, 254, 44, 112, 6, 0, 146, 215, 149, 1, 26, 176, 104, 0, 68, 28, 87, 1, 236, 50, 153, 255, 179, 128, 250, 254, 206, 193, 191, 255, 166, 92, 137, 254, 53, 40, 239, 0, 210, 1, 204, 254, 168, 173, 35, 0, 141, 243, 45, 1, 36, 50, 109, 255, 15, 242, 194, 255, 227, 159, 122, 255, 176, 175, 202, 254, 70, 57, 72, 0, 40, 223, 56, 0, 208, 162, 58, 255, 183, 98, 93, 0, 15, 111, 12, 0, 30, 8, 76, 255, 132, 127, 246, 255, 45, 242, 103, 0, 69, 181, 15, 255, 10, 209, 30, 0, 3, 179, 121, 0, 241, 232, 218, 1, 123, 199, 88, 255, 2, 210, 202, 1, 188, 130, 81, 255, 94, 101, 208, 1, 103, 36, 45, 0, 76, 193, 24, 1, 95, 26, 241, 255, 165, 162, 187, 0, 36, 114, 140, 0, 202, 66, 5, 255, 37, 56, 147, 0, 152, 11, 243, 1, 127, 85, 232, 255, 250, 135, 212, 1, 185, 177, 113, 0, 90, 220, 75, 255, 69, 248, 146, 0, 50, 111, 50, 0, 92, 22, 80, 0, 244, 36, 115, 254, 163, 100, 82, 255, 25, 193, 6, 1, 127, 61, 36, 0, 253, 67, 30, 254, 65, 236, 170, 255, 161, 17, 215, 254, 63, 175, 140, 0, 55, 127, 4, 0, 79, 112, 233, 0, 109, 160, 40, 0, 143, 83, 7, 255, 65, 26, 238, 255, 217, 169, 140, 255, 78, 94, 189, 255, 0, 147, 190, 255, 147, 71, 186, 254, 106, 77, 127, 255, 233, 157, 233, 1, 135, 87, 237, 255, 208, 13, 236, 1, 155, 109, 36, 255, 180, 100, 218, 0, 180, 163, 18, 0, 190, 110, 9, 1, 17, 63, 123, 255, 179, 136, 180, 255, 165, 123, 123, 255, 144, 188, 81, 254, 71, 240, 108, 255, 25, 112, 11, 255, 227, 218, 51, 255, 167, 50, 234, 255, 114, 79, 108, 255, 31, 19, 115, 255, 183, 240, 99, 0, 227, 87, 143, 255, 72, 217, 248, 255, 102, 169, 95, 1, 129, 149, 149, 0, 238, 133, 12, 1, 227, 204, 35, 0, 208, 115, 26, 1, 102, 8, 234, 0, 112, 88, 143, 1, 144, 249, 14, 0, 240, 158, 172, 254, 100, 112, 119, 0, 194, 141, 153, 254, 40, 56, 83, 255, 121, 176, 46, 0, 42, 53, 76, 255, 158, 191, 154, 0, 91, 209, 92, 0, 173, 13, 16, 1, 5, 72, 226, 255, 204, 254, 149, 0, 80, 184, 207, 0, 100, 9, 122, 254, 118, 101, 171, 255, 252, 203, 0, 254, 160, 207, 54, 0, 56, 72, 249, 1, 56, 140, 13, 255, 10, 64, 107, 254, 91, 101, 52, 255, 225, 181, 248, 1, 139, 255, 132, 0, 230, 145, 17, 0, 233, 56, 23, 0, 119, 1, 241, 255, 213, 169, 151, 255, 99, 99, 9, 254, 185, 15, 191, 255, 173, 103, 109, 1, 174, 13, 251, 255, 178, 88, 7, 254, 27, 59, 68, 255, 10, 33, 2, 255, 248, 97, 59, 0, 26, 30, 146, 1, 176, 147, 10, 0, 95, 121, 207, 1, 188, 88, 24, 0, 185, 94, 254, 254, 115, 55, 201, 0, 24, 50, 70, 0, 120, 53, 6, 0, 142, 66, 146, 0, 228, 226, 249, 255, 104, 192, 222, 1, 173, 68, 219, 0, 162, 184, 36, 255, 143, 102, 137, 255, 157, 11, 23, 0, 125, 45, 98, 0, 235, 93, 225, 254, 56, 112, 160, 255, 70, 116, 243, 1, 153, 249, 55, 255, 129, 39, 17, 1, 241, 80, 244, 0, 87, 69, 21, 1, 94, 228, 73, 255, 78, 66, 65, 255, 194, 227, 231, 0, 61, 146, 87, 255, 173, 155, 23, 255, 112, 116, 219, 254, 216, 38, 11, 255, 131, 186, 133, 0, 94, 212, 187, 0, 100, 47, 91, 0, 204, 254, 175, 255, 222, 18, 215, 254, 173, 68, 108, 255, 227, 228, 79, 255, 38, 221, 213, 0, 163, 227, 150, 254, 31, 190, 18, 0, 160, 179, 11, 1, 10, 90, 94, 255, 220, 174, 88, 0, 163, 211, 229, 255, 199, 136, 52, 0, 130, 95, 221, 255, 140, 188, 231, 254, 139, 113, 128, 255, 117, 171, 236, 254, 49, 220, 20, 255, 59, 20, 171, 255, 228, 109, 188, 0, 20, 225, 32, 254, 195, 16, 174, 0, 227, 254, 136, 1, 135, 39, 105, 0, 150, 77, 206, 255, 210, 238, 226, 0, 55, 212, 132, 254, 239, 57, 124, 0, 170, 194, 93, 255, 249, 16, 247, 255, 24, 151, 62, 255, 10, 151, 10, 0, 79, 139, 178, 255, 120, 242, 202, 0, 26, 219, 213, 0, 62, 125, 35, 255, 144, 2, 108, 255, 230, 33, 83, 255, 81, 45, 216, 1, 224, 62, 17, 0, 214, 217, 125, 0, 98, 153, 153, 255, 179, 176, 106, 254, 131, 93, 138, 255, 109, 62, 36, 255, 178, 121, 32, 255, 120, 252, 70, 0, 220, 248, 37, 0, 204, 88, 103, 1, 128, 220, 251, 255, 236, 227, 7, 1, 106, 49, 198, 255, 60, 56, 107, 0, 99, 114, 238, 0, 220, 204, 94, 1, 73, 187, 1, 0, 89, 154, 34, 0, 78, 217, 165, 255, 14, 195, 249, 255, 9, 230, 253, 255, 205, 135, 245, 0, 26, 252, 7, 255, 84, 205, 27, 1, 134, 2, 112, 0, 37, 158, 32, 0, 231, 91, 237, 255, 191, 170, 204, 255, 152, 7, 222, 0, 109, 192, 49, 0, 193, 166, 146, 255, 232, 19, 181, 255, 105, 142, 52, 255, 103, 16, 27, 1, 253, 200, 165, 0, 195, 217, 4, 255, 52, 189, 144, 255, 123, 155, 160, 254, 87, 130, 54, 255, 78, 120, 61, 255, 14, 56, 41, 0, 25, 41, 125, 255, 87, 168, 245, 0, 214, 165, 70, 0, 212, 169, 6, 255, 219, 211, 194, 254, 72, 93, 164, 255, 197, 33, 103, 255, 43, 142, 141, 0, 131, 225, 172, 0, 244, 105, 28, 0, 68, 68, 225, 0, 136, 84, 13, 255, 130, 57, 40, 254, 139, 77, 56, 0, 84, 150, 53, 0, 54, 95, 157, 0, 144, 13, 177, 254, 95, 115, 186, 0, 117, 23, 118, 255, 244, 166, 241, 255, 11, 186, 135, 0, 178, 106, 203, 255, 97, 218, 93, 0, 43, 253, 45, 0, 164, 152, 4, 0, 139, 118, 239, 0, 96, 1, 24, 254, 235, 153, 211, 255, 168, 110, 20, 255, 50, 239, 176, 0, 114, 41, 232, 0, 193, 250, 53, 0, 254, 160, 111, 254, 136, 122, 41, 255, 97, 108, 67, 0, 215, 152, 23, 255, 140, 209, 212, 0, 42, 189, 163, 0, 202, 42, 50, 255, 106, 106, 189, 255, 190, 68, 217, 255, 233, 58, 117, 0, 229, 220, 243, 1, 197, 3, 4, 0, 37, 120, 54, 254, 4, 156, 134, 255, 36, 61, 171, 254, 165, 136, 100, 255, 212, 232, 14, 0, 90, 174, 10, 0, 216, 198, 65, 255, 12, 3, 64, 0, 116, 113, 115, 255, 248, 103, 8, 0, 231, 125, 18, 255, 160, 28, 197, 0, 30, 184, 35, 1, 223, 73, 249, 255, 123, 20, 46, 254, 135, 56, 37, 255, 173, 13, 229, 1, 119, 161, 34, 255, 245, 61, 73, 0, 205, 125, 112, 0, 137, 104, 134, 0, 217, 246, 30, 255, 237, 142, 143, 0, 65, 159, 102, 255, 108, 164, 190, 0, 219, 117, 173, 255, 34, 37, 120, 254, 200, 69, 80, 0, 31, 124, 218, 254, 74, 27, 160, 255, 186, 154, 199, 255, 71, 199, 252, 0, 104, 81, 159, 1, 17, 200, 39, 0, 211, 61, 192, 1, 26, 238, 91, 0, 148, 217, 12, 0, 59, 91, 213, 255, 11, 81, 183, 255, 129, 230, 122, 255, 114, 203, 145, 1, 119, 180, 66, 255, 72, 138, 180, 0, 224, 149, 106, 0, 119, 82, 104, 255, 208, 140, 43, 0, 98, 9, 182, 255, 205, 101, 134, 255, 18, 101, 38, 0, 95, 197, 166, 255, 203, 241, 147, 0, 62, 208, 145, 255, 133, 246, 251, 0, 2, 169, 14, 0, 13, 247, 184, 0, 142, 7, 254, 0, 36, 200, 23, 255, 88, 205, 223, 0, 91, 129, 52, 255, 21, 186, 30, 0, 143, 228, 210, 1, 247, 234, 248, 255, 230, 69, 31, 254, 176, 186, 135, 255, 238, 205, 52, 1, 139, 79, 43, 0, 17, 176, 217, 254, 32, 243, 67, 0, 242, 111, 233, 0, 44, 35, 9, 255, 227, 114, 81, 1, 4, 71, 12, 255, 38, 105, 191, 0, 7, 117, 50, 255, 81, 79, 16, 0, 63, 68, 65, 255, 157, 36, 110, 255, 77, 241, 3, 255, 226, 45, 251, 1, 142, 25, 206, 0, 120, 123, 209, 1, 28, 254, 238, 255, 5, 128, 126, 255, 91, 222, 215, 255, 162, 15, 191, 0, 86, 240, 73, 0, 135, 185, 81, 254, 44, 241, 163, 0, 212, 219, 210, 255, 112, 162, 155, 0, 207, 101, 118, 0, 168, 72, 56, 255, 196, 5, 52, 0, 72, 172, 242, 255, 126, 22, 157, 255, 146, 96, 59, 255, 162, 121, 152, 254, 140, 16, 95, 0, 195, 254, 200, 254, 82, 150, 162, 0, 119, 43, 145, 254, 204, 172, 78, 255, 166, 224, 159, 0, 104, 19, 237, 255, 245, 126, 208, 255, 226, 59, 213, 0, 117, 217, 197, 0, 152, 72, 237], 'i8', ALLOC_NONE, Runtime.GLOBAL_BASE + 10240)
allocate([220, 31, 23, 254, 14, 90, 231, 255, 188, 212, 64, 1, 60, 101, 246, 255, 85, 24, 86, 0, 1, 177, 109, 0, 146, 83, 32, 1, 75, 182, 192, 0, 119, 241, 224, 0, 185, 237, 27, 255, 184, 101, 82, 1, 235, 37, 77, 255, 253, 134, 19, 0, 232, 246, 122, 0, 60, 106, 179, 0, 195, 11, 12, 0, 109, 66, 235, 1, 125, 113, 59, 0, 61, 40, 164, 0, 175, 104, 240, 0, 2, 47, 187, 255, 50, 12, 141, 0, 194, 139, 181, 255, 135, 250, 104, 0, 97, 92, 222, 255, 217, 149, 201, 255, 203, 241, 118, 255, 79, 151, 67, 0, 122, 142, 218, 255, 149, 245, 239, 0, 138, 42, 200, 254, 80, 37, 97, 255, 124, 112, 167, 255, 36, 138, 87, 255, 130, 29, 147, 255, 241, 87, 78, 255, 204, 97, 19, 1, 177, 209, 22, 255, 247, 227, 127, 254, 99, 119, 83, 255, 212, 25, 198, 1, 16, 179, 179, 0, 145, 77, 172, 254, 89, 153, 14, 255, 218, 189, 167, 0, 107, 233, 59, 255, 35, 33, 243, 254, 44, 112, 112, 255, 161, 127, 79, 1, 204, 175, 10, 0, 40, 21, 138, 254, 104, 116, 228, 0, 199, 95, 137, 255, 133, 190, 168, 255, 146, 165, 234, 1, 183, 99, 39, 0, 183, 220, 54, 254, 255, 222, 133, 0, 162, 219, 121, 254, 63, 239, 6, 0, 225, 102, 54, 255, 251, 18, 246, 0, 4, 34, 129, 1, 135, 36, 131, 0, 206, 50, 59, 1, 15, 97, 183, 0, 171, 216, 135, 255, 101, 152, 43, 255, 150, 251, 91, 0, 38, 145, 95, 0, 34, 204, 38, 254, 178, 140, 83, 255, 25, 129, 243, 255, 76, 144, 37, 0, 106, 36, 26, 254, 118, 144, 172, 255, 68, 186, 229, 255, 107, 161, 213, 255, 46, 163, 68, 255, 149, 170, 253, 0, 187, 17, 15, 0, 218, 160, 165, 255, 171, 35, 246, 1, 96, 13, 19, 0, 165, 203, 117, 0, 214, 107, 192, 255, 244, 123, 177, 1, 100, 3, 104, 0, 178, 242, 97, 255, 251, 76, 130, 255, 211, 77, 42, 1, 250, 79, 70, 255, 63, 244, 80, 1, 105, 101, 246, 0, 61, 136, 58, 1, 238, 91, 213, 0, 14, 59, 98, 255, 167, 84, 77, 0, 17, 132, 46, 254, 57, 175, 197, 255, 185, 62, 184, 0, 76, 64, 207, 0, 172, 175, 208, 254, 175, 74, 37, 0, 138, 27, 211, 254, 148, 125, 194, 0, 10, 89, 81, 0, 168, 203, 101, 255, 43, 213, 209, 1, 235, 245, 54, 0, 30, 35, 226, 255, 9, 126, 70, 0, 226, 125, 94, 254, 156, 117, 20, 255, 57, 248, 112, 1, 230, 48, 64, 255, 164, 92, 166, 1, 224, 214, 230, 255, 36, 120, 143, 0, 55, 8, 43, 255, 251, 1, 245, 1, 106, 98, 165, 0, 74, 107, 106, 254, 53, 4, 54, 255, 90, 178, 150, 1, 3, 120, 123, 255, 244, 5, 89, 1, 114, 250, 61, 255, 254, 153, 82, 1, 77, 15, 17, 0, 57, 238, 90, 1, 95, 223, 230, 0, 236, 52, 47, 254, 103, 148, 164, 255, 121, 207, 36, 1, 18, 16, 185, 255, 75, 20, 74, 0, 187, 11, 101, 0, 46, 48, 129, 255, 22, 239, 210, 255, 77, 236, 129, 255, 111, 77, 204, 255, 61, 72, 97, 255, 199, 217, 251, 255, 42, 215, 204, 0, 133, 145, 201, 255, 57, 230, 146, 1, 235, 100, 198, 0, 146, 73, 35, 254, 108, 198, 20, 255, 182, 79, 210, 255, 82, 103, 136, 0, 246, 108, 176, 0, 34, 17, 60, 255, 19, 74, 114, 254, 168, 170, 78, 255, 157, 239, 20, 255, 149, 41, 168, 0, 58, 121, 28, 0, 79, 179, 134, 255, 231, 121, 135, 255, 174, 209, 98, 255, 243, 122, 190, 0, 171, 166, 205, 0, 212, 116, 48, 0, 29, 108, 66, 255, 162, 222, 182, 1, 14, 119, 21, 0, 213, 39, 249, 255, 254, 223, 228, 255, 183, 165, 198, 0, 133, 190, 48, 0, 124, 208, 109, 255, 119, 175, 85, 255, 9, 209, 121, 1, 48, 171, 189, 255, 195, 71, 134, 1, 136, 219, 51, 255, 182, 91, 141, 254, 49, 159, 72, 0, 35, 118, 245, 255, 112, 186, 227, 255, 59, 137, 31, 0, 137, 44, 163, 0, 114, 103, 60, 254, 8, 213, 150, 0, 162, 10, 113, 255, 194, 104, 72, 0, 220, 131, 116, 255, 178, 79, 92, 0, 203, 250, 213, 254, 93, 193, 189, 255, 130, 255, 34, 254, 212, 188, 151, 0, 136, 17, 20, 255, 20, 101, 83, 255, 212, 206, 166, 0, 229, 238, 73, 255, 151, 74, 3, 255, 168, 87, 215, 0, 155, 188, 133, 255, 166, 129, 73, 0, 240, 79, 133, 255, 178, 211, 81, 255, 203, 72, 163, 254, 193, 168, 165, 0, 14, 164, 199, 254, 30, 255, 204, 0, 65, 72, 91, 1, 166, 74, 102, 255, 200, 42, 0, 255, 194, 113, 227, 255, 66, 23, 208, 0, 229, 216, 100, 255, 24, 239, 26, 0, 10, 233, 62, 255, 123, 10, 178, 1, 26, 36, 174, 255, 119, 219, 199, 1, 45, 163, 190, 0, 16, 168, 42, 0, 166, 57, 198, 255, 28, 26, 26, 0, 126, 165, 231, 0, 251, 108, 100, 255, 61, 229, 121, 255, 58, 118, 138, 0, 76, 207, 17, 0, 13, 34, 112, 254, 89, 16, 168, 0, 37, 208, 105, 255, 35, 201, 215, 255, 40, 106, 101, 254, 6, 239, 114, 0, 40, 103, 226, 254, 246, 127, 110, 255, 63, 167, 58, 0, 132, 240, 142, 0, 5, 158, 88, 255, 129, 73, 158, 255, 94, 89, 146, 0, 230, 54, 146, 0, 8, 45, 173, 0, 79, 169, 1, 0, 115, 186, 247, 0, 84, 64, 131, 0, 67, 224, 253, 255, 207, 189, 64, 0, 154, 28, 81, 1, 45, 184, 54, 255, 87, 212, 224, 255, 0, 96, 73, 255, 129, 33, 235, 1, 52, 66, 80, 255, 251, 174, 155, 255, 4, 179, 37, 0, 234, 164, 93, 254, 93, 175, 253, 0, 198, 69, 87, 255, 224, 106, 46, 0, 99, 29, 210, 0, 62, 188, 114, 255, 44, 234, 8, 0, 169, 175, 247, 255, 23, 109, 137, 255, 229, 182, 39, 0, 192, 165, 94, 254, 245, 101, 217, 0, 191, 88, 96, 0, 196, 94, 99, 255, 106, 238, 11, 254, 53, 126, 243, 0, 94, 1, 101, 255, 46, 147, 2, 0, 201, 124, 124, 255, 141, 12, 218, 0, 13, 166, 157, 1, 48, 251, 237, 255, 155, 250, 124, 255, 106, 148, 146, 255, 182, 13, 202, 0, 28, 61, 167, 0, 217, 152, 8, 254, 220, 130, 45, 255, 200, 230, 255, 1, 55, 65, 87, 255, 93, 191, 97, 254, 114, 251, 14, 0, 32, 105, 92, 1, 26, 207, 141, 0, 24, 207, 13, 254, 21, 50, 48, 255, 186, 148, 116, 255, 211, 43, 225, 0, 37, 34, 162, 254, 164, 210, 42, 255, 68, 23, 96, 255, 182, 214, 8, 255, 245, 117, 137, 255, 66, 195, 50, 0, 75, 12, 83, 254, 80, 140, 164, 0, 9, 165, 36, 1, 228, 110, 227, 0, 241, 17, 90, 1, 25, 52, 212, 0, 6, 223, 12, 255, 139, 243, 57, 0, 12, 113, 75, 1, 246, 183, 191, 255, 213, 191, 69, 255, 230, 15, 142, 0, 1, 195, 196, 255, 138, 171, 47, 255, 64, 63, 106, 1, 16, 169, 214, 255, 207, 174, 56, 1, 88, 73, 133, 255, 182, 133, 140, 0, 177, 14, 25, 255, 147, 184, 53, 255, 10, 227, 161, 255, 120, 216, 244, 255, 73, 77, 233, 0, 157, 238, 139, 1, 59, 65, 233, 0, 70, 251, 216, 1, 41, 184, 153, 255, 32, 203, 112, 0, 146, 147, 253, 0, 87, 101, 109, 1, 44, 82, 133, 255, 244, 150, 53, 255, 94, 152, 232, 255, 59, 93, 39, 255, 88, 147, 220, 255, 78, 81, 13, 1, 32, 47, 252, 255, 160, 19, 114, 255, 93, 107, 39, 255, 118, 16, 211, 1, 185, 119, 209, 255, 227, 219, 127, 254, 88, 105, 236, 255, 162, 110, 23, 255, 36, 166, 110, 255, 91, 236, 221, 255, 66, 234, 116, 0, 111, 19, 244, 254, 10, 233, 26, 0, 32, 183, 6, 254, 2, 191, 242, 0, 218, 156, 53, 254, 41, 60, 70, 255, 168, 236, 111, 0, 121, 185, 126, 255, 238, 142, 207, 255, 55, 126, 52, 0, 220, 129, 208, 254, 80, 204, 164, 255, 67, 23, 144, 254, 218, 40, 108, 255, 127, 202, 164, 0, 203, 33, 3, 255, 2, 158, 0, 0, 37, 96, 188, 255, 192, 49, 74, 0, 109, 4, 0, 0, 111, 167, 10, 254, 91, 218, 135, 255, 203, 66, 173, 255, 150, 194, 226, 0, 201, 253, 6, 255, 174, 102, 121, 0, 205, 191, 110, 0, 53, 194, 4, 0, 81, 40, 45, 254, 35, 102, 143, 255, 12, 108, 198, 255, 16, 27, 232, 255, 252, 71, 186, 1, 176, 110, 114, 0, 142, 3, 117, 1, 113, 77, 142, 0, 19, 156, 197, 1, 92, 47, 252, 0, 53, 232, 22, 1, 54, 18, 235, 0, 46, 35, 189, 255, 236, 212, 129, 0, 2, 96, 208, 254, 200, 238, 199, 255, 59, 175, 164, 255, 146, 43, 231, 0, 194, 217, 52, 255, 3, 223, 12, 0, 138, 54, 178, 254, 85, 235, 207, 0, 232, 207, 34, 0, 49, 52, 50, 255, 166, 113, 89, 255, 10, 45, 216, 255, 62, 173, 28, 0, 111, 165, 246, 0, 118, 115, 91, 255, 128, 84, 60, 0, 167, 144, 203, 0, 87, 13, 243, 0, 22, 30, 228, 1, 177, 113, 146, 255, 129, 170, 230, 254, 252, 153, 129, 255, 145, 225, 43, 0, 70, 231, 5, 255, 122, 105, 126, 254, 86, 246, 148, 255, 110, 37, 154, 254, 209, 3, 91, 0, 68, 145, 62, 0, 228, 16, 165, 255, 55, 221, 249, 254, 178, 210, 91, 0, 83, 146, 226, 254, 69, 146, 186, 0, 93, 210, 104, 254, 16, 25, 173, 0, 231, 186, 38, 0, 189, 122, 140, 255, 251, 13, 112, 255, 105, 110, 93, 0, 251, 72, 170, 0, 192, 23, 223, 255, 24, 3, 202, 1, 225, 93, 228, 0, 153, 147, 199, 254, 109, 170, 22, 0, 248, 101, 246, 255, 178, 124, 12, 255, 178, 254, 102, 254, 55, 4, 65, 0, 125, 214, 180, 0, 183, 96, 147, 0, 45, 117, 23, 254, 132, 191, 249, 0, 143, 176, 203, 254, 136, 183, 54, 255, 146, 234, 177, 0, 146, 101, 86, 255, 44, 123, 143, 1, 33, 209, 152, 0, 192, 90, 41, 254, 83, 15, 125, 255, 213, 172, 82, 0, 215, 169, 144, 0, 16, 13, 34, 0, 32, 209, 100, 255, 84, 18, 249, 1, 197, 17, 236, 255, 217, 186, 230, 0, 49, 160, 176, 255, 111, 118, 97, 255, 237, 104, 235, 0, 79, 59, 92, 254, 69, 249, 11, 255, 35, 172, 74, 1, 19, 118, 68, 0, 222, 124, 165, 255, 180, 66, 35, 255, 86, 174, 246, 0, 43, 74, 111, 255, 126, 144, 86, 255, 228, 234, 91, 0, 242, 213, 24, 254, 69, 44, 235, 255, 220, 180, 35, 0, 8, 248, 7, 255, 102, 47, 92, 255, 240, 205, 102, 255, 113, 230, 171, 1, 31, 185, 201, 255, 194, 246, 70, 255, 122, 17, 187, 0, 134, 70, 199, 255, 149, 3, 150, 255, 117, 63, 103, 0, 65, 104, 123, 255, 212, 54, 19, 1, 6, 141, 88, 0, 83, 134, 243, 255, 136, 53, 103, 0, 169, 27, 180, 0, 177, 49, 24, 0, 111, 54, 167, 0, 195, 61, 215, 255, 31, 1, 108, 1, 60, 42, 70, 0, 185, 3, 162, 255, 194, 149, 40, 255, 246, 127, 38, 254, 190, 119, 38, 255, 61, 119, 8, 1, 96, 161, 219, 255, 42, 203, 221, 1, 177, 242, 164, 255, 245, 159, 10, 0, 116, 196, 0, 0, 5, 93, 205, 254, 128, 127, 179, 0, 125, 237, 246, 255, 149, 162, 217, 255, 87, 37, 20, 254, 140, 238, 192, 0, 9, 9, 193, 0, 97, 1, 226, 0, 29, 38, 10, 0, 0, 136, 63, 255, 229, 72, 210, 254, 38, 134, 92, 255, 78, 218, 208, 1, 104, 36, 84, 255, 12, 5, 193, 255, 242, 175, 61, 255, 191, 169, 46, 1, 179, 147, 147, 255, 113, 190, 139, 254, 125, 172, 31, 0, 3, 75, 252, 254, 215, 36, 15, 0, 193, 27, 24, 1, 255, 69, 149, 255, 110, 129, 118, 0, 203, 93, 249, 0, 138, 137, 64, 254, 38, 70, 6, 0, 153, 116, 222, 0, 161, 74, 123, 0, 193, 99, 79, 255, 118, 59, 94, 255, 61, 12, 43, 1, 146, 177, 157, 0, 46, 147, 191, 0, 16, 255, 38, 0, 11, 51, 31, 1, 60, 58, 98, 255, 111, 194, 77, 1, 154, 91, 244, 0, 140, 40, 144, 1, 173, 10, 251, 0, 203, 209, 50, 254, 108, 130, 78, 0, 228, 180, 90, 0, 174, 7, 250, 0, 31, 174, 60, 0, 41, 171, 30, 0, 116, 99, 82, 255, 118, 193, 139, 255, 187, 173, 198, 254, 218, 111, 56, 0, 185, 123, 216, 0, 249, 158, 52, 0, 52, 180, 93, 255, 201, 9, 91, 255, 56, 45, 166, 254, 132, 155, 203, 255, 58, 232, 110, 0, 52, 211, 89, 255, 253, 0, 162, 1, 9, 87, 183, 0, 145, 136, 44, 1, 94, 122, 245, 0, 85, 188, 171, 1, 147, 92, 198, 0, 0, 8, 104, 0, 30, 95, 174, 0, 221, 230, 52, 1, 247, 247, 235, 255, 137, 174, 53, 255, 35, 21, 204, 255, 71, 227, 214, 1, 232, 82, 194, 0, 11, 48, 227, 255, 170, 73, 184, 255, 198, 251, 252, 254, 44, 112, 34, 0, 131, 101, 131, 255, 72, 168, 187, 0, 132, 135, 125, 255, 138, 104, 97, 255, 238, 184, 168, 255, 243, 104, 84, 255, 135, 216, 226, 255, 139, 144, 237, 0, 188, 137, 150, 1, 80, 56, 140, 255, 86, 169, 167, 255, 194, 78, 25, 255, 220, 17, 180, 255, 17, 13, 193, 0, 117, 137, 212, 255, 141, 224, 151, 0, 49, 244, 175, 0, 193, 99, 175, 255, 19, 99, 154, 1, 255, 65, 62, 255, 156, 210, 55, 255, 242, 244, 3, 255, 250, 14, 149, 0, 158, 88, 217, 255, 157, 207, 134, 254, 251, 232, 28, 0, 46, 156, 251, 255, 171, 56, 184, 255, 239, 51, 234, 0, 142, 138, 131, 255, 25, 254, 243, 1, 10, 201, 194, 0, 63, 97, 75, 0, 210, 239, 162, 0, 192, 200, 31, 1, 117, 214, 243, 0, 24, 71, 222, 254, 54, 40, 232, 255, 76, 183, 111, 254, 144, 14, 87, 255, 214, 79, 136, 255, 216, 196, 212, 0, 132, 27, 140, 254, 131, 5, 253, 0, 124, 108, 19, 255, 28, 215, 75, 0, 76, 222, 55, 254, 233, 182, 63, 0, 68, 171, 191, 254, 52, 111, 222, 255, 10, 105, 77, 255, 80, 170, 235, 0, 143, 24, 88, 255, 45, 231, 121, 0, 148, 129, 224, 1, 61, 246, 84, 0, 253, 46, 219, 255, 239, 76, 33, 0, 49, 148, 18, 254, 230, 37, 69, 0, 67, 134, 22, 254, 142, 155, 94, 0, 31, 157, 211, 254, 213, 42, 30, 255, 4, 228, 247, 254, 252, 176, 13, 255, 39, 0, 31, 254, 241, 244, 255, 255, 170, 45, 10, 254, 253, 222, 249, 0, 222, 114, 132, 0, 255, 47, 6, 255, 180, 163, 179, 1, 84, 94, 151, 255, 89, 209, 82, 254, 229, 52, 169, 255, 213, 236, 0, 1, 214, 56, 228, 255, 135, 119, 151, 255, 112, 201, 193, 0, 83, 160, 53, 254, 6, 151, 66, 0, 18, 162, 17, 0, 233, 97, 91, 0, 131, 5, 78, 1, 181, 120, 53, 255, 117, 95, 63, 255, 237, 117, 185, 0, 191, 126, 136, 255, 144, 119, 233, 0, 183, 57, 97, 1, 47, 201, 187, 255, 167, 165, 119, 1, 45, 100, 126, 0, 21, 98, 6, 254, 145, 150, 95, 255, 120, 54, 152, 0, 209, 98, 104, 0, 143, 111, 30, 254, 184, 148, 249, 0, 235, 216, 46, 0, 248, 202, 148, 255, 57, 95, 22, 0, 242, 225, 163, 0, 233, 247, 232, 255, 71, 171, 19, 255, 103, 244, 49, 255, 84, 103, 93, 255, 68, 121, 244, 1, 82, 224, 13, 0, 41, 79, 43, 255, 249, 206, 167, 255, 215, 52, 21, 254, 192, 32, 22, 255, 247, 111, 60, 0, 101, 74, 38, 255, 22, 91, 84, 254, 29, 28, 13, 255, 198, 231, 215, 254, 244, 154, 200, 0, 223, 137, 237, 0, 211, 132, 14, 0, 95, 64, 206, 255, 17, 62, 247, 255, 233, 131, 121, 1, 93, 23, 77, 0, 205, 204, 52, 254, 81, 189, 136, 0, 180, 219, 138, 1, 143, 18, 94, 0, 204, 43, 140, 254, 188, 175, 219, 0, 111, 98, 143, 255, 151, 63, 162, 255, 211, 50, 71, 254, 19, 146, 53, 0, 146, 45, 83, 254, 178, 82, 238, 255, 16, 133, 84, 255, 226, 198, 93, 255, 201, 97, 20, 255, 120, 118, 35, 255, 114, 50, 231, 255, 162, 229, 156, 255, 211, 26, 12, 0, 114, 39, 115, 255, 206, 212, 134, 0, 197, 217, 160, 255, 116, 129, 94, 254, 199, 215, 219, 255, 75, 223, 249, 1, 253, 116, 181, 255, 232, 215, 104, 255, 228, 130, 246, 255, 185, 117, 86, 0, 14, 5, 8, 0, 239, 29, 61, 1, 237, 87, 133, 255, 125, 146, 137, 254, 204, 168, 223, 0, 46, 168, 245, 0, 154, 105, 22, 0, 220, 212, 161, 255, 107, 69, 24, 255, 137, 218, 181, 255, 241, 84, 198, 255, 130, 122, 211, 255, 141, 8, 153, 255, 190, 177, 118, 0, 96, 89, 178, 0, 255, 16, 48, 254, 122, 96, 105, 255, 117, 54, 232, 255, 34, 126, 105, 255, 204, 67, 166, 0, 232, 52, 138, 255, 211, 147, 12, 0, 25, 54, 7, 0, 44, 15, 215, 254, 51, 236, 45, 0, 190, 68, 129, 1, 106, 147, 225, 0, 28, 93, 45, 254, 236, 141, 15, 255, 17, 61, 161, 0, 220, 115, 192, 0, 236, 145, 24, 254, 111, 168, 169, 0, 224, 58, 63, 255, 127, 164, 188, 0, 82, 234, 75, 1, 224, 158, 134, 0, 209, 68, 110, 1, 217, 166, 217, 0, 70, 225, 166, 1, 187, 193, 143, 255, 16, 7, 88, 255, 10, 205, 140, 0, 117, 192, 156, 1, 17, 56, 38, 0, 27, 124, 108, 1, 171, 215, 55, 255, 95, 253, 212, 0, 155, 135, 168, 255, 246, 178, 153, 254, 154, 68, 74, 0, 232, 61, 96, 254, 105, 132, 59, 0, 33, 76, 199, 1, 189, 176, 130, 255, 9, 104, 25, 254, 75, 198, 102, 255, 233, 1, 112, 0, 108, 220, 20, 255, 114, 230, 70, 0, 140, 194, 133, 255, 57, 158, 164, 254, 146, 6, 80, 255, 169, 196, 97, 1, 85, 183, 130, 0, 70, 158, 222, 1, 59, 237, 234, 255, 96, 25, 26, 255, 232, 175, 97, 255, 11, 121, 248, 254, 88, 35, 194, 0, 219, 180, 252, 254, 74, 8, 227, 0, 195, 227, 73, 1, 184, 110, 161, 255, 49, 233, 164, 1, 128, 53, 47, 0, 82, 14, 121, 255, 193, 190, 58, 0, 48, 174, 117, 255, 132, 23, 32, 0, 40, 10, 134, 1, 22, 51, 25, 255, 240, 11, 176, 255, 110, 57, 146, 0, 117, 143, 239, 1, 157, 101, 118, 255, 54, 84, 76, 0, 205, 184, 18, 255, 47, 4, 72, 255, 78, 112, 85, 255, 193, 50, 66, 1, 93, 16, 52, 255, 8, 105, 134, 0, 12, 109, 72, 255, 58, 156, 251, 0, 144, 35, 204, 0, 44, 160, 117, 254, 50, 107, 194, 0, 1, 68, 165, 255, 111, 110, 162, 0, 158, 83, 40, 254, 76, 214, 234, 0, 58, 216, 205, 255, 171, 96, 147, 255, 40, 227, 114, 1, 176, 227, 241, 0, 70, 249, 183, 1, 136, 84, 139, 255, 60, 122, 247, 254, 143, 9, 117, 255, 177, 174, 137, 254, 73, 247, 143, 0, 236, 185, 126, 255, 62, 25, 247, 255, 45, 64, 56, 255, 161, 244, 6, 0, 34, 57, 56, 1, 105, 202, 83, 0, 128, 147, 208, 0, 6, 103, 10, 255, 74, 138, 65, 255, 97, 80, 100, 255, 214, 174, 33, 255, 50, 134, 74, 255, 110, 151, 130, 254, 111, 84, 172, 0, 84, 199, 75, 254, 248, 59, 112, 255, 8, 216, 178, 1, 9, 183, 95, 0, 238, 27, 8, 254, 170, 205, 220, 0, 195, 229, 135, 0, 98, 76, 237, 255, 226, 91, 26, 1, 82, 219, 39, 255, 225, 190, 199, 1, 217, 200, 121, 255, 81, 179, 8, 255, 140, 65, 206, 0, 178, 207, 87, 254, 250, 252, 46, 255, 104, 89, 110, 1, 253, 189, 158, 255, 144, 214, 158, 255, 160, 245, 54, 255, 53, 183, 92, 1, 21, 200, 194, 255, 146, 33, 113, 1, 209, 1, 255, 0, 235, 106, 43, 255, 167, 52, 232, 0, 157, 229, 221, 0, 51, 30, 25, 0, 250, 221, 27, 1, 65, 147, 87, 255, 79, 123, 196, 0, 65, 196, 223, 255, 76, 44, 17, 1, 85, 241, 68, 0, 202, 183, 249, 255, 65, 212, 212, 255, 9, 33, 154, 1, 71, 59, 80, 0, 175, 194, 59, 255, 141, 72, 9, 0, 100, 160, 244, 0, 230, 208, 56, 0, 59, 25, 75, 254, 80, 194, 194, 0, 18, 3, 200, 254, 160, 159, 115, 0, 132, 143, 247, 1, 111, 93, 57, 255, 58, 237, 11, 1, 134, 222, 135, 255, 122, 163, 108, 1, 123, 43, 190, 255, 251, 189, 206, 254, 80, 182, 72, 255, 208, 246, 224, 1, 17, 60, 9, 0, 161, 207, 38, 0, 141, 109, 91, 0, 216, 15, 211, 255, 136, 78, 110, 0, 98, 163, 104, 255, 21, 80, 121, 255, 173, 178, 183, 1, 127, 143, 4, 0, 104, 60, 82, 254, 214, 16, 13, 255, 96, 238, 33, 1, 158, 148, 230, 255, 127, 129, 62, 255, 51, 255, 210, 255, 62, 141, 236, 254, 157, 55, 224, 255, 114, 39, 244, 0, 192, 188, 250, 255, 228, 76, 53, 0, 98, 84, 81, 255, 173, 203, 61, 254, 147, 50, 55, 255, 204, 235, 191, 0, 52, 197, 244, 0, 88, 43, 211, 254, 27, 191, 119, 0, 188, 231, 154, 0, 66, 81, 161, 0, 92, 193, 160, 1, 250, 227, 120, 0, 123, 55, 226, 0, 184, 17, 72, 0, 133, 168, 10, 254, 22, 135, 156, 255, 41, 25, 103, 255, 48, 202, 58, 0, 186, 149, 81, 255, 188, 134, 239, 0, 235, 181, 189, 254, 217, 139, 188, 255, 74, 48, 82, 0, 46, 218, 229, 0, 189, 253, 251, 0, 50, 229, 12, 255, 211, 141, 191, 1, 128, 244, 25, 255, 169, 231, 122, 254, 86, 47, 189, 255, 132, 183, 23, 255, 37, 178, 150, 255, 51, 137, 253, 0, 200, 78, 31, 0, 22, 105, 50, 0, 130, 60, 0, 0, 132, 163, 91, 254, 23, 231, 187, 0, 192, 79, 239, 0, 157, 102, 164, 255, 192, 82, 20, 1, 24, 181, 103, 255, 240, 9, 234, 0, 1, 123, 164, 255, 133, 233, 0, 255, 202, 242, 242, 0, 60, 186, 245, 0, 241, 16, 199, 255, 224, 116, 158, 254, 191, 125, 91, 255, 224, 86, 207, 0, 121, 37, 231, 255, 227, 9, 198, 255, 15, 153, 239, 255, 121, 232, 217, 254, 75, 112, 82, 0, 95, 12, 57, 254, 51, 214, 105, 255, 148, 220, 97, 1, 199, 98, 36, 0, 156, 209, 12, 254, 10, 212, 52, 0, 217, 180, 55, 254, 212, 170, 232, 255, 216, 20, 84, 255, 157, 250, 135, 0, 157, 99, 127, 254, 1, 206, 41, 0, 149, 36, 70, 1, 54, 196, 201, 255, 87, 116, 0, 254, 235, 171, 150, 0, 27, 163, 234, 0, 202, 135, 180, 0, 208, 95, 0, 254, 123, 156, 93, 0, 183, 62, 75, 0, 137, 235, 182, 0, 204, 225, 255, 255, 214, 139, 210, 255, 2, 115, 8, 255, 29, 12, 111, 0, 52, 156, 1, 0, 253, 21, 251, 255, 37, 165, 31, 254, 12, 130, 211, 0, 106, 18, 53, 254, 42, 99, 154, 0, 14, 217, 61, 254, 216, 11, 92, 255, 200, 197, 112, 254, 147, 38, 199, 0, 36, 252, 120, 254, 107, 169, 77, 0, 1, 123, 159, 255, 207, 75, 102, 0, 163, 175, 196, 0, 44, 1, 240, 0, 120, 186, 176, 254, 13, 98, 76, 255, 237, 124, 241, 255, 232, 146, 188, 255, 200, 96, 224, 0, 204, 31, 41, 0, 208, 200, 13, 0, 21, 225, 96, 255, 175, 156, 196, 0, 247, 208, 126, 0, 62, 184, 244, 254, 2, 171, 81, 0, 85, 115, 158, 0, 54, 64, 45, 255, 19, 138, 114, 0, 135, 71, 205, 0, 227, 47, 147, 1, 218, 231, 66, 0, 253, 209, 28, 0, 244, 15, 173, 255, 6, 15, 118, 254, 16, 150, 208, 255, 185, 22, 50, 255, 86, 112, 207, 255, 75, 113, 215, 1, 63, 146, 43, 255, 4, 225, 19, 254, 227, 23, 62, 255, 14, 255, 214, 254, 45, 8, 205, 255, 87, 197, 151, 254, 210, 82, 215, 255, 245, 248, 247, 255, 128, 248, 70, 0, 225, 247, 87, 0, 90, 120, 70, 0, 213, 245, 92, 0, 13, 133, 226, 0, 47, 181, 5, 1, 92, 163, 105, 255, 6, 30, 133, 254, 232, 178, 61, 255, 230, 149, 24, 255, 18, 49, 158, 0, 228, 100, 61, 254, 116, 243, 251, 255, 77, 75, 92, 1, 81, 219, 147, 255, 76, 163, 254, 254, 141, 213, 246, 0, 232, 37, 152, 254, 97, 44, 100, 0, 201, 37, 50, 1, 212, 244, 57, 0, 174, 171, 183, 255, 249, 74, 112, 0, 166, 156, 30, 0, 222, 221, 97, 255, 243, 93, 73, 254, 251, 101, 100, 255, 216, 217, 93, 255, 254, 138, 187, 255, 142, 190, 52, 255, 59, 203, 177, 255, 200, 94, 52, 0, 115, 114, 158, 255, 165, 152, 104, 1, 126, 99, 226, 255, 118, 157, 244, 1, 107, 200, 16, 0, 193, 90, 229, 0, 121, 6, 88, 0, 156, 32, 93, 254, 125, 241, 211, 255, 14, 237, 157, 255, 165, 154, 21, 255, 184, 224, 22, 255, 250, 24, 152, 255, 113, 77, 31, 0, 247, 171, 23, 255, 237, 177, 204, 255, 52, 137, 145, 255, 194, 182, 114, 0, 224, 234, 149, 0, 10, 111, 103, 1, 201, 129, 4, 0, 238, 142, 78, 0, 52, 6, 40, 255, 110, 213, 165, 254, 60, 207, 253, 0, 62, 215, 69, 0, 96, 97, 0, 255, 49, 45, 202, 0, 120, 121, 22, 255, 235, 139, 48, 1, 198, 45, 34, 255, 182, 50, 27, 1, 131, 210, 91, 255, 46, 54, 128, 0, 175, 123, 105, 255, 198, 141, 78, 254, 67, 244, 239, 255, 245, 54, 103, 254, 78, 38, 242, 255, 2, 92, 249, 254, 251, 174, 87, 255, 139, 63, 144, 0, 24, 108, 27, 255, 34, 102, 18, 1, 34, 22, 152, 0, 66, 229, 118, 254, 50, 143, 99, 0, 144, 169, 149, 1, 118, 30, 152, 0, 178, 8, 121, 1, 8, 159, 18, 0, 90, 101, 230, 255, 129, 29, 119, 0, 68, 36, 11, 1, 232, 183, 55, 0, 23, 255, 96, 255, 161, 41, 193, 255, 63, 139, 222, 0, 15, 179, 243, 0, 255, 100, 15, 255, 82, 53, 135, 0, 137, 57, 149, 1, 99, 240, 170, 255, 22, 230, 228, 254, 49, 180, 82, 255, 61, 82, 43, 0, 110, 245, 217, 0, 199, 125, 61, 0, 46, 253, 52, 0, 141, 197, 219, 0, 211, 159, 193, 0, 55, 121, 105, 254, 183, 20, 129, 0, 169, 119, 170, 255, 203, 178, 139, 255, 135, 40, 182, 255, 172, 13, 202, 255, 65, 178, 148, 0, 8, 207, 43, 0, 122, 53, 127, 1, 74, 161, 48, 0, 227, 214, 128, 254, 86, 11, 243, 255, 100, 86, 7, 1, 245, 68, 134, 255, 61, 43, 21, 1, 152, 84, 94, 255, 190, 60, 250, 254, 239, 118, 232, 255, 214, 136, 37, 1, 113, 76, 107, 255, 93, 104, 100, 1, 144, 206, 23, 255, 110, 150, 154, 1, 228, 103, 185, 0, 218, 49, 50, 254, 135, 77, 139, 255, 185, 1, 78, 0, 0, 161, 148, 255, 97, 29, 233, 255, 207, 148, 149, 255, 160, 168, 0, 0, 91, 128, 171, 255, 6, 28, 19, 254, 11, 111, 247, 0, 39, 187, 150, 255, 138, 232, 149, 0, 117, 62, 68, 255, 63, 216, 188, 255, 235, 234, 32, 254, 29, 57, 160, 255, 25, 12, 241, 1, 169, 60, 191, 0, 32, 131, 141, 255, 237, 159, 123, 255, 94, 197, 94, 254, 116, 254, 3, 255, 92, 179, 97, 254, 121, 97, 92, 255, 170, 112, 14, 0, 21, 149, 248, 0, 248, 227, 3, 0, 80, 96, 109, 0, 75, 192, 74, 1, 12, 90, 226, 255, 161, 106, 68, 1, 208, 114, 127, 255, 114, 42, 255, 254, 74, 26, 74, 255, 247, 179, 150, 254, 121, 140, 60, 0, 147, 70, 200, 255, 214, 40, 161, 255, 161, 188, 201, 255, 141, 65, 135, 255, 242, 115, 252, 0, 62, 47, 202, 0, 180, 149, 255, 254, 130, 55, 237, 0, 165, 17, 186, 255, 10, 169, 194, 0, 156, 109, 218, 255, 112, 140, 123, 255, 104, 128, 223, 254, 177, 142, 108, 255, 121, 37, 219, 255, 128, 77, 18, 255, 111, 108, 23, 1, 91, 192, 75, 0, 174, 245, 22, 255, 4, 236, 62, 255, 43, 64, 153, 1, 227, 173, 254, 0, 237, 122, 132, 1, 127, 89, 186, 255, 142, 82, 128, 254, 252, 84, 174, 0, 90, 179, 177, 1, 243, 214, 87, 255, 103, 60, 162, 255, 208, 130, 14, 255, 11, 130, 139, 0, 206, 129, 219, 255, 94, 217, 157, 255, 239, 230, 230, 255, 116, 115, 159, 254, 164, 107, 95, 0, 51, 218, 2, 1, 216, 125, 198, 255, 140, 202, 128, 254, 11, 95, 68, 255, 55, 9, 93, 254, 174, 153, 6, 255, 204, 172, 96, 0, 69, 160, 110, 0, 213, 38, 49, 254, 27, 80, 213, 0, 118, 125, 114, 0, 70, 70, 67, 255, 15, 142, 73, 255, 131, 122, 185, 255, 243, 20, 50, 254, 130, 237, 40, 0, 210, 159, 140, 1, 197, 151, 65, 255, 84, 153, 66, 0, 195, 126, 90, 0, 16, 238, 236, 1, 118, 187, 102, 255, 3, 24, 133, 255, 187, 69, 230, 0, 56, 197, 92, 1, 213, 69, 94, 255, 80, 138, 229, 1, 206, 7, 230, 0, 222, 111, 230, 1, 91, 233, 119, 255, 9, 89, 7, 1, 2, 98, 1, 0, 148, 74, 133, 255, 51, 246, 180, 255, 228, 177, 112, 1, 58, 189, 108, 255, 194, 203, 237, 254, 21, 209, 195, 0, 147, 10, 35, 1, 86, 157, 226, 0, 31, 163, 139, 254, 56, 7, 75, 255, 62, 90, 116, 0, 181, 60, 169, 0, 138, 162, 212, 254, 81, 167, 31, 0, 205, 90, 112, 255, 33, 112, 227, 0, 83, 151, 117, 1, 177, 224, 73, 255, 174, 144, 217, 255, 230, 204, 79, 255, 22, 77, 232, 255, 114, 78, 234, 0, 224, 57, 126, 254, 9, 49, 141, 0, 242, 147, 165, 1, 104, 182, 140, 255, 167, 132, 12, 1, 123, 68, 127, 0, 225, 87, 39, 1, 251, 108, 8, 0, 198, 193, 143, 1, 121, 135, 207, 255, 172, 22, 70, 0, 50, 68, 116, 255, 101, 175, 40, 255, 248, 105, 233, 0, 166, 203, 7, 0, 110, 197, 218, 0, 215, 254, 26, 254, 168, 226, 253, 0, 31, 143, 96, 0, 11, 103, 41, 0, 183, 129, 203, 254, 100, 247, 74, 255, 213, 126, 132, 0, 210, 147, 44, 0, 199, 234, 27, 1, 148, 47, 181, 0, 155, 91, 158, 1, 54, 105, 175, 255, 2, 78, 145, 254, 102, 154, 95, 0, 128, 207, 127, 254, 52, 124, 236, 255, 130, 84, 71, 0, 221, 243, 211, 0, 152, 170, 207, 0, 222, 106, 199, 0, 183, 84, 94, 254, 92, 200, 56, 255, 138, 182, 115, 1, 142, 96, 146, 0, 133, 136, 228, 0, 97, 18, 150, 0, 55, 251, 66, 0, 140, 102, 4, 0, 202, 103, 151, 0, 30, 19, 248, 255, 51, 184, 207, 0, 202, 198, 89, 0, 55, 197, 225, 254, 169, 95, 249, 255, 66, 65, 68, 255, 188, 234, 126, 0, 166, 223, 100, 1, 112, 239, 244, 0, 144, 23, 194, 0, 58, 39, 182, 0, 244, 44, 24, 254, 175, 68, 179, 255, 152, 118, 154, 1, 176, 162, 130, 0, 217, 114, 204, 254, 173, 126, 78, 255, 33, 222, 30, 255, 36, 2, 91, 255, 2, 143, 243, 0, 9, 235, 215, 0, 3, 171, 151, 1, 24, 215, 245, 255, 168, 47, 164, 254, 241, 146, 207, 0, 69, 129, 180, 0, 68, 243, 113, 0, 144, 53, 72, 254, 251, 45, 14, 0, 23, 110, 168, 0, 68, 68, 79, 255, 110, 70, 95, 254, 174, 91, 144, 255, 33, 206, 95, 255, 137, 41, 7, 255, 19, 187, 153, 254, 35, 255, 112, 255, 9, 145, 185, 254, 50, 157, 37, 0, 11, 112, 49, 1, 102, 8, 190, 255, 234, 243, 169, 1, 60, 85, 23, 0, 74, 39, 189, 0, 116, 49, 239, 0, 173, 213, 210, 0, 46, 161, 108, 255, 159, 150, 37, 0, 196, 120, 185, 255, 34, 98, 6, 255, 153, 195, 62, 255, 97, 230, 71, 255, 102, 61, 76, 0, 26, 212, 236, 255, 164, 97, 16, 0, 198, 59, 146, 0, 163, 23, 196, 0, 56, 24, 61, 0, 181, 98, 193, 0, 251, 147, 229, 255, 98, 189, 24, 255, 46, 54, 206, 255, 234, 82, 246, 0, 183, 103, 38, 1, 109, 62, 204, 0, 10, 240, 224, 0, 146, 22, 117, 255, 142, 154, 120, 0, 69, 212, 35, 0, 208, 99, 118, 1, 121, 255, 3, 255, 72, 6, 194, 0, 117, 17, 197, 255, 125, 15, 23, 0, 154, 79, 153, 0, 214, 94, 197, 255, 185, 55, 147, 255, 62, 254, 78, 254, 127, 82, 153, 0, 110, 102, 63, 255, 108, 82, 161, 255, 105, 187, 212, 1, 80, 138, 39, 0, 60, 255, 93, 255, 72, 12, 186, 0, 210, 251, 31, 1, 190, 167, 144, 255, 228, 44, 19, 254, 128, 67, 232, 0, 214, 249, 107, 254, 136, 145, 86, 255, 132, 46, 176, 0, 189, 187, 227, 255, 208, 22, 140, 0, 217, 211, 116, 0, 50, 81, 186, 254, 139, 250, 31, 0, 30, 64, 198, 1, 135, 155, 100, 0, 160, 206, 23, 254, 187, 162, 211, 255, 16, 188, 63, 0, 254, 208, 49, 0, 85, 84, 191, 0, 241, 192, 242, 255, 153, 126, 145, 1, 234, 162, 162, 255, 230, 97, 216, 1, 64, 135, 126, 0, 190, 148, 223, 1, 52, 0, 43, 255, 28, 39, 189, 1, 64, 136, 238, 0, 175, 196, 185, 0, 98, 226, 213, 255, 127, 159, 244, 1, 226, 175, 60, 0, 160, 233, 142, 1, 180, 243, 207, 255, 69, 152, 89, 1, 31, 101, 21, 0, 144, 25, 164, 254, 139, 191, 209, 0, 91, 25, 121, 0, 32, 147, 5, 0, 39, 186, 123, 255, 63, 115, 230, 255, 93, 167, 198, 255, 143, 213, 220, 255, 179, 156, 19, 255, 25, 66, 122, 0, 214, 160, 217, 255, 2, 45, 62, 255, 106, 79, 146, 254, 51, 137, 99, 255, 87, 100, 231, 255, 175, 145, 232, 255, 101, 184, 1, 255, 174, 9, 125, 0, 82, 37, 161, 1, 36, 114, 141, 255, 48, 222, 142, 255, 245, 186, 154, 0, 5, 174, 221, 254, 63, 114, 155, 255, 135, 55, 160, 1, 80, 31, 135, 0, 126, 250, 179, 1, 236, 218, 45, 0, 20, 28, 145, 1, 16, 147, 73, 0, 249, 189, 132, 1, 17, 189, 192, 255, 223, 142, 198, 255, 72, 20, 15, 255, 250, 53, 237, 254, 15, 11, 18, 0, 27, 211, 113, 254, 213, 107, 56, 255, 174, 147, 146, 255, 96, 126, 48, 0, 23, 193, 109, 1, 37, 162, 94, 0, 199, 157, 249, 254, 24, 128, 187, 255, 205, 49, 178, 254, 93, 164, 42, 255, 43, 119, 235, 1, 88, 183, 237, 255, 218, 210, 1, 255, 107, 254, 42, 0, 230, 10, 99, 255, 162, 0, 226, 0, 219, 237, 91, 0, 129, 178, 203, 0, 208, 50, 95, 254, 206, 208, 95, 255, 247, 191, 89, 254, 110, 234, 79, 255, 165, 61, 243, 0, 20, 122, 112, 255, 246, 246, 185, 254, 103, 4, 123, 0, 233, 99, 230, 1, 219, 91, 252, 255, 199, 222, 22, 255, 179, 245, 233, 255, 211, 241, 234, 0, 111, 250, 192, 255, 85, 84, 136, 0, 101, 58, 50, 255, 131, 173, 156, 254, 119, 45, 51, 255, 118, 233, 16, 254, 242, 90, 214, 0, 94, 159, 219, 1, 3, 3, 234, 255, 98, 76, 92, 254, 80, 54, 230, 0, 5, 228, 231, 254, 53, 24, 223, 255, 113, 56, 118, 1, 20, 132, 1, 255, 171, 210, 236, 0, 56, 241, 158, 255, 186, 115, 19, 255, 8, 229, 174, 0, 48, 44, 0, 1, 114, 114, 166, 255, 6, 73, 226, 255, 205, 89, 244, 0, 137, 227, 75, 1, 248, 173, 56, 0, 74, 120, 246, 254, 119, 3, 11, 255, 81, 120, 198, 255, 136, 122, 98, 255, 146, 241, 221, 1, 109, 194, 78, 255, 223, 241, 70, 1, 214, 200, 169, 255, 97, 190, 47, 255, 47, 103, 174, 255, 99, 92, 72, 254, 118, 233, 180, 255, 193, 35, 233, 254, 26, 229, 32, 255, 222, 252, 198, 0, 204, 43, 71, 255, 199, 84, 172, 0, 134, 102, 190, 0, 111, 238, 97, 254, 230, 40, 230, 0, 227, 205, 64, 254, 200, 12, 225, 0, 166, 25, 222, 0, 113, 69, 51, 255, 143, 159, 24, 0, 167, 184, 74, 0, 29, 224, 116, 254, 158, 208, 233, 0, 193, 116, 126, 255, 212, 11, 133, 255, 22, 58, 140, 1, 204, 36, 51, 255, 232, 30, 43, 0, 235, 70, 181, 255, 64, 56, 146, 254, 169, 18, 84, 255, 226, 1, 13, 255, 200, 50, 176, 255, 52, 213, 245, 254, 168, 209, 97, 0, 191, 71, 55, 0, 34, 78, 156, 0, 232, 144, 58, 1, 185, 74, 189, 0, 186, 142, 149, 254, 64, 69, 127, 255, 161, 203, 147, 255, 176, 151, 191, 0, 136, 231, 203, 254, 163, 182, 137, 0, 161, 126, 251, 254, 233, 32, 66, 0, 68, 207, 66, 0, 30, 28, 37, 0, 93, 114, 96, 1, 254, 92, 247, 255, 44, 171, 69, 0, 202, 119, 11, 255, 188, 118, 50, 1, 255, 83, 136, 255, 71, 82, 26, 0, 70, 227, 2, 0, 32, 235, 121, 1, 181, 41, 154, 0, 71, 134, 229, 254, 202, 255, 36, 0, 41, 152, 5, 0, 154, 63, 73, 255, 34, 182, 124, 0, 121, 221, 150, 255, 26, 204, 213, 1, 41, 172, 87, 0, 90, 157, 146, 255, 109, 130, 20, 0, 71, 107, 200, 255, 243, 102, 189, 0, 1, 195, 145, 254, 46, 88, 117, 0, 8, 206, 227, 0, 191, 110, 253, 255, 109, 128, 20, 254, 134, 85, 51, 255, 137, 177, 112, 1, 216, 34, 22, 255, 131, 16, 208, 255, 121, 149, 170, 0, 114, 19, 23, 1, 166, 80, 31, 255, 113, 240, 122, 0, 232, 179, 250, 0, 68, 110, 180, 254, 210, 170, 119, 0, 223, 108, 164, 255, 207, 79, 233, 255, 27, 229, 226, 254, 209, 98, 81, 255, 79, 68, 7, 0, 131, 185, 100, 0, 170, 29, 162, 255, 17, 162, 107, 255, 57, 21, 11, 1, 100, 200, 181, 255, 127, 65, 166, 1, 165, 134, 204, 0, 104, 167, 168, 0, 1, 164, 79, 0, 146, 135, 59, 1, 70, 50, 128, 255, 102, 119, 13, 254, 227, 6, 135, 0, 162, 142, 179, 255, 160, 100, 222, 0, 27, 224, 219, 1, 158, 93, 195, 255, 234, 141, 137, 0, 16, 24, 125, 255, 238, 206, 47, 255, 97, 17, 98, 255, 116, 110, 12, 255, 96, 115, 77, 0, 91, 227, 232, 255, 248, 254, 79, 255, 92, 229, 6, 254, 88, 198, 139, 0, 206, 75, 129, 0, 250, 77, 206, 255, 141, 244, 123, 1, 138, 69, 220, 0, 32, 151, 6, 1, 131, 167, 22, 255, 237, 68, 167, 254, 199, 189, 150, 0, 163, 171, 138, 255, 51, 188, 6, 255, 95, 29, 137, 254, 148, 226, 179, 0, 181, 107, 208, 255, 134, 31, 82, 255, 151, 101, 45, 255, 129, 202, 225, 0, 224, 72, 147, 0, 48, 138, 151, 255, 195, 64, 206, 254, 237, 218, 158, 0, 106, 29, 137, 254, 253, 189, 233, 255, 103, 15, 17, 255, 194, 97, 255, 0, 178, 45, 169, 254, 198, 225, 155, 0, 39, 48, 117, 255, 135, 106, 115, 0, 97, 38, 181, 0, 150, 47, 65, 255, 83, 130, 229, 254, 246, 38, 129, 0, 92, 239, 154, 254, 91, 99, 127, 0, 161, 111, 33, 255, 238, 217, 242, 255, 131, 185, 195, 255, 213, 191, 158, 255, 41, 150, 218, 0, 132, 169, 131, 0, 89, 84, 252, 1, 171, 70, 128, 255, 163, 248, 203, 254, 1, 50, 180, 255, 124, 76, 85, 1, 251, 111, 80, 0, 99, 66, 239, 255, 154, 237, 182, 255, 221, 126, 133, 254, 74, 204, 99, 255, 65, 147, 119, 255, 99, 56, 167, 255, 79, 248, 149, 255, 116, 155, 228, 255, 237, 43, 14, 254, 69, 137, 11, 255, 22, 250, 241, 1, 91, 122, 143, 255, 205, 249, 243, 0, 212, 26, 60, 255, 48, 182, 176, 1, 48, 23, 191, 255, 203, 121, 152, 254, 45, 74, 213, 255, 62, 90, 18, 254, 245, 163, 230, 255, 185, 106, 116, 255, 83, 35, 159, 0, 12, 33, 2, 255, 80, 34, 62, 0, 16, 87, 174, 255, 173, 101, 85, 0, 202, 36, 81, 254, 160, 69, 204, 255, 64, 225, 187, 0, 58, 206, 94, 0, 86, 144, 47, 0, 229, 86, 245, 0, 63, 145, 190, 1, 37, 5, 39, 0, 109, 251, 26, 0, 137, 147, 234, 0, 162, 121, 145, 255, 144, 116, 206, 255, 197, 232, 185, 255, 183, 190, 140, 255, 73, 12, 254, 255, 139, 20, 242, 255, 170, 90, 239, 255, 97, 66, 187, 255, 245, 181, 135, 254, 222, 136, 52, 0, 245, 5, 51, 254, 203, 47, 78, 0, 152, 101, 216, 0, 73, 23, 125, 0, 254, 96, 33, 1, 235, 210, 73, 255, 43, 209, 88, 1, 7, 129, 109, 0, 122, 104, 228, 254, 170, 242, 203, 0, 242, 204, 135, 255, 202, 28, 233, 255, 65, 6, 127, 0, 159, 144, 71, 0, 100, 140, 95, 0, 78, 150, 13, 0, 251, 107, 118, 1, 182, 58, 125, 255, 1, 38, 108, 255, 141, 189, 209, 255, 8, 155, 125, 1, 113, 163, 91, 255, 121, 79, 190, 255, 134, 239, 108, 255, 76, 47, 248, 0, 163, 228, 239, 0, 17, 111, 10, 0, 88, 149, 75, 255, 215, 235, 239, 0, 167, 159, 24, 255, 47, 151, 108, 255, 107, 209, 188, 0, 233, 231, 99, 254, 28, 202, 148, 255, 174, 35, 138, 255, 110, 24, 68, 255, 2, 69, 181, 0, 107, 102, 82, 0, 102, 237, 7, 0, 92, 36, 237, 255, 221, 162, 83, 1, 55, 202, 6, 255, 135, 234, 135, 255, 24, 250, 222, 0, 65, 94, 168, 254, 245, 248, 210, 255, 167, 108, 201, 254, 255, 161, 111, 0, 205, 8, 254, 0, 136, 13, 116, 0, 100, 176, 132, 255, 43, 215, 126, 255, 177, 133, 130, 255, 158, 79, 148, 0, 67, 224, 37, 1, 12, 206, 21, 255, 62, 34, 110, 1, 237, 104, 175, 255, 80, 132, 111, 255, 142, 174, 72, 0, 84, 229, 180, 254, 105, 179, 140, 0, 64, 248, 15, 255, 233, 138, 16, 0, 245, 67, 123, 254, 218, 121, 212, 255, 63, 95, 218, 1, 213, 133, 137, 255, 143, 182, 82, 255, 48, 28, 11, 0, 244, 114, 141, 1, 209, 175, 76, 255, 157, 181, 150, 255, 186, 229, 3, 255, 164, 157, 111, 1, 231, 189, 139, 0, 119, 202, 190, 255, 218, 106, 64, 255, 68, 235, 63, 254, 96, 26, 172, 255, 187, 47, 11, 1, 215, 18, 251, 255, 81, 84, 89, 0, 68, 58, 128, 0, 94, 113, 5, 1, 92, 129, 208, 255, 97, 15, 83, 254, 9, 28, 188, 0, 239, 9, 164, 0, 60, 205, 152, 0, 192, 163, 98, 255, 184, 18, 60, 0, 217, 182, 139, 0, 109, 59, 120, 255, 4, 192, 251, 0, 169, 210, 240, 255, 37, 172, 92, 254, 148, 211, 245, 255, 179, 65, 52, 0, 253, 13, 115, 0, 185, 174, 206, 1, 114, 188, 149, 255, 237, 90, 173, 0, 43, 199, 192, 255, 88, 108, 113, 0, 52, 35, 76, 0, 66, 25, 148, 255, 221, 4, 7, 255, 151, 241, 114, 255, 190, 209, 232, 0, 98, 50, 199, 0, 151, 150, 213, 255, 18, 74, 36, 1, 53, 40, 7, 0, 19, 135, 65, 255, 26, 172, 69, 0, 174, 237, 85, 0, 99, 95, 41, 0, 3, 56, 16, 0, 39, 160, 177, 255, 200, 106, 218, 254, 185, 68, 84, 255, 91, 186, 61, 254, 67, 143, 141, 255, 13, 244, 166, 255, 99, 114, 198, 0, 199, 110, 163, 255, 193, 18, 186, 0, 124, 239, 246, 1, 110, 68, 22, 0, 2, 235, 46, 1, 212, 60, 107, 0, 105, 42, 105, 1, 14, 230, 152, 0, 7, 5, 131, 0, 141, 104, 154, 255, 213, 3, 6, 0, 131, 228, 162, 255, 179, 100, 28, 1, 231, 123, 85, 255, 206, 14, 223, 1, 253, 96, 230, 0, 38, 152, 149, 1, 98, 137, 122, 0, 214, 205, 3, 255, 226, 152, 179, 255, 6, 133, 137, 0, 158, 69, 140, 255, 113, 162, 154, 255, 180, 243, 172, 255, 27, 189, 115, 255, 143, 46, 220, 255, 213, 134, 225, 255, 126, 29, 69, 0, 188, 43, 137, 1, 242, 70, 9, 0, 90, 204, 255, 255, 231, 170, 147, 0, 23, 56, 19, 254, 56, 125, 157, 255, 48, 179, 218, 255, 79, 182, 253, 255, 38, 212, 191, 1, 41, 235, 124, 0, 96, 151, 28, 0, 135, 148, 190, 0, 205, 249, 39, 254, 52, 96, 136, 255, 212, 44, 136, 255, 67, 209, 131, 255, 252, 130, 23, 255, 219, 128, 20, 255, 198, 129, 118, 0, 108, 101, 11, 0, 178, 5, 146, 1, 62, 7, 100, 255, 181, 236, 94, 254, 28, 26, 164, 0, 76, 22, 112, 255, 120, 102, 79, 0, 202, 192, 229, 1, 200, 176, 215, 0, 41, 64, 244, 255, 206, 184, 78, 0, 167, 45, 63, 1, 160, 35, 0, 255, 59, 12, 142, 255, 204, 9, 144, 255, 219, 94, 229, 1, 122, 27, 112, 0, 189, 105, 109, 255, 64, 208, 74, 255, 251, 127, 55, 1, 2, 226, 198, 0, 44, 76, 209, 0, 151, 152, 77, 255, 210, 23, 46, 1, 201, 171, 69, 255, 44, 211, 231, 0, 190, 37, 224, 255, 245, 196, 62, 255, 169, 181, 222, 255, 34, 211, 17, 0, 119, 241, 197, 255, 229, 35, 152, 1, 21, 69, 40, 255, 178, 226, 161, 0, 148, 179, 193, 0, 219, 194, 254, 1, 40, 206, 51, 255, 231, 92, 250, 1, 67, 153, 170, 0, 21, 148, 241, 0, 170, 69, 82, 255, 121, 18, 231, 255, 92, 114, 3, 0, 184, 62, 230, 0, 225, 201, 87, 255, 146, 96, 162, 255, 181, 242, 220, 0, 173, 187, 221, 1, 226, 62, 170, 255, 56, 126, 217, 1, 117, 13, 227, 255, 179, 44, 239, 0, 157, 141, 155, 255, 144, 221, 83, 0, 235, 209, 208, 0, 42, 17, 165, 1, 251, 81, 133, 0, 124, 245, 201, 254, 97, 211, 24, 255, 83, 214, 166, 0, 154, 36, 9, 255, 248, 47, 127, 0, 90, 219, 140, 255, 161, 217, 38, 254, 212, 147, 63, 255, 66, 84, 148, 1, 207, 3, 1, 0, 230, 134, 89, 1, 127, 78, 122, 255, 224, 155, 1, 255, 82, 136, 74, 0, 178, 156, 208, 255, 186, 25, 49, 255, 222, 3, 210, 1, 229, 150, 190, 255, 85, 162, 52, 255, 41, 84, 141, 255, 73, 123, 84, 254, 93, 17, 150, 0, 119, 19, 28, 1, 32, 22, 215, 255, 28, 23, 204, 255, 142, 241, 52, 255, 228, 52, 125, 0, 29, 76, 207, 0, 215, 167, 250, 254, 175, 164, 230, 0, 55, 207, 105, 1, 109, 187, 245, 255, 161, 44, 220, 1, 41, 101, 128, 255, 167, 16, 94, 0, 93, 214, 107, 255, 118, 72, 0, 254, 80, 61, 234, 255, 121, 175, 125, 0, 139, 169, 251, 0, 97, 39, 147, 254, 250, 196, 49, 255, 165, 179, 110, 254, 223, 70, 187, 255, 22, 142, 125, 1, 154, 179, 138, 255, 118, 176, 42, 1, 10, 174, 153, 0, 156, 92, 102, 0, 168, 13, 161, 255, 143, 16, 32, 0, 250, 197, 180, 255, 203, 163, 44, 1, 87, 32, 36, 0, 161, 153, 20, 255, 123, 252, 15, 0, 25, 227, 80, 0, 60, 88, 142, 0, 17, 22, 201, 1, 154, 205, 77, 255, 39, 63, 47, 0, 8, 122, 141, 0, 128, 23, 182, 254, 204, 39, 19, 255, 4, 112, 29, 255, 23, 36, 140, 255, 210, 234, 116, 254, 53, 50, 63, 255, 121, 171, 104, 255, 160, 219, 94, 0, 87, 82, 14, 254, 231, 42, 5, 0, 165, 139, 127, 254, 86, 78, 38, 0, 130, 60, 66, 254, 203, 30, 45, 255, 46, 196, 122, 1, 249, 53, 162, 255, 136, 143, 103, 254, 215, 210, 114, 0, 231, 7, 160, 254, 169, 152, 42, 255, 111, 45, 246, 0, 142, 131, 135, 255, 131, 71, 204, 255, 36, 226, 11, 0, 0, 28, 242, 255, 225, 138, 213, 255, 247, 46, 216, 254, 245, 3, 183, 0, 108, 252, 74, 1, 206, 26, 48, 255, 205, 54, 246, 255, 211, 198, 36, 255, 121, 35, 50, 0, 52, 216, 202, 255, 38, 139, 129, 254, 242, 73, 148, 0, 67, 231, 141, 255, 42, 47, 204, 0, 78, 116, 25, 1, 4, 225, 191, 255, 6, 147, 228, 0, 58, 88, 177, 0, 122, 165, 229, 255, 252, 83, 201, 255, 224, 167, 96, 1, 177, 184, 158, 255, 242, 105, 179, 1, 248, 198, 240, 0, 133, 66, 203, 1, 254, 36, 47, 0, 45, 24, 115, 255, 119, 62, 254, 0, 196, 225, 186, 254, 123, 141, 172, 0, 26, 85, 41, 255, 226, 111, 183, 0, 213, 231, 151, 0, 4, 59, 7, 255, 238, 138, 148, 0, 66, 147, 33, 255, 31, 246, 141, 255, 209, 141, 116, 255, 104, 112, 31, 0, 88, 161, 172, 0, 83, 215, 230, 254, 47, 111, 151, 0, 45, 38, 52, 1, 132, 45, 204, 0, 138, 128, 109, 254, 233, 117, 134, 255, 243, 190, 173, 254, 241, 236, 240, 0, 82, 127, 236, 254, 40, 223, 161, 255, 110, 182, 225, 255, 123, 174, 239, 0, 135, 242, 145, 1, 51, 209, 154, 0, 150, 3, 115, 254, 217, 164, 252, 255, 55, 156, 69, 1, 84, 94, 255, 255, 232, 73, 45, 1, 20, 19, 212, 255, 96, 197, 59, 254, 96, 251, 33, 0, 38, 199, 73, 1, 64, 172, 247, 255, 117, 116, 56, 255, 228, 17, 18, 0, 62, 138, 103, 1, 246, 229, 164, 255, 244, 118, 201, 254, 86, 32, 159, 255, 109, 34, 137, 1, 85, 211, 186, 0, 10, 193, 193, 254, 122, 194, 177, 0, 122, 238, 102, 255, 162, 218, 171, 0, 108, 217, 161, 1, 158, 170, 34, 0, 176, 47, 155, 1, 181, 228, 11, 255, 8, 156, 0, 0, 16, 75, 93, 0, 206, 98, 255, 1, 58, 154, 35, 0, 12, 243, 184, 254, 67, 117, 66, 255, 230, 229, 123, 0, 201, 42, 110, 0, 134, 228, 178, 254, 186, 108, 118, 255, 58, 19, 154, 255, 82, 169, 62, 255, 114, 143, 115, 1, 239, 196, 50, 255, 173, 48, 193, 255, 147, 2, 84, 255, 150, 134, 147, 254, 95, 232, 73, 0, 109, 227, 52, 254, 191, 137, 10, 0, 40, 204, 30, 254, 76, 52, 97, 255, 164, 235, 126, 0, 254, 124, 188, 0, 74, 182, 21, 1, 121, 29, 35, 255, 241, 30, 7, 254, 85, 218, 214, 255, 7, 84, 150, 254, 81, 27, 117, 255, 160, 159, 152, 254, 66, 24, 221, 255, 227, 10, 60, 1, 141, 135, 102, 0, 208, 189, 150, 1, 117, 179, 92, 0, 132, 22, 136, 255, 120, 199, 28, 0, 21, 129, 79, 254, 182, 9, 65, 0, 218, 163, 169, 0, 246, 147, 198, 255, 107, 38, 144, 1, 78, 175, 205, 255, 214, 5, 250, 254, 47, 88, 29, 255, 164, 47, 204, 255, 43, 55, 6, 255, 131, 134, 207, 254, 116, 100, 214, 0, 96, 140, 75, 1, 106, 220, 144, 0, 195, 32, 28, 1, 172, 81, 5, 255, 199, 179, 52, 255, 37, 84, 203, 0, 170, 112, 174, 0, 11, 4, 91, 0, 69, 244, 27, 1, 117, 131, 92, 0, 33, 152, 175, 255, 140, 153, 107, 255, 251, 135, 43, 254, 87, 138, 4, 255, 198, 234, 147, 254, 121, 152, 84, 255, 205, 101, 155, 1, 157, 9, 25, 0, 72, 106, 17, 254, 108, 153, 0, 255, 189, 229, 186, 0, 193, 8, 176, 255, 174, 149, 209, 0, 238, 130, 29, 0, 233, 214, 126, 1, 61, 226, 102, 0, 57, 163, 4, 1, 198, 111, 51, 255, 45, 79, 78, 1, 115, 210, 10, 255, 218, 9, 25, 255, 158, 139, 198, 255, 211, 82, 187, 254, 80, 133, 83, 0, 157, 129, 230, 1, 243, 133, 134, 255, 40, 136, 16, 0, 77, 107, 79, 255, 183, 85, 92, 1, 177, 204, 202, 0, 163, 71, 147, 255, 152, 69, 190, 0, 172, 51, 188, 1, 250, 210, 172, 255, 211, 242, 113, 1, 89, 89, 26, 255, 64, 66, 111, 254, 116, 152, 42, 0, 161, 39, 27, 255, 54, 80, 254, 0, 106, 209, 115, 1, 103, 124, 97, 0, 221, 230, 98, 255, 31, 231, 6, 0, 178, 192, 120, 254, 15, 217, 203, 255, 124, 158, 79, 0, 112, 145, 247, 0, 92, 250, 48, 1, 163, 181, 193, 255, 37, 47, 142, 254, 144, 189, 165, 255, 46, 146, 240, 0, 6, 75, 128, 0, 41, 157, 200, 254, 87, 121, 213, 0, 1, 113, 236, 0, 5, 45, 250, 0, 144, 12, 82, 0, 31, 108, 231, 0, 225, 239, 119, 255, 167, 7, 189, 255, 187, 228, 132, 255, 110, 189, 34, 0, 94, 44, 204, 1, 162, 52, 197, 0, 78, 188, 241, 254, 57, 20, 141, 0, 244, 146, 47, 1, 206, 100, 51, 0, 125, 107, 148, 254, 27, 195, 77, 0, 152, 253, 90, 1, 7, 143, 144, 255, 51, 37, 31, 0, 34, 119, 38, 255, 7, 197, 118, 0, 153, 188, 211, 0, 151, 20, 116, 254, 245, 65, 52, 255, 180, 253, 110, 1, 47, 177, 209, 0, 161, 99, 17, 255, 118, 222, 202, 0, 125, 179, 252, 1, 123, 54, 126, 255, 145, 57, 191, 0, 55, 186, 121, 0, 10, 243, 138, 0, 205, 211, 229, 255, 125, 156, 241, 254, 148, 156, 185, 255, 227, 19, 188, 255, 124, 41, 32, 255, 31, 34, 206, 254, 17, 57, 83, 0, 204, 22, 37, 255, 42, 96, 98, 0, 119, 102, 184, 1, 3, 190, 28, 0, 110, 82, 218, 255, 200, 204, 192, 255, 201, 145, 118, 0, 117, 204, 146, 0, 132, 32, 98, 1, 192, 194, 121, 0, 106, 161, 248, 1, 237, 88, 124, 0, 23, 212, 26, 0, 205, 171, 90, 255, 248, 48, 216, 1, 141, 37, 230, 255, 124, 203, 0, 254, 158, 168, 30, 255, 214, 248, 21, 0, 112, 187, 7, 255, 75, 133, 239, 255, 74, 227, 243, 255, 250, 147, 70, 0, 214, 120, 162, 0, 167, 9, 179, 255, 22, 158, 18, 0, 218, 77, 209, 1, 97, 109, 81, 255, 244, 33, 179, 255, 57, 52, 57, 255, 65, 172, 210, 255, 249, 71, 209, 255, 142, 169, 238, 0, 158, 189, 153, 255, 174, 254, 103, 254, 98, 33, 14, 0, 141, 76, 230, 255, 113, 139, 52, 255, 15, 58, 212, 0, 168, 215, 201, 255, 248, 204, 215, 1, 223, 68, 160, 255, 57, 154, 183, 254, 47, 231, 121, 0, 106, 166, 137, 0, 81, 136, 138, 0, 165, 43, 51, 0, 231, 139, 61, 0, 57, 95, 59, 254, 118, 98, 25, 255, 151, 63, 236, 1, 94, 190, 250, 255, 169, 185, 114, 1, 5, 250, 58, 255, 75, 105, 97, 1, 215, 223, 134, 0, 113, 99, 163, 1, 128, 62, 112, 0, 99, 106, 147, 0, 163, 195, 10, 0, 33, 205, 182, 0, 214, 14, 174, 255, 129, 38, 231, 255, 53, 182, 223, 0, 98, 42, 159, 255, 247, 13, 40, 0, 188, 210, 177, 1, 6, 21, 0, 255, 255, 61, 148, 254, 137, 45, 129, 255, 89, 26, 116, 254, 126, 38, 114, 0, 251, 50, 242, 254, 121, 134, 128, 255, 204, 249, 167, 254, 165, 235, 215, 0, 202, 177, 243, 0, 133, 141, 62, 0, 240, 130, 190, 1, 110, 175, 255, 0, 0, 20, 146, 1, 37, 210, 121, 255, 7, 39, 130, 0, 142, 250, 84, 255, 141, 200, 207, 0, 9, 95, 104, 255, 11, 244, 174, 0, 134, 232, 126, 0, 167, 1, 123, 254, 16, 193, 149, 255, 232, 233, 239, 1, 213, 70, 112, 255, 252, 116, 160, 254, 242, 222, 220, 255, 205, 85, 227, 0, 7, 185, 58, 0, 118, 247, 63, 1, 116, 77, 177, 255, 62, 245, 200, 254, 63, 18, 37, 255, 107, 53, 232, 254, 50, 221, 211, 0, 162, 219, 7, 254, 2, 94, 43, 0, 182, 62, 182, 254, 160, 78, 200, 255, 135, 140, 170, 0, 235, 184, 228, 0, 175, 53, 138, 254, 80, 58, 77, 255, 152, 201, 2, 1, 63, 196, 34, 0, 5, 30, 184, 0, 171, 176, 154, 0, 121, 59, 206, 0, 38, 99, 39, 0, 172, 80, 77, 254, 0, 134, 151, 0, 186, 33, 241, 254, 94, 253, 223, 255, 44, 114, 252, 0, 108, 126, 57, 255, 201, 40, 13, 255, 39, 229, 27, 255, 39, 239, 23, 1, 151, 121, 51, 255, 153, 150, 248, 0, 10, 234, 174, 255, 118, 246, 4, 254, 200, 245, 38, 0, 69, 161, 242, 1, 16, 178, 150, 0, 113, 56, 130, 0, 171, 31, 105, 0, 26, 88, 108, 255, 49, 42, 106, 0, 251, 169, 66, 0, 69, 93, 149, 0, 20, 57, 254, 0, 164, 25, 111, 0, 90, 188, 90, 255, 204, 4, 197, 0, 40, 213, 50, 1, 212, 96, 132, 255, 88, 138, 180, 254, 228, 146, 124, 255, 184, 246, 247, 0, 65, 117, 86, 255, 253, 102, 210, 254, 254, 121, 36, 0, 137, 115, 3, 255, 60, 24, 216, 0, 134, 18, 29, 0, 59, 226, 97, 0, 176, 142, 71, 0, 7, 209, 161, 0, 189, 84, 51, 254, 155, 250, 72, 0, 213, 84, 235, 255, 45, 222, 224, 0, 238, 148, 143, 255, 170, 42, 53, 255, 78, 167, 117, 0, 186, 0, 40, 255, 125, 177, 103, 255, 69, 225, 66, 0, 227, 7, 88, 1, 75, 172, 6, 0, 169, 45, 227, 1, 16, 36, 70, 255, 50, 2, 9, 255, 139, 193, 22, 0, 143, 183, 231, 254, 218, 69, 50, 0, 236, 56, 161, 1, 213, 131, 42, 0, 138, 145, 44, 254, 136, 229, 40, 255, 49, 63, 35, 255, 61, 145, 245, 255, 101, 192, 2, 254, 232, 167, 113, 0, 152, 104, 38, 1, 121, 185, 218, 0, 121, 139, 211, 254, 119, 240, 35, 0, 65, 189, 217, 254, 187, 179, 162, 255, 160, 187, 230, 0, 62, 248, 14, 255, 60, 78, 97, 0, 255, 247, 163, 255, 225, 59, 91, 255, 107, 71, 58, 255, 241, 47, 33, 1, 50, 117, 236, 0, 219, 177, 63, 254, 244, 90, 179, 0, 35, 194, 215, 255, 189, 67, 50, 255, 23, 135, 129, 0, 104, 189, 37, 255, 185, 57, 194, 0, 35, 62, 231, 255, 220, 248, 108, 0, 12, 231, 178, 0, 143, 80, 91, 1, 131, 93, 101, 255, 144, 39, 2, 1, 255, 250, 178], 'i8', ALLOC_NONE, Runtime.GLOBAL_BASE + 20480)
allocate([5, 17, 236, 254, 139, 32, 46, 0, 204, 188, 38, 254, 245, 115, 52, 255, 191, 113, 73, 254, 191, 108, 69, 255, 22, 69, 245, 1, 23, 203, 178, 0, 170, 99, 170, 0, 65, 248, 111, 0, 37, 108, 153, 255, 64, 37, 69, 0, 0, 88, 62, 254, 89, 148, 144, 255, 191, 68, 224, 1, 241, 39, 53, 0, 41, 203, 237, 255, 145, 126, 194, 255, 221, 42, 253, 255, 25, 99, 151, 0, 97, 253, 223, 1, 74, 115, 49, 255, 6, 175, 72, 255, 59, 176, 203, 0, 124, 183, 249, 1, 228, 228, 99, 0, 129, 12, 207, 254, 168, 192, 195, 255, 204, 176, 16, 254, 152, 234, 171, 0, 77, 37, 85, 255, 33, 120, 135, 255, 142, 194, 227, 1, 31, 214, 58, 0, 213, 187, 125, 255, 232, 46, 60, 255, 190, 116, 42, 254, 151, 178, 19, 255, 51, 62, 237, 254, 204, 236, 193, 0, 194, 232, 60, 0, 172, 34, 157, 255, 189, 16, 184, 254, 103, 3, 95, 255, 141, 233, 36, 254, 41, 25, 11, 255, 21, 195, 166, 0, 118, 245, 45, 0, 67, 213, 149, 255, 159, 12, 18, 255, 187, 164, 227, 1, 160, 25, 5, 0, 12, 78, 195, 1, 43, 197, 225, 0, 48, 142, 41, 254, 196, 155, 60, 255, 223, 199, 18, 1, 145, 136, 156, 0, 252, 117, 169, 254, 145, 226, 238, 0, 239, 23, 107, 0, 109, 181, 188, 255, 230, 112, 49, 254, 73, 170, 237, 255, 231, 183, 227, 255, 80, 220, 20, 0, 194, 107, 127, 1, 127, 205, 101, 0, 46, 52, 197, 1, 210, 171, 36, 255, 88, 3, 90, 255, 56, 151, 141, 0, 96, 187, 255, 255, 42, 78, 200, 0, 254, 70, 70, 1, 244, 125, 168, 0, 204, 68, 138, 1, 124, 215, 70, 0, 102, 66, 200, 254, 17, 52, 228, 0, 117, 220, 143, 254, 203, 248, 123, 0, 56, 18, 174, 255, 186, 151, 164, 255, 51, 232, 208, 1, 160, 228, 43, 255, 249, 29, 25, 1, 68, 190, 63, 0, 133, 59, 140, 1, 189, 241, 36, 255, 248, 37, 195, 1, 96, 220, 55, 0, 183, 76, 62, 255, 195, 66, 61, 0, 50, 76, 164, 1, 225, 164, 76, 255, 76, 61, 163, 255, 117, 62, 31, 0, 81, 145, 64, 255, 118, 65, 14, 0, 162, 115, 214, 255, 6, 138, 46, 0, 124, 230, 244, 255, 10, 138, 143, 0, 52, 26, 194, 0, 184, 244, 76, 0, 129, 143, 41, 1, 190, 244, 19, 255, 123, 170, 122, 255, 98, 129, 68, 0, 121, 213, 147, 0, 86, 101, 30, 255, 161, 103, 155, 0, 140, 89, 67, 255, 239, 229, 190, 1, 67, 11, 181, 0, 198, 240, 137, 254, 238, 69, 188, 255, 67, 151, 238, 0, 19, 42, 108, 255, 229, 85, 113, 1, 50, 68, 135, 255, 17, 106, 9, 0, 50, 103, 1, 255, 80, 1, 168, 1, 35, 152, 30, 255, 16, 168, 185, 1, 56, 89, 232, 255, 101, 210, 252, 0, 41, 250, 71, 0, 204, 170, 79, 255, 14, 46, 239, 255, 80, 77, 239, 0, 189, 214, 75, 255, 17, 141, 249, 0, 38, 80, 76, 255, 190, 85, 117, 0, 86, 228, 170, 0, 156, 216, 208, 1, 195, 207, 164, 255, 150, 66, 76, 255, 175, 225, 16, 255, 141, 80, 98, 1, 76, 219, 242, 0, 198, 162, 114, 0, 46, 218, 152, 0, 155, 43, 241, 254, 155, 160, 104, 255, 51, 187, 165, 0, 2, 17, 175, 0, 66, 84, 160, 1, 247, 58, 30, 0, 35, 65, 53, 254, 69, 236, 191, 0, 45, 134, 245, 1, 163, 123, 221, 0, 32, 110, 20, 255, 52, 23, 165, 0, 186, 214, 71, 0, 233, 176, 96, 0, 242, 239, 54, 1, 57, 89, 138, 0, 83, 0, 84, 255, 136, 160, 100, 0, 92, 142, 120, 254, 104, 124, 190, 0, 181, 177, 62, 255, 250, 41, 85, 0, 152, 130, 42, 1, 96, 252, 246, 0, 151, 151, 63, 254, 239, 133, 62, 0, 32, 56, 156, 0, 45, 167, 189, 255, 142, 133, 179, 1, 131, 86, 211, 0, 187, 179, 150, 254, 250, 170, 14, 255, 210, 163, 78, 0, 37, 52, 151, 0, 99, 77, 26, 0, 238, 156, 213, 255, 213, 192, 209, 1, 73, 46, 84, 0, 20, 65, 41, 1, 54, 206, 79, 0, 201, 131, 146, 254, 170, 111, 24, 255, 177, 33, 50, 254, 171, 38, 203, 255, 78, 247, 116, 0, 209, 221, 153, 0, 133, 128, 178, 1, 58, 44, 25, 0, 201, 39, 59, 1, 189, 19, 252, 0, 49, 229, 210, 1, 117, 187, 117, 0, 181, 179, 184, 1, 0, 114, 219, 0, 48, 94, 147, 0, 245, 41, 56, 0, 125, 13, 204, 254, 244, 173, 119, 0, 44, 221, 32, 254, 84, 234, 20, 0, 249, 160, 198, 1, 236, 126, 234, 255, 47, 99, 168, 254, 170, 226, 153, 255, 102, 179, 216, 0, 226, 141, 122, 255, 122, 66, 153, 254, 182, 245, 134, 0, 227, 228, 25, 1, 214, 57, 235, 255, 216, 173, 56, 255, 181, 231, 210, 0, 119, 128, 157, 255, 129, 95, 136, 255, 110, 126, 51, 0, 2, 169, 183, 255, 7, 130, 98, 254, 69, 176, 94, 255, 116, 4, 227, 1, 217, 242, 145, 255, 202, 173, 31, 1, 105, 1, 39, 255, 46, 175, 69, 0, 228, 47, 58, 255, 215, 224, 69, 254, 207, 56, 69, 255, 16, 254, 139, 255, 23, 207, 212, 255, 202, 20, 126, 255, 95, 213, 96, 255, 9, 176, 33, 0, 200, 5, 207, 255, 241, 42, 128, 254, 35, 33, 192, 255, 248, 229, 196, 1, 129, 17, 120, 0, 251, 103, 151, 255, 7, 52, 112, 255, 140, 56, 66, 255, 40, 226, 245, 255, 217, 70, 37, 254, 172, 214, 9, 255, 72, 67, 134, 1, 146, 192, 214, 255, 44, 38, 112, 0, 68, 184, 75, 255, 206, 90, 251, 0, 149, 235, 141, 0, 181, 170, 58, 0, 116, 244, 239, 0, 92, 157, 2, 0, 102, 173, 98, 0, 233, 137, 96, 1, 127, 49, 203, 0, 5, 155, 148, 0, 23, 148, 9, 255, 211, 122, 12, 0, 34, 134, 26, 255, 219, 204, 136, 0, 134, 8, 41, 255, 224, 83, 43, 254, 85, 25, 247, 0, 109, 127, 0, 254, 169, 136, 48, 0, 238, 119, 219, 255, 231, 173, 213, 0, 206, 18, 254, 254, 8, 186, 7, 255, 126, 9, 7, 1, 111, 42, 72, 0, 111, 52, 236, 254, 96, 63, 141, 0, 147, 191, 127, 254, 205, 78, 192, 255, 14, 106, 237, 1, 187, 219, 76, 0, 175, 243, 187, 254, 105, 89, 173, 0, 85, 25, 89, 1, 162, 243, 148, 0, 2, 118, 209, 254, 33, 158, 9, 0, 139, 163, 46, 255, 93, 70, 40, 0, 108, 42, 142, 254, 111, 252, 142, 255, 155, 223, 144, 0, 51, 229, 167, 255, 73, 252, 155, 255, 94, 116, 12, 255, 152, 160, 218, 255, 156, 238, 37, 255, 179, 234, 207, 255, 197, 0, 179, 255, 154, 164, 141, 0, 225, 196, 104, 0, 10, 35, 25, 254, 209, 212, 242, 255, 97, 253, 222, 254, 184, 101, 229, 0, 222, 18, 127, 1, 164, 136, 135, 255, 30, 207, 140, 254, 146, 97, 243, 0, 129, 192, 26, 254, 201, 84, 33, 255, 111, 10, 78, 255, 147, 81, 178, 255, 4, 4, 24, 0, 161, 238, 215, 255, 6, 141, 33, 0, 53, 215, 14, 255, 41, 181, 208, 255, 231, 139, 157, 0, 179, 203, 221, 255, 255, 185, 113, 0, 189, 226, 172, 255, 113, 66, 214, 255, 202, 62, 45, 255, 102, 64, 8, 255, 78, 174, 16, 254, 133, 117, 68, 255, 220, 227, 61, 255, 55, 242, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 146, 248, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 66, 28, 254, 77, 93, 218, 255, 85, 164, 113, 254, 84, 201, 69, 255, 19, 80, 70, 255, 228, 25, 251, 255, 161, 155, 226, 0, 21, 228, 98, 255, 98, 173, 253, 254, 240, 199, 249, 255, 243, 154, 124, 0, 216, 32, 153, 255, 92, 250, 251, 254, 184, 34, 48, 0, 13, 120, 71, 1, 190, 95, 22, 0, 224, 219, 40, 254, 59, 210, 158, 255, 163, 69, 160, 0, 120, 24, 52, 255, 121, 44, 48, 255, 198, 97, 223, 0, 3, 43, 69, 0, 178, 44, 117, 0, 253, 147, 0, 1, 237, 162, 13, 255, 32, 32, 163, 254, 19, 247, 29, 255, 33, 76, 209, 0, 68, 40, 157, 255, 134, 145, 179, 254, 238, 64, 70, 255, 168, 48, 73, 1, 250, 9, 69, 0, 240, 27, 185, 255, 47, 67, 247, 0, 63, 68, 122, 0, 216, 36, 127, 255, 126, 6, 49, 0, 204, 15, 105, 0, 1, 0, 0, 0, 0, 0, 0, 0, 130, 128, 0, 0, 0, 0, 0, 0, 138, 128, 0, 0, 0, 0, 0, 128, 0, 128, 0, 128, 0, 0, 0, 128, 139, 128, 0, 0, 0, 0, 0, 0, 1, 0, 0, 128, 0, 0, 0, 0, 129, 128, 0, 128, 0, 0, 0, 128, 9, 128, 0, 0, 0, 0, 0, 128, 138, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 9, 128, 0, 128, 0, 0, 0, 0, 10, 0, 0, 128, 0, 0, 0, 0, 139, 128, 0, 128, 0, 0, 0, 0, 139, 0, 0, 0, 0, 0, 0, 128, 137, 128, 0, 0, 0, 0, 0, 128, 3, 128, 0, 0, 0, 0, 0, 128, 2, 128, 0, 0, 0, 0, 0, 128, 128, 0, 0, 0, 0, 0, 0, 128, 10, 128, 0, 0, 0, 0, 0, 0, 10, 0, 0, 128, 0, 0, 0, 128, 129, 128, 0, 128, 0, 0, 0, 128, 128, 128, 0, 0, 0, 0, 0, 128, 1, 0, 0, 128, 0, 0, 0, 0, 8, 128, 0, 128, 0, 0, 0, 128, 1, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 10, 0, 0, 0, 15, 0, 0, 0, 21, 0, 0, 0, 28, 0, 0, 0, 36, 0, 0, 0, 45, 0, 0, 0, 55, 0, 0, 0, 2, 0, 0, 0, 14, 0, 0, 0, 27, 0, 0, 0, 41, 0, 0, 0, 56, 0, 0, 0, 8, 0, 0, 0, 25, 0, 0, 0, 43, 0, 0, 0, 62, 0, 0, 0, 18, 0, 0, 0, 39, 0, 0, 0, 61, 0, 0, 0, 20, 0, 0, 0, 44, 0, 0, 0, 10, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 21, 0, 0, 0, 24, 0, 0, 0, 4, 0, 0, 0, 15, 0, 0, 0, 23, 0, 0, 0, 19, 0, 0, 0, 13, 0, 0, 0, 12, 0, 0, 0, 2, 0, 0, 0, 20, 0, 0, 0, 14, 0, 0, 0, 22, 0, 0, 0, 9, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0], 'i8', ALLOC_NONE, Runtime.GLOBAL_BASE + 30720)
var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STATIC), 8)
assert(tempDoublePtr % 8 === 0)

function copyTempFloat (ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr]
  HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1]
  HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2]
  HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3]
}

function copyTempDouble (ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr]
  HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1]
  HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2]
  HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3]
  HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4]
  HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5]
  HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6]
  HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7]
}
Module['_bitshift64Ashr'] = _bitshift64Ashr

function _malloc (bytes) {
  var ptr = Runtime.dynamicAlloc(bytes + 8)
  return ptr + 8 & 4294967288
}
Module['_malloc'] = _malloc
Module['_i64Subtract'] = _i64Subtract

function ___assert_fail (condition, filename, line, func) {
  ABORT = true
  throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace()
}
Module['_i64Add'] = _i64Add
Module['_memset'] = _memset
Module['_bitshift64Lshr'] = _bitshift64Lshr

function _free () {}
Module['_free'] = _free
Module['_bitshift64Shl'] = _bitshift64Shl
var ERRNO_CODES = {
  EPERM: 1,
  ENOENT: 2,
  ESRCH: 3,
  EINTR: 4,
  EIO: 5,
  ENXIO: 6,
  E2BIG: 7,
  ENOEXEC: 8,
  EBADF: 9,
  ECHILD: 10,
  EAGAIN: 11,
  EWOULDBLOCK: 11,
  ENOMEM: 12,
  EACCES: 13,
  EFAULT: 14,
  ENOTBLK: 15,
  EBUSY: 16,
  EEXIST: 17,
  EXDEV: 18,
  ENODEV: 19,
  ENOTDIR: 20,
  EISDIR: 21,
  EINVAL: 22,
  ENFILE: 23,
  EMFILE: 24,
  ENOTTY: 25,
  ETXTBSY: 26,
  EFBIG: 27,
  ENOSPC: 28,
  ESPIPE: 29,
  EROFS: 30,
  EMLINK: 31,
  EPIPE: 32,
  EDOM: 33,
  ERANGE: 34,
  ENOMSG: 42,
  EIDRM: 43,
  ECHRNG: 44,
  EL2NSYNC: 45,
  EL3HLT: 46,
  EL3RST: 47,
  ELNRNG: 48,
  EUNATCH: 49,
  ENOCSI: 50,
  EL2HLT: 51,
  EDEADLK: 35,
  ENOLCK: 37,
  EBADE: 52,
  EBADR: 53,
  EXFULL: 54,
  ENOANO: 55,
  EBADRQC: 56,
  EBADSLT: 57,
  EDEADLOCK: 35,
  EBFONT: 59,
  ENOSTR: 60,
  ENODATA: 61,
  ETIME: 62,
  ENOSR: 63,
  ENONET: 64,
  ENOPKG: 65,
  EREMOTE: 66,
  ENOLINK: 67,
  EADV: 68,
  ESRMNT: 69,
  ECOMM: 70,
  EPROTO: 71,
  EMULTIHOP: 72,
  EDOTDOT: 73,
  EBADMSG: 74,
  ENOTUNIQ: 76,
  EBADFD: 77,
  EREMCHG: 78,
  ELIBACC: 79,
  ELIBBAD: 80,
  ELIBSCN: 81,
  ELIBMAX: 82,
  ELIBEXEC: 83,
  ENOSYS: 38,
  ENOTEMPTY: 39,
  ENAMETOOLONG: 36,
  ELOOP: 40,
  EOPNOTSUPP: 95,
  EPFNOSUPPORT: 96,
  ECONNRESET: 104,
  ENOBUFS: 105,
  EAFNOSUPPORT: 97,
  EPROTOTYPE: 91,
  ENOTSOCK: 88,
  ENOPROTOOPT: 92,
  ESHUTDOWN: 108,
  ECONNREFUSED: 111,
  EADDRINUSE: 98,
  ECONNABORTED: 103,
  ENETUNREACH: 101,
  ENETDOWN: 100,
  ETIMEDOUT: 110,
  EHOSTDOWN: 112,
  EHOSTUNREACH: 113,
  EINPROGRESS: 115,
  EALREADY: 114,
  EDESTADDRREQ: 89,
  EMSGSIZE: 90,
  EPROTONOSUPPORT: 93,
  ESOCKTNOSUPPORT: 94,
  EADDRNOTAVAIL: 99,
  ENETRESET: 102,
  EISCONN: 106,
  ENOTCONN: 107,
  ETOOMANYREFS: 109,
  EUSERS: 87,
  EDQUOT: 122,
  ESTALE: 116,
  ENOTSUP: 95,
  ENOMEDIUM: 123,
  EILSEQ: 84,
  EOVERFLOW: 75,
  ECANCELED: 125,
  ENOTRECOVERABLE: 131,
  EOWNERDEAD: 130,
  ESTRPIPE: 86
}
var ERRNO_MESSAGES = {
  0: 'Success',
  1: 'Not super-user',
  2: 'No such file or directory',
  3: 'No such process',
  4: 'Interrupted system call',
  5: 'I/O error',
  6: 'No such device or address',
  7: 'Arg list too long',
  8: 'Exec format error',
  9: 'Bad file number',
  10: 'No children',
  11: 'No more processes',
  12: 'Not enough core',
  13: 'Permission denied',
  14: 'Bad address',
  15: 'Block device required',
  16: 'Mount device busy',
  17: 'File exists',
  18: 'Cross-device link',
  19: 'No such device',
  20: 'Not a directory',
  21: 'Is a directory',
  22: 'Invalid argument',
  23: 'Too many open files in system',
  24: 'Too many open files',
  25: 'Not a typewriter',
  26: 'Text file busy',
  27: 'File too large',
  28: 'No space left on device',
  29: 'Illegal seek',
  30: 'Read only file system',
  31: 'Too many links',
  32: 'Broken pipe',
  33: 'Math arg out of domain of func',
  34: 'Math result not representable',
  35: 'File locking deadlock error',
  36: 'File or path name too long',
  37: 'No record locks available',
  38: 'Function not implemented',
  39: 'Directory not empty',
  40: 'Too many symbolic links',
  42: 'No message of desired type',
  43: 'Identifier removed',
  44: 'Channel number out of range',
  45: 'Level 2 not synchronized',
  46: 'Level 3 halted',
  47: 'Level 3 reset',
  48: 'Link number out of range',
  49: 'Protocol driver not attached',
  50: 'No CSI structure available',
  51: 'Level 2 halted',
  52: 'Invalid exchange',
  53: 'Invalid request descriptor',
  54: 'Exchange full',
  55: 'No anode',
  56: 'Invalid request code',
  57: 'Invalid slot',
  59: 'Bad font file fmt',
  60: 'Device not a stream',
  61: 'No data (for no delay io)',
  62: 'Timer expired',
  63: 'Out of streams resources',
  64: 'Machine is not on the network',
  65: 'Package not installed',
  66: 'The object is remote',
  67: 'The link has been severed',
  68: 'Advertise error',
  69: 'Srmount error',
  70: 'Communication error on send',
  71: 'Protocol error',
  72: 'Multihop attempted',
  73: 'Cross mount point (not really error)',
  74: 'Trying to read unreadable message',
  75: 'Value too large for defined data type',
  76: 'Given log. name not unique',
  77: 'f.d. invalid for this operation',
  78: 'Remote address changed',
  79: 'Can   access a needed shared lib',
  80: 'Accessing a corrupted shared lib',
  81: '.lib section in a.out corrupted',
  82: 'Attempting to link in too many libs',
  83: 'Attempting to exec a shared library',
  84: 'Illegal byte sequence',
  86: 'Streams pipe error',
  87: 'Too many users',
  88: 'Socket operation on non-socket',
  89: 'Destination address required',
  90: 'Message too long',
  91: 'Protocol wrong type for socket',
  92: 'Protocol not available',
  93: 'Unknown protocol',
  94: 'Socket type not supported',
  95: 'Not supported',
  96: 'Protocol family not supported',
  97: 'Address family not supported by protocol family',
  98: 'Address already in use',
  99: 'Address not available',
  100: 'Network interface is not configured',
  101: 'Network is unreachable',
  102: 'Connection reset by network',
  103: 'Connection aborted',
  104: 'Connection reset by peer',
  105: 'No buffer space available',
  106: 'Socket is already connected',
  107: 'Socket is not connected',
  108: "Can't send after socket shutdown",
  109: 'Too many references',
  110: 'Connection timed out',
  111: 'Connection refused',
  112: 'Host is down',
  113: 'Host is unreachable',
  114: 'Socket already connected',
  115: 'Connection already in progress',
  116: 'Stale file handle',
  122: 'Quota exceeded',
  123: 'No medium (in tape drive)',
  125: 'Operation canceled',
  130: 'Previous owner died',
  131: 'State not recoverable'
}
var ___errno_state = 0

function ___setErrNo (value) {
  SAFE_HEAP_STORE(___errno_state | 0, value | 0, 4, 0) | 0
  return value
}
var TTY = {
  ttys: [],
  init: function () {},
  shutdown: function () {},
  register: function (dev, ops) {
    TTY.ttys[dev] = {
      input: [],
      output: [],
      ops: ops
    }
    FS.registerDevice(dev, TTY.stream_ops)
  },
  stream_ops: {
    open: function (stream) {
      var tty = TTY.ttys[stream.node.rdev]
      if (!tty) {
        throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
      }
      stream.tty = tty
      stream.seekable = false
    },
    close: function (stream) {
      if (stream.tty.output.length) {
        stream.tty.ops.put_char(stream.tty, 10)
      }
    },
    read: function (stream, buffer, offset, length, pos) {
      if (!stream.tty || !stream.tty.ops.get_char) {
        throw new FS.ErrnoError(ERRNO_CODES.ENXIO)
      }
      var bytesRead = 0
      for (var i = 0; i < length; i++) {
        var result
        try {
          result = stream.tty.ops.get_char(stream.tty)
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO)
        }
        if (result === undefined && bytesRead === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)
        }
        if (result === null || result === undefined) break
        bytesRead++
        buffer[offset + i] = result
      }
      if (bytesRead) {
        stream.node.timestamp = Date.now()
      }
      return bytesRead
    },
    write: function (stream, buffer, offset, length, pos) {
      if (!stream.tty || !stream.tty.ops.put_char) {
        throw new FS.ErrnoError(ERRNO_CODES.ENXIO)
      }
      for (var i = 0; i < length; i++) {
        try {
          stream.tty.ops.put_char(stream.tty, buffer[offset + i])
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO)
        }
      }
      if (length) {
        stream.node.timestamp = Date.now()
      }
      return i
    }
  },
  default_tty_ops: {
    get_char: function (tty) {
      if (!tty.input.length) {
        var result = null
        if (ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WEB) {
          result = process['stdin']['read']()
          if (!result) {
            if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
              return null
            }
            return undefined
          }
        } else if (typeof window !== 'undefined' && typeof window.prompt === 'function') {
          result = window.prompt('Input: ')
          if (result !== null) {
            result += '\n'
          }
        } else if (typeof readline === 'function') {
          result = readline()
          if (result !== null) {
            result += '\n'
          }
        }
        if (!result) {
          return null
        }
        tty.input = intArrayFromString(result, true)
      }
      return tty.input.shift()
    },
    put_char: function (tty, val) {
      if (val === null || val === 10) {
        Module['print'](tty.output.join(''))
        tty.output = []
      } else {
        tty.output.push(TTY.utf8.processCChar(val))
      }
    }
  },
  default_tty1_ops: {
    put_char: function (tty, val) {
      if (val === null || val === 10) {
        Module['printErr'](tty.output.join(''))
        tty.output = []
      } else {
        tty.output.push(TTY.utf8.processCChar(val))
      }
    }
  }
}
var MEMFS = {
  ops_table: null,
  mount: function (mount) {
    return MEMFS.createNode(null, '/', 16384 | 511, 0)
  },
  createNode: function (parent, name, mode, dev) {
    if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM)
    }
    if (!MEMFS.ops_table) {
      MEMFS.ops_table = {
        dir: {
          node: {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr,
            lookup: MEMFS.node_ops.lookup,
            mknod: MEMFS.node_ops.mknod,
            rename: MEMFS.node_ops.rename,
            unlink: MEMFS.node_ops.unlink,
            rmdir: MEMFS.node_ops.rmdir,
            readdir: MEMFS.node_ops.readdir,
            symlink: MEMFS.node_ops.symlink
          },
          stream: {
            llseek: MEMFS.stream_ops.llseek
          }
        },
        file: {
          node: {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr
          },
          stream: {
            llseek: MEMFS.stream_ops.llseek,
            read: MEMFS.stream_ops.read,
            write: MEMFS.stream_ops.write,
            allocate: MEMFS.stream_ops.allocate,
            mmap: MEMFS.stream_ops.mmap
          }
        },
        link: {
          node: {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr,
            readlink: MEMFS.node_ops.readlink
          },
          stream: {}
        },
        chrdev: {
          node: {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr
          },
          stream: FS.chrdev_stream_ops
        }
      }
    }
    var node = FS.createNode(parent, name, mode, dev)
    if (FS.isDir(node.mode)) {
      node.node_ops = MEMFS.ops_table.dir.node
      node.stream_ops = MEMFS.ops_table.dir.stream
      node.contents = {}
    } else if (FS.isFile(node.mode)) {
      node.node_ops = MEMFS.ops_table.file.node
      node.stream_ops = MEMFS.ops_table.file.stream
      node.usedBytes = 0
      node.contents = null
    } else if (FS.isLink(node.mode)) {
      node.node_ops = MEMFS.ops_table.link.node
      node.stream_ops = MEMFS.ops_table.link.stream
    } else if (FS.isChrdev(node.mode)) {
      node.node_ops = MEMFS.ops_table.chrdev.node
      node.stream_ops = MEMFS.ops_table.chrdev.stream
    }
    node.timestamp = Date.now()
    if (parent) {
      parent.contents[name] = node
    }
    return node
  },
  getFileDataAsRegularArray: function (node) {
    if (node.contents && node.contents.subarray) {
      var arr = []
      for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i])
      return arr
    }
    return node.contents
  },
  getFileDataAsTypedArray: function (node) {
    if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes)
    return new Uint8Array(node.contents)
  },
  expandFileStorage: function (node, newCapacity) {
    if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
      node.contents = MEMFS.getFileDataAsRegularArray(node)
      node.usedBytes = node.contents.length
    }
    if (!node.contents || node.contents.subarray) {
      var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0
      if (prevCapacity >= newCapacity) return
      var CAPACITY_DOUBLING_MAX = 1024 * 1024
      newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) | 0)
      if (prevCapacity !== 0) newCapacity = Math.max(newCapacity, 256)
      var oldContents = node.contents
      node.contents = new Uint8Array(newCapacity)
      if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0)
      return
    }
    if (!node.contents && newCapacity > 0) node.contents = []
    while (node.contents.length < newCapacity) node.contents.push(0)
  },
  resizeFileStorage: function (node, newSize) {
    if (node.usedBytes === newSize) return
    if (newSize === 0) {
      node.contents = null
      node.usedBytes = 0
      return
    }
    if (!node.contents || node.contents.subarray) {
      var oldContents = node.contents
      node.contents = new Uint8Array(new ArrayBuffer(newSize))
      if (oldContents) {
        node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)))
      }
      node.usedBytes = newSize
      return
    }
    if (!node.contents) node.contents = []
    if (node.contents.length > newSize) node.contents.length = newSize
    else { while (node.contents.length < newSize) node.contents.push(0) }
    node.usedBytes = newSize
  },
  node_ops: {
    getattr: function (node) {
      var attr = {}
      attr.dev = FS.isChrdev(node.mode) ? node.id : 1
      attr.ino = node.id
      attr.mode = node.mode
      attr.nlink = 1
      attr.uid = 0
      attr.gid = 0
      attr.rdev = node.rdev
      if (FS.isDir(node.mode)) {
        attr.size = 4096
      } else if (FS.isFile(node.mode)) {
        attr.size = node.usedBytes
      } else if (FS.isLink(node.mode)) {
        attr.size = node.link.length
      } else {
        attr.size = 0
      }
      attr.atime = new Date(node.timestamp)
      attr.mtime = new Date(node.timestamp)
      attr.ctime = new Date(node.timestamp)
      attr.blksize = 4096
      attr.blocks = Math.ceil(attr.size / attr.blksize)
      return attr
    },
    setattr: function (node, attr) {
      if (attr.mode !== undefined) {
        node.mode = attr.mode
      }
      if (attr.timestamp !== undefined) {
        node.timestamp = attr.timestamp
      }
      if (attr.size !== undefined) {
        MEMFS.resizeFileStorage(node, attr.size)
      }
    },
    lookup: function (parent, name) {
      throw FS.genericErrors[ERRNO_CODES.ENOENT]
    },
    mknod: function (parent, name, mode, dev) {
      return MEMFS.createNode(parent, name, mode, dev)
    },
    rename: function (old_node, new_dir, new_name) {
      if (FS.isDir(old_node.mode)) {
        var new_node
        try {
          new_node = FS.lookupNode(new_dir, new_name)
        } catch (e) {}
        if (new_node) {
          for (var i in new_node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)
          }
        }
      }
      delete old_node.parent.contents[old_node.name]
      old_node.name = new_name
      new_dir.contents[new_name] = old_node
      old_node.parent = new_dir
    },
    unlink: function (parent, name) {
      delete parent.contents[name]
    },
    rmdir: function (parent, name) {
      var node = FS.lookupNode(parent, name)
      for (var i in node.contents) {
        throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)
      }
      delete parent.contents[name]
    },
    readdir: function (node) {
      var entries = ['.', '..']
      for (var key in node.contents) {
        if (!node.contents.hasOwnProperty(key)) {
          continue
        }
        entries.push(key)
      }
      return entries
    },
    symlink: function (parent, newname, oldpath) {
      var node = MEMFS.createNode(parent, newname, 511 | 40960, 0)
      node.link = oldpath
      return node
    },
    readlink: function (node) {
      if (!FS.isLink(node.mode)) {
        throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
      }
      return node.link
    }
  },
  stream_ops: {
    read: function (stream, buffer, offset, length, position) {
      var contents = stream.node.contents
      if (position >= stream.node.usedBytes) return 0
      var size = Math.min(stream.node.usedBytes - position, length)
      assert(size >= 0)
      if (size > 8 && contents.subarray) {
        buffer.set(contents.subarray(position, position + size), offset)
      } else {
        for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i]
      }
      return size
    },
    write: function (stream, buffer, offset, length, position, canOwn) {
      if (!length) return 0
      var node = stream.node
      node.timestamp = Date.now()
      if (buffer.subarray && (!node.contents || node.contents.subarray)) {
        if (canOwn) {
          node.contents = buffer.subarray(offset, offset + length)
          node.usedBytes = length
          return length
        } else if (node.usedBytes === 0 && position === 0) {
          node.contents = new Uint8Array(buffer.subarray(offset, offset + length))
          node.usedBytes = length
          return length
        } else if (position + length <= node.usedBytes) {
          node.contents.set(buffer.subarray(offset, offset + length), position)
          return length
        }
      }
      MEMFS.expandFileStorage(node, position + length)
      if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position)
      else {
        for (var i = 0; i < length; i++) {
          node.contents[position + i] = buffer[offset + i]
        }
      }
      node.usedBytes = Math.max(node.usedBytes, position + length)
      return length
    },
    llseek: function (stream, offset, whence) {
      var position = offset
      if (whence === 1) {
        position += stream.position
      } else if (whence === 2) {
        if (FS.isFile(stream.node.mode)) {
          position += stream.node.usedBytes
        }
      }
      if (position < 0) {
        throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
      }
      stream.ungotten = []
      stream.position = position
      return position
    },
    allocate: function (stream, offset, length) {
      MEMFS.expandFileStorage(stream.node, offset + length)
      stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length)
    },
    mmap: function (stream, buffer, offset, length, position, prot, flags) {
      if (!FS.isFile(stream.node.mode)) {
        throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
      }
      var ptr
      var allocated
      var contents = stream.node.contents
      if (!(flags & 2) && (contents.buffer === buffer || contents.buffer === buffer.buffer)) {
        allocated = false
        ptr = contents.byteOffset
      } else {
        if (position > 0 || position + length < stream.node.usedBytes) {
          if (contents.subarray) {
            contents = contents.subarray(position, position + length)
          } else {
            contents = Array.prototype.slice.call(contents, position, position + length)
          }
        }
        allocated = true
        ptr = _malloc(length)
        if (!ptr) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOMEM)
        }
        buffer.set(contents, ptr)
      }
      return {
        ptr: ptr,
        allocated: allocated
      }
    }
  }
}
var IDBFS = {
  dbs: {},
  indexedDB: function () {
    if (typeof indexedDB !== 'undefined') return indexedDB
    var ret = null
    if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB
    assert(ret, 'IDBFS used, but indexedDB not supported')
    return ret
  },
  DB_VERSION: 21,
  DB_STORE_NAME: 'FILE_DATA',
  mount: function (mount) {
    return MEMFS.mount.apply(null, arguments)
  },
  syncfs: function (mount, populate, callback) {
    IDBFS.getLocalSet(mount, function (err, local) {
      if (err) return callback(err)
      IDBFS.getRemoteSet(mount, function (err, remote) {
        if (err) return callback(err)
        var src = populate ? remote : local
        var dst = populate ? local : remote
        IDBFS.reconcile(src, dst, callback)
      })
    })
  },
  getDB: function (name, callback) {
    var db = IDBFS.dbs[name]
    if (db) {
      return callback(null, db)
    }
    var req
    try {
      req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION)
    } catch (e) {
      return callback(e)
    }
    req.onupgradeneeded = function (e) {
      var db = e.target.result
      var transaction = e.target.transaction
      var fileStore
      if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
        fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME)
      } else {
        fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME)
      }
      fileStore.createIndex('timestamp', 'timestamp', {
        unique: false
      })
    }
    req.onsuccess = function () {
      db = req.result
      IDBFS.dbs[name] = db
      callback(null, db)
    }
    req.onerror = function () {
      callback(this.error)
    }
  },
  getLocalSet: function (mount, callback) {
    var entries = {}

    function isRealDir (p) {
      return p !== '.' && p !== '..'
    }

    function toAbsolute (root) {
      return function (p) {
        return PATH.join2(root, p)
      }
    }
    var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint))
    while (check.length) {
      var path = check.pop()
      var stat
      try {
        stat = FS.stat(path)
      } catch (e) {
        return callback(e)
      }
      if (FS.isDir(stat.mode)) {
        check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)))
      }
      entries[path] = {
        timestamp: stat.mtime
      }
    }
    return callback(null, {
      type: 'local',
      entries: entries
    })
  },
  getRemoteSet: function (mount, callback) {
    var entries = {}
    IDBFS.getDB(mount.mountpoint, function (err, db) {
      if (err) return callback(err)
      var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly')
      transaction.onerror = function () {
        callback(this.error)
      }
      var store = transaction.objectStore(IDBFS.DB_STORE_NAME)
      var index = store.index('timestamp')
      index.openKeyCursor().onsuccess = function (event) {
        var cursor = event.target.result
        if (!cursor) {
          return callback(null, {
            type: 'remote',
            db: db,
            entries: entries
          })
        }
        entries[cursor.primaryKey] = {
          timestamp: cursor.key
        }
        cursor.continue()
      }
    })
  },
  loadLocalEntry: function (path, callback) {
    var stat, node
    try {
      var lookup = FS.lookupPath(path)
      node = lookup.node
      stat = FS.stat(path)
    } catch (e) {
      return callback(e)
    }
    if (FS.isDir(stat.mode)) {
      return callback(null, {
        timestamp: stat.mtime,
        mode: stat.mode
      })
    } else if (FS.isFile(stat.mode)) {
      node.contents = MEMFS.getFileDataAsTypedArray(node)
      return callback(null, {
        timestamp: stat.mtime,
        mode: stat.mode,
        contents: node.contents
      })
    } else {
      return callback(new Error('node type not supported'))
    }
  },
  storeLocalEntry: function (path, entry, callback) {
    try {
      if (FS.isDir(entry.mode)) {
        FS.mkdir(path, entry.mode)
      } else if (FS.isFile(entry.mode)) {
        FS.writeFile(path, entry.contents, {
          encoding: 'binary',
          canOwn: true
        })
      } else {
        return callback(new Error('node type not supported'))
      }
      FS.utime(path, entry.timestamp, entry.timestamp)
    } catch (e) {
      return callback(e)
    }
    callback(null)
  },
  removeLocalEntry: function (path, callback) {
    try {
      var lookup = FS.lookupPath(path)
      var stat = FS.stat(path)
      if (FS.isDir(stat.mode)) {
        FS.rmdir(path)
      } else if (FS.isFile(stat.mode)) {
        FS.unlink(path)
      }
    } catch (e) {
      return callback(e)
    }
    callback(null)
  },
  loadRemoteEntry: function (store, path, callback) {
    var req = store.get(path)
    req.onsuccess = function (event) {
      callback(null, event.target.result)
    }
    req.onerror = function () {
      callback(this.error)
    }
  },
  storeRemoteEntry: function (store, path, entry, callback) {
    var req = store.put(entry, path)
    req.onsuccess = function () {
      callback(null)
    }
    req.onerror = function () {
      callback(this.error)
    }
  },
  removeRemoteEntry: function (store, path, callback) {
    var req = store.delete(path)
    req.onsuccess = function () {
      callback(null)
    }
    req.onerror = function () {
      callback(this.error)
    }
  },
  reconcile: function (src, dst, callback) {
    var total = 0
    var create = []
    Object.keys(src.entries).forEach(function (key) {
      var e = src.entries[key]
      var e2 = dst.entries[key]
      if (!e2 || e.timestamp > e2.timestamp) {
        create.push(key)
        total++
      }
    })
    var remove = []
    Object.keys(dst.entries).forEach(function (key) {
      var e = dst.entries[key]
      var e2 = src.entries[key]
      if (!e2) {
        remove.push(key)
        total++
      }
    })
    if (!total) {
      return callback(null)
    }
    var errored = false
    var completed = 0
    var db = src.type === 'remote' ? src.db : dst.db
    var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite')
    var store = transaction.objectStore(IDBFS.DB_STORE_NAME)

    function done (err) {
      if (err) {
        if (!done.errored) {
          done.errored = true
          return callback(err)
        }
        return
      }
      if (++completed >= total) {
        return callback(null)
      }
    }
    transaction.onerror = function () {
      done(this.error)
    }
    create.sort().forEach(function (path) {
      if (dst.type === 'local') {
        IDBFS.loadRemoteEntry(store, path, function (err, entry) {
          if (err) return done(err)
          IDBFS.storeLocalEntry(path, entry, done)
        })
      } else {
        IDBFS.loadLocalEntry(path, function (err, entry) {
          if (err) return done(err)
          IDBFS.storeRemoteEntry(store, path, entry, done)
        })
      }
    })
    remove.sort().reverse().forEach(function (path) {
      if (dst.type === 'local') {
        IDBFS.removeLocalEntry(path, done)
      } else {
        IDBFS.removeRemoteEntry(store, path, done)
      }
    })
  }
}
var NODEFS = {
  isWindows: false,
  staticInit: function () {
    NODEFS.isWindows = !!process.platform.match(/^win/)
  },
  mount: function (mount) {
    assert(ENVIRONMENT_IS_NODE)
    return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0)
  },
  createNode: function (parent, name, mode, dev) {
    if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
    }
    var node = FS.createNode(parent, name, mode)
    node.node_ops = NODEFS.node_ops
    node.stream_ops = NODEFS.stream_ops
    return node
  },
  getMode: function (path) {
    var stat
    try {
      stat = fs.lstatSync(path)
      if (NODEFS.isWindows) {
        stat.mode = stat.mode | (stat.mode & 146) >> 1
      }
    } catch (e) {
      if (!e.code) throw e
      throw new FS.ErrnoError(ERRNO_CODES[e.code])
    }
    return stat.mode
  },
  realPath: function (node) {
    var parts = []
    while (node.parent !== node) {
      parts.push(node.name)
      node = node.parent
    }
    parts.push(node.mount.opts.root)
    parts.reverse()
    return PATH.join.apply(null, parts)
  },
  flagsToPermissionStringMap: {
    0: 'r',
    1: 'r+',
    2: 'r+',
    64: 'r',
    65: 'r+',
    66: 'r+',
    129: 'rx+',
    193: 'rx+',
    514: 'w+',
    577: 'w',
    578: 'w+',
    705: 'wx',
    706: 'wx+',
    1024: 'a',
    1025: 'a',
    1026: 'a+',
    1089: 'a',
    1090: 'a+',
    1153: 'ax',
    1154: 'ax+',
    1217: 'ax',
    1218: 'ax+',
    4096: 'rs',
    4098: 'rs+'
  },
  flagsToPermissionString: function (flags) {
    if (flags in NODEFS.flagsToPermissionStringMap) {
      return NODEFS.flagsToPermissionStringMap[flags]
    } else {
      return flags
    }
  },
  node_ops: {
    getattr: function (node) {
      var path = NODEFS.realPath(node)
      var stat
      try {
        stat = fs.lstatSync(path)
      } catch (e) {
        if (!e.code) throw e
        throw new FS.ErrnoError(ERRNO_CODES[e.code])
      }
      if (NODEFS.isWindows && !stat.blksize) {
        stat.blksize = 4096
      }
      if (NODEFS.isWindows && !stat.blocks) {
        stat.blocks = (stat.size + stat.blksize - 1) / stat.blksize | 0
      }
      return {
        dev: stat.dev,
        ino: stat.ino,
        mode: stat.mode,
        nlink: stat.nlink,
        uid: stat.uid,
        gid: stat.gid,
        rdev: stat.rdev,
        size: stat.size,
        atime: stat.atime,
        mtime: stat.mtime,
        ctime: stat.ctime,
        blksize: stat.blksize,
        blocks: stat.blocks
      }
    },
    setattr: function (node, attr) {
      var path = NODEFS.realPath(node)
      try {
        if (attr.mode !== undefined) {
          fs.chmodSync(path, attr.mode)
          node.mode = attr.mode
        }
        if (attr.timestamp !== undefined) {
          var date = new Date(attr.timestamp)
          fs.utimesSync(path, date, date)
        }
        if (attr.size !== undefined) {
          fs.truncateSync(path, attr.size)
        }
      } catch (e) {
        if (!e.code) throw e
        throw new FS.ErrnoError(ERRNO_CODES[e.code])
      }
    },
    lookup: function (parent, name) {
      var path = PATH.join2(NODEFS.realPath(parent), name)
      var mode = NODEFS.getMode(path)
      return NODEFS.createNode(parent, name, mode)
    },
    mknod: function (parent, name, mode, dev) {
      var node = NODEFS.createNode(parent, name, mode, dev)
      var path = NODEFS.realPath(node)
      try {
        if (FS.isDir(node.mode)) {
          fs.mkdirSync(path, node.mode)
        } else {
          fs.writeFileSync(path, '', {
            mode: node.mode
          })
        }
      } catch (e) {
        if (!e.code) throw e
        throw new FS.ErrnoError(ERRNO_CODES[e.code])
      }
      return node
    },
    rename: function (oldNode, newDir, newName) {
      var oldPath = NODEFS.realPath(oldNode)
      var newPath = PATH.join2(NODEFS.realPath(newDir), newName)
      try {
        fs.renameSync(oldPath, newPath)
      } catch (e) {
        if (!e.code) throw e
        throw new FS.ErrnoError(ERRNO_CODES[e.code])
      }
    },
    unlink: function (parent, name) {
      var path = PATH.join2(NODEFS.realPath(parent), name)
      try {
        fs.unlinkSync(path)
      } catch (e) {
        if (!e.code) throw e
        throw new FS.ErrnoError(ERRNO_CODES[e.code])
      }
    },
    rmdir: function (parent, name) {
      var path = PATH.join2(NODEFS.realPath(parent), name)
      try {
        fs.rmdirSync(path)
      } catch (e) {
        if (!e.code) throw e
        throw new FS.ErrnoError(ERRNO_CODES[e.code])
      }
    },
    readdir: function (node) {
      var path = NODEFS.realPath(node)
      try {
        return fs.readdirSync(path)
      } catch (e) {
        if (!e.code) throw e
        throw new FS.ErrnoError(ERRNO_CODES[e.code])
      }
    },
    symlink: function (parent, newName, oldPath) {
      var newPath = PATH.join2(NODEFS.realPath(parent), newName)
      try {
        fs.symlinkSync(oldPath, newPath)
      } catch (e) {
        if (!e.code) throw e
        throw new FS.ErrnoError(ERRNO_CODES[e.code])
      }
    },
    readlink: function (node) {
      var path = NODEFS.realPath(node)
      try {
        return fs.readlinkSync(path)
      } catch (e) {
        if (!e.code) throw e
        throw new FS.ErrnoError(ERRNO_CODES[e.code])
      }
    }
  },
  stream_ops: {
    open: function (stream) {
      var path = NODEFS.realPath(stream.node)
      try {
        if (FS.isFile(stream.node.mode)) {
          stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags))
        }
      } catch (e) {
        if (!e.code) throw e
        throw new FS.ErrnoError(ERRNO_CODES[e.code])
      }
    },
    close: function (stream) {
      try {
        if (FS.isFile(stream.node.mode) && stream.nfd) {
          fs.closeSync(stream.nfd)
        }
      } catch (e) {
        if (!e.code) throw e
        throw new FS.ErrnoError(ERRNO_CODES[e.code])
      }
    },
    read: function (stream, buffer, offset, length, position) {
      var nbuffer = Buffer.from(length)
      var res
      try {
        res = fs.readSync(stream.nfd, nbuffer, 0, length, position)
      } catch (e) {
        throw new FS.ErrnoError(ERRNO_CODES[e.code])
      }
      if (res > 0) {
        for (var i = 0; i < res; i++) {
          buffer[offset + i] = nbuffer[i]
        }
      }
      return res
    },
    write: function (stream, buffer, offset, length, position) {
      var nbuffer = Buffer.from(buffer.subarray(offset, offset + length))
      var res
      try {
        res = fs.writeSync(stream.nfd, nbuffer, 0, length, position)
      } catch (e) {
        throw new FS.ErrnoError(ERRNO_CODES[e.code])
      }
      return res
    },
    llseek: function (stream, offset, whence) {
      var position = offset
      if (whence === 1) {
        position += stream.position
      } else if (whence === 2) {
        if (FS.isFile(stream.node.mode)) {
          try {
            var stat = fs.fstatSync(stream.nfd)
            position += stat.size
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code])
          }
        }
      }
      if (position < 0) {
        throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
      }
      stream.position = position
      return position
    }
  }
}
var _stdin = allocate(1, 'i32*', ALLOC_STATIC)
var _stdout = allocate(1, 'i32*', ALLOC_STATIC)
var _stderr = allocate(1, 'i32*', ALLOC_STATIC)

function _fflush (stream) {}
var FS = {
  root: null,
  mounts: [],
  devices: [null],
  streams: [],
  nextInode: 1,
  nameTable: null,
  currentPath: '/',
  initialized: false,
  ignorePermissions: true,
  trackingDelegate: {},
  tracking: {
    openFlags: {
      READ: 1,
      WRITE: 2
    }
  },
  ErrnoError: null,
  genericErrors: {},
  handleFSError: function (e) {
    if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace()
    return ___setErrNo(e.errno)
  },
  lookupPath: function (path, opts) {
    path = PATH.resolve(FS.cwd(), path)
    opts = opts || {}
    if (!path) {
      return {
        path: '',
        node: null
      }
    }
    var defaults = {
      follow_mount: true,
      recurse_count: 0
    }
    for (var key in defaults) {
      if (opts[key] === undefined) {
        opts[key] = defaults[key]
      }
    }
    if (opts.recurse_count > 8) {
      throw new FS.ErrnoError(ERRNO_CODES.ELOOP)
    }
    var parts = PATH.normalizeArray(path.split('/').filter(function (p) {
      return !!p
    }), false)
    var current = FS.root
    var current_path = '/'
    for (var i = 0; i < parts.length; i++) {
      var islast = i === parts.length - 1
      if (islast && opts.parent) {
        break
      }
      current = FS.lookupNode(current, parts[i])
      current_path = PATH.join2(current_path, parts[i])
      if (FS.isMountpoint(current)) {
        if (!islast || islast && opts.follow_mount) {
          current = current.mounted.root
        }
      }
      if (!islast || opts.follow) {
        var count = 0
        while (FS.isLink(current.mode)) {
          var link = FS.readlink(current_path)
          current_path = PATH.resolve(PATH.dirname(current_path), link)
          var lookup = FS.lookupPath(current_path, {
            recurse_count: opts.recurse_count
          })
          current = lookup.node
          if (count++ > 40) {
            throw new FS.ErrnoError(ERRNO_CODES.ELOOP)
          }
        }
      }
    }
    return {
      path: current_path,
      node: current
    }
  },
  getPath: function (node) {
    var path
    while (true) {
      if (FS.isRoot(node)) {
        var mount = node.mount.mountpoint
        if (!path) return mount
        return mount[mount.length - 1] !== '/' ? mount + '/' + path : mount + path
      }
      path = path ? node.name + '/' + path : node.name
      node = node.parent
    }
  },
  hashName: function (parentid, name) {
    var hash = 0
    for (var i = 0; i < name.length; i++) {
      hash = (hash << 5) - hash + name.charCodeAt(i) | 0
    }
    return (parentid + hash >>> 0) % FS.nameTable.length
  },
  hashAddNode: function (node) {
    var hash = FS.hashName(node.parent.id, node.name)
    node.name_next = FS.nameTable[hash]
    FS.nameTable[hash] = node
  },
  hashRemoveNode: function (node) {
    var hash = FS.hashName(node.parent.id, node.name)
    if (FS.nameTable[hash] === node) {
      FS.nameTable[hash] = node.name_next
    } else {
      var current = FS.nameTable[hash]
      while (current) {
        if (current.name_next === node) {
          current.name_next = node.name_next
          break
        }
        current = current.name_next
      }
    }
  },
  lookupNode: function (parent, name) {
    var err = FS.mayLookup(parent)
    if (err) {
      throw new FS.ErrnoError(err)
    }
    var hash = FS.hashName(parent.id, name)
    for (var node = FS.nameTable[hash]; node; node = node.name_next) {
      var nodeName = node.name
      if (node.parent.id === parent.id && nodeName === name) {
        return node
      }
    }
    return FS.lookup(parent, name)
  },
  createNode: function (parent, name, mode, rdev) {
    if (!FS.FSNode) {
      FS.FSNode = function (parent, name, mode, rdev) {
        if (!parent) {
          parent = this
        }
        this.parent = parent
        this.mount = parent.mount
        this.mounted = null
        this.id = FS.nextInode++
        this.name = name
        this.mode = mode
        this.node_ops = {}
        this.stream_ops = {}
        this.rdev = rdev
      }
      FS.FSNode.prototype = {}
      var readMode = 292 | 73
      var writeMode = 146
      Object.defineProperties(FS.FSNode.prototype, {
        read: {
          get: function () {
            return (this.mode & readMode) === readMode
          },
          set: function (val) {
            val ? this.mode |= readMode : this.mode &= ~readMode
          }
        },
        write: {
          get: function () {
            return (this.mode & writeMode) === writeMode
          },
          set: function (val) {
            val ? this.mode |= writeMode : this.mode &= ~writeMode
          }
        },
        isFolder: {
          get: function () {
            return FS.isDir(this.mode)
          }
        },
        isDevice: {
          get: function () {
            return FS.isChrdev(this.mode)
          }
        }
      })
    }
    var node = new FS.FSNode(parent, name, mode, rdev)
    FS.hashAddNode(node)
    return node
  },
  destroyNode: function (node) {
    FS.hashRemoveNode(node)
  },
  isRoot: function (node) {
    return node === node.parent
  },
  isMountpoint: function (node) {
    return !!node.mounted
  },
  isFile: function (mode) {
    return (mode & 61440) === 32768
  },
  isDir: function (mode) {
    return (mode & 61440) === 16384
  },
  isLink: function (mode) {
    return (mode & 61440) === 40960
  },
  isChrdev: function (mode) {
    return (mode & 61440) === 8192
  },
  isBlkdev: function (mode) {
    return (mode & 61440) === 24576
  },
  isFIFO: function (mode) {
    return (mode & 61440) === 4096
  },
  isSocket: function (mode) {
    return (mode & 49152) === 49152
  },
  flagModes: {
    'r': 0,
    'rs': 1052672,
    'r+': 2,
    'w': 577,
    'wx': 705,
    'xw': 705,
    'w+': 578,
    'wx+': 706,
    'xw+': 706,
    'a': 1089,
    'ax': 1217,
    'xa': 1217,
    'a+': 1090,
    'ax+': 1218,
    'xa+': 1218
  },
  modeStringToFlags: function (str) {
    var flags = FS.flagModes[str]
    if (typeof flags === 'undefined') {
      throw new Error('Unknown file open mode: ' + str)
    }
    return flags
  },
  flagsToPermissionString: function (flag) {
    var accmode = flag & 2097155
    var perms = ['r', 'w', 'rw'][accmode]
    if (flag & 512) {
      perms += 'w'
    }
    return perms
  },
  nodePermissions: function (node, perms) {
    if (FS.ignorePermissions) {
      return 0
    }
    if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
      return ERRNO_CODES.EACCES
    } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
      return ERRNO_CODES.EACCES
    } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
      return ERRNO_CODES.EACCES
    }
    return 0
  },
  mayLookup: function (dir) {
    var err = FS.nodePermissions(dir, 'x')
    if (err) return err
    if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES
    return 0
  },
  mayCreate: function (dir, name) {
    try {
      var node = FS.lookupNode(dir, name)
      return ERRNO_CODES.EEXIST
    } catch (e) {}
    return FS.nodePermissions(dir, 'wx')
  },
  mayDelete: function (dir, name, isdir) {
    var node
    try {
      node = FS.lookupNode(dir, name)
    } catch (e) {
      return e.errno
    }
    var err = FS.nodePermissions(dir, 'wx')
    if (err) {
      return err
    }
    if (isdir) {
      if (!FS.isDir(node.mode)) {
        return ERRNO_CODES.ENOTDIR
      }
      if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
        return ERRNO_CODES.EBUSY
      }
    } else {
      if (FS.isDir(node.mode)) {
        return ERRNO_CODES.EISDIR
      }
    }
    return 0
  },
  mayOpen: function (node, flags) {
    if (!node) {
      return ERRNO_CODES.ENOENT
    }
    if (FS.isLink(node.mode)) {
      return ERRNO_CODES.ELOOP
    } else if (FS.isDir(node.mode)) {
      if ((flags & 2097155) !== 0 || flags & 512) {
        return ERRNO_CODES.EISDIR
      }
    }
    return FS.nodePermissions(node, FS.flagsToPermissionString(flags))
  },
  MAX_OPEN_FDS: 4096,
  nextfd: function (fd_start, fd_end) {
    fd_start = fd_start || 0
    fd_end = fd_end || FS.MAX_OPEN_FDS
    for (var fd = fd_start; fd <= fd_end; fd++) {
      if (!FS.streams[fd]) {
        return fd
      }
    }
    throw new FS.ErrnoError(ERRNO_CODES.EMFILE)
  },
  getStream: function (fd) {
    return FS.streams[fd]
  },
  createStream: function (stream, fd_start, fd_end) {
    if (!FS.FSStream) {
      FS.FSStream = function () {}
      FS.FSStream.prototype = {}
      Object.defineProperties(FS.FSStream.prototype, {
        object: {
          get: function () {
            return this.node
          },
          set: function (val) {
            this.node = val
          }
        },
        isRead: {
          get: function () {
            return (this.flags & 2097155) !== 1
          }
        },
        isWrite: {
          get: function () {
            return (this.flags & 2097155) !== 0
          }
        },
        isAppend: {
          get: function () {
            return this.flags & 1024
          }
        }
      })
    }
    var newStream = new FS.FSStream()
    for (var p in stream) {
      newStream[p] = stream[p]
    }
    stream = newStream
    var fd = FS.nextfd(fd_start, fd_end)
    stream.fd = fd
    FS.streams[fd] = stream
    return stream
  },
  closeStream: function (fd) {
    FS.streams[fd] = null
  },
  getStreamFromPtr: function (ptr) {
    return FS.streams[ptr - 1]
  },
  getPtrForStream: function (stream) {
    return stream ? stream.fd + 1 : 0
  },
  chrdev_stream_ops: {
    open: function (stream) {
      var device = FS.getDevice(stream.node.rdev)
      stream.stream_ops = device.stream_ops
      if (stream.stream_ops.open) {
        stream.stream_ops.open(stream)
      }
    },
    llseek: function () {
      throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
    }
  },
  major: function (dev) {
    return dev >> 8
  },
  minor: function (dev) {
    return dev & 255
  },
  makedev: function (ma, mi) {
    return ma << 8 | mi
  },
  registerDevice: function (dev, ops) {
    FS.devices[dev] = {
      stream_ops: ops
    }
  },
  getDevice: function (dev) {
    return FS.devices[dev]
  },
  getMounts: function (mount) {
    var mounts = []
    var check = [mount]
    while (check.length) {
      var m = check.pop()
      mounts.push(m)
      check.push.apply(check, m.mounts)
    }
    return mounts
  },
  syncfs: function (populate, callback) {
    if (typeof populate === 'function') {
      callback = populate
      populate = false
    }
    var mounts = FS.getMounts(FS.root.mount)
    var completed = 0

    function done (err) {
      if (err) {
        if (!done.errored) {
          done.errored = true
          return callback(err)
        }
        return
      }
      if (++completed >= mounts.length) {
        callback(null)
      }
    }
    mounts.forEach(function (mount) {
      if (!mount.type.syncfs) {
        return done(null)
      }
      mount.type.syncfs(mount, populate, done)
    })
  },
  mount: function (type, opts, mountpoint) {
    var root = mountpoint === '/'
    var pseudo = !mountpoint
    var node
    if (root && FS.root) {
      throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
    } else if (!root && !pseudo) {
      var lookup = FS.lookupPath(mountpoint, {
        follow_mount: false
      })
      mountpoint = lookup.path
      node = lookup.node
      if (FS.isMountpoint(node)) {
        throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
      }
      if (!FS.isDir(node.mode)) {
        throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)
      }
    }
    var mount = {
      type: type,
      opts: opts,
      mountpoint: mountpoint,
      mounts: []
    }
    var mountRoot = type.mount(mount)
    mountRoot.mount = mount
    mount.root = mountRoot
    if (root) {
      FS.root = mountRoot
    } else if (node) {
      node.mounted = mount
      if (node.mount) {
        node.mount.mounts.push(mount)
      }
    }
    return mountRoot
  },
  unmount: function (mountpoint) {
    var lookup = FS.lookupPath(mountpoint, {
      follow_mount: false
    })
    if (!FS.isMountpoint(lookup.node)) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
    }
    var node = lookup.node
    var mount = node.mounted
    var mounts = FS.getMounts(mount)
    Object.keys(FS.nameTable).forEach(function (hash) {
      var current = FS.nameTable[hash]
      while (current) {
        var next = current.name_next
        if (mounts.indexOf(current.mount) !== -1) {
          FS.destroyNode(current)
        }
        current = next
      }
    })
    node.mounted = null
    var idx = node.mount.mounts.indexOf(mount)
    assert(idx !== -1)
    node.mount.mounts.splice(idx, 1)
  },
  lookup: function (parent, name) {
    return parent.node_ops.lookup(parent, name)
  },
  mknod: function (path, mode, dev) {
    var lookup = FS.lookupPath(path, {
      parent: true
    })
    var parent = lookup.node
    var name = PATH.basename(path)
    if (!name || name === '.' || name === '..') {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
    }
    var err = FS.mayCreate(parent, name)
    if (err) {
      throw new FS.ErrnoError(err)
    }
    if (!parent.node_ops.mknod) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM)
    }
    return parent.node_ops.mknod(parent, name, mode, dev)
  },
  create: function (path, mode) {
    mode = mode !== undefined ? mode : 438
    mode &= 4095
    mode |= 32768
    return FS.mknod(path, mode, 0)
  },
  mkdir: function (path, mode) {
    mode = mode !== undefined ? mode : 511
    mode &= 511 | 512
    mode |= 16384
    return FS.mknod(path, mode, 0)
  },
  mkdev: function (path, mode, dev) {
    if (typeof dev === 'undefined') {
      dev = mode
      mode = 438
    }
    mode |= 8192
    return FS.mknod(path, mode, dev)
  },
  symlink: function (oldpath, newpath) {
    if (!PATH.resolve(oldpath)) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
    }
    var lookup = FS.lookupPath(newpath, {
      parent: true
    })
    var parent = lookup.node
    if (!parent) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
    }
    var newname = PATH.basename(newpath)
    var err = FS.mayCreate(parent, newname)
    if (err) {
      throw new FS.ErrnoError(err)
    }
    if (!parent.node_ops.symlink) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM)
    }
    return parent.node_ops.symlink(parent, newname, oldpath)
  },
  rename: function (old_path, new_path) {
    var old_dirname = PATH.dirname(old_path)
    var new_dirname = PATH.dirname(new_path)
    var old_name = PATH.basename(old_path)
    var new_name = PATH.basename(new_path)
    var lookup, old_dir, new_dir
    try {
      lookup = FS.lookupPath(old_path, {
        parent: true
      })
      old_dir = lookup.node
      lookup = FS.lookupPath(new_path, {
        parent: true
      })
      new_dir = lookup.node
    } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
    }
    if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
    if (old_dir.mount !== new_dir.mount) {
      throw new FS.ErrnoError(ERRNO_CODES.EXDEV)
    }
    var old_node = FS.lookupNode(old_dir, old_name)
    var relative = PATH.relative(old_path, new_dirname)
    if (relative.charAt(0) !== '.') {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
    }
    relative = PATH.relative(new_path, old_dirname)
    if (relative.charAt(0) !== '.') {
      throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)
    }
    var new_node
    try {
      new_node = FS.lookupNode(new_dir, new_name)
    } catch (e) {}
    if (old_node === new_node) {
      return
    }
    var isdir = FS.isDir(old_node.mode)
    var err = FS.mayDelete(old_dir, old_name, isdir)
    if (err) {
      throw new FS.ErrnoError(err)
    }
    err = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name)
    if (err) {
      throw new FS.ErrnoError(err)
    }
    if (!old_dir.node_ops.rename) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM)
    }
    if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
      throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
    }
    if (new_dir !== old_dir) {
      err = FS.nodePermissions(old_dir, 'w')
      if (err) {
        throw new FS.ErrnoError(err)
      }
    }
    try {
      if (FS.trackingDelegate['willMovePath']) {
        FS.trackingDelegate['willMovePath'](old_path, new_path)
      }
    } catch (e) {
      console.log("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message)
    }
    FS.hashRemoveNode(old_node)
    try {
      old_dir.node_ops.rename(old_node, new_dir, new_name)
    } catch (e) {
      throw e
    } finally {
      FS.hashAddNode(old_node)
    }
    try {
      if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path)
    } catch (e) {
      console.log("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message)
    }
  },
  rmdir: function (path) {
    var lookup = FS.lookupPath(path, {
      parent: true
    })
    var parent = lookup.node
    var name = PATH.basename(path)
    var node = FS.lookupNode(parent, name)
    var err = FS.mayDelete(parent, name, true)
    if (err) {
      throw new FS.ErrnoError(err)
    }
    if (!parent.node_ops.rmdir) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM)
    }
    if (FS.isMountpoint(node)) {
      throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
    }
    try {
      if (FS.trackingDelegate['willDeletePath']) {
        FS.trackingDelegate['willDeletePath'](path)
      }
    } catch (e) {
      console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message)
    }
    parent.node_ops.rmdir(parent, name)
    FS.destroyNode(node)
    try {
      if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path)
    } catch (e) {
      console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message)
    }
  },
  readdir: function (path) {
    var lookup = FS.lookupPath(path, {
      follow: true
    })
    var node = lookup.node
    if (!node.node_ops.readdir) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)
    }
    return node.node_ops.readdir(node)
  },
  unlink: function (path) {
    var lookup = FS.lookupPath(path, {
      parent: true
    })
    var parent = lookup.node
    var name = PATH.basename(path)
    var node = FS.lookupNode(parent, name)
    var err = FS.mayDelete(parent, name, false)
    if (err) {
      if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM
      throw new FS.ErrnoError(err)
    }
    if (!parent.node_ops.unlink) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM)
    }
    if (FS.isMountpoint(node)) {
      throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
    }
    try {
      if (FS.trackingDelegate['willDeletePath']) {
        FS.trackingDelegate['willDeletePath'](path)
      }
    } catch (e) {
      console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message)
    }
    parent.node_ops.unlink(parent, name)
    FS.destroyNode(node)
    try {
      if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path)
    } catch (e) {
      console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message)
    }
  },
  readlink: function (path) {
    var lookup = FS.lookupPath(path)
    var link = lookup.node
    if (!link) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
    }
    if (!link.node_ops.readlink) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
    }
    return link.node_ops.readlink(link)
  },
  stat: function (path, dontFollow) {
    var lookup = FS.lookupPath(path, {
      follow: !dontFollow
    })
    var node = lookup.node
    if (!node) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
    }
    if (!node.node_ops.getattr) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM)
    }
    return node.node_ops.getattr(node)
  },
  lstat: function (path) {
    return FS.stat(path, true)
  },
  chmod: function (path, mode, dontFollow) {
    var node
    if (typeof path === 'string') {
      var lookup = FS.lookupPath(path, {
        follow: !dontFollow
      })
      node = lookup.node
    } else {
      node = path
    }
    if (!node.node_ops.setattr) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM)
    }
    node.node_ops.setattr(node, {
      mode: mode & 4095 | node.mode & ~4095,
      timestamp: Date.now()
    })
  },
  lchmod: function (path, mode) {
    FS.chmod(path, mode, true)
  },
  fchmod: function (fd, mode) {
    var stream = FS.getStream(fd)
    if (!stream) {
      throw new FS.ErrnoError(ERRNO_CODES.EBADF)
    }
    FS.chmod(stream.node, mode)
  },
  chown: function (path, uid, gid, dontFollow) {
    var node
    if (typeof path === 'string') {
      var lookup = FS.lookupPath(path, {
        follow: !dontFollow
      })
      node = lookup.node
    } else {
      node = path
    }
    if (!node.node_ops.setattr) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM)
    }
    node.node_ops.setattr(node, {
      timestamp: Date.now()
    })
  },
  lchown: function (path, uid, gid) {
    FS.chown(path, uid, gid, true)
  },
  fchown: function (fd, uid, gid) {
    var stream = FS.getStream(fd)
    if (!stream) {
      throw new FS.ErrnoError(ERRNO_CODES.EBADF)
    }
    FS.chown(stream.node, uid, gid)
  },
  truncate: function (path, len) {
    if (len < 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
    }
    var node
    if (typeof path === 'string') {
      var lookup = FS.lookupPath(path, {
        follow: true
      })
      node = lookup.node
    } else {
      node = path
    }
    if (!node.node_ops.setattr) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM)
    }
    if (FS.isDir(node.mode)) {
      throw new FS.ErrnoError(ERRNO_CODES.EISDIR)
    }
    if (!FS.isFile(node.mode)) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
    }
    var err = FS.nodePermissions(node, 'w')
    if (err) {
      throw new FS.ErrnoError(err)
    }
    node.node_ops.setattr(node, {
      size: len,
      timestamp: Date.now()
    })
  },
  ftruncate: function (fd, len) {
    var stream = FS.getStream(fd)
    if (!stream) {
      throw new FS.ErrnoError(ERRNO_CODES.EBADF)
    }
    if ((stream.flags & 2097155) === 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
    }
    FS.truncate(stream.node, len)
  },
  utime: function (path, atime, mtime) {
    var lookup = FS.lookupPath(path, {
      follow: true
    })
    var node = lookup.node
    node.node_ops.setattr(node, {
      timestamp: Math.max(atime, mtime)
    })
  },
  open: function (path, flags, mode, fd_start, fd_end) {
    if (path === '') {
      throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
    }
    flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags
    mode = typeof mode === 'undefined' ? 438 : mode
    if (flags & 64) {
      mode = mode & 4095 | 32768
    } else {
      mode = 0
    }
    var node
    if (typeof path === 'object') {
      node = path
    } else {
      path = PATH.normalize(path)
      try {
        var lookup = FS.lookupPath(path, {
          follow: !(flags & 131072)
        })
        node = lookup.node
      } catch (e) {}
    }
    var created = false
    if (flags & 64) {
      if (node) {
        if (flags & 128) {
          throw new FS.ErrnoError(ERRNO_CODES.EEXIST)
        }
      } else {
        node = FS.mknod(path, mode, 0)
        created = true
      }
    }
    if (!node) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
    }
    if (FS.isChrdev(node.mode)) {
      flags &= ~512
    }
    if (!created) {
      var err = FS.mayOpen(node, flags)
      if (err) {
        throw new FS.ErrnoError(err)
      }
    }
    if (flags & 512) {
      FS.truncate(node, 0)
    }
    flags &= ~(128 | 512)
    var stream = FS.createStream({
      node: node,
      path: FS.getPath(node),
      flags: flags,
      seekable: true,
      position: 0,
      stream_ops: node.stream_ops,
      ungotten: [],
      error: false
    }, fd_start, fd_end)
    if (stream.stream_ops.open) {
      stream.stream_ops.open(stream)
    }
    if (Module['logReadFiles'] && !(flags & 1)) {
      if (!FS.readFiles) FS.readFiles = {}
      if (!(path in FS.readFiles)) {
        FS.readFiles[path] = 1
        Module['printErr']('read file: ' + path)
      }
    }
    try {
      if (FS.trackingDelegate['onOpenFile']) {
        var trackingFlags = 0
        if ((flags & 2097155) !== 1) {
          trackingFlags |= FS.tracking.openFlags.READ
        }
        if ((flags & 2097155) !== 0) {
          trackingFlags |= FS.tracking.openFlags.WRITE
        }
        FS.trackingDelegate['onOpenFile'](path, trackingFlags)
      }
    } catch (e) {
      console.log("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message)
    }
    return stream
  },
  close: function (stream) {
    try {
      if (stream.stream_ops.close) {
        stream.stream_ops.close(stream)
      }
    } catch (e) {
      throw e
    } finally {
      FS.closeStream(stream.fd)
    }
  },
  llseek: function (stream, offset, whence) {
    if (!stream.seekable || !stream.stream_ops.llseek) {
      throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
    }
    return stream.stream_ops.llseek(stream, offset, whence)
  },
  read: function (stream, buffer, offset, length, position) {
    if (length < 0 || position < 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
    }
    if ((stream.flags & 2097155) === 1) {
      throw new FS.ErrnoError(ERRNO_CODES.EBADF)
    }
    if (FS.isDir(stream.node.mode)) {
      throw new FS.ErrnoError(ERRNO_CODES.EISDIR)
    }
    if (!stream.stream_ops.read) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
    }
    var seeking = true
    if (typeof position === 'undefined') {
      position = stream.position
      seeking = false
    } else if (!stream.seekable) {
      throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
    }
    var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position)
    if (!seeking) stream.position += bytesRead
    return bytesRead
  },
  write: function (stream, buffer, offset, length, position, canOwn) {
    if (length < 0 || position < 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
    }
    if ((stream.flags & 2097155) === 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EBADF)
    }
    if (FS.isDir(stream.node.mode)) {
      throw new FS.ErrnoError(ERRNO_CODES.EISDIR)
    }
    if (!stream.stream_ops.write) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
    }
    if (stream.flags & 1024) {
      FS.llseek(stream, 0, 2)
    }
    var seeking = true
    if (typeof position === 'undefined') {
      position = stream.position
      seeking = false
    } else if (!stream.seekable) {
      throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
    }
    var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn)
    if (!seeking) stream.position += bytesWritten
    try {
      if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path)
    } catch (e) {
      console.log("FS.trackingDelegate['onWriteToFile']('" + path + "') threw an exception: " + e.message)
    }
    return bytesWritten
  },
  allocate: function (stream, offset, length) {
    if (offset < 0 || length <= 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
    }
    if ((stream.flags & 2097155) === 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EBADF)
    }
    if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
      throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
    }
    if (!stream.stream_ops.allocate) {
      throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)
    }
    stream.stream_ops.allocate(stream, offset, length)
  },
  mmap: function (stream, buffer, offset, length, position, prot, flags) {
    if ((stream.flags & 2097155) === 1) {
      throw new FS.ErrnoError(ERRNO_CODES.EACCES)
    }
    if (!stream.stream_ops.mmap) {
      throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
    }
    return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags)
  },
  ioctl: function (stream, cmd, arg) {
    if (!stream.stream_ops.ioctl) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOTTY)
    }
    return stream.stream_ops.ioctl(stream, cmd, arg)
  },
  readFile: function (path, opts) {
    opts = opts || {}
    opts.flags = opts.flags || 'r'
    opts.encoding = opts.encoding || 'binary'
    if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
      throw new Error('Invalid encoding type "' + opts.encoding + '"')
    }
    var ret
    var stream = FS.open(path, opts.flags)
    var stat = FS.stat(path)
    var length = stat.size
    var buf = new Uint8Array(length)
    FS.read(stream, buf, 0, length, 0)
    if (opts.encoding === 'utf8') {
      ret = ''
      var utf8 = new Runtime.UTF8Processor()
      for (var i = 0; i < length; i++) {
        ret += utf8.processCChar(buf[i])
      }
    } else if (opts.encoding === 'binary') {
      ret = buf
    }
    FS.close(stream)
    return ret
  },
  writeFile: function (path, data, opts) {
    opts = opts || {}
    opts.flags = opts.flags || 'w'
    opts.encoding = opts.encoding || 'utf8'
    if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
      throw new Error('Invalid encoding type "' + opts.encoding + '"')
    }
    var stream = FS.open(path, opts.flags, opts.mode)
    if (opts.encoding === 'utf8') {
      var utf8 = new Runtime.UTF8Processor()
      var buf = new Uint8Array(utf8.processJSString(data))
      FS.write(stream, buf, 0, buf.length, 0, opts.canOwn)
    } else if (opts.encoding === 'binary') {
      FS.write(stream, data, 0, data.length, 0, opts.canOwn)
    }
    FS.close(stream)
  },
  cwd: function () {
    return FS.currentPath
  },
  chdir: function (path) {
    var lookup = FS.lookupPath(path, {
      follow: true
    })
    if (!FS.isDir(lookup.node.mode)) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)
    }
    var err = FS.nodePermissions(lookup.node, 'x')
    if (err) {
      throw new FS.ErrnoError(err)
    }
    FS.currentPath = lookup.path
  },
  createDefaultDirectories: function () {
    FS.mkdir('/tmp')
    FS.mkdir('/home')
    FS.mkdir('/home/web_user')
  },
  createDefaultDevices: function () {
    FS.mkdir('/dev')
    FS.registerDevice(FS.makedev(1, 3), {
      read: function () {
        return 0
      },
      write: function () {
        return 0
      }
    })
    FS.mkdev('/dev/null', FS.makedev(1, 3))
    TTY.register(FS.makedev(5, 0), TTY.default_tty_ops)
    TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops)
    FS.mkdev('/dev/tty', FS.makedev(5, 0))
    FS.mkdev('/dev/tty1', FS.makedev(6, 0))
    var random_device
    if (typeof crypto !== 'undefined') {
      var randomBuffer = new Uint8Array(1)
      random_device = function () {
        crypto.getRandomValues(randomBuffer)
        return randomBuffer[0]
      }
    } else if (ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WEB) {
      random_device = function () {
        return require('crypto').randomBytes(1)[0]
      }
    } else {
      random_device = function () {
        return Math.floor(Math.random() * 256)
      }
    }
    FS.createDevice('/dev', 'random', random_device)
    FS.createDevice('/dev', 'urandom', random_device)
    FS.mkdir('/dev/shm')
    FS.mkdir('/dev/shm/tmp')
  },
  createStandardStreams: function () {
    if (Module['stdin']) {
      FS.createDevice('/dev', 'stdin', Module['stdin'])
    } else {
      FS.symlink('/dev/tty', '/dev/stdin')
    }
    if (Module['stdout']) {
      FS.createDevice('/dev', 'stdout', null, Module['stdout'])
    } else {
      FS.symlink('/dev/tty', '/dev/stdout')
    }
    if (Module['stderr']) {
      FS.createDevice('/dev', 'stderr', null, Module['stderr'])
    } else {
      FS.symlink('/dev/tty1', '/dev/stderr')
    }
    var stdin = FS.open('/dev/stdin', 'r')
    SAFE_HEAP_STORE(_stdin | 0, FS.getPtrForStream(stdin) | 0, 4, 0) | 0
    assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')')
    var stdout = FS.open('/dev/stdout', 'w')
    SAFE_HEAP_STORE(_stdout | 0, FS.getPtrForStream(stdout) | 0, 4, 0) | 0
    assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')')
    var stderr = FS.open('/dev/stderr', 'w')
    SAFE_HEAP_STORE(_stderr | 0, FS.getPtrForStream(stderr) | 0, 4, 0) | 0
    assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')')
  },
  ensureErrnoError: function () {
    if (FS.ErrnoError) return
    FS.ErrnoError = function ErrnoError (errno) {
      this.errno = errno
      for (var key in ERRNO_CODES) {
        if (ERRNO_CODES[key] === errno) {
          this.code = key
          break
        }
      }
      this.message = ERRNO_MESSAGES[errno]
    }
    FS.ErrnoError.prototype = new Error()
    FS.ErrnoError.prototype.constructor = FS.ErrnoError;
    [ERRNO_CODES.ENOENT].forEach(function (code) {
      FS.genericErrors[code] = new FS.ErrnoError(code)
      FS.genericErrors[code].stack = '<generic error, no stack>'
    })
  },
  staticInit: function () {
    FS.ensureErrnoError()
    FS.nameTable = new Array(4096)
    FS.mount(MEMFS, {}, '/')
    FS.createDefaultDirectories()
    FS.createDefaultDevices()
  },
  init: function (input, output, error) {
    assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)')
    FS.init.initialized = true
    FS.ensureErrnoError()
    Module['stdin'] = input || Module['stdin']
    Module['stdout'] = output || Module['stdout']
    Module['stderr'] = error || Module['stderr']
    FS.createStandardStreams()
  },
  quit: function () {
    FS.init.initialized = false
    for (var i = 0; i < FS.streams.length; i++) {
      var stream = FS.streams[i]
      if (!stream) {
        continue
      }
      FS.close(stream)
    }
  },
  getMode: function (canRead, canWrite) {
    var mode = 0
    if (canRead) mode |= 292 | 73
    if (canWrite) mode |= 146
    return mode
  },
  joinPath: function (parts, forceRelative) {
    var path = PATH.join.apply(null, parts)
    if (forceRelative && path[0] === '/') path = path.substr(1)
    return path
  },
  absolutePath: function (relative, base) {
    return PATH.resolve(base, relative)
  },
  standardizePath: function (path) {
    return PATH.normalize(path)
  },
  findObject: function (path, dontResolveLastLink) {
    var ret = FS.analyzePath(path, dontResolveLastLink)
    if (ret.exists) {
      return ret.object
    } else {
      ___setErrNo(ret.error)
      return null
    }
  },
  analyzePath: function (path, dontResolveLastLink) {
    try {
      var lookup = FS.lookupPath(path, {
        follow: !dontResolveLastLink
      })
      path = lookup.path
    } catch (e) {}
    var ret = {
      isRoot: false,
      exists: false,
      error: 0,
      name: null,
      path: null,
      object: null,
      parentExists: false,
      parentPath: null,
      parentObject: null
    }
    try {
      var lookup = FS.lookupPath(path, {
        parent: true
      })
      ret.parentExists = true
      ret.parentPath = lookup.path
      ret.parentObject = lookup.node
      ret.name = PATH.basename(path)
      lookup = FS.lookupPath(path, {
        follow: !dontResolveLastLink
      })
      ret.exists = true
      ret.path = lookup.path
      ret.object = lookup.node
      ret.name = lookup.node.name
      ret.isRoot = lookup.path === '/'
    } catch (e) {
      ret.error = e.errno
    }
    return ret
  },
  createFolder: function (parent, name, canRead, canWrite) {
    var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name)
    var mode = FS.getMode(canRead, canWrite)
    return FS.mkdir(path, mode)
  },
  createPath: function (parent, path, canRead, canWrite) {
    parent = typeof parent === 'string' ? parent : FS.getPath(parent)
    var parts = path.split('/').reverse()
    while (parts.length) {
      var part = parts.pop()
      if (!part) continue
      var current = PATH.join2(parent, part)
      try {
        FS.mkdir(current)
      } catch (e) {}
      parent = current
    }
    return current
  },
  createFile: function (parent, name, properties, canRead, canWrite) {
    var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name)
    var mode = FS.getMode(canRead, canWrite)
    return FS.create(path, mode)
  },
  createDataFile: function (parent, name, data, canRead, canWrite, canOwn) {
    var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent
    var mode = FS.getMode(canRead, canWrite)
    var node = FS.create(path, mode)
    if (data) {
      if (typeof data === 'string') {
        var arr = new Array(data.length)
        for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i)
        data = arr
      }
      FS.chmod(node, mode | 146)
      var stream = FS.open(node, 'w')
      FS.write(stream, data, 0, data.length, 0, canOwn)
      FS.close(stream)
      FS.chmod(node, mode)
    }
    return node
  },
  createDevice: function (parent, name, input, output) {
    var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name)
    var mode = FS.getMode(!!input, !!output)
    if (!FS.createDevice.major) FS.createDevice.major = 64
    var dev = FS.makedev(FS.createDevice.major++, 0)
    FS.registerDevice(dev, {
      open: function (stream) {
        stream.seekable = false
      },
      close: function (stream) {
        if (output && output.buffer && output.buffer.length) {
          output(10)
        }
      },
      read: function (stream, buffer, offset, length, pos) {
        var bytesRead = 0
        for (var i = 0; i < length; i++) {
          var result
          try {
            result = input()
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO)
          }
          if (result === undefined && bytesRead === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)
          }
          if (result === null || result === undefined) break
          bytesRead++
          buffer[offset + i] = result
        }
        if (bytesRead) {
          stream.node.timestamp = Date.now()
        }
        return bytesRead
      },
      write: function (stream, buffer, offset, length, pos) {
        for (var i = 0; i < length; i++) {
          try {
            output(buffer[offset + i])
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO)
          }
        }
        if (length) {
          stream.node.timestamp = Date.now()
        }
        return i
      }
    })
    return FS.mkdev(path, mode, dev)
  },
  createLink: function (parent, name, target, canRead, canWrite) {
    var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name)
    return FS.symlink(target, path)
  },
  forceLoadFile: function (obj) {
    if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true
    var success = true
    if (typeof XMLHttpRequest !== 'undefined') {
      throw new Error('Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.')
    } else if (Module['read']) {
      try {
        obj.contents = intArrayFromString(Module['read'](obj.url), true)
        obj.usedBytes = obj.contents.length
      } catch (e) {
        success = false
      }
    } else {
      throw new Error('Cannot load without read() or XMLHttpRequest.')
    }
    if (!success) ___setErrNo(ERRNO_CODES.EIO)
    return success
  },
  createLazyFile: function (parent, name, url, canRead, canWrite) {
    function LazyUint8Array () {
      this.lengthKnown = false
      this.chunks = []
    }
    LazyUint8Array.prototype.get = function LazyUint8Array_get (idx) {
      if (idx > this.length - 1 || idx < 0) {
        return undefined
      }
      var chunkOffset = idx % this.chunkSize
      var chunkNum = Math.floor(idx / this.chunkSize)
      return this.getter(chunkNum)[chunkOffset]
    }
    LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter (getter) {
      this.getter = getter
    }
    LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength () {
      var xhr = new XMLHttpRequest()
      xhr.open('HEAD', url, false)
      xhr.send(null)
      if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + '. Status: ' + xhr.status)
      var datalength = Number(xhr.getResponseHeader('Content-length'))
      var header
      var hasByteServing = (header = xhr.getResponseHeader('Accept-Ranges')) && header === 'bytes'
      var chunkSize = 1024 * 1024
      if (!hasByteServing) chunkSize = datalength
      var doXHR = function (from, to) {
        if (from > to) throw new Error('invalid range (' + from + ', ' + to + ') or no bytes requested!')
        if (to > datalength - 1) throw new Error('only ' + datalength + ' bytes available! programmer error!')
        var xhr = new XMLHttpRequest()
        xhr.open('GET', url, false)
        if (datalength !== chunkSize) xhr.setRequestHeader('Range', 'bytes=' + from + '-' + to)
        if (typeof Uint8Array !== 'undefined') xhr.responseType = 'arraybuffer'
        if (xhr.overrideMimeType) {
          xhr.overrideMimeType('text/plain; charset=x-user-defined')
        }
        xhr.send(null)
        if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + '. Status: ' + xhr.status)
        if (xhr.response !== undefined) {
          return new Uint8Array(xhr.response || [])
        } else {
          return intArrayFromString(xhr.responseText || '', true)
        }
      }
      var lazyArray = this
      lazyArray.setDataGetter(function (chunkNum) {
        var start = chunkNum * chunkSize
        var end = (chunkNum + 1) * chunkSize - 1
        end = Math.min(end, datalength - 1)
        if (typeof lazyArray.chunks[chunkNum] === 'undefined') {
          lazyArray.chunks[chunkNum] = doXHR(start, end)
        }
        if (typeof lazyArray.chunks[chunkNum] === 'undefined') throw new Error('doXHR failed!')
        return lazyArray.chunks[chunkNum]
      })
      this._length = datalength
      this._chunkSize = chunkSize
      this.lengthKnown = true
    }
    if (typeof XMLHttpRequest !== 'undefined') {
      if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc'
      var lazyArray = new LazyUint8Array()
      Object.defineProperty(lazyArray, 'length', {
        get: function () {
          if (!this.lengthKnown) {
            this.cacheLength()
          }
          return this._length
        }
      })
      Object.defineProperty(lazyArray, 'chunkSize', {
        get: function () {
          if (!this.lengthKnown) {
            this.cacheLength()
          }
          return this._chunkSize
        }
      })
      var properties = {
        isDevice: false,
        contents: lazyArray
      }
    } else {
      var properties = {
        isDevice: false,
        url: url
      }
    }
    var node = FS.createFile(parent, name, properties, canRead, canWrite)
    if (properties.contents) {
      node.contents = properties.contents
    } else if (properties.url) {
      node.contents = null
      node.url = properties.url
    }
    Object.defineProperty(node, 'usedBytes', {
      get: function () {
        return this.contents.length
      }
    })
    var stream_ops = {}
    var keys = Object.keys(node.stream_ops)
    keys.forEach(function (key) {
      var fn = node.stream_ops[key]
      stream_ops[key] = function forceLoadLazyFile () {
        if (!FS.forceLoadFile(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO)
        }
        return fn.apply(null, arguments)
      }
    })
    stream_ops.read = function stream_ops_read (stream, buffer, offset, length, position) {
      if (!FS.forceLoadFile(node)) {
        throw new FS.ErrnoError(ERRNO_CODES.EIO)
      }
      var contents = stream.node.contents
      if (position >= contents.length) return 0
      var size = Math.min(contents.length - position, length)
      assert(size >= 0)
      if (contents.slice) {
        for (var i = 0; i < size; i++) {
          buffer[offset + i] = contents[position + i]
        }
      } else {
        for (var i = 0; i < size; i++) {
          buffer[offset + i] = contents.get(position + i)
        }
      }
      return size
    }
    node.stream_ops = stream_ops
    return node
  },
  createPreloadedFile: function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
    Browser.init()
    var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent

    function processData (byteArray) {
      function finish (byteArray) {
        if (!dontCreateFile) {
          FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn)
        }
        if (onload) onload()
        removeRunDependency('cp ' + fullname)
      }
      var handled = false
      Module['preloadPlugins'].forEach(function (plugin) {
        if (handled) return
        if (plugin['canHandle'](fullname)) {
          plugin['handle'](byteArray, fullname, finish, function () {
            if (onerror) onerror()
            removeRunDependency('cp ' + fullname)
          })
          handled = true
        }
      })
      if (!handled) finish(byteArray)
    }
    addRunDependency('cp ' + fullname)
    if (typeof url === 'string') {
      Browser.asyncLoad(url, function (byteArray) {
        processData(byteArray)
      }, onerror)
    } else {
      processData(url)
    }
  },
  indexedDB: function () {
    return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB
  },
  DB_NAME: function () {
    return 'EM_FS_' + window.location.pathname
  },
  DB_VERSION: 20,
  DB_STORE_NAME: 'FILE_DATA',
  saveFilesToDB: function (paths, onload, onerror) {
    onload = onload || function () {}
    onerror = onerror || function () {}
    var indexedDB = FS.indexedDB()
    try {
      var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION)
    } catch (e) {
      return onerror(e)
    }
    openRequest.onupgradeneeded = function openRequest_onupgradeneeded () {
      console.log('creating db')
      var db = openRequest.result
      db.createObjectStore(FS.DB_STORE_NAME)
    }
    openRequest.onsuccess = function openRequest_onsuccess () {
      var db = openRequest.result
      var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite')
      var files = transaction.objectStore(FS.DB_STORE_NAME)
      var ok = 0

      var fail = 0

      var total = paths.length

      function finish () {
        if (fail === 0) onload()
        else onerror()
      }
      paths.forEach(function (path) {
        var putRequest = files.put(FS.analyzePath(path).object.contents, path)
        putRequest.onsuccess = function putRequest_onsuccess () {
          ok++
          if (ok + fail === total) finish()
        }
        putRequest.onerror = function putRequest_onerror () {
          fail++
          if (ok + fail === total) finish()
        }
      })
      transaction.onerror = onerror
    }
    openRequest.onerror = onerror
  },
  loadFilesFromDB: function (paths, onload, onerror) {
    onload = onload || function () {}
    onerror = onerror || function () {}
    var indexedDB = FS.indexedDB()
    try {
      var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION)
    } catch (e) {
      return onerror(e)
    }
    openRequest.onupgradeneeded = onerror
    openRequest.onsuccess = function openRequest_onsuccess () {
      var db = openRequest.result
      try {
        var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly')
      } catch (e) {
        onerror(e)
        return
      }
      var files = transaction.objectStore(FS.DB_STORE_NAME)
      var ok = 0

      var fail = 0

      var total = paths.length

      function finish () {
        if (fail === 0) onload()
        else onerror()
      }
      paths.forEach(function (path) {
        var getRequest = files.get(path)
        getRequest.onsuccess = function getRequest_onsuccess () {
          if (FS.analyzePath(path).exists) {
            FS.unlink(path)
          }
          FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true)
          ok++
          if (ok + fail === total) finish()
        }
        getRequest.onerror = function getRequest_onerror () {
          fail++
          if (ok + fail === total) finish()
        }
      })
      transaction.onerror = onerror
    }
    openRequest.onerror = onerror
  }
}
var PATH = {
  splitPath: function (filename) {
    var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/
    return splitPathRe.exec(filename).slice(1)
  },
  normalizeArray: function (parts, allowAboveRoot) {
    var up = 0
    for (var i = parts.length - 1; i >= 0; i--) {
      var last = parts[i]
      if (last === '.') {
        parts.splice(i, 1)
      } else if (last === '..') {
        parts.splice(i, 1)
        up++
      } else if (up) {
        parts.splice(i, 1)
        up--
      }
    }
    if (allowAboveRoot) {
      for (; up--; up) {
        parts.unshift('..')
      }
    }
    return parts
  },
  normalize: function (path) {
    var isAbsolute = path.charAt(0) === '/'

    var trailingSlash = path.substr(-1) === '/'
    path = PATH.normalizeArray(path.split('/').filter(function (p) {
      return !!p
    }), !isAbsolute).join('/')
    if (!path && !isAbsolute) {
      path = '.'
    }
    if (path && trailingSlash) {
      path += '/'
    }
    return (isAbsolute ? '/' : '') + path
  },
  dirname: function (path) {
    var result = PATH.splitPath(path)

    var root = result[0]

    var dir = result[1]
    if (!root && !dir) {
      return '.'
    }
    if (dir) {
      dir = dir.substr(0, dir.length - 1)
    }
    return root + dir
  },
  basename: function (path) {
    if (path === '/') return '/'
    var lastSlash = path.lastIndexOf('/')
    if (lastSlash === -1) return path
    return path.substr(lastSlash + 1)
  },
  extname: function (path) {
    return PATH.splitPath(path)[3]
  },
  join: function () {
    var paths = Array.prototype.slice.call(arguments, 0)
    return PATH.normalize(paths.join('/'))
  },
  join2: function (l, r) {
    return PATH.normalize(l + '/' + r)
  },
  resolve: function () {
    var resolvedPath = ''

    var resolvedAbsolute = false
    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path = i >= 0 ? arguments[i] : FS.cwd()
      if (typeof path !== 'string') {
        throw new TypeError('Arguments to path.resolve must be strings')
      } else if (!path) {
        return ''
      }
      resolvedPath = path + '/' + resolvedPath
      resolvedAbsolute = path.charAt(0) === '/'
    }
    resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function (p) {
      return !!p
    }), !resolvedAbsolute).join('/')
    return (resolvedAbsolute ? '/' : '') + resolvedPath || '.'
  },
  relative: function (from, to) {
    from = PATH.resolve(from).substr(1)
    to = PATH.resolve(to).substr(1)

    function trim (arr) {
      var start = 0
      for (; start < arr.length; start++) {
        if (arr[start] !== '') break
      }
      var end = arr.length - 1
      for (; end >= 0; end--) {
        if (arr[end] !== '') break
      }
      if (start > end) return []
      return arr.slice(start, end - start + 1)
    }
    var fromParts = trim(from.split('/'))
    var toParts = trim(to.split('/'))
    var length = Math.min(fromParts.length, toParts.length)
    var samePartsLength = length
    for (var i = 0; i < length; i++) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i
        break
      }
    }
    var outputParts = []
    for (var i = samePartsLength; i < fromParts.length; i++) {
      outputParts.push('..')
    }
    outputParts = outputParts.concat(toParts.slice(samePartsLength))
    return outputParts.join('/')
  }
}
var Browser = {
  mainLoop: {
    scheduler: null,
    method: '',
    shouldPause: false,
    paused: false,
    queue: [],
    pause: function () {
      Browser.mainLoop.shouldPause = true
    },
    resume: function () {
      if (Browser.mainLoop.paused) {
        Browser.mainLoop.paused = false
        Browser.mainLoop.scheduler()
      }
      Browser.mainLoop.shouldPause = false
    },
    updateStatus: function () {
      if (Module['setStatus']) {
        var message = Module['statusMessage'] || 'Please wait...'
        var remaining = Browser.mainLoop.remainingBlockers
        var expected = Browser.mainLoop.expectedBlockers
        if (remaining) {
          if (remaining < expected) {
            Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')')
          } else {
            Module['setStatus'](message)
          }
        } else {
          Module['setStatus']('')
        }
      }
    },
    runIter: function (func) {
      if (ABORT) return
      if (Module['preMainLoop']) {
        var preRet = Module['preMainLoop']()
        if (preRet === false) {
          return
        }
      }
      try {
        func()
      } catch (e) {
        if (e instanceof ExitStatus) {
          return
        } else {
          if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack])
          throw e
        }
      }
      if (Module['postMainLoop']) Module['postMainLoop']()
    }
  },
  isFullScreen: false,
  pointerLock: false,
  moduleContextCreatedCallbacks: [],
  workers: [],
  init: function () {
    if (!Module['preloadPlugins']) Module['preloadPlugins'] = []
    if (Browser.initted) return
    Browser.initted = true
    try {
      new Blob()
      Browser.hasBlobConstructor = true
    } catch (e) {
      Browser.hasBlobConstructor = false
      console.log('warning: no blob constructor, cannot create blobs with mimetypes')
    }
    Browser.BlobBuilder = typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : typeof WebKitBlobBuilder !== 'undefined' ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log('warning: no BlobBuilder') : null
    Browser.URLObject = typeof window !== 'undefined' ? window.URL ? window.URL : window.webkitURL : undefined
    if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
      console.log('warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.')
      Module.noImageDecoding = true
    }
    var imagePlugin = {}
    imagePlugin['canHandle'] = function imagePlugin_canHandle (name) {
      return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name)
    }
    imagePlugin['handle'] = function imagePlugin_handle (byteArray, name, onload, onerror) {
      var b = null
      if (Browser.hasBlobConstructor) {
        try {
          b = new Blob([byteArray], {
            type: Browser.getMimetype(name)
          })
          if (b.size !== byteArray.length) {
            b = new Blob([(new Uint8Array(byteArray)).buffer], {
              type: Browser.getMimetype(name)
            })
          }
        } catch (e) {
          Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder')
        }
      }
      if (!b) {
        var bb = new Browser.BlobBuilder()
        bb.append((new Uint8Array(byteArray)).buffer)
        b = bb.getBlob()
      }
      var url = Browser.URLObject.createObjectURL(b)
      var img = new Image()
      img.onload = function img_onload () {
        assert(img.complete, 'Image ' + name + ' could not be decoded')
        var canvas = document.createElement('canvas')
        canvas.width = img.width
        canvas.height = img.height
        var ctx = canvas.getContext('2d')
        ctx.drawImage(img, 0, 0)
        Module['preloadedImages'][name] = canvas
        Browser.URLObject.revokeObjectURL(url)
        if (onload) onload(byteArray)
      }
      img.onerror = function img_onerror (event) {
        console.log('Image ' + url + ' could not be decoded')
        if (onerror) onerror()
      }
      img.src = url
    }
    Module['preloadPlugins'].push(imagePlugin)
    var audioPlugin = {}
    audioPlugin['canHandle'] = function audioPlugin_canHandle (name) {
      return !Module.noAudioDecoding && name.substr(-4) in {
        '.ogg': 1,
        '.wav': 1,
        '.mp3': 1
      }
    }
    audioPlugin['handle'] = function audioPlugin_handle (byteArray, name, onload, onerror) {
      var done = false

      function finish (audio) {
        if (done) return
        done = true
        Module['preloadedAudios'][name] = audio
        if (onload) onload(byteArray)
      }

      function fail () {
        if (done) return
        done = true
        Module['preloadedAudios'][name] = new Audio()
        if (onerror) onerror()
      }
      if (Browser.hasBlobConstructor) {
        try {
          var b = new Blob([byteArray], {
            type: Browser.getMimetype(name)
          })
        } catch (e) {
          return fail()
        }
        var url = Browser.URLObject.createObjectURL(b)
        var audio = new Audio()
        audio.addEventListener('canplaythrough', function () {
          finish(audio)
        }, false)
        audio.onerror = function audio_onerror (event) {
          if (done) return
          console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach')

          function encode64 (data) {
            var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
            var PAD = '='
            var ret = ''
            var leftchar = 0
            var leftbits = 0
            for (var i = 0; i < data.length; i++) {
              leftchar = leftchar << 8 | data[i]
              leftbits += 8
              while (leftbits >= 6) {
                var curr = leftchar >> leftbits - 6 & 63
                leftbits -= 6
                ret += BASE[curr]
              }
            }
            if (leftbits === 2) {
              ret += BASE[(leftchar & 3) << 4]
              ret += PAD + PAD
            } else if (leftbits === 4) {
              ret += BASE[(leftchar & 15) << 2]
              ret += PAD
            }
            return ret
          }
          audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray)
          finish(audio)
        }
        audio.src = url
        Browser.safeSetTimeout(function () {
          finish(audio)
        }, 1e4)
      } else {
        return fail()
      }
    }
    Module['preloadPlugins'].push(audioPlugin)
    var canvas = Module['canvas']

    function pointerLockChange () {
      Browser.pointerLock = document['pointerLockElement'] === canvas || document['mozPointerLockElement'] === canvas || document['webkitPointerLockElement'] === canvas || document['msPointerLockElement'] === canvas
    }
    if (canvas) {
      canvas.requestPointerLock = canvas['requestPointerLock'] || canvas['mozRequestPointerLock'] || canvas['webkitRequestPointerLock'] || canvas['msRequestPointerLock'] || function () {}
      canvas.exitPointerLock = document['exitPointerLock'] || document['mozExitPointerLock'] || document['webkitExitPointerLock'] || document['msExitPointerLock'] || function () {}
      canvas.exitPointerLock = canvas.exitPointerLock.bind(document)
      document.addEventListener('pointerlockchange', pointerLockChange, false)
      document.addEventListener('mozpointerlockchange', pointerLockChange, false)
      document.addEventListener('webkitpointerlockchange', pointerLockChange, false)
      document.addEventListener('mspointerlockchange', pointerLockChange, false)
      if (Module['elementPointerLock']) {
        canvas.addEventListener('click', function (ev) {
          if (!Browser.pointerLock && canvas.requestPointerLock) {
            canvas.requestPointerLock()
            ev.preventDefault()
          }
        }, false)
      }
    }
  },
  createContext: function (canvas, useWebGL, setInModule, webGLContextAttributes) {
    if (useWebGL && Module.ctx && canvas === Module.canvas) return Module.ctx
    var ctx
    var contextHandle
    if (useWebGL) {
      var contextAttributes = {
        antialias: false,
        alpha: false
      }
      if (webGLContextAttributes) {
        for (var attribute in webGLContextAttributes) {
          contextAttributes[attribute] = webGLContextAttributes[attribute]
        }
      }
      contextHandle = GL.createContext(canvas, contextAttributes)
      ctx = GL.getContext(contextHandle).GLctx
      canvas.style.backgroundColor = 'black'
    } else {
      ctx = canvas.getContext('2d')
    }
    if (!ctx) return null
    if (setInModule) {
      if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it')
      Module.ctx = ctx
      if (useWebGL) GL.makeContextCurrent(contextHandle)
      Module.useWebGL = useWebGL
      Browser.moduleContextCreatedCallbacks.forEach(function (callback) {
        callback()
      })
      Browser.init()
    }
    return ctx
  },
  destroyContext: function (canvas, useWebGL, setInModule) {},
  fullScreenHandlersInstalled: false,
  lockPointer: undefined,
  resizeCanvas: undefined,
  requestFullScreen: function (lockPointer, resizeCanvas) {
    Browser.lockPointer = lockPointer
    Browser.resizeCanvas = resizeCanvas
    if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true
    if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false
    var canvas = Module['canvas']

    function fullScreenChange () {
      Browser.isFullScreen = false
      var canvasContainer = canvas.parentNode
      if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] || document['mozFullScreenElement'] || document['mozFullscreenElement'] || document['fullScreenElement'] || document['fullscreenElement'] || document['msFullScreenElement'] || document['msFullscreenElement'] || document['webkitCurrentFullScreenElement']) === canvasContainer) {
        canvas.cancelFullScreen = document['cancelFullScreen'] || document['mozCancelFullScreen'] || document['webkitCancelFullScreen'] || document['msExitFullscreen'] || document['exitFullscreen'] || function () {}
        canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document)
        if (Browser.lockPointer) canvas.requestPointerLock()
        Browser.isFullScreen = true
        if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize()
      } else {
        canvasContainer.parentNode.insertBefore(canvas, canvasContainer)
        canvasContainer.parentNode.removeChild(canvasContainer)
        if (Browser.resizeCanvas) Browser.setWindowedCanvasSize()
      }
      if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen)
      Browser.updateCanvasDimensions(canvas)
    }
    if (!Browser.fullScreenHandlersInstalled) {
      Browser.fullScreenHandlersInstalled = true
      document.addEventListener('fullscreenchange', fullScreenChange, false)
      document.addEventListener('mozfullscreenchange', fullScreenChange, false)
      document.addEventListener('webkitfullscreenchange', fullScreenChange, false)
      document.addEventListener('MSFullscreenChange', fullScreenChange, false)
    }
    var canvasContainer = document.createElement('div')
    canvas.parentNode.insertBefore(canvasContainer, canvas)
    canvasContainer.appendChild(canvas)
    canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] || canvasContainer['mozRequestFullScreen'] || canvasContainer['msRequestFullscreen'] || (canvasContainer['webkitRequestFullScreen'] ? function () {
      canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT'])
    } : null)
    canvasContainer.requestFullScreen()
  },
  nextRAF: 0,
  fakeRequestAnimationFrame: function (func) {
    var now = Date.now()
    if (Browser.nextRAF === 0) {
      Browser.nextRAF = now + 1e3 / 60
    } else {
      while (now + 2 >= Browser.nextRAF) {
        Browser.nextRAF += 1e3 / 60
      }
    }
    var delay = Math.max(Browser.nextRAF - now, 0)
    setTimeout(func, delay)
  },
  requestAnimationFrame: function requestAnimationFrame (func) {
    if (typeof window === 'undefined') {
      Browser.fakeRequestAnimationFrame(func)
    } else {
      if (!window.requestAnimationFrame) {
        window.requestAnimationFrame = window['requestAnimationFrame'] || window['mozRequestAnimationFrame'] || window['webkitRequestAnimationFrame'] || window['msRequestAnimationFrame'] || window['oRequestAnimationFrame'] || Browser.fakeRequestAnimationFrame
      }
      window.requestAnimationFrame(func)
    }
  },
  safeCallback: function (func) {
    return function () {
      if (!ABORT) return func.apply(null, arguments)
    }
  },
  safeRequestAnimationFrame: function (func) {
    return Browser.requestAnimationFrame(function () {
      if (!ABORT) func()
    })
  },
  safeSetTimeout: function (func, timeout) {
    Module['noExitRuntime'] = true
    return setTimeout(function () {
      if (!ABORT) func()
    }, timeout)
  },
  safeSetInterval: function (func, timeout) {
    Module['noExitRuntime'] = true
    return setInterval(function () {
      if (!ABORT) func()
    }, timeout)
  },
  getMimetype: function (name) {
    return {
      'jpg': 'image/jpeg',
      'jpeg': 'image/jpeg',
      'png': 'image/png',
      'bmp': 'image/bmp',
      'ogg': 'audio/ogg',
      'wav': 'audio/wav',
      'mp3': 'audio/mpeg'
    }[name.substr(name.lastIndexOf('.') + 1)]
  },
  getUserMedia: function (func) {
    if (!window.getUserMedia) {
      window.getUserMedia = navigator['getUserMedia'] || navigator['mozGetUserMedia']
    }
    window.getUserMedia(func)
  },
  getMovementX: function (event) {
    return event['movementX'] || event['mozMovementX'] || event['webkitMovementX'] || 0
  },
  getMovementY: function (event) {
    return event['movementY'] || event['mozMovementY'] || event['webkitMovementY'] || 0
  },
  getMouseWheelDelta: function (event) {
    var delta = 0
    switch (event.type) {
      case 'DOMMouseScroll':
        delta = event.detail
        break
      case 'mousewheel':
        delta = -event.wheelDelta
        break
      case 'wheel':
        delta = event.deltaY
        break
      default:
        throw 'unrecognized mouse wheel event: ' + event.type
    }
    return Math.max(-1, Math.min(1, delta))
  },
  mouseX: 0,
  mouseY: 0,
  mouseMovementX: 0,
  mouseMovementY: 0,
  touches: {},
  lastTouches: {},
  calculateMouseEvent: function (event) {
    if (Browser.pointerLock) {
      if (event.type !== 'mousemove' && 'mozMovementX' in event) {
        Browser.mouseMovementX = Browser.mouseMovementY = 0
      } else {
        Browser.mouseMovementX = Browser.getMovementX(event)
        Browser.mouseMovementY = Browser.getMovementY(event)
      }
      if (typeof SDL !== 'undefined') {
        Browser.mouseX = SDL.mouseX + Browser.mouseMovementX
        Browser.mouseY = SDL.mouseY + Browser.mouseMovementY
      } else {
        Browser.mouseX += Browser.mouseMovementX
        Browser.mouseY += Browser.mouseMovementY
      }
    } else {
      var rect = Module['canvas'].getBoundingClientRect()
      var cw = Module['canvas'].width
      var ch = Module['canvas'].height
      var scrollX = typeof window.scrollX !== 'undefined' ? window.scrollX : window.pageXOffset
      var scrollY = typeof window.scrollY !== 'undefined' ? window.scrollY : window.pageYOffset
      if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
        var touch = event.touch
        if (touch === undefined) {
          return
        }
        var adjustedX = touch.pageX - (scrollX + rect.left)
        var adjustedY = touch.pageY - (scrollY + rect.top)
        adjustedX = adjustedX * (cw / rect.width)
        adjustedY = adjustedY * (ch / rect.height)
        var coords = {
          x: adjustedX,
          y: adjustedY
        }
        if (event.type === 'touchstart') {
          Browser.lastTouches[touch.identifier] = coords
          Browser.touches[touch.identifier] = coords
        } else if (event.type === 'touchend' || event.type === 'touchmove') {
          Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier]
          Browser.touches[touch.identifier] = {
            x: adjustedX,
            y: adjustedY
          }
        }
        return
      }
      var x = event.pageX - (scrollX + rect.left)
      var y = event.pageY - (scrollY + rect.top)
      x = x * (cw / rect.width)
      y = y * (ch / rect.height)
      Browser.mouseMovementX = x - Browser.mouseX
      Browser.mouseMovementY = y - Browser.mouseY
      Browser.mouseX = x
      Browser.mouseY = y
    }
  },
  xhrLoad: function (url, onload, onerror) {
    var xhr = new XMLHttpRequest()
    xhr.open('GET', url, true)
    xhr.responseType = 'arraybuffer'
    xhr.onload = function xhr_onload () {
      if (xhr.status === 200 || xhr.status === 0 && xhr.response) {
        onload(xhr.response)
      } else {
        onerror()
      }
    }
    xhr.onerror = onerror
    xhr.send(null)
  },
  asyncLoad: function (url, onload, onerror, noRunDep) {
    Browser.xhrLoad(url, function (arrayBuffer) {
      assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).')
      onload(new Uint8Array(arrayBuffer))
      if (!noRunDep) removeRunDependency('al ' + url)
    }, function (event) {
      if (onerror) {
        onerror()
      } else {
        throw 'Loading data file "' + url + '" failed.'
      }
    })
    if (!noRunDep) addRunDependency('al ' + url)
  },
  resizeListeners: [],
  updateResizeListeners: function () {
    var canvas = Module['canvas']
    Browser.resizeListeners.forEach(function (listener) {
      listener(canvas.width, canvas.height)
    })
  },
  setCanvasSize: function (width, height, noUpdates) {
    var canvas = Module['canvas']
    Browser.updateCanvasDimensions(canvas, width, height)
    if (!noUpdates) Browser.updateResizeListeners()
  },
  windowedWidth: 0,
  windowedHeight: 0,
  setFullScreenCanvasSize: function () {
    if (typeof SDL !== 'undefined') {
      var flags = SAFE_HEAP_LOAD(SDL.screen + Runtime.QUANTUM_SIZE * 0 | 0, 4, 0, 1) | 0
      flags = flags | 8388608
      SAFE_HEAP_STORE(SDL.screen + Runtime.QUANTUM_SIZE * 0 | 0, flags | 0, 4, 0) | 0
    }
    Browser.updateResizeListeners()
  },
  setWindowedCanvasSize: function () {
    if (typeof SDL !== 'undefined') {
      var flags = SAFE_HEAP_LOAD(SDL.screen + Runtime.QUANTUM_SIZE * 0 | 0, 4, 0, 1) | 0
      flags = flags & ~8388608
      SAFE_HEAP_STORE(SDL.screen + Runtime.QUANTUM_SIZE * 0 | 0, flags | 0, 4, 0) | 0
    }
    Browser.updateResizeListeners()
  },
  updateCanvasDimensions: function (canvas, wNative, hNative) {
    if (wNative && hNative) {
      canvas.widthNative = wNative
      canvas.heightNative = hNative
    } else {
      wNative = canvas.widthNative
      hNative = canvas.heightNative
    }
    var w = wNative
    var h = hNative
    if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
      if (w / h < Module['forcedAspectRatio']) {
        w = Math.round(h * Module['forcedAspectRatio'])
      } else {
        h = Math.round(w / Module['forcedAspectRatio'])
      }
    }
    if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] || document['mozFullScreenElement'] || document['mozFullscreenElement'] || document['fullScreenElement'] || document['fullscreenElement'] || document['msFullScreenElement'] || document['msFullscreenElement'] || document['webkitCurrentFullScreenElement']) === canvas.parentNode && typeof screen !== 'undefined') {
      var factor = Math.min(screen.width / w, screen.height / h)
      w = Math.round(w * factor)
      h = Math.round(h * factor)
    }
    if (Browser.resizeCanvas) {
      if (canvas.width !== w) canvas.width = w
      if (canvas.height !== h) canvas.height = h
      if (typeof canvas.style !== 'undefined') {
        canvas.style.removeProperty('width')
        canvas.style.removeProperty('height')
      }
    } else {
      if (canvas.width !== wNative) canvas.width = wNative
      if (canvas.height !== hNative) canvas.height = hNative
      if (typeof canvas.style !== 'undefined') {
        if (w !== wNative || h !== hNative) {
          canvas.style.setProperty('width', w + 'px', 'important')
          canvas.style.setProperty('height', h + 'px', 'important')
        } else {
          canvas.style.removeProperty('width')
          canvas.style.removeProperty('height')
        }
      }
    }
  }
}
Module['_strlen'] = _strlen

function _emscripten_memcpy_big (dest, src, num) {
  HEAPU8.set(HEAPU8.subarray(src, src + num), dest)
  return dest
}
Module['_memcpy'] = _memcpy
Module['requestFullScreen'] = function Module_requestFullScreen (lockPointer, resizeCanvas) {
  Browser.requestFullScreen(lockPointer, resizeCanvas)
}
Module['requestAnimationFrame'] = function Module_requestAnimationFrame (func) {
  Browser.requestAnimationFrame(func)
}
Module['setCanvasSize'] = function Module_setCanvasSize (width, height, noUpdates) {
  Browser.setCanvasSize(width, height, noUpdates)
}
Module['pauseMainLoop'] = function Module_pauseMainLoop () {
  Browser.mainLoop.pause()
}
Module['resumeMainLoop'] = function Module_resumeMainLoop () {
  Browser.mainLoop.resume()
}
Module['getUserMedia'] = function Module_getUserMedia () {
  Browser.getUserMedia()
}
FS.staticInit()
__ATINIT__.unshift({
  func: function () {
    if (!Module['noFSInit'] && !FS.init.initialized) FS.init()
  }
})
__ATMAIN__.push({
  func: function () {
    FS.ignorePermissions = false
  }
})
__ATEXIT__.push({
  func: function () {
    FS.quit()
  }
})
Module['FS_createFolder'] = FS.createFolder
Module['FS_createPath'] = FS.createPath
Module['FS_createDataFile'] = FS.createDataFile
Module['FS_createPreloadedFile'] = FS.createPreloadedFile
Module['FS_createLazyFile'] = FS.createLazyFile
Module['FS_createLink'] = FS.createLink
Module['FS_createDevice'] = FS.createDevice
___errno_state = Runtime.staticAlloc(4)
SAFE_HEAP_STORE(___errno_state | 0, 0 | 0, 4, 0) | 0
__ATINIT__.unshift({
  func: function () {
    TTY.init()
  }
})
__ATEXIT__.push({
  func: function () {
    TTY.shutdown()
  }
})
TTY.utf8 = new Runtime.UTF8Processor()
if (ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WEB) {
  var fs = require('fs')
  NODEFS.staticInit()
}
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP)
staticSealed = true
STACK_MAX = STACK_BASE + 5242880
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX)
assert(DYNAMIC_BASE < TOTAL_MEMORY, 'TOTAL_MEMORY not big enough for stack')
var ctlz_i8 = allocate([8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'i8', ALLOC_DYNAMIC)
var cttz_i8 = allocate([8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0], 'i8', ALLOC_DYNAMIC)
var Math_min = Math.min

function asmPrintInt (x, y) {
  Module.print('int ' + x + ',' + y)
}

function asmPrintFloat (x, y) {
  Module.print('float ' + x + ',' + y)
}
var asm = (function (global, env, buffer) {
  // EMSCRIPTEN_START_ASM
  'use asm'
  var a = new global.Int8Array(buffer)
  var b = new global.Int16Array(buffer)
  var c = new global.Int32Array(buffer)
  var d = new global.Uint8Array(buffer)
  var e = new global.Uint16Array(buffer)
  var f = new global.Uint32Array(buffer)
  var g = new global.Float32Array(buffer)
  var h = new global.Float64Array(buffer)
  var i = env.STACKTOP | 0
  var j = env.STACK_MAX | 0
  var k = env.tempDoublePtr | 0
  var l = env.ABORT | 0
  var m = env.cttz_i8 | 0
  var n = env.ctlz_i8 | 0
  var o = 0
  var p = 0
  var q = 0
  var r = 0
  var s = +env.NaN

  var t = +env.Infinity
  var u = 0

  var v = 0

  var w = 0

  var x = 0

  var y = 0.0

  var z = 0

  var A = 0

  var B = 0

  var C = 0.0
  var D = 0
  var E = 0
  var F = 0
  var G = 0
  var H = 0
  var I = 0
  var J = 0
  var K = 0
  var L = 0
  var M = 0
  var N = global.Math.floor
  var O = global.Math.abs
  var P = global.Math.sqrt
  var Q = global.Math.pow
  var R = global.Math.cos
  var S = global.Math.sin
  var T = global.Math.tan
  var U = global.Math.acos
  var V = global.Math.asin
  var W = global.Math.atan
  var X = global.Math.atan2
  var Y = global.Math.exp
  var Z = global.Math.log
  var _ = global.Math.ceil
  var $ = global.Math.imul
  var aa = env.abort
  var ba = env.assert
  var ca = env.asmPrintInt
  var da = env.asmPrintFloat
  var ea = env.min
  var fa = env.SAFE_HEAP_LOAD
  var ga = env.SAFE_HEAP_STORE
  var ha = env.SAFE_FT_MASK
  var ia = env._free
  var ja = env.___setErrNo
  var ka = env._malloc
  var la = env._emscripten_memcpy_big
  var ma = env._fflush
  var na = env.___assert_fail
  var oa = 0.0
  // EMSCRIPTEN_START_FUNCS
  function pa (a) {
    a = a | 0
    var b = 0
    b = i
    i = i + a | 0
    i = i + 7 & -8
    return b | 0
  }

  function qa () {
    return i | 0
  }

  function ra (a) {
    a = a | 0
    i = a
  }

  function sa (a, b) {
    a = a | 0
    b = b | 0
    if ((o | 0) === 0) {
      o = a
      p = b
    }
  }

  function ta (a) {
    a = a | 0
    ga(k >> 0 | 0, fa(a >> 0 | 0, 1, 0, 0) | 0 | 0, 1, 0)
    ga(k + 1 >> 0 | 0, fa(a + 1 >> 0 | 0, 1, 0, 0) | 0 | 0, 1, 0)
    ga(k + 2 >> 0 | 0, fa(a + 2 >> 0 | 0, 1, 0, 0) | 0 | 0, 1, 0)
    ga(k + 3 >> 0 | 0, fa(a + 3 >> 0 | 0, 1, 0, 0) | 0 | 0, 1, 0)
  }

  function ua (a) {
    a = a | 0
    ga(k >> 0 | 0, fa(a >> 0 | 0, 1, 0, 0) | 0 | 0, 1, 0)
    ga(k + 1 >> 0 | 0, fa(a + 1 >> 0 | 0, 1, 0, 0) | 0 | 0, 1, 0)
    ga(k + 2 >> 0 | 0, fa(a + 2 >> 0 | 0, 1, 0, 0) | 0 | 0, 1, 0)
    ga(k + 3 >> 0 | 0, fa(a + 3 >> 0 | 0, 1, 0, 0) | 0 | 0, 1, 0)
    ga(k + 4 >> 0 | 0, fa(a + 4 >> 0 | 0, 1, 0, 0) | 0 | 0, 1, 0)
    ga(k + 5 >> 0 | 0, fa(a + 5 >> 0 | 0, 1, 0, 0) | 0 | 0, 1, 0)
    ga(k + 6 >> 0 | 0, fa(a + 6 >> 0 | 0, 1, 0, 0) | 0 | 0, 1, 0)
    ga(k + 7 >> 0 | 0, fa(a + 7 >> 0 | 0, 1, 0, 0) | 0 | 0, 1, 0)
  }

  function va (a) {
    a = a | 0
    D = a
  }

  function wa () {
    return D | 0
  }

  function xa (a, b, c) {
    a = a | 0
    b = b | 0
    c = c | 0
    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var D = 0

    var E = 0

    var F = 0

    var G = 0

    var H = 0

    var I = 0

    var J = 0

    var K = 0

    var L = 0

    var M = 0

    var N = 0

    var O = 0

    var P = 0

    var Q = 0

    var R = 0

    var S = 0

    var T = 0

    var U = 0

    var V = 0

    var W = 0

    var X = 0

    var Y = 0

    var Z = 0

    var _ = 0

    var $ = 0

    var aa = 0

    var ba = 0

    var ca = 0

    var da = 0

    var ea = 0

    var ha = 0

    var ia = 0

    var ja = 0

    var ka = 0
    d = i
    Y = b + 40 | 0
    j = b + 44 | 0
    m = b + 48 | 0
    p = b + 52 | 0
    s = b + 56 | 0
    v = b + 60 | 0
    y = b + 64 | 0
    B = b + 68 | 0
    E = b + 72 | 0
    F = b + 76 | 0
    V = b + 4 | 0
    S = b + 8 | 0
    Q = b + 12 | 0
    h = b + 16 | 0
    n = b + 20 | 0
    r = b + 24 | 0
    w = b + 28 | 0
    A = b + 32 | 0
    P = b + 36 | 0
    ja = (fa(V | 0, 4, 0, 0) | 0 | 0) + (fa(j | 0, 4, 0, 0) | 0 | 0) | 0
    ia = (fa(S | 0, 4, 0, 0) | 0 | 0) + (fa(m | 0, 4, 0, 0) | 0 | 0) | 0
    ha = (fa(Q | 0, 4, 0, 0) | 0 | 0) + (fa(p | 0, 4, 0, 0) | 0 | 0) | 0
    ea = (fa(h | 0, 4, 0, 0) | 0 | 0) + (fa(s | 0, 4, 0, 0) | 0 | 0) | 0
    da = (fa(n | 0, 4, 0, 0) | 0 | 0) + (fa(v | 0, 4, 0, 0) | 0 | 0) | 0
    ca = (fa(r | 0, 4, 0, 0) | 0 | 0) + (fa(y | 0, 4, 0, 0) | 0 | 0) | 0
    ba = (fa(w | 0, 4, 0, 0) | 0 | 0) + (fa(B | 0, 4, 0, 0) | 0 | 0) | 0
    aa = (fa(A | 0, 4, 0, 0) | 0 | 0) + (fa(E | 0, 4, 0, 0) | 0 | 0) | 0
    $ = (fa(P | 0, 4, 0, 0) | 0 | 0) + (fa(F | 0, 4, 0, 0) | 0 | 0) | 0
    ga(a | 0, (fa(b | 0, 4, 0, 0) | 0 | 0) + (fa(Y | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
    ka = a + 4 | 0
    ga(ka | 0, ja | 0, 4, 0)
    ja = a + 8 | 0
    ga(ja | 0, ia | 0, 4, 0)
    ia = a + 12 | 0
    ga(ia | 0, ha | 0, 4, 0)
    ha = a + 16 | 0
    ga(ha | 0, ea | 0, 4, 0)
    ea = a + 20 | 0
    ga(ea | 0, da | 0, 4, 0)
    da = a + 24 | 0
    ga(da | 0, ca | 0, 4, 0)
    ca = a + 28 | 0
    ga(ca | 0, ba | 0, 4, 0)
    ba = a + 32 | 0
    ga(ba | 0, aa | 0, 4, 0)
    aa = a + 36 | 0
    ga(aa | 0, $ | 0, 4, 0)
    $ = a + 40 | 0
    V = (fa(j | 0, 4, 0, 0) | 0 | 0) - (fa(V | 0, 4, 0, 0) | 0 | 0) | 0
    S = (fa(m | 0, 4, 0, 0) | 0 | 0) - (fa(S | 0, 4, 0, 0) | 0 | 0) | 0
    Q = (fa(p | 0, 4, 0, 0) | 0 | 0) - (fa(Q | 0, 4, 0, 0) | 0 | 0) | 0
    h = (fa(s | 0, 4, 0, 0) | 0 | 0) - (fa(h | 0, 4, 0, 0) | 0 | 0) | 0
    n = (fa(v | 0, 4, 0, 0) | 0 | 0) - (fa(n | 0, 4, 0, 0) | 0 | 0) | 0
    r = (fa(y | 0, 4, 0, 0) | 0 | 0) - (fa(r | 0, 4, 0, 0) | 0 | 0) | 0
    w = (fa(B | 0, 4, 0, 0) | 0 | 0) - (fa(w | 0, 4, 0, 0) | 0 | 0) | 0
    A = (fa(E | 0, 4, 0, 0) | 0 | 0) - (fa(A | 0, 4, 0, 0) | 0 | 0) | 0
    P = (fa(F | 0, 4, 0, 0) | 0 | 0) - (fa(P | 0, 4, 0, 0) | 0 | 0) | 0
    ga($ | 0, (fa(Y | 0, 4, 0, 0) | 0 | 0) - (fa(b | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
    Y = a + 44 | 0
    ga(Y | 0, V | 0, 4, 0)
    V = a + 48 | 0
    ga(V | 0, S | 0, 4, 0)
    S = a + 52 | 0
    ga(S | 0, Q | 0, 4, 0)
    Q = a + 56 | 0
    ga(Q | 0, h | 0, 4, 0)
    h = a + 60 | 0
    ga(h | 0, n | 0, 4, 0)
    n = a + 64 | 0
    ga(n | 0, r | 0, 4, 0)
    r = a + 68 | 0
    ga(r | 0, w | 0, 4, 0)
    w = a + 72 | 0
    ga(w | 0, A | 0, 4, 0)
    A = a + 76 | 0
    ga(A | 0, P | 0, 4, 0)
    P = a + 80 | 0
    ya(P, a, c)
    ya($, $, c + 40 | 0)
    F = a + 120 | 0
    ya(F, c + 120 | 0, b + 120 | 0)
    ya(a, b + 80 | 0, c + 80 | 0)
    E = (fa(a | 0, 4, 0, 0) | 0) << 1
    B = (fa(ka | 0, 4, 0, 0) | 0) << 1
    y = (fa(ja | 0, 4, 0, 0) | 0) << 1
    v = (fa(ia | 0, 4, 0, 0) | 0) << 1
    s = (fa(ha | 0, 4, 0, 0) | 0) << 1
    p = (fa(ea | 0, 4, 0, 0) | 0) << 1
    m = (fa(da | 0, 4, 0, 0) | 0) << 1
    j = (fa(ca | 0, 4, 0, 0) | 0) << 1
    f = (fa(ba | 0, 4, 0, 0) | 0) << 1
    c = (fa(aa | 0, 4, 0, 0) | 0) << 1
    Z = fa(P | 0, 4, 0, 0) | 0 | 0
    O = a + 84 | 0
    W = fa(O | 0, 4, 0, 0) | 0 | 0
    N = a + 88 | 0
    T = fa(N | 0, 4, 0, 0) | 0 | 0
    M = a + 92 | 0
    b = fa(M | 0, 4, 0, 0) | 0 | 0
    L = a + 96 | 0
    g = fa(L | 0, 4, 0, 0) | 0 | 0
    K = a + 100 | 0
    l = fa(K | 0, 4, 0, 0) | 0 | 0
    J = a + 104 | 0
    q = fa(J | 0, 4, 0, 0) | 0 | 0
    I = a + 108 | 0
    u = fa(I | 0, 4, 0, 0) | 0 | 0
    H = a + 112 | 0
    z = fa(H | 0, 4, 0, 0) | 0 | 0
    G = a + 116 | 0
    D = fa(G | 0, 4, 0, 0) | 0 | 0
    _ = fa($ | 0, 4, 0, 0) | 0 | 0
    X = fa(Y | 0, 4, 0, 0) | 0 | 0
    U = fa(V | 0, 4, 0, 0) | 0 | 0
    R = fa(S | 0, 4, 0, 0) | 0 | 0
    e = fa(Q | 0, 4, 0, 0) | 0 | 0
    k = fa(h | 0, 4, 0, 0) | 0 | 0
    o = fa(n | 0, 4, 0, 0) | 0 | 0
    t = fa(r | 0, 4, 0, 0) | 0 | 0
    x = fa(w | 0, 4, 0, 0) | 0 | 0
    C = fa(A | 0, 4, 0, 0) | 0 | 0
    ga(a | 0, Z - _ | 0, 4, 0)
    ga(ka | 0, W - X | 0, 4, 0)
    ga(ja | 0, T - U | 0, 4, 0)
    ga(ia | 0, b - R | 0, 4, 0)
    ga(ha | 0, g - e | 0, 4, 0)
    ga(ea | 0, l - k | 0, 4, 0)
    ga(da | 0, q - o | 0, 4, 0)
    ga(ca | 0, u - t | 0, 4, 0)
    ga(ba | 0, z - x | 0, 4, 0)
    ga(aa | 0, D - C | 0, 4, 0)
    ga($ | 0, _ + Z | 0, 4, 0)
    ga(Y | 0, X + W | 0, 4, 0)
    ga(V | 0, U + T | 0, 4, 0)
    ga(S | 0, R + b | 0, 4, 0)
    ga(Q | 0, e + g | 0, 4, 0)
    ga(h | 0, k + l | 0, 4, 0)
    ga(n | 0, o + q | 0, 4, 0)
    ga(r | 0, t + u | 0, 4, 0)
    ga(w | 0, x + z | 0, 4, 0)
    ga(A | 0, C + D | 0, 4, 0)
    D = fa(F | 0, 4, 0, 0) | 0 | 0
    C = a + 124 | 0
    A = fa(C | 0, 4, 0, 0) | 0 | 0
    z = a + 128 | 0
    x = fa(z | 0, 4, 0, 0) | 0 | 0
    w = a + 132 | 0
    u = fa(w | 0, 4, 0, 0) | 0 | 0
    t = a + 136 | 0
    r = fa(t | 0, 4, 0, 0) | 0 | 0
    q = a + 140 | 0
    o = fa(q | 0, 4, 0, 0) | 0 | 0
    n = a + 144 | 0
    l = fa(n | 0, 4, 0, 0) | 0 | 0
    k = a + 148 | 0
    h = fa(k | 0, 4, 0, 0) | 0 | 0
    g = a + 152 | 0
    e = fa(g | 0, 4, 0, 0) | 0 | 0
    a = a + 156 | 0
    b = fa(a | 0, 4, 0, 0) | 0 | 0
    ga(P | 0, D + E | 0, 4, 0)
    ga(O | 0, A + B | 0, 4, 0)
    ga(N | 0, x + y | 0, 4, 0)
    ga(M | 0, u + v | 0, 4, 0)
    ga(L | 0, r + s | 0, 4, 0)
    ga(K | 0, o + p | 0, 4, 0)
    ga(J | 0, l + m | 0, 4, 0)
    ga(I | 0, h + j | 0, 4, 0)
    ga(H | 0, e + f | 0, 4, 0)
    ga(G | 0, b + c | 0, 4, 0)
    ga(F | 0, E - D | 0, 4, 0)
    ga(C | 0, B - A | 0, 4, 0)
    ga(z | 0, y - x | 0, 4, 0)
    ga(w | 0, v - u | 0, 4, 0)
    ga(t | 0, s - r | 0, 4, 0)
    ga(q | 0, p - o | 0, 4, 0)
    ga(n | 0, m - l | 0, 4, 0)
    ga(k | 0, j - h | 0, 4, 0)
    ga(g | 0, f - e | 0, 4, 0)
    ga(a | 0, c - b | 0, 4, 0)
    i = d
  }

  function ya (a, b, c) {
    a = a | 0
    b = b | 0
    c = c | 0
    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var E = 0

    var F = 0

    var G = 0

    var H = 0

    var I = 0

    var J = 0

    var K = 0

    var L = 0

    var M = 0

    var N = 0

    var O = 0

    var P = 0

    var Q = 0

    var R = 0

    var S = 0

    var T = 0

    var U = 0

    var V = 0

    var W = 0

    var X = 0

    var Y = 0

    var Z = 0

    var _ = 0

    var $ = 0

    var aa = 0

    var ba = 0

    var ca = 0

    var da = 0

    var ea = 0

    var ha = 0

    var ia = 0

    var ja = 0

    var ka = 0

    var la = 0

    var ma = 0

    var na = 0

    var oa = 0

    var pa = 0

    var qa = 0

    var ra = 0

    var sa = 0

    var ta = 0

    var ua = 0

    var va = 0

    var wa = 0

    var xa = 0

    var ya = 0

    var za = 0

    var Aa = 0

    var Ba = 0

    var Ca = 0

    var Da = 0

    var Ea = 0

    var Fa = 0

    var Ga = 0

    var Ha = 0

    var Ia = 0

    var Ja = 0

    var Ka = 0

    var La = 0

    var Ma = 0

    var Na = 0

    var Oa = 0

    var Pa = 0

    var Qa = 0

    var Ra = 0

    var Sa = 0

    var Ta = 0

    var Ua = 0

    var Va = 0

    var Wa = 0

    var Xa = 0

    var Ya = 0

    var Za = 0

    var _a = 0

    var $a = 0

    var ab = 0

    var bb = 0

    var cb = 0

    var db = 0

    var eb = 0

    var ib = 0

    var jb = 0

    var lb = 0

    var mb = 0

    var nb = 0

    var ob = 0

    var pb = 0

    var qb = 0

    var rb = 0

    var tb = 0

    var ub = 0

    var vb = 0

    var wb = 0

    var xb = 0

    var yb = 0

    var zb = 0

    var Ab = 0

    var Bb = 0

    var Cb = 0

    var Db = 0

    var Eb = 0

    var Fb = 0

    var Gb = 0

    var Hb = 0

    var Ib = 0

    var Jb = 0

    var Kb = 0

    var Lb = 0

    var Mb = 0

    var Nb = 0

    var Ob = 0

    var Pb = 0

    var Qb = 0

    var Rb = 0

    var Sb = 0

    var Tb = 0

    var Ub = 0

    var Vb = 0

    var Wb = 0

    var Xb = 0

    var Yb = 0

    var Zb = 0

    var _b = 0

    var $b = 0

    var ac = 0

    var bc = 0

    var cc = 0

    var dc = 0

    var ec = 0

    var fc = 0

    var gc = 0

    var hc = 0

    var ic = 0

    var jc = 0

    var kc = 0

    var lc = 0

    var mc = 0

    var nc = 0

    var oc = 0

    var pc = 0

    var qc = 0

    var rc = 0

    var sc = 0

    var tc = 0

    var uc = 0

    var vc = 0

    var wc = 0

    var xc = 0

    var yc = 0

    var zc = 0

    var Ac = 0

    var Bc = 0

    var Cc = 0

    var Dc = 0

    var Ec = 0

    var Fc = 0

    var Gc = 0

    var Hc = 0

    var Ic = 0

    var Jc = 0

    var Kc = 0

    var Lc = 0

    var Mc = 0

    var Nc = 0

    var Oc = 0

    var Pc = 0

    var Qc = 0

    var Rc = 0

    var Sc = 0

    var Tc = 0

    var Uc = 0

    var Vc = 0

    var Wc = 0

    var Xc = 0

    var Yc = 0

    var Zc = 0

    var _c = 0
    d = i
    m = fa(b | 0, 4, 0, 0) | 0 | 0
    t = fa(b + 4 | 0, 4, 0, 0) | 0 | 0
    k = fa(b + 8 | 0, 4, 0, 0) | 0 | 0
    Zb = fa(b + 12 | 0, 4, 0, 0) | 0 | 0
    e = fa(b + 16 | 0, 4, 0, 0) | 0 | 0
    Ca = fa(b + 20 | 0, 4, 0, 0) | 0 | 0
    Ba = fa(b + 24 | 0, 4, 0, 0) | 0 | 0
    Hb = fa(b + 28 | 0, 4, 0, 0) | 0 | 0
    h = fa(b + 32 | 0, 4, 0, 0) | 0 | 0
    ja = fa(b + 36 | 0, 4, 0, 0) | 0 | 0
    I = fa(c | 0, 4, 0, 0) | 0 | 0
    K = fa(c + 4 | 0, 4, 0, 0) | 0 | 0
    G = fa(c + 8 | 0, 4, 0, 0) | 0 | 0
    E = fa(c + 12 | 0, 4, 0, 0) | 0 | 0
    B = fa(c + 16 | 0, 4, 0, 0) | 0 | 0
    z = fa(c + 20 | 0, 4, 0, 0) | 0 | 0
    x = fa(c + 24 | 0, 4, 0, 0) | 0 | 0
    v = fa(c + 28 | 0, 4, 0, 0) | 0 | 0
    l = fa(c + 32 | 0, 4, 0, 0) | 0 | 0
    u = fa(c + 36 | 0, 4, 0, 0) | 0 | 0
    Wc = K * 19 | 0
    jc = G * 19 | 0
    zb = E * 19 | 0
    Ka = B * 19 | 0
    rc = z * 19 | 0
    Lb = x * 19 | 0
    Wa = v * 19 | 0
    _c = l * 19 | 0
    Yc = u * 19 | 0
    q = t << 1
    f = Zb << 1
    N = Ca << 1
    j = Hb << 1
    b = ja << 1
    p = ((m | 0) < 0) << 31 >> 31
    J = ((I | 0) < 0) << 31 >> 31
    Uc = sb(I | 0, J | 0, m | 0, p | 0) | 0
    Tc = D
    L = ((K | 0) < 0) << 31 >> 31
    Ec = sb(K | 0, L | 0, m | 0, p | 0) | 0
    Dc = D
    H = ((G | 0) < 0) << 31 >> 31
    Cb = sb(G | 0, H | 0, m | 0, p | 0) | 0
    Bb = D
    F = ((E | 0) < 0) << 31 >> 31
    Na = sb(E | 0, F | 0, m | 0, p | 0) | 0
    Ma = D
    C = ((B | 0) < 0) << 31 >> 31
    uc = sb(B | 0, C | 0, m | 0, p | 0) | 0
    tc = D
    A = ((z | 0) < 0) << 31 >> 31
    Ob = sb(z | 0, A | 0, m | 0, p | 0) | 0
    Nb = D
    y = ((x | 0) < 0) << 31 >> 31
    Za = sb(x | 0, y | 0, m | 0, p | 0) | 0
    Ya = D
    w = ((v | 0) < 0) << 31 >> 31
    ma = sb(v | 0, w | 0, m | 0, p | 0) | 0
    la = D
    Xc = ((l | 0) < 0) << 31 >> 31
    Q = sb(l | 0, Xc | 0, m | 0, p | 0) | 0
    P = D
    p = sb(u | 0, ((u | 0) < 0) << 31 >> 31 | 0, m | 0, p | 0) | 0
    m = D
    u = ((t | 0) < 0) << 31 >> 31
    lc = sb(I | 0, J | 0, t | 0, u | 0) | 0
    mc = D
    o = ((q | 0) < 0) << 31 >> 31
    Gb = sb(K | 0, L | 0, q | 0, o | 0) | 0
    Fb = D
    Pa = sb(G | 0, H | 0, t | 0, u | 0) | 0
    Oa = D
    wc = sb(E | 0, F | 0, q | 0, o | 0) | 0
    vc = D
    Qb = sb(B | 0, C | 0, t | 0, u | 0) | 0
    Pb = D
    $a = sb(z | 0, A | 0, q | 0, o | 0) | 0
    _a = D
    oa = sb(x | 0, y | 0, t | 0, u | 0) | 0
    na = D
    S = sb(v | 0, w | 0, q | 0, o | 0) | 0
    R = D
    u = sb(l | 0, Xc | 0, t | 0, u | 0) | 0
    t = D
    Xc = ((Yc | 0) < 0) << 31 >> 31
    o = sb(Yc | 0, Xc | 0, q | 0, o | 0) | 0
    q = D
    l = ((k | 0) < 0) << 31 >> 31
    Eb = sb(I | 0, J | 0, k | 0, l | 0) | 0
    Db = D
    Ta = sb(K | 0, L | 0, k | 0, l | 0) | 0
    Sa = D
    yc = sb(G | 0, H | 0, k | 0, l | 0) | 0
    xc = D
    Sb = sb(E | 0, F | 0, k | 0, l | 0) | 0
    Rb = D
    bb = sb(B | 0, C | 0, k | 0, l | 0) | 0
    ab = D
    qa = sb(z | 0, A | 0, k | 0, l | 0) | 0
    pa = D
    U = sb(x | 0, y | 0, k | 0, l | 0) | 0
    T = D
    w = sb(v | 0, w | 0, k | 0, l | 0) | 0
    v = D
    Zc = ((_c | 0) < 0) << 31 >> 31
    Gc = sb(_c | 0, Zc | 0, k | 0, l | 0) | 0
    Fc = D
    l = sb(Yc | 0, Xc | 0, k | 0, l | 0) | 0
    k = D
    _b = ((Zb | 0) < 0) << 31 >> 31
    Ra = sb(I | 0, J | 0, Zb | 0, _b | 0) | 0
    Qa = D
    ia = ((f | 0) < 0) << 31 >> 31
    Cc = sb(K | 0, L | 0, f | 0, ia | 0) | 0
    Bc = D
    Ub = sb(G | 0, H | 0, Zb | 0, _b | 0) | 0
    Tb = D
    db = sb(E | 0, F | 0, f | 0, ia | 0) | 0
    cb = D
    sa = sb(B | 0, C | 0, Zb | 0, _b | 0) | 0
    ra = D
    W = sb(z | 0, A | 0, f | 0, ia | 0) | 0
    V = D
    y = sb(x | 0, y | 0, Zb | 0, _b | 0) | 0
    x = D
    Xa = ((Wa | 0) < 0) << 31 >> 31
    Ic = sb(Wa | 0, Xa | 0, f | 0, ia | 0) | 0
    Hc = D
    _b = sb(_c | 0, Zc | 0, Zb | 0, _b | 0) | 0
    Zb = D
    ia = sb(Yc | 0, Xc | 0, f | 0, ia | 0) | 0
    f = D
    O = ((e | 0) < 0) << 31 >> 31
    Ac = sb(I | 0, J | 0, e | 0, O | 0) | 0
    zc = D
    Yb = sb(K | 0, L | 0, e | 0, O | 0) | 0
    Xb = D
    ib = sb(G | 0, H | 0, e | 0, O | 0) | 0
    eb = D
    ua = sb(E | 0, F | 0, e | 0, O | 0) | 0
    ta = D
    Y = sb(B | 0, C | 0, e | 0, O | 0) | 0
    X = D
    A = sb(z | 0, A | 0, e | 0, O | 0) | 0
    z = D
    Mb = ((Lb | 0) < 0) << 31 >> 31
    Kc = sb(Lb | 0, Mb | 0, e | 0, O | 0) | 0
    Jc = D
    ac = sb(Wa | 0, Xa | 0, e | 0, O | 0) | 0
    $b = D
    pb = sb(_c | 0, Zc | 0, e | 0, O | 0) | 0
    ob = D
    O = sb(Yc | 0, Xc | 0, e | 0, O | 0) | 0
    e = D
    Da = ((Ca | 0) < 0) << 31 >> 31
    Wb = sb(I | 0, J | 0, Ca | 0, Da | 0) | 0
    Vb = D
    c = ((N | 0) < 0) << 31 >> 31
    nb = sb(K | 0, L | 0, N | 0, c | 0) | 0
    mb = D
    wa = sb(G | 0, H | 0, Ca | 0, Da | 0) | 0
    va = D
    _ = sb(E | 0, F | 0, N | 0, c | 0) | 0
    Z = D
    C = sb(B | 0, C | 0, Ca | 0, Da | 0) | 0
    B = D
    sc = ((rc | 0) < 0) << 31 >> 31
    Mc = sb(rc | 0, sc | 0, N | 0, c | 0) | 0
    Lc = D
    cc = sb(Lb | 0, Mb | 0, Ca | 0, Da | 0) | 0
    bc = D
    rb = sb(Wa | 0, Xa | 0, N | 0, c | 0) | 0
    qb = D
    Da = sb(_c | 0, Zc | 0, Ca | 0, Da | 0) | 0
    Ca = D
    c = sb(Yc | 0, Xc | 0, N | 0, c | 0) | 0
    N = D
    g = ((Ba | 0) < 0) << 31 >> 31
    lb = sb(I | 0, J | 0, Ba | 0, g | 0) | 0
    jb = D
    Aa = sb(K | 0, L | 0, Ba | 0, g | 0) | 0
    za = D
    aa = sb(G | 0, H | 0, Ba | 0, g | 0) | 0
    $ = D
    F = sb(E | 0, F | 0, Ba | 0, g | 0) | 0
    E = D
    La = ((Ka | 0) < 0) << 31 >> 31
    Oc = sb(Ka | 0, La | 0, Ba | 0, g | 0) | 0
    Nc = D
    ec = sb(rc | 0, sc | 0, Ba | 0, g | 0) | 0
    dc = D
    ub = sb(Lb | 0, Mb | 0, Ba | 0, g | 0) | 0
    tb = D
    Fa = sb(Wa | 0, Xa | 0, Ba | 0, g | 0) | 0
    Ea = D
    n = sb(_c | 0, Zc | 0, Ba | 0, g | 0) | 0
    s = D
    g = sb(Yc | 0, Xc | 0, Ba | 0, g | 0) | 0
    Ba = D
    Ib = ((Hb | 0) < 0) << 31 >> 31
    ya = sb(I | 0, J | 0, Hb | 0, Ib | 0) | 0
    xa = D
    ha = ((j | 0) < 0) << 31 >> 31
    ea = sb(K | 0, L | 0, j | 0, ha | 0) | 0
    da = D
    H = sb(G | 0, H | 0, Hb | 0, Ib | 0) | 0
    G = D
    Ab = ((zb | 0) < 0) << 31 >> 31
    Qc = sb(zb | 0, Ab | 0, j | 0, ha | 0) | 0
    Pc = D
    gc = sb(Ka | 0, La | 0, Hb | 0, Ib | 0) | 0
    fc = D
    wb = sb(rc | 0, sc | 0, j | 0, ha | 0) | 0
    vb = D
    Ha = sb(Lb | 0, Mb | 0, Hb | 0, Ib | 0) | 0
    Ga = D
    oc = sb(Wa | 0, Xa | 0, j | 0, ha | 0) | 0
    nc = D
    Ib = sb(_c | 0, Zc | 0, Hb | 0, Ib | 0) | 0
    Hb = D
    ha = sb(Yc | 0, Xc | 0, j | 0, ha | 0) | 0
    j = D
    M = ((h | 0) < 0) << 31 >> 31
    ca = sb(I | 0, J | 0, h | 0, M | 0) | 0
    ba = D
    L = sb(K | 0, L | 0, h | 0, M | 0) | 0
    K = D
    kc = ((jc | 0) < 0) << 31 >> 31
    Sc = sb(jc | 0, kc | 0, h | 0, M | 0) | 0
    Rc = D
    ic = sb(zb | 0, Ab | 0, h | 0, M | 0) | 0
    hc = D
    yb = sb(Ka | 0, La | 0, h | 0, M | 0) | 0
    xb = D
    Ja = sb(rc | 0, sc | 0, h | 0, M | 0) | 0
    Ia = D
    qc = sb(Lb | 0, Mb | 0, h | 0, M | 0) | 0
    pc = D
    Kb = sb(Wa | 0, Xa | 0, h | 0, M | 0) | 0
    Jb = D
    Va = sb(_c | 0, Zc | 0, h | 0, M | 0) | 0
    Ua = D
    M = sb(Yc | 0, Xc | 0, h | 0, M | 0) | 0
    h = D
    ka = ((ja | 0) < 0) << 31 >> 31
    J = sb(I | 0, J | 0, ja | 0, ka | 0) | 0
    I = D
    r = ((b | 0) < 0) << 31 >> 31
    Wc = sb(Wc | 0, ((Wc | 0) < 0) << 31 >> 31 | 0, b | 0, r | 0) | 0
    Vc = D
    kc = sb(jc | 0, kc | 0, ja | 0, ka | 0) | 0
    jc = D
    Ab = sb(zb | 0, Ab | 0, b | 0, r | 0) | 0
    zb = D
    La = sb(Ka | 0, La | 0, ja | 0, ka | 0) | 0
    Ka = D
    sc = sb(rc | 0, sc | 0, b | 0, r | 0) | 0
    rc = D
    Mb = sb(Lb | 0, Mb | 0, ja | 0, ka | 0) | 0
    Lb = D
    Xa = sb(Wa | 0, Xa | 0, b | 0, r | 0) | 0
    Wa = D
    ka = sb(_c | 0, Zc | 0, ja | 0, ka | 0) | 0
    ja = D
    r = sb(Yc | 0, Xc | 0, b | 0, r | 0) | 0
    b = D
    Tc = hb(Wc | 0, Vc | 0, Uc | 0, Tc | 0) | 0
    Rc = hb(Tc | 0, D | 0, Sc | 0, Rc | 0) | 0
    Pc = hb(Rc | 0, D | 0, Qc | 0, Pc | 0) | 0
    Nc = hb(Pc | 0, D | 0, Oc | 0, Nc | 0) | 0
    Lc = hb(Nc | 0, D | 0, Mc | 0, Lc | 0) | 0
    Jc = hb(Lc | 0, D | 0, Kc | 0, Jc | 0) | 0
    Hc = hb(Jc | 0, D | 0, Ic | 0, Hc | 0) | 0
    Fc = hb(Hc | 0, D | 0, Gc | 0, Fc | 0) | 0
    q = hb(Fc | 0, D | 0, o | 0, q | 0) | 0
    o = D
    mc = hb(Ec | 0, Dc | 0, lc | 0, mc | 0) | 0
    lc = D
    zc = hb(Cc | 0, Bc | 0, Ac | 0, zc | 0) | 0
    xc = hb(zc | 0, D | 0, yc | 0, xc | 0) | 0
    vc = hb(xc | 0, D | 0, wc | 0, vc | 0) | 0
    tc = hb(vc | 0, D | 0, uc | 0, tc | 0) | 0
    rc = hb(tc | 0, D | 0, sc | 0, rc | 0) | 0
    pc = hb(rc | 0, D | 0, qc | 0, pc | 0) | 0
    nc = hb(pc | 0, D | 0, oc | 0, nc | 0) | 0
    s = hb(nc | 0, D | 0, n | 0, s | 0) | 0
    N = hb(s | 0, D | 0, c | 0, N | 0) | 0
    c = D
    s = hb(q | 0, o | 0, 33554432, 0) | 0
    s = fb(s | 0, D | 0, 26) | 0
    n = D
    jc = hb(mc | 0, lc | 0, kc | 0, jc | 0) | 0
    hc = hb(jc | 0, D | 0, ic | 0, hc | 0) | 0
    fc = hb(hc | 0, D | 0, gc | 0, fc | 0) | 0
    dc = hb(fc | 0, D | 0, ec | 0, dc | 0) | 0
    bc = hb(dc | 0, D | 0, cc | 0, bc | 0) | 0
    $b = hb(bc | 0, D | 0, ac | 0, $b | 0) | 0
    Zb = hb($b | 0, D | 0, _b | 0, Zb | 0) | 0
    k = hb(Zb | 0, D | 0, l | 0, k | 0) | 0
    k = hb(k | 0, D | 0, s | 0, n | 0) | 0
    l = D
    n = kb(s | 0, n | 0, 26) | 0
    n = gb(q | 0, o | 0, n | 0, D | 0) | 0
    o = D
    q = hb(N | 0, c | 0, 33554432, 0) | 0
    q = fb(q | 0, D | 0, 26) | 0
    s = D
    Vb = hb(Yb | 0, Xb | 0, Wb | 0, Vb | 0) | 0
    Tb = hb(Vb | 0, D | 0, Ub | 0, Tb | 0) | 0
    Rb = hb(Tb | 0, D | 0, Sb | 0, Rb | 0) | 0
    Pb = hb(Rb | 0, D | 0, Qb | 0, Pb | 0) | 0
    Nb = hb(Pb | 0, D | 0, Ob | 0, Nb | 0) | 0
    Lb = hb(Nb | 0, D | 0, Mb | 0, Lb | 0) | 0
    Jb = hb(Lb | 0, D | 0, Kb | 0, Jb | 0) | 0
    Hb = hb(Jb | 0, D | 0, Ib | 0, Hb | 0) | 0
    Ba = hb(Hb | 0, D | 0, g | 0, Ba | 0) | 0
    Ba = hb(Ba | 0, D | 0, q | 0, s | 0) | 0
    g = D
    s = kb(q | 0, s | 0, 26) | 0
    s = gb(N | 0, c | 0, s | 0, D | 0) | 0
    c = D
    N = hb(k | 0, l | 0, 16777216, 0) | 0
    N = fb(N | 0, D | 0, 25) | 0
    q = D
    Db = hb(Gb | 0, Fb | 0, Eb | 0, Db | 0) | 0
    Bb = hb(Db | 0, D | 0, Cb | 0, Bb | 0) | 0
    zb = hb(Bb | 0, D | 0, Ab | 0, zb | 0) | 0
    xb = hb(zb | 0, D | 0, yb | 0, xb | 0) | 0
    vb = hb(xb | 0, D | 0, wb | 0, vb | 0) | 0
    tb = hb(vb | 0, D | 0, ub | 0, tb | 0) | 0
    qb = hb(tb | 0, D | 0, rb | 0, qb | 0) | 0
    ob = hb(qb | 0, D | 0, pb | 0, ob | 0) | 0
    f = hb(ob | 0, D | 0, ia | 0, f | 0) | 0
    f = hb(f | 0, D | 0, N | 0, q | 0) | 0
    ia = D
    q = kb(N | 0, q | 0, 25) | 0
    q = gb(k | 0, l | 0, q | 0, D | 0) | 0
    l = D
    k = hb(Ba | 0, g | 0, 16777216, 0) | 0
    k = fb(k | 0, D | 0, 25) | 0
    N = D
    jb = hb(nb | 0, mb | 0, lb | 0, jb | 0) | 0
    eb = hb(jb | 0, D | 0, ib | 0, eb | 0) | 0
    cb = hb(eb | 0, D | 0, db | 0, cb | 0) | 0
    ab = hb(cb | 0, D | 0, bb | 0, ab | 0) | 0
    _a = hb(ab | 0, D | 0, $a | 0, _a | 0) | 0
    Ya = hb(_a | 0, D | 0, Za | 0, Ya | 0) | 0
    Wa = hb(Ya | 0, D | 0, Xa | 0, Wa | 0) | 0
    Ua = hb(Wa | 0, D | 0, Va | 0, Ua | 0) | 0
    j = hb(Ua | 0, D | 0, ha | 0, j | 0) | 0
    j = hb(j | 0, D | 0, k | 0, N | 0) | 0
    ha = D
    N = kb(k | 0, N | 0, 25) | 0
    N = gb(Ba | 0, g | 0, N | 0, D | 0) | 0
    g = D
    Ba = hb(f | 0, ia | 0, 33554432, 0) | 0
    Ba = fb(Ba | 0, D | 0, 26) | 0
    k = D
    Qa = hb(Ta | 0, Sa | 0, Ra | 0, Qa | 0) | 0
    Oa = hb(Qa | 0, D | 0, Pa | 0, Oa | 0) | 0
    Ma = hb(Oa | 0, D | 0, Na | 0, Ma | 0) | 0
    Ka = hb(Ma | 0, D | 0, La | 0, Ka | 0) | 0
    Ia = hb(Ka | 0, D | 0, Ja | 0, Ia | 0) | 0
    Ga = hb(Ia | 0, D | 0, Ha | 0, Ga | 0) | 0
    Ea = hb(Ga | 0, D | 0, Fa | 0, Ea | 0) | 0
    Ca = hb(Ea | 0, D | 0, Da | 0, Ca | 0) | 0
    e = hb(Ca | 0, D | 0, O | 0, e | 0) | 0
    e = hb(e | 0, D | 0, Ba | 0, k | 0) | 0
    O = D
    k = kb(Ba | 0, k | 0, 26) | 0
    k = gb(f | 0, ia | 0, k | 0, D | 0) | 0
    ia = hb(j | 0, ha | 0, 33554432, 0) | 0
    ia = fb(ia | 0, D | 0, 26) | 0
    f = D
    xa = hb(Aa | 0, za | 0, ya | 0, xa | 0) | 0
    va = hb(xa | 0, D | 0, wa | 0, va | 0) | 0
    ta = hb(va | 0, D | 0, ua | 0, ta | 0) | 0
    ra = hb(ta | 0, D | 0, sa | 0, ra | 0) | 0
    pa = hb(ra | 0, D | 0, qa | 0, pa | 0) | 0
    na = hb(pa | 0, D | 0, oa | 0, na | 0) | 0
    la = hb(na | 0, D | 0, ma | 0, la | 0) | 0
    ja = hb(la | 0, D | 0, ka | 0, ja | 0) | 0
    h = hb(ja | 0, D | 0, M | 0, h | 0) | 0
    h = hb(h | 0, D | 0, ia | 0, f | 0) | 0
    M = D
    f = kb(ia | 0, f | 0, 26) | 0
    f = gb(j | 0, ha | 0, f | 0, D | 0) | 0
    ha = hb(e | 0, O | 0, 16777216, 0) | 0
    ha = fb(ha | 0, D | 0, 25) | 0
    j = D
    c = hb(ha | 0, j | 0, s | 0, c | 0) | 0
    s = D
    j = kb(ha | 0, j | 0, 25) | 0
    j = gb(e | 0, O | 0, j | 0, D | 0) | 0
    O = hb(h | 0, M | 0, 16777216, 0) | 0
    O = fb(O | 0, D | 0, 25) | 0
    e = D
    ba = hb(ea | 0, da | 0, ca | 0, ba | 0) | 0
    $ = hb(ba | 0, D | 0, aa | 0, $ | 0) | 0
    Z = hb($ | 0, D | 0, _ | 0, Z | 0) | 0
    X = hb(Z | 0, D | 0, Y | 0, X | 0) | 0
    V = hb(X | 0, D | 0, W | 0, V | 0) | 0
    T = hb(V | 0, D | 0, U | 0, T | 0) | 0
    R = hb(T | 0, D | 0, S | 0, R | 0) | 0
    P = hb(R | 0, D | 0, Q | 0, P | 0) | 0
    b = hb(P | 0, D | 0, r | 0, b | 0) | 0
    b = hb(b | 0, D | 0, O | 0, e | 0) | 0
    r = D
    e = kb(O | 0, e | 0, 25) | 0
    e = gb(h | 0, M | 0, e | 0, D | 0) | 0
    M = hb(c | 0, s | 0, 33554432, 0) | 0
    M = fb(M | 0, D | 0, 26) | 0
    h = D
    g = hb(N | 0, g | 0, M | 0, h | 0) | 0
    h = kb(M | 0, h | 0, 26) | 0
    h = gb(c | 0, s | 0, h | 0, D | 0) | 0
    s = hb(b | 0, r | 0, 33554432, 0) | 0
    s = fb(s | 0, D | 0, 26) | 0
    c = D
    I = hb(L | 0, K | 0, J | 0, I | 0) | 0
    G = hb(I | 0, D | 0, H | 0, G | 0) | 0
    E = hb(G | 0, D | 0, F | 0, E | 0) | 0
    B = hb(E | 0, D | 0, C | 0, B | 0) | 0
    z = hb(B | 0, D | 0, A | 0, z | 0) | 0
    x = hb(z | 0, D | 0, y | 0, x | 0) | 0
    v = hb(x | 0, D | 0, w | 0, v | 0) | 0
    t = hb(v | 0, D | 0, u | 0, t | 0) | 0
    m = hb(t | 0, D | 0, p | 0, m | 0) | 0
    m = hb(m | 0, D | 0, s | 0, c | 0) | 0
    p = D
    c = kb(s | 0, c | 0, 26) | 0
    c = gb(b | 0, r | 0, c | 0, D | 0) | 0
    r = hb(m | 0, p | 0, 16777216, 0) | 0
    r = fb(r | 0, D | 0, 25) | 0
    b = D
    s = sb(r | 0, b | 0, 19, 0) | 0
    o = hb(s | 0, D | 0, n | 0, o | 0) | 0
    n = D
    b = kb(r | 0, b | 0, 25) | 0
    b = gb(m | 0, p | 0, b | 0, D | 0) | 0
    p = hb(o | 0, n | 0, 33554432, 0) | 0
    p = fb(p | 0, D | 0, 26) | 0
    m = D
    l = hb(q | 0, l | 0, p | 0, m | 0) | 0
    m = kb(p | 0, m | 0, 26) | 0
    m = gb(o | 0, n | 0, m | 0, D | 0) | 0
    ga(a | 0, m | 0, 4, 0)
    ga(a + 4 | 0, l | 0, 4, 0)
    ga(a + 8 | 0, k | 0, 4, 0)
    ga(a + 12 | 0, j | 0, 4, 0)
    ga(a + 16 | 0, h | 0, 4, 0)
    ga(a + 20 | 0, g | 0, 4, 0)
    ga(a + 24 | 0, f | 0, 4, 0)
    ga(a + 28 | 0, e | 0, 4, 0)
    ga(a + 32 | 0, c | 0, 4, 0)
    ga(a + 36 | 0, b | 0, 4, 0)
    i = d
  }

  function za (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0
    c = i
    i = i + 608 | 0
    g = c + 480 | 0
    e = c + 320 | 0
    m = c + 160 | 0
    d = c
    Aa(a, b)
    q = fa(b + 4 | 0, 4, 0, 0) | 0 | 0
    p = fa(b + 8 | 0, 4, 0, 0) | 0 | 0
    o = fa(b + 12 | 0, 4, 0, 0) | 0 | 0
    n = fa(b + 16 | 0, 4, 0, 0) | 0 | 0
    l = fa(b + 20 | 0, 4, 0, 0) | 0 | 0
    f = fa(b + 24 | 0, 4, 0, 0) | 0 | 0
    j = fa(b + 28 | 0, 4, 0, 0) | 0 | 0
    k = fa(b + 32 | 0, 4, 0, 0) | 0 | 0
    h = fa(b + 36 | 0, 4, 0, 0) | 0 | 0
    ga(g | 0, fa(b | 0, 4, 0, 0) | 0 | 0, 4, 0)
    ga(g + 4 | 0, q | 0, 4, 0)
    ga(g + 8 | 0, p | 0, 4, 0)
    ga(g + 12 | 0, o | 0, 4, 0)
    ga(g + 16 | 0, n | 0, 4, 0)
    ga(g + 20 | 0, l | 0, 4, 0)
    ga(g + 24 | 0, f | 0, 4, 0)
    ga(g + 28 | 0, j | 0, 4, 0)
    ga(g + 32 | 0, k | 0, 4, 0)
    ga(g + 36 | 0, h | 0, 4, 0)
    h = fa(b + 44 | 0, 4, 0, 0) | 0 | 0
    k = fa(b + 48 | 0, 4, 0, 0) | 0 | 0
    j = fa(b + 52 | 0, 4, 0, 0) | 0 | 0
    f = fa(b + 56 | 0, 4, 0, 0) | 0 | 0
    l = fa(b + 60 | 0, 4, 0, 0) | 0 | 0
    n = fa(b + 64 | 0, 4, 0, 0) | 0 | 0
    o = fa(b + 68 | 0, 4, 0, 0) | 0 | 0
    p = fa(b + 72 | 0, 4, 0, 0) | 0 | 0
    q = fa(b + 76 | 0, 4, 0, 0) | 0 | 0
    ga(g + 40 | 0, fa(b + 40 | 0, 4, 0, 0) | 0 | 0, 4, 0)
    ga(g + 44 | 0, h | 0, 4, 0)
    ga(g + 48 | 0, k | 0, 4, 0)
    ga(g + 52 | 0, j | 0, 4, 0)
    ga(g + 56 | 0, f | 0, 4, 0)
    ga(g + 60 | 0, l | 0, 4, 0)
    ga(g + 64 | 0, n | 0, 4, 0)
    ga(g + 68 | 0, o | 0, 4, 0)
    ga(g + 72 | 0, p | 0, 4, 0)
    ga(g + 76 | 0, q | 0, 4, 0)
    q = fa(b + 84 | 0, 4, 0, 0) | 0 | 0
    p = fa(b + 88 | 0, 4, 0, 0) | 0 | 0
    o = fa(b + 92 | 0, 4, 0, 0) | 0 | 0
    n = fa(b + 96 | 0, 4, 0, 0) | 0 | 0
    l = fa(b + 100 | 0, 4, 0, 0) | 0 | 0
    f = fa(b + 104 | 0, 4, 0, 0) | 0 | 0
    j = fa(b + 108 | 0, 4, 0, 0) | 0 | 0
    k = fa(b + 112 | 0, 4, 0, 0) | 0 | 0
    h = fa(b + 116 | 0, 4, 0, 0) | 0 | 0
    ga(g + 80 | 0, fa(b + 80 | 0, 4, 0, 0) | 0 | 0, 4, 0)
    ga(g + 84 | 0, q | 0, 4, 0)
    ga(g + 88 | 0, p | 0, 4, 0)
    ga(g + 92 | 0, o | 0, 4, 0)
    ga(g + 96 | 0, n | 0, 4, 0)
    ga(g + 100 | 0, l | 0, 4, 0)
    ga(g + 104 | 0, f | 0, 4, 0)
    ga(g + 108 | 0, j | 0, 4, 0)
    ga(g + 112 | 0, k | 0, 4, 0)
    ga(g + 116 | 0, h | 0, 4, 0)
    Ea(e, g)
    g = e + 120 | 0
    ya(m, e, g)
    b = e + 40 | 0
    h = e + 80 | 0
    ya(m + 40 | 0, b, h)
    ya(m + 80 | 0, h, g)
    ya(m + 120 | 0, e, b)
    xa(e, m, a)
    ya(d, e, g)
    k = d + 40 | 0
    ya(k, b, h)
    j = d + 80 | 0
    ya(j, h, g)
    f = d + 120 | 0
    ya(f, e, b)
    l = a + 160 | 0
    Aa(l, d)
    xa(e, m, l)
    ya(d, e, g)
    ya(k, b, h)
    ya(j, h, g)
    ya(f, e, b)
    l = a + 320 | 0
    Aa(l, d)
    xa(e, m, l)
    ya(d, e, g)
    ya(k, b, h)
    ya(j, h, g)
    ya(f, e, b)
    l = a + 480 | 0
    Aa(l, d)
    xa(e, m, l)
    ya(d, e, g)
    ya(k, b, h)
    ya(j, h, g)
    ya(f, e, b)
    l = a + 640 | 0
    Aa(l, d)
    xa(e, m, l)
    ya(d, e, g)
    ya(k, b, h)
    ya(j, h, g)
    ya(f, e, b)
    l = a + 800 | 0
    Aa(l, d)
    xa(e, m, l)
    ya(d, e, g)
    ya(k, b, h)
    ya(j, h, g)
    ya(f, e, b)
    l = a + 960 | 0
    Aa(l, d)
    xa(e, m, l)
    ya(d, e, g)
    ya(k, b, h)
    ya(j, h, g)
    ya(f, e, b)
    Aa(a + 1120 | 0, d)
    i = c
  }

  function Aa (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var D = 0

    var E = 0

    var F = 0
    c = i
    n = b + 40 | 0
    w = b + 44 | 0
    v = b + 48 | 0
    u = b + 52 | 0
    t = b + 56 | 0
    s = b + 60 | 0
    r = b + 64 | 0
    q = b + 68 | 0
    p = b + 72 | 0
    o = b + 76 | 0
    d = b + 4 | 0
    e = b + 8 | 0
    f = b + 12 | 0
    g = b + 16 | 0
    h = b + 20 | 0
    j = b + 24 | 0
    k = b + 28 | 0
    l = b + 32 | 0
    m = b + 36 | 0
    F = (fa(d | 0, 4, 0, 0) | 0 | 0) + (fa(w | 0, 4, 0, 0) | 0 | 0) | 0
    E = (fa(e | 0, 4, 0, 0) | 0 | 0) + (fa(v | 0, 4, 0, 0) | 0 | 0) | 0
    D = (fa(f | 0, 4, 0, 0) | 0 | 0) + (fa(u | 0, 4, 0, 0) | 0 | 0) | 0
    C = (fa(g | 0, 4, 0, 0) | 0 | 0) + (fa(t | 0, 4, 0, 0) | 0 | 0) | 0
    B = (fa(h | 0, 4, 0, 0) | 0 | 0) + (fa(s | 0, 4, 0, 0) | 0 | 0) | 0
    A = (fa(j | 0, 4, 0, 0) | 0 | 0) + (fa(r | 0, 4, 0, 0) | 0 | 0) | 0
    z = (fa(k | 0, 4, 0, 0) | 0 | 0) + (fa(q | 0, 4, 0, 0) | 0 | 0) | 0
    y = (fa(l | 0, 4, 0, 0) | 0 | 0) + (fa(p | 0, 4, 0, 0) | 0 | 0) | 0
    x = (fa(m | 0, 4, 0, 0) | 0 | 0) + (fa(o | 0, 4, 0, 0) | 0 | 0) | 0
    ga(a | 0, (fa(b | 0, 4, 0, 0) | 0 | 0) + (fa(n | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
    ga(a + 4 | 0, F | 0, 4, 0)
    ga(a + 8 | 0, E | 0, 4, 0)
    ga(a + 12 | 0, D | 0, 4, 0)
    ga(a + 16 | 0, C | 0, 4, 0)
    ga(a + 20 | 0, B | 0, 4, 0)
    ga(a + 24 | 0, A | 0, 4, 0)
    ga(a + 28 | 0, z | 0, 4, 0)
    ga(a + 32 | 0, y | 0, 4, 0)
    ga(a + 36 | 0, x | 0, 4, 0)
    d = (fa(w | 0, 4, 0, 0) | 0 | 0) - (fa(d | 0, 4, 0, 0) | 0 | 0) | 0
    e = (fa(v | 0, 4, 0, 0) | 0 | 0) - (fa(e | 0, 4, 0, 0) | 0 | 0) | 0
    f = (fa(u | 0, 4, 0, 0) | 0 | 0) - (fa(f | 0, 4, 0, 0) | 0 | 0) | 0
    g = (fa(t | 0, 4, 0, 0) | 0 | 0) - (fa(g | 0, 4, 0, 0) | 0 | 0) | 0
    h = (fa(s | 0, 4, 0, 0) | 0 | 0) - (fa(h | 0, 4, 0, 0) | 0 | 0) | 0
    j = (fa(r | 0, 4, 0, 0) | 0 | 0) - (fa(j | 0, 4, 0, 0) | 0 | 0) | 0
    k = (fa(q | 0, 4, 0, 0) | 0 | 0) - (fa(k | 0, 4, 0, 0) | 0 | 0) | 0
    l = (fa(p | 0, 4, 0, 0) | 0 | 0) - (fa(l | 0, 4, 0, 0) | 0 | 0) | 0
    m = (fa(o | 0, 4, 0, 0) | 0 | 0) - (fa(m | 0, 4, 0, 0) | 0 | 0) | 0
    ga(a + 40 | 0, (fa(n | 0, 4, 0, 0) | 0 | 0) - (fa(b | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
    ga(a + 44 | 0, d | 0, 4, 0)
    ga(a + 48 | 0, e | 0, 4, 0)
    ga(a + 52 | 0, f | 0, 4, 0)
    ga(a + 56 | 0, g | 0, 4, 0)
    ga(a + 60 | 0, h | 0, 4, 0)
    ga(a + 64 | 0, j | 0, 4, 0)
    ga(a + 68 | 0, k | 0, 4, 0)
    ga(a + 72 | 0, l | 0, 4, 0)
    ga(a + 76 | 0, m | 0, 4, 0)
    m = fa(b + 84 | 0, 4, 0, 0) | 0 | 0
    l = fa(b + 88 | 0, 4, 0, 0) | 0 | 0
    k = fa(b + 92 | 0, 4, 0, 0) | 0 | 0
    j = fa(b + 96 | 0, 4, 0, 0) | 0 | 0
    h = fa(b + 100 | 0, 4, 0, 0) | 0 | 0
    g = fa(b + 104 | 0, 4, 0, 0) | 0 | 0
    f = fa(b + 108 | 0, 4, 0, 0) | 0 | 0
    e = fa(b + 112 | 0, 4, 0, 0) | 0 | 0
    d = fa(b + 116 | 0, 4, 0, 0) | 0 | 0
    ga(a + 80 | 0, fa(b + 80 | 0, 4, 0, 0) | 0 | 0, 4, 0)
    ga(a + 84 | 0, m | 0, 4, 0)
    ga(a + 88 | 0, l | 0, 4, 0)
    ga(a + 92 | 0, k | 0, 4, 0)
    ga(a + 96 | 0, j | 0, 4, 0)
    ga(a + 100 | 0, h | 0, 4, 0)
    ga(a + 104 | 0, g | 0, 4, 0)
    ga(a + 108 | 0, f | 0, 4, 0)
    ga(a + 112 | 0, e | 0, 4, 0)
    ga(a + 116 | 0, d | 0, 4, 0)
    ya(a + 120 | 0, b + 120 | 0, 320)
    i = c
  }

  function Ba (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0

    var f = 0
    c = i
    e = b + 120 | 0
    ya(a, b, e)
    d = b + 40 | 0
    f = b + 80 | 0
    ya(a + 40 | 0, d, f)
    ya(a + 80 | 0, f, e)
    ya(a + 120 | 0, b, d)
    i = c
  }

  function Ca (a, b, c, d) {
    a = a | 0
    b = b | 0
    c = c | 0
    d = d | 0
    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var D = 0

    var E = 0

    var F = 0

    var G = 0

    var H = 0

    var I = 0

    var J = 0

    var K = 0

    var L = 0

    var M = 0

    var N = 0

    var O = 0

    var P = 0

    var Q = 0

    var R = 0

    var S = 0

    var T = 0

    var U = 0

    var V = 0

    var W = 0

    var X = 0

    var Y = 0

    var Z = 0

    var _ = 0

    var $ = 0

    var aa = 0

    var ba = 0

    var ca = 0

    var da = 0

    var ea = 0

    var ha = 0

    var ia = 0

    var ja = 0

    var ka = 0

    var la = 0

    var ma = 0

    var na = 0

    var oa = 0

    var pa = 0

    var qa = 0

    var ra = 0

    var sa = 0

    var ta = 0

    var ua = 0

    var va = 0

    var wa = 0

    var Aa = 0

    var Ba = 0

    var Ca = 0

    var Ha = 0

    var Ia = 0

    var Ja = 0

    var Ka = 0

    var La = 0

    var Ma = 0

    var Na = 0

    var Oa = 0

    var Pa = 0

    var Qa = 0

    var Ra = 0

    var Sa = 0

    var Ta = 0

    var Ua = 0

    var Va = 0

    var Wa = 0

    var Xa = 0

    var Ya = 0

    var Za = 0

    var _a = 0

    var $a = 0

    var ab = 0

    var bb = 0

    var cb = 0

    var db = 0

    var eb = 0

    var fb = 0

    var gb = 0

    var hb = 0

    var ib = 0

    var jb = 0

    var kb = 0
    g = i
    i = i + 2112 | 0
    e = g + 1856 | 0
    f = g + 1600 | 0
    k = g + 320 | 0
    h = g + 160 | 0
    j = g
    Da(e, b)
    Da(f, d)
    za(k, c)
    l = a + 0 | 0
    b = l + 40 | 0
    do {
      ga(l | 0, 0 | 0, 4, 0)
      l = l + 4 | 0
    } while ((l | 0) < (b | 0))
    c = a + 40 | 0
    ga(c | 0, 1 | 0, 4, 0)
    l = a + 44 | 0
    b = l + 36 | 0
    do {
      ga(l | 0, 0 | 0, 4, 0)
      l = l + 4 | 0
    } while ((l | 0) < (b | 0))
    d = a + 80 | 0
    ga(d | 0, 1 | 0, 4, 0)
    l = a + 84 | 0
    b = l + 36 | 0
    do {
      ga(l | 0, 0 | 0, 4, 0)
      l = l + 4 | 0
    } while ((l | 0) < (b | 0))
    Ia = 255
    while (1) {
      if ((fa(e + Ia >> 0 | 0, 1, 0, 0) | 0 | 0) !== 0) {
        break
      }
      b = Ia + -1 | 0
      if ((fa(f + Ia >> 0 | 0, 1, 0, 0) | 0 | 0) !== 0) {
        break
      }
      if ((Ia | 0) > 0) {
        Ia = b
      } else {
        Ia = b
        break
      }
    }
    if (!((Ia | 0) > -1)) {
      i = g
      return
    }
    t = h + 120 | 0
    w = j + 40 | 0
    u = h + 40 | 0
    v = h + 80 | 0
    x = j + 80 | 0
    y = j + 120 | 0
    z = j + 44 | 0
    A = j + 48 | 0
    B = j + 52 | 0
    C = j + 56 | 0
    D = j + 60 | 0
    E = j + 64 | 0
    F = j + 68 | 0
    G = j + 72 | 0
    H = j + 76 | 0
    I = j + 4 | 0
    J = j + 8 | 0
    K = j + 12 | 0
    L = j + 16 | 0
    M = j + 20 | 0
    N = j + 24 | 0
    O = j + 28 | 0
    P = j + 32 | 0
    Q = j + 36 | 0
    R = h + 4 | 0
    S = h + 8 | 0
    n = h + 12 | 0
    U = h + 16 | 0
    V = h + 20 | 0
    W = h + 24 | 0
    X = h + 28 | 0
    Y = h + 32 | 0
    Z = h + 36 | 0
    _ = h + 44 | 0
    $ = h + 48 | 0
    aa = h + 52 | 0
    ba = h + 56 | 0
    ca = h + 60 | 0
    da = h + 64 | 0
    ea = h + 68 | 0
    ha = h + 72 | 0
    ia = h + 76 | 0
    ja = j + 84 | 0
    ka = j + 88 | 0
    la = j + 92 | 0
    ma = j + 96 | 0
    na = j + 100 | 0
    oa = j + 104 | 0
    pa = j + 108 | 0
    qa = j + 112 | 0
    ra = j + 116 | 0
    sa = h + 84 | 0
    ta = h + 88 | 0
    ua = h + 92 | 0
    va = h + 96 | 0
    wa = h + 100 | 0
    Aa = h + 104 | 0
    Ba = h + 108 | 0
    Ca = h + 112 | 0
    Ha = h + 116 | 0
    T = h + 124 | 0
    s = h + 128 | 0
    r = h + 132 | 0
    q = h + 136 | 0
    p = h + 140 | 0
    m = h + 144 | 0
    l = h + 148 | 0
    b = h + 152 | 0
    o = h + 156 | 0
    while (1) {
      Ea(h, a)
      Ja = fa(e + Ia >> 0 | 0, 1, 0, 0) | 0 | 0
      if (!(Ja << 24 >> 24 > 0)) {
        if (Ja << 24 >> 24 < 0) {
          ya(j, h, t)
          ya(w, u, v)
          ya(x, v, t)
          ya(y, h, u)
          Fa(h, j, k + (((Ja << 24 >> 24 | 0) / -2 | 0) * 160 | 0) | 0)
        }
      } else {
        ya(j, h, t)
        ya(w, u, v)
        ya(x, v, t)
        ya(y, h, u)
        xa(h, j, k + (((Ja << 24 >> 24 | 0) / 2 | 0) * 160 | 0) | 0)
      }
      Ja = fa(f + Ia >> 0 | 0, 1, 0, 0) | 0 | 0
      if (!(Ja << 24 >> 24 > 0)) {
        if (Ja << 24 >> 24 < 0) {
          ya(j, h, t)
          ya(w, u, v)
          ya(x, v, t)
          ya(y, h, u)
          $a = (Ja << 24 >> 24 | 0) / -2 | 0
          kb = fa(w | 0, 4, 0, 0) | 0 | 0
          Ya = fa(z | 0, 4, 0, 0) | 0 | 0
          Qa = fa(A | 0, 4, 0, 0) | 0 | 0
          bb = fa(B | 0, 4, 0, 0) | 0 | 0
          fb = fa(C | 0, 4, 0, 0) | 0 | 0
          jb = fa(D | 0, 4, 0, 0) | 0 | 0
          La = fa(E | 0, 4, 0, 0) | 0 | 0
          Pa = fa(F | 0, 4, 0, 0) | 0 | 0
          Ta = fa(G | 0, 4, 0, 0) | 0 | 0
          Xa = fa(H | 0, 4, 0, 0) | 0 | 0
          ab = fa(j | 0, 4, 0, 0) | 0 | 0
          Ua = fa(I | 0, 4, 0, 0) | 0 | 0
          Ma = fa(J | 0, 4, 0, 0) | 0 | 0
          db = fa(K | 0, 4, 0, 0) | 0 | 0
          hb = fa(L | 0, 4, 0, 0) | 0 | 0
          Ja = fa(M | 0, 4, 0, 0) | 0 | 0
          Na = fa(N | 0, 4, 0, 0) | 0 | 0
          Ra = fa(O | 0, 4, 0, 0) | 0 | 0
          Va = fa(P | 0, 4, 0, 0) | 0 | 0
          Za = fa(Q | 0, 4, 0, 0) | 0 | 0
          ga(h | 0, ab + kb | 0, 4, 0)
          ga(R | 0, Ua + Ya | 0, 4, 0)
          ga(S | 0, Ma + Qa | 0, 4, 0)
          ga(n | 0, db + bb | 0, 4, 0)
          ga(U | 0, hb + fb | 0, 4, 0)
          ga(V | 0, Ja + jb | 0, 4, 0)
          ga(W | 0, Na + La | 0, 4, 0)
          ga(X | 0, Ra + Pa | 0, 4, 0)
          ga(Y | 0, Va + Ta | 0, 4, 0)
          ga(Z | 0, Za + Xa | 0, 4, 0)
          ga(u | 0, kb - ab | 0, 4, 0)
          ga(_ | 0, Ya - Ua | 0, 4, 0)
          ga($ | 0, Qa - Ma | 0, 4, 0)
          ga(aa | 0, bb - db | 0, 4, 0)
          ga(ba | 0, fb - hb | 0, 4, 0)
          ga(ca | 0, jb - Ja | 0, 4, 0)
          ga(da | 0, La - Na | 0, 4, 0)
          ga(ea | 0, Pa - Ra | 0, 4, 0)
          ga(ha | 0, Ta - Va | 0, 4, 0)
          ga(ia | 0, Xa - Za | 0, 4, 0)
          ya(v, h, 31120 + ($a * 120 | 0) | 0)
          ya(u, u, 31080 + ($a * 120 | 0) | 0)
          ya(t, 31160 + ($a * 120 | 0) | 0, y)
          $a = (fa(x | 0, 4, 0, 0) | 0) << 1
          Za = (fa(ja | 0, 4, 0, 0) | 0) << 1
          Xa = (fa(ka | 0, 4, 0, 0) | 0) << 1
          Va = (fa(la | 0, 4, 0, 0) | 0) << 1
          Ta = (fa(ma | 0, 4, 0, 0) | 0) << 1
          Ra = (fa(na | 0, 4, 0, 0) | 0) << 1
          Pa = (fa(oa | 0, 4, 0, 0) | 0) << 1
          Na = (fa(pa | 0, 4, 0, 0) | 0) << 1
          La = (fa(qa | 0, 4, 0, 0) | 0) << 1
          Ja = (fa(ra | 0, 4, 0, 0) | 0) << 1
          jb = fa(v | 0, 4, 0, 0) | 0 | 0
          hb = fa(sa | 0, 4, 0, 0) | 0 | 0
          fb = fa(ta | 0, 4, 0, 0) | 0 | 0
          db = fa(ua | 0, 4, 0, 0) | 0 | 0
          bb = fa(va | 0, 4, 0, 0) | 0 | 0
          Ma = fa(wa | 0, 4, 0, 0) | 0 | 0
          Qa = fa(Aa | 0, 4, 0, 0) | 0 | 0
          Ua = fa(Ba | 0, 4, 0, 0) | 0 | 0
          Ya = fa(Ca | 0, 4, 0, 0) | 0 | 0
          ab = fa(Ha | 0, 4, 0, 0) | 0 | 0
          kb = fa(u | 0, 4, 0, 0) | 0 | 0
          ib = fa(_ | 0, 4, 0, 0) | 0 | 0
          gb = fa($ | 0, 4, 0, 0) | 0 | 0
          eb = fa(aa | 0, 4, 0, 0) | 0 | 0
          cb = fa(ba | 0, 4, 0, 0) | 0 | 0
          Ka = fa(ca | 0, 4, 0, 0) | 0 | 0
          Oa = fa(da | 0, 4, 0, 0) | 0 | 0
          Sa = fa(ea | 0, 4, 0, 0) | 0 | 0
          Wa = fa(ha | 0, 4, 0, 0) | 0 | 0
          _a = fa(ia | 0, 4, 0, 0) | 0 | 0
          ga(h | 0, jb - kb | 0, 4, 0)
          ga(R | 0, hb - ib | 0, 4, 0)
          ga(S | 0, fb - gb | 0, 4, 0)
          ga(n | 0, db - eb | 0, 4, 0)
          ga(U | 0, bb - cb | 0, 4, 0)
          ga(V | 0, Ma - Ka | 0, 4, 0)
          ga(W | 0, Qa - Oa | 0, 4, 0)
          ga(X | 0, Ua - Sa | 0, 4, 0)
          ga(Y | 0, Ya - Wa | 0, 4, 0)
          ga(Z | 0, ab - _a | 0, 4, 0)
          ga(u | 0, kb + jb | 0, 4, 0)
          ga(_ | 0, ib + hb | 0, 4, 0)
          ga($ | 0, gb + fb | 0, 4, 0)
          ga(aa | 0, eb + db | 0, 4, 0)
          ga(ba | 0, cb + bb | 0, 4, 0)
          ga(ca | 0, Ka + Ma | 0, 4, 0)
          ga(da | 0, Oa + Qa | 0, 4, 0)
          ga(ea | 0, Sa + Ua | 0, 4, 0)
          ga(ha | 0, Wa + Ya | 0, 4, 0)
          ga(ia | 0, _a + ab | 0, 4, 0)
          ab = fa(t | 0, 4, 0, 0) | 0 | 0
          _a = fa(T | 0, 4, 0, 0) | 0 | 0
          Ya = fa(s | 0, 4, 0, 0) | 0 | 0
          Wa = fa(r | 0, 4, 0, 0) | 0 | 0
          Ua = fa(q | 0, 4, 0, 0) | 0 | 0
          Sa = fa(p | 0, 4, 0, 0) | 0 | 0
          Qa = fa(m | 0, 4, 0, 0) | 0 | 0
          Oa = fa(l | 0, 4, 0, 0) | 0 | 0
          Ma = fa(b | 0, 4, 0, 0) | 0 | 0
          Ka = fa(o | 0, 4, 0, 0) | 0 | 0
          ga(v | 0, $a - ab | 0, 4, 0)
          ga(sa | 0, Za - _a | 0, 4, 0)
          ga(ta | 0, Xa - Ya | 0, 4, 0)
          ga(ua | 0, Va - Wa | 0, 4, 0)
          ga(va | 0, Ta - Ua | 0, 4, 0)
          ga(wa | 0, Ra - Sa | 0, 4, 0)
          ga(Aa | 0, Pa - Qa | 0, 4, 0)
          ga(Ba | 0, Na - Oa | 0, 4, 0)
          ga(Ca | 0, La - Ma | 0, 4, 0)
          ga(Ha | 0, Ja - Ka | 0, 4, 0)
          ga(t | 0, ab + $a | 0, 4, 0)
          ga(T | 0, _a + Za | 0, 4, 0)
          ga(s | 0, Ya + Xa | 0, 4, 0)
          ga(r | 0, Wa + Va | 0, 4, 0)
          ga(q | 0, Ua + Ta | 0, 4, 0)
          ga(p | 0, Sa + Ra | 0, 4, 0)
          ga(m | 0, Qa + Pa | 0, 4, 0)
          ga(l | 0, Oa + Na | 0, 4, 0)
          ga(b | 0, Ma + La | 0, 4, 0)
          ga(o | 0, Ka + Ja | 0, 4, 0)
        }
      } else {
        ya(j, h, t)
        ya(w, u, v)
        ya(x, v, t)
        ya(y, h, u)
        Ga(h, j, 31080 + (((Ja << 24 >> 24 | 0) / 2 | 0) * 120 | 0) | 0)
      }
      ya(a, h, t)
      ya(c, u, v)
      ya(d, v, t)
      if ((Ia | 0) > 0) {
        Ia = Ia + -1 | 0
      } else {
        break
      }
    }
    i = g
  }

  function Da (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0
    c = i
    d = 0
    do {
      ga(a + d >> 0 | 0, (fa(b + (d >> 3) >> 0 | 0, 1, 0, 1) | 0 | 0) >>> (d & 7) & 1 | 0, 1, 0)
      d = d + 1 | 0
    } while ((d | 0) !== 256)
    b = 0
    do {
      d = a + b | 0
      a: do {
        if ((fa(d >> 0 | 0, 1, 0, 0) | 0 | 0) !== 0) {
          e = 1
          do {
            f = e + b | 0
            if ((f | 0) >= 256) {
              break a
            }
            h = a + f | 0
            j = fa(h >> 0 | 0, 1, 0, 0) | 0 | 0
            b: do {
              if (!(j << 24 >> 24 === 0)) {
                g = fa(d >> 0 | 0, 1, 0, 0) | 0 | 0
                k = j << 24 >> 24 << e
                j = g + k | 0
                if ((j | 0) < 16) {
                  ga(d >> 0 | 0, j | 0, 1, 0)
                  ga(h >> 0 | 0, 0 | 0, 1, 0)
                  break
                }
                g = g - k | 0
                if (!((g | 0) > -16)) {
                  break a
                }
                ga(d >> 0 | 0, g | 0, 1, 0)
                while (1) {
                  g = a + f | 0
                  if ((fa(g >> 0 | 0, 1, 0, 0) | 0 | 0) === 0) {
                    break
                  }
                  ga(g >> 0 | 0, 0 | 0, 1, 0)
                  f = f + 1 | 0
                  if ((f | 0) >= 256) {
                    break b
                  }
                }
                ga(g >> 0 | 0, 1 | 0, 1, 0)
              }
            } while (0)
            e = e + 1 | 0
          } while ((e | 0) < 7)
        }
      } while (0)
      b = b + 1 | 0
    } while ((b | 0) !== 256)
    i = c
  }

  function Ea (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var D = 0

    var E = 0

    var F = 0

    var G = 0

    var H = 0

    var I = 0

    var J = 0

    var K = 0

    var L = 0

    var M = 0

    var N = 0

    var O = 0

    var P = 0

    var Q = 0

    var R = 0

    var S = 0

    var T = 0

    var U = 0

    var V = 0

    var W = 0

    var X = 0

    var Y = 0

    var Z = 0

    var _ = 0

    var $ = 0

    var aa = 0

    var ba = 0

    var ca = 0

    var da = 0

    var ea = 0

    var ha = 0

    var ia = 0

    var ja = 0

    var ka = 0

    var la = 0
    c = i
    i = i + 48 | 0
    H = c
    Ja(a, b)
    R = a + 80 | 0
    ka = b + 40 | 0
    Ja(R, ka)
    v = a + 120 | 0
    La(v, b + 80 | 0)
    la = a + 40 | 0
    ja = (fa(b + 44 | 0, 4, 0, 0) | 0 | 0) + (fa(b + 4 | 0, 4, 0, 0) | 0 | 0) | 0
    ia = (fa(b + 48 | 0, 4, 0, 0) | 0 | 0) + (fa(b + 8 | 0, 4, 0, 0) | 0 | 0) | 0
    ha = (fa(b + 52 | 0, 4, 0, 0) | 0 | 0) + (fa(b + 12 | 0, 4, 0, 0) | 0 | 0) | 0
    ea = (fa(b + 56 | 0, 4, 0, 0) | 0 | 0) + (fa(b + 16 | 0, 4, 0, 0) | 0 | 0) | 0
    da = (fa(b + 60 | 0, 4, 0, 0) | 0 | 0) + (fa(b + 20 | 0, 4, 0, 0) | 0 | 0) | 0
    ca = (fa(b + 64 | 0, 4, 0, 0) | 0 | 0) + (fa(b + 24 | 0, 4, 0, 0) | 0 | 0) | 0
    ba = (fa(b + 68 | 0, 4, 0, 0) | 0 | 0) + (fa(b + 28 | 0, 4, 0, 0) | 0 | 0) | 0
    aa = (fa(b + 72 | 0, 4, 0, 0) | 0 | 0) + (fa(b + 32 | 0, 4, 0, 0) | 0 | 0) | 0
    $ = (fa(b + 76 | 0, 4, 0, 0) | 0 | 0) + (fa(b + 36 | 0, 4, 0, 0) | 0 | 0) | 0
    ga(la | 0, (fa(ka | 0, 4, 0, 0) | 0 | 0) + (fa(b | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
    ka = a + 44 | 0
    ga(ka | 0, ja | 0, 4, 0)
    ja = a + 48 | 0
    ga(ja | 0, ia | 0, 4, 0)
    ia = a + 52 | 0
    ga(ia | 0, ha | 0, 4, 0)
    ha = a + 56 | 0
    ga(ha | 0, ea | 0, 4, 0)
    ea = a + 60 | 0
    ga(ea | 0, da | 0, 4, 0)
    da = a + 64 | 0
    ga(da | 0, ca | 0, 4, 0)
    ca = a + 68 | 0
    ga(ca | 0, ba | 0, 4, 0)
    ba = a + 72 | 0
    ga(ba | 0, aa | 0, 4, 0)
    aa = a + 76 | 0
    ga(aa | 0, $ | 0, 4, 0)
    Ja(H, la)
    $ = fa(R | 0, 4, 0, 0) | 0 | 0
    Q = a + 84 | 0
    _ = fa(Q | 0, 4, 0, 0) | 0 | 0
    P = a + 88 | 0
    Z = fa(P | 0, 4, 0, 0) | 0 | 0
    O = a + 92 | 0
    Y = fa(O | 0, 4, 0, 0) | 0 | 0
    N = a + 96 | 0
    X = fa(N | 0, 4, 0, 0) | 0 | 0
    M = a + 100 | 0
    W = fa(M | 0, 4, 0, 0) | 0 | 0
    L = a + 104 | 0
    V = fa(L | 0, 4, 0, 0) | 0 | 0
    K = a + 108 | 0
    U = fa(K | 0, 4, 0, 0) | 0 | 0
    J = a + 112 | 0
    T = fa(J | 0, 4, 0, 0) | 0 | 0
    I = a + 116 | 0
    S = fa(I | 0, 4, 0, 0) | 0 | 0
    u = fa(a | 0, 4, 0, 0) | 0 | 0
    F = a + 4 | 0
    s = fa(F | 0, 4, 0, 0) | 0 | 0
    D = a + 8 | 0
    q = fa(D | 0, 4, 0, 0) | 0 | 0
    B = a + 12 | 0
    o = fa(B | 0, 4, 0, 0) | 0 | 0
    z = a + 16 | 0
    m = fa(z | 0, 4, 0, 0) | 0 | 0
    x = a + 20 | 0
    k = fa(x | 0, 4, 0, 0) | 0 | 0
    e = a + 24 | 0
    h = fa(e | 0, 4, 0, 0) | 0 | 0
    j = a + 28 | 0
    f = fa(j | 0, 4, 0, 0) | 0 | 0
    n = a + 32 | 0
    d = fa(n | 0, 4, 0, 0) | 0 | 0
    r = a + 36 | 0
    b = fa(r | 0, 4, 0, 0) | 0 | 0
    G = u + $ | 0
    E = s + _ | 0
    C = q + Z | 0
    A = o + Y | 0
    y = m + X | 0
    w = k + W | 0
    g = h + V | 0
    l = f + U | 0
    p = d + T | 0
    t = b + S | 0
    ga(la | 0, G | 0, 4, 0)
    ga(ka | 0, E | 0, 4, 0)
    ga(ja | 0, C | 0, 4, 0)
    ga(ia | 0, A | 0, 4, 0)
    ga(ha | 0, y | 0, 4, 0)
    ga(ea | 0, w | 0, 4, 0)
    ga(da | 0, g | 0, 4, 0)
    ga(ca | 0, l | 0, 4, 0)
    ga(ba | 0, p | 0, 4, 0)
    ga(aa | 0, t | 0, 4, 0)
    u = $ - u | 0
    s = _ - s | 0
    q = Z - q | 0
    o = Y - o | 0
    m = X - m | 0
    k = W - k | 0
    h = V - h | 0
    f = U - f | 0
    d = T - d | 0
    b = S - b | 0
    ga(R | 0, u | 0, 4, 0)
    ga(Q | 0, s | 0, 4, 0)
    ga(P | 0, q | 0, 4, 0)
    ga(O | 0, o | 0, 4, 0)
    ga(N | 0, m | 0, 4, 0)
    ga(M | 0, k | 0, 4, 0)
    ga(L | 0, h | 0, 4, 0)
    ga(K | 0, f | 0, 4, 0)
    ga(J | 0, d | 0, 4, 0)
    ga(I | 0, b | 0, 4, 0)
    E = (fa(H + 4 | 0, 4, 0, 0) | 0 | 0) - E | 0
    C = (fa(H + 8 | 0, 4, 0, 0) | 0 | 0) - C | 0
    A = (fa(H + 12 | 0, 4, 0, 0) | 0 | 0) - A | 0
    y = (fa(H + 16 | 0, 4, 0, 0) | 0 | 0) - y | 0
    w = (fa(H + 20 | 0, 4, 0, 0) | 0 | 0) - w | 0
    g = (fa(H + 24 | 0, 4, 0, 0) | 0 | 0) - g | 0
    l = (fa(H + 28 | 0, 4, 0, 0) | 0 | 0) - l | 0
    p = (fa(H + 32 | 0, 4, 0, 0) | 0 | 0) - p | 0
    t = (fa(H + 36 | 0, 4, 0, 0) | 0 | 0) - t | 0
    ga(a | 0, (fa(H | 0, 4, 0, 0) | 0 | 0) - G | 0, 4, 0)
    ga(F | 0, E | 0, 4, 0)
    ga(D | 0, C | 0, 4, 0)
    ga(B | 0, A | 0, 4, 0)
    ga(z | 0, y | 0, 4, 0)
    ga(x | 0, w | 0, 4, 0)
    ga(e | 0, g | 0, 4, 0)
    ga(j | 0, l | 0, 4, 0)
    ga(n | 0, p | 0, 4, 0)
    ga(r | 0, t | 0, 4, 0)
    t = a + 124 | 0
    r = a + 128 | 0
    p = a + 132 | 0
    n = a + 136 | 0
    l = a + 140 | 0
    j = a + 144 | 0
    g = a + 148 | 0
    e = a + 152 | 0
    a = a + 156 | 0
    s = (fa(t | 0, 4, 0, 0) | 0 | 0) - s | 0
    q = (fa(r | 0, 4, 0, 0) | 0 | 0) - q | 0
    o = (fa(p | 0, 4, 0, 0) | 0 | 0) - o | 0
    m = (fa(n | 0, 4, 0, 0) | 0 | 0) - m | 0
    k = (fa(l | 0, 4, 0, 0) | 0 | 0) - k | 0
    h = (fa(j | 0, 4, 0, 0) | 0 | 0) - h | 0
    f = (fa(g | 0, 4, 0, 0) | 0 | 0) - f | 0
    d = (fa(e | 0, 4, 0, 0) | 0 | 0) - d | 0
    b = (fa(a | 0, 4, 0, 0) | 0 | 0) - b | 0
    ga(v | 0, (fa(v | 0, 4, 0, 0) | 0 | 0) - u | 0, 4, 0)
    ga(t | 0, s | 0, 4, 0)
    ga(r | 0, q | 0, 4, 0)
    ga(p | 0, o | 0, 4, 0)
    ga(n | 0, m | 0, 4, 0)
    ga(l | 0, k | 0, 4, 0)
    ga(j | 0, h | 0, 4, 0)
    ga(g | 0, f | 0, 4, 0)
    ga(e | 0, d | 0, 4, 0)
    ga(a | 0, b | 0, 4, 0)
    i = c
  }

  function Fa (a, b, c) {
    a = a | 0
    b = b | 0
    c = c | 0
    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var D = 0

    var E = 0

    var F = 0

    var G = 0

    var H = 0

    var I = 0

    var J = 0

    var K = 0

    var L = 0

    var M = 0

    var N = 0

    var O = 0

    var P = 0

    var Q = 0

    var R = 0

    var S = 0

    var T = 0

    var U = 0

    var V = 0

    var W = 0

    var X = 0

    var Y = 0

    var Z = 0

    var _ = 0

    var $ = 0

    var aa = 0

    var ba = 0

    var ca = 0

    var da = 0

    var ea = 0

    var ha = 0

    var ia = 0

    var ja = 0

    var ka = 0
    d = i
    Y = b + 40 | 0
    h = b + 44 | 0
    l = b + 48 | 0
    o = b + 52 | 0
    r = b + 56 | 0
    u = b + 60 | 0
    x = b + 64 | 0
    A = b + 68 | 0
    D = b + 72 | 0
    F = b + 76 | 0
    V = b + 4 | 0
    S = b + 8 | 0
    Q = b + 12 | 0
    j = b + 16 | 0
    n = b + 20 | 0
    s = b + 24 | 0
    w = b + 28 | 0
    B = b + 32 | 0
    P = b + 36 | 0
    ja = (fa(V | 0, 4, 0, 0) | 0 | 0) + (fa(h | 0, 4, 0, 0) | 0 | 0) | 0
    ia = (fa(S | 0, 4, 0, 0) | 0 | 0) + (fa(l | 0, 4, 0, 0) | 0 | 0) | 0
    ha = (fa(Q | 0, 4, 0, 0) | 0 | 0) + (fa(o | 0, 4, 0, 0) | 0 | 0) | 0
    ea = (fa(j | 0, 4, 0, 0) | 0 | 0) + (fa(r | 0, 4, 0, 0) | 0 | 0) | 0
    da = (fa(n | 0, 4, 0, 0) | 0 | 0) + (fa(u | 0, 4, 0, 0) | 0 | 0) | 0
    ca = (fa(s | 0, 4, 0, 0) | 0 | 0) + (fa(x | 0, 4, 0, 0) | 0 | 0) | 0
    ba = (fa(w | 0, 4, 0, 0) | 0 | 0) + (fa(A | 0, 4, 0, 0) | 0 | 0) | 0
    aa = (fa(B | 0, 4, 0, 0) | 0 | 0) + (fa(D | 0, 4, 0, 0) | 0 | 0) | 0
    $ = (fa(P | 0, 4, 0, 0) | 0 | 0) + (fa(F | 0, 4, 0, 0) | 0 | 0) | 0
    ga(a | 0, (fa(b | 0, 4, 0, 0) | 0 | 0) + (fa(Y | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
    ka = a + 4 | 0
    ga(ka | 0, ja | 0, 4, 0)
    ja = a + 8 | 0
    ga(ja | 0, ia | 0, 4, 0)
    ia = a + 12 | 0
    ga(ia | 0, ha | 0, 4, 0)
    ha = a + 16 | 0
    ga(ha | 0, ea | 0, 4, 0)
    ea = a + 20 | 0
    ga(ea | 0, da | 0, 4, 0)
    da = a + 24 | 0
    ga(da | 0, ca | 0, 4, 0)
    ca = a + 28 | 0
    ga(ca | 0, ba | 0, 4, 0)
    ba = a + 32 | 0
    ga(ba | 0, aa | 0, 4, 0)
    aa = a + 36 | 0
    ga(aa | 0, $ | 0, 4, 0)
    $ = a + 40 | 0
    V = (fa(h | 0, 4, 0, 0) | 0 | 0) - (fa(V | 0, 4, 0, 0) | 0 | 0) | 0
    S = (fa(l | 0, 4, 0, 0) | 0 | 0) - (fa(S | 0, 4, 0, 0) | 0 | 0) | 0
    Q = (fa(o | 0, 4, 0, 0) | 0 | 0) - (fa(Q | 0, 4, 0, 0) | 0 | 0) | 0
    j = (fa(r | 0, 4, 0, 0) | 0 | 0) - (fa(j | 0, 4, 0, 0) | 0 | 0) | 0
    n = (fa(u | 0, 4, 0, 0) | 0 | 0) - (fa(n | 0, 4, 0, 0) | 0 | 0) | 0
    s = (fa(x | 0, 4, 0, 0) | 0 | 0) - (fa(s | 0, 4, 0, 0) | 0 | 0) | 0
    w = (fa(A | 0, 4, 0, 0) | 0 | 0) - (fa(w | 0, 4, 0, 0) | 0 | 0) | 0
    B = (fa(D | 0, 4, 0, 0) | 0 | 0) - (fa(B | 0, 4, 0, 0) | 0 | 0) | 0
    P = (fa(F | 0, 4, 0, 0) | 0 | 0) - (fa(P | 0, 4, 0, 0) | 0 | 0) | 0
    ga($ | 0, (fa(Y | 0, 4, 0, 0) | 0 | 0) - (fa(b | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
    Y = a + 44 | 0
    ga(Y | 0, V | 0, 4, 0)
    V = a + 48 | 0
    ga(V | 0, S | 0, 4, 0)
    S = a + 52 | 0
    ga(S | 0, Q | 0, 4, 0)
    Q = a + 56 | 0
    ga(Q | 0, j | 0, 4, 0)
    j = a + 60 | 0
    ga(j | 0, n | 0, 4, 0)
    n = a + 64 | 0
    ga(n | 0, s | 0, 4, 0)
    s = a + 68 | 0
    ga(s | 0, w | 0, 4, 0)
    w = a + 72 | 0
    ga(w | 0, B | 0, 4, 0)
    B = a + 76 | 0
    ga(B | 0, P | 0, 4, 0)
    P = a + 80 | 0
    ya(P, a, c + 40 | 0)
    ya($, $, c)
    F = a + 120 | 0
    ya(F, c + 120 | 0, b + 120 | 0)
    ya(a, b + 80 | 0, c + 80 | 0)
    D = (fa(a | 0, 4, 0, 0) | 0) << 1
    A = (fa(ka | 0, 4, 0, 0) | 0) << 1
    x = (fa(ja | 0, 4, 0, 0) | 0) << 1
    u = (fa(ia | 0, 4, 0, 0) | 0) << 1
    r = (fa(ha | 0, 4, 0, 0) | 0) << 1
    o = (fa(ea | 0, 4, 0, 0) | 0) << 1
    l = (fa(da | 0, 4, 0, 0) | 0) << 1
    h = (fa(ca | 0, 4, 0, 0) | 0) << 1
    e = (fa(ba | 0, 4, 0, 0) | 0) << 1
    b = (fa(aa | 0, 4, 0, 0) | 0) << 1
    Z = fa(P | 0, 4, 0, 0) | 0 | 0
    O = a + 84 | 0
    W = fa(O | 0, 4, 0, 0) | 0 | 0
    N = a + 88 | 0
    T = fa(N | 0, 4, 0, 0) | 0 | 0
    M = a + 92 | 0
    c = fa(M | 0, 4, 0, 0) | 0 | 0
    L = a + 96 | 0
    g = fa(L | 0, 4, 0, 0) | 0 | 0
    K = a + 100 | 0
    m = fa(K | 0, 4, 0, 0) | 0 | 0
    J = a + 104 | 0
    q = fa(J | 0, 4, 0, 0) | 0 | 0
    I = a + 108 | 0
    v = fa(I | 0, 4, 0, 0) | 0 | 0
    H = a + 112 | 0
    z = fa(H | 0, 4, 0, 0) | 0 | 0
    G = a + 116 | 0
    E = fa(G | 0, 4, 0, 0) | 0 | 0
    _ = fa($ | 0, 4, 0, 0) | 0 | 0
    X = fa(Y | 0, 4, 0, 0) | 0 | 0
    U = fa(V | 0, 4, 0, 0) | 0 | 0
    R = fa(S | 0, 4, 0, 0) | 0 | 0
    f = fa(Q | 0, 4, 0, 0) | 0 | 0
    k = fa(j | 0, 4, 0, 0) | 0 | 0
    p = fa(n | 0, 4, 0, 0) | 0 | 0
    t = fa(s | 0, 4, 0, 0) | 0 | 0
    y = fa(w | 0, 4, 0, 0) | 0 | 0
    C = fa(B | 0, 4, 0, 0) | 0 | 0
    ga(a | 0, Z - _ | 0, 4, 0)
    ga(ka | 0, W - X | 0, 4, 0)
    ga(ja | 0, T - U | 0, 4, 0)
    ga(ia | 0, c - R | 0, 4, 0)
    ga(ha | 0, g - f | 0, 4, 0)
    ga(ea | 0, m - k | 0, 4, 0)
    ga(da | 0, q - p | 0, 4, 0)
    ga(ca | 0, v - t | 0, 4, 0)
    ga(ba | 0, z - y | 0, 4, 0)
    ga(aa | 0, E - C | 0, 4, 0)
    ga($ | 0, _ + Z | 0, 4, 0)
    ga(Y | 0, X + W | 0, 4, 0)
    ga(V | 0, U + T | 0, 4, 0)
    ga(S | 0, R + c | 0, 4, 0)
    ga(Q | 0, f + g | 0, 4, 0)
    ga(j | 0, k + m | 0, 4, 0)
    ga(n | 0, p + q | 0, 4, 0)
    ga(s | 0, t + v | 0, 4, 0)
    ga(w | 0, y + z | 0, 4, 0)
    ga(B | 0, C + E | 0, 4, 0)
    E = fa(F | 0, 4, 0, 0) | 0 | 0
    C = a + 124 | 0
    B = fa(C | 0, 4, 0, 0) | 0 | 0
    z = a + 128 | 0
    y = fa(z | 0, 4, 0, 0) | 0 | 0
    w = a + 132 | 0
    v = fa(w | 0, 4, 0, 0) | 0 | 0
    t = a + 136 | 0
    s = fa(t | 0, 4, 0, 0) | 0 | 0
    q = a + 140 | 0
    p = fa(q | 0, 4, 0, 0) | 0 | 0
    n = a + 144 | 0
    m = fa(n | 0, 4, 0, 0) | 0 | 0
    k = a + 148 | 0
    j = fa(k | 0, 4, 0, 0) | 0 | 0
    g = a + 152 | 0
    f = fa(g | 0, 4, 0, 0) | 0 | 0
    a = a + 156 | 0
    c = fa(a | 0, 4, 0, 0) | 0 | 0
    ga(P | 0, D - E | 0, 4, 0)
    ga(O | 0, A - B | 0, 4, 0)
    ga(N | 0, x - y | 0, 4, 0)
    ga(M | 0, u - v | 0, 4, 0)
    ga(L | 0, r - s | 0, 4, 0)
    ga(K | 0, o - p | 0, 4, 0)
    ga(J | 0, l - m | 0, 4, 0)
    ga(I | 0, h - j | 0, 4, 0)
    ga(H | 0, e - f | 0, 4, 0)
    ga(G | 0, b - c | 0, 4, 0)
    ga(F | 0, E + D | 0, 4, 0)
    ga(C | 0, B + A | 0, 4, 0)
    ga(z | 0, y + x | 0, 4, 0)
    ga(w | 0, v + u | 0, 4, 0)
    ga(t | 0, s + r | 0, 4, 0)
    ga(q | 0, p + o | 0, 4, 0)
    ga(n | 0, m + l | 0, 4, 0)
    ga(k | 0, j + h | 0, 4, 0)
    ga(g | 0, f + e | 0, 4, 0)
    ga(a | 0, c + b | 0, 4, 0)
    i = d
  }

  function Ga (a, b, c) {
    a = a | 0
    b = b | 0
    c = c | 0
    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var D = 0

    var E = 0

    var F = 0

    var G = 0

    var H = 0

    var I = 0

    var J = 0

    var K = 0

    var L = 0

    var M = 0

    var N = 0

    var O = 0

    var P = 0

    var Q = 0

    var R = 0

    var S = 0

    var T = 0

    var U = 0

    var V = 0

    var W = 0

    var X = 0

    var Y = 0

    var Z = 0

    var _ = 0

    var $ = 0

    var aa = 0

    var ba = 0

    var ca = 0

    var da = 0

    var ea = 0

    var ha = 0

    var ia = 0

    var ja = 0

    var ka = 0
    d = i
    Y = b + 40 | 0
    j = b + 44 | 0
    m = b + 48 | 0
    p = b + 52 | 0
    s = b + 56 | 0
    v = b + 60 | 0
    y = b + 64 | 0
    B = b + 68 | 0
    E = b + 72 | 0
    F = b + 76 | 0
    V = b + 4 | 0
    S = b + 8 | 0
    Q = b + 12 | 0
    h = b + 16 | 0
    n = b + 20 | 0
    r = b + 24 | 0
    w = b + 28 | 0
    A = b + 32 | 0
    P = b + 36 | 0
    ja = (fa(V | 0, 4, 0, 0) | 0 | 0) + (fa(j | 0, 4, 0, 0) | 0 | 0) | 0
    ia = (fa(S | 0, 4, 0, 0) | 0 | 0) + (fa(m | 0, 4, 0, 0) | 0 | 0) | 0
    ha = (fa(Q | 0, 4, 0, 0) | 0 | 0) + (fa(p | 0, 4, 0, 0) | 0 | 0) | 0
    ea = (fa(h | 0, 4, 0, 0) | 0 | 0) + (fa(s | 0, 4, 0, 0) | 0 | 0) | 0
    da = (fa(n | 0, 4, 0, 0) | 0 | 0) + (fa(v | 0, 4, 0, 0) | 0 | 0) | 0
    ca = (fa(r | 0, 4, 0, 0) | 0 | 0) + (fa(y | 0, 4, 0, 0) | 0 | 0) | 0
    ba = (fa(w | 0, 4, 0, 0) | 0 | 0) + (fa(B | 0, 4, 0, 0) | 0 | 0) | 0
    aa = (fa(A | 0, 4, 0, 0) | 0 | 0) + (fa(E | 0, 4, 0, 0) | 0 | 0) | 0
    $ = (fa(P | 0, 4, 0, 0) | 0 | 0) + (fa(F | 0, 4, 0, 0) | 0 | 0) | 0
    ga(a | 0, (fa(b | 0, 4, 0, 0) | 0 | 0) + (fa(Y | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
    ka = a + 4 | 0
    ga(ka | 0, ja | 0, 4, 0)
    ja = a + 8 | 0
    ga(ja | 0, ia | 0, 4, 0)
    ia = a + 12 | 0
    ga(ia | 0, ha | 0, 4, 0)
    ha = a + 16 | 0
    ga(ha | 0, ea | 0, 4, 0)
    ea = a + 20 | 0
    ga(ea | 0, da | 0, 4, 0)
    da = a + 24 | 0
    ga(da | 0, ca | 0, 4, 0)
    ca = a + 28 | 0
    ga(ca | 0, ba | 0, 4, 0)
    ba = a + 32 | 0
    ga(ba | 0, aa | 0, 4, 0)
    aa = a + 36 | 0
    ga(aa | 0, $ | 0, 4, 0)
    $ = a + 40 | 0
    V = (fa(j | 0, 4, 0, 0) | 0 | 0) - (fa(V | 0, 4, 0, 0) | 0 | 0) | 0
    S = (fa(m | 0, 4, 0, 0) | 0 | 0) - (fa(S | 0, 4, 0, 0) | 0 | 0) | 0
    Q = (fa(p | 0, 4, 0, 0) | 0 | 0) - (fa(Q | 0, 4, 0, 0) | 0 | 0) | 0
    h = (fa(s | 0, 4, 0, 0) | 0 | 0) - (fa(h | 0, 4, 0, 0) | 0 | 0) | 0
    n = (fa(v | 0, 4, 0, 0) | 0 | 0) - (fa(n | 0, 4, 0, 0) | 0 | 0) | 0
    r = (fa(y | 0, 4, 0, 0) | 0 | 0) - (fa(r | 0, 4, 0, 0) | 0 | 0) | 0
    w = (fa(B | 0, 4, 0, 0) | 0 | 0) - (fa(w | 0, 4, 0, 0) | 0 | 0) | 0
    A = (fa(E | 0, 4, 0, 0) | 0 | 0) - (fa(A | 0, 4, 0, 0) | 0 | 0) | 0
    P = (fa(F | 0, 4, 0, 0) | 0 | 0) - (fa(P | 0, 4, 0, 0) | 0 | 0) | 0
    ga($ | 0, (fa(Y | 0, 4, 0, 0) | 0 | 0) - (fa(b | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
    Y = a + 44 | 0
    ga(Y | 0, V | 0, 4, 0)
    V = a + 48 | 0
    ga(V | 0, S | 0, 4, 0)
    S = a + 52 | 0
    ga(S | 0, Q | 0, 4, 0)
    Q = a + 56 | 0
    ga(Q | 0, h | 0, 4, 0)
    h = a + 60 | 0
    ga(h | 0, n | 0, 4, 0)
    n = a + 64 | 0
    ga(n | 0, r | 0, 4, 0)
    r = a + 68 | 0
    ga(r | 0, w | 0, 4, 0)
    w = a + 72 | 0
    ga(w | 0, A | 0, 4, 0)
    A = a + 76 | 0
    ga(A | 0, P | 0, 4, 0)
    P = a + 80 | 0
    ya(P, a, c)
    ya($, $, c + 40 | 0)
    F = a + 120 | 0
    ya(F, c + 80 | 0, b + 120 | 0)
    E = (fa(b + 80 | 0, 4, 0, 0) | 0) << 1
    B = (fa(b + 84 | 0, 4, 0, 0) | 0) << 1
    y = (fa(b + 88 | 0, 4, 0, 0) | 0) << 1
    v = (fa(b + 92 | 0, 4, 0, 0) | 0) << 1
    s = (fa(b + 96 | 0, 4, 0, 0) | 0) << 1
    p = (fa(b + 100 | 0, 4, 0, 0) | 0) << 1
    m = (fa(b + 104 | 0, 4, 0, 0) | 0) << 1
    j = (fa(b + 108 | 0, 4, 0, 0) | 0) << 1
    f = (fa(b + 112 | 0, 4, 0, 0) | 0) << 1
    b = (fa(b + 116 | 0, 4, 0, 0) | 0) << 1
    Z = fa(P | 0, 4, 0, 0) | 0 | 0
    O = a + 84 | 0
    W = fa(O | 0, 4, 0, 0) | 0 | 0
    N = a + 88 | 0
    T = fa(N | 0, 4, 0, 0) | 0 | 0
    M = a + 92 | 0
    c = fa(M | 0, 4, 0, 0) | 0 | 0
    L = a + 96 | 0
    g = fa(L | 0, 4, 0, 0) | 0 | 0
    K = a + 100 | 0
    l = fa(K | 0, 4, 0, 0) | 0 | 0
    J = a + 104 | 0
    q = fa(J | 0, 4, 0, 0) | 0 | 0
    I = a + 108 | 0
    u = fa(I | 0, 4, 0, 0) | 0 | 0
    H = a + 112 | 0
    z = fa(H | 0, 4, 0, 0) | 0 | 0
    G = a + 116 | 0
    D = fa(G | 0, 4, 0, 0) | 0 | 0
    _ = fa($ | 0, 4, 0, 0) | 0 | 0
    X = fa(Y | 0, 4, 0, 0) | 0 | 0
    U = fa(V | 0, 4, 0, 0) | 0 | 0
    R = fa(S | 0, 4, 0, 0) | 0 | 0
    e = fa(Q | 0, 4, 0, 0) | 0 | 0
    k = fa(h | 0, 4, 0, 0) | 0 | 0
    o = fa(n | 0, 4, 0, 0) | 0 | 0
    t = fa(r | 0, 4, 0, 0) | 0 | 0
    x = fa(w | 0, 4, 0, 0) | 0 | 0
    C = fa(A | 0, 4, 0, 0) | 0 | 0
    ga(a | 0, Z - _ | 0, 4, 0)
    ga(ka | 0, W - X | 0, 4, 0)
    ga(ja | 0, T - U | 0, 4, 0)
    ga(ia | 0, c - R | 0, 4, 0)
    ga(ha | 0, g - e | 0, 4, 0)
    ga(ea | 0, l - k | 0, 4, 0)
    ga(da | 0, q - o | 0, 4, 0)
    ga(ca | 0, u - t | 0, 4, 0)
    ga(ba | 0, z - x | 0, 4, 0)
    ga(aa | 0, D - C | 0, 4, 0)
    ga($ | 0, _ + Z | 0, 4, 0)
    ga(Y | 0, X + W | 0, 4, 0)
    ga(V | 0, U + T | 0, 4, 0)
    ga(S | 0, R + c | 0, 4, 0)
    ga(Q | 0, e + g | 0, 4, 0)
    ga(h | 0, k + l | 0, 4, 0)
    ga(n | 0, o + q | 0, 4, 0)
    ga(r | 0, t + u | 0, 4, 0)
    ga(w | 0, x + z | 0, 4, 0)
    ga(A | 0, C + D | 0, 4, 0)
    D = fa(F | 0, 4, 0, 0) | 0 | 0
    C = a + 124 | 0
    A = fa(C | 0, 4, 0, 0) | 0 | 0
    z = a + 128 | 0
    x = fa(z | 0, 4, 0, 0) | 0 | 0
    w = a + 132 | 0
    u = fa(w | 0, 4, 0, 0) | 0 | 0
    t = a + 136 | 0
    r = fa(t | 0, 4, 0, 0) | 0 | 0
    q = a + 140 | 0
    o = fa(q | 0, 4, 0, 0) | 0 | 0
    n = a + 144 | 0
    l = fa(n | 0, 4, 0, 0) | 0 | 0
    k = a + 148 | 0
    h = fa(k | 0, 4, 0, 0) | 0 | 0
    g = a + 152 | 0
    e = fa(g | 0, 4, 0, 0) | 0 | 0
    a = a + 156 | 0
    c = fa(a | 0, 4, 0, 0) | 0 | 0
    ga(P | 0, D + E | 0, 4, 0)
    ga(O | 0, A + B | 0, 4, 0)
    ga(N | 0, x + y | 0, 4, 0)
    ga(M | 0, u + v | 0, 4, 0)
    ga(L | 0, r + s | 0, 4, 0)
    ga(K | 0, o + p | 0, 4, 0)
    ga(J | 0, l + m | 0, 4, 0)
    ga(I | 0, h + j | 0, 4, 0)
    ga(H | 0, e + f | 0, 4, 0)
    ga(G | 0, c + b | 0, 4, 0)
    ga(F | 0, E - D | 0, 4, 0)
    ga(C | 0, B - A | 0, 4, 0)
    ga(z | 0, y - x | 0, 4, 0)
    ga(w | 0, v - u | 0, 4, 0)
    ga(t | 0, s - r | 0, 4, 0)
    ga(q | 0, p - o | 0, 4, 0)
    ga(n | 0, m - l | 0, 4, 0)
    ga(k | 0, j - h | 0, 4, 0)
    ga(g | 0, f - e | 0, 4, 0)
    ga(a | 0, b - c | 0, 4, 0)
    i = d
  }

  function Ha (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0
    c = i
    d = b + 120 | 0
    ya(a, b, d)
    e = b + 80 | 0
    ya(a + 40 | 0, b + 40 | 0, e)
    ya(a + 80 | 0, e, d)
    i = c
  }

  function Ia (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var E = 0

    var F = 0

    var G = 0

    var H = 0

    var I = 0

    var J = 0

    var K = 0

    var L = 0

    var M = 0

    var N = 0

    var O = 0

    var P = 0

    var Q = 0

    var R = 0

    var S = 0

    var T = 0

    var U = 0

    var V = 0

    var W = 0

    var X = 0

    var Y = 0

    var Z = 0

    var _ = 0

    var $ = 0

    var aa = 0

    var ba = 0

    var ca = 0

    var da = 0

    var ea = 0

    var ha = 0

    var ia = 0

    var ja = 0

    var ka = 0

    var la = 0

    var ma = 0

    var na = 0

    var oa = 0

    var pa = 0
    h = i
    i = i + 192 | 0
    f = h + 160 | 0
    c = h + 120 | 0
    t = h + 80 | 0
    d = h + 40 | 0
    e = h
    k = fa(b >> 0 | 0, 1, 0, 1) | 0 | 0
    m = kb(fa(b + 1 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    l = D
    oa = kb(fa(b + 2 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    l = l | D
    B = kb(fa(b + 3 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    B = m | k | oa | B
    l = l | D
    oa = fa(b + 6 >> 0 | 0, 1, 0, 0) | 0 | 0
    k = fa(b + 4 >> 0 | 0, 1, 0, 1) | 0 | 0
    m = kb(fa(b + 5 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    pa = D
    oa = kb(oa & 255 | 0, 0, 16) | 0
    oa = m | k | oa
    pa = pa | D
    k = kb(oa | 0, pa | 0, 6) | 0
    m = D
    n = fa(b + 9 >> 0 | 0, 1, 0, 0) | 0 | 0
    ma = fa(b + 7 >> 0 | 0, 1, 0, 1) | 0 | 0
    o = kb(fa(b + 8 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    p = D
    n = kb(n & 255 | 0, 0, 16) | 0
    n = o | ma | n
    p = p | D
    ma = fa(b + 12 >> 0 | 0, 1, 0, 0) | 0 | 0
    o = fa(b + 10 >> 0 | 0, 1, 0, 1) | 0 | 0
    A = kb(fa(b + 11 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    na = D
    ma = kb(ma & 255 | 0, 0, 16) | 0
    ma = A | o | ma
    na = na | D
    o = kb(ma | 0, na | 0, 3) | 0
    A = D
    z = fa(b + 15 >> 0 | 0, 1, 0, 0) | 0 | 0
    ka = fa(b + 13 >> 0 | 0, 1, 0, 1) | 0 | 0
    u = kb(fa(b + 14 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    x = D
    z = kb(z & 255 | 0, 0, 16) | 0
    z = u | ka | z
    x = x | D
    ka = fa(b + 16 >> 0 | 0, 1, 0, 1) | 0 | 0
    u = kb(fa(b + 17 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    w = D
    j = kb(fa(b + 18 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    w = w | D
    y = kb(fa(b + 19 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    y = u | ka | j | y
    w = w | D
    j = fa(b + 22 >> 0 | 0, 1, 0, 0) | 0 | 0
    ka = fa(b + 20 >> 0 | 0, 1, 0, 1) | 0 | 0
    u = kb(fa(b + 21 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    s = D
    j = kb(j & 255 | 0, 0, 16) | 0
    j = u | ka | j
    s = s | D
    ka = fa(b + 25 >> 0 | 0, 1, 0, 0) | 0 | 0
    u = fa(b + 23 >> 0 | 0, 1, 0, 1) | 0 | 0
    r = kb(fa(b + 24 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    la = D
    ka = kb(ka & 255 | 0, 0, 16) | 0
    ka = r | u | ka
    la = la | D
    u = kb(ka | 0, la | 0, 5) | 0
    r = D
    q = fa(b + 28 >> 0 | 0, 1, 0, 0) | 0 | 0
    g = fa(b + 26 >> 0 | 0, 1, 0, 1) | 0 | 0
    ja = kb(fa(b + 27 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    v = D
    q = kb(q & 255 | 0, 0, 16) | 0
    q = ja | g | q
    v = v | D
    g = b + 31 | 0
    ja = fa(g >> 0 | 0, 1, 0, 0) | 0 | 0
    ia = fa(b + 29 >> 0 | 0, 1, 0, 1) | 0 | 0
    ha = kb(fa(b + 30 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    b = D
    ja = kb(ja & 255 | 0, 0, 16) | 0
    b = kb(ha | ia | ja | 0, b | D | 0, 2) | 0
    b = b & 33554428
    if ((b | 0) === 33554428 & 0 === 0 & ((q | 0) === 16777215 & (v | 0) === 0) & ((ka | 0) === 16777215 & (la | 0) === 0) & ((j | 0) === 16777215 & (s | 0) === 0) & ((y | 0) === -1 & (w | 0) === 0) & ((z | 0) === 16777215 & (x | 0) === 0) & ((ma | 0) === 16777215 & (na | 0) === 0) & ((n | 0) === 16777215 & (p | 0) === 0) & ((oa | 0) === 16777215 & (pa | 0) === 0) & (l >>> 0 > 0 | (l | 0) === 0 & B >>> 0 > 4294967276)) {
      pa = -1
      i = h
      return pa | 0
    }
    ba = kb(n | 0, p | 0, 5) | 0
    oa = D
    pa = kb(z | 0, x | 0, 2) | 0
    da = D
    ca = kb(j | 0, s | 0, 7) | 0
    ia = D
    j = kb(q | 0, v | 0, 4) | 0
    ja = D
    ha = hb(b | 0, 0, 16777216, 0) | 0
    ha = jb(ha | 0, D | 0, 25) | 0
    ea = D
    ma = sb(ha | 0, ea | 0, 19, 0) | 0
    ma = hb(ma | 0, D | 0, B | 0, l | 0) | 0
    $ = D
    ea = kb(ha | 0, ea | 0, 25) | 0
    ha = D
    la = hb(k | 0, m | 0, 16777216, 0) | 0
    la = jb(la | 0, D | 0, 25) | 0
    Y = D
    oa = hb(ba | 0, oa | 0, la | 0, Y | 0) | 0
    ba = D
    Y = kb(la | 0, Y | 0, 25) | 0
    Y = gb(k | 0, m | 0, Y | 0, D | 0) | 0
    la = D
    na = hb(o | 0, A | 0, 16777216, 0) | 0
    na = jb(na | 0, D | 0, 25) | 0
    _ = D
    k = hb(pa | 0, da | 0, na | 0, _ | 0) | 0
    da = D
    _ = kb(na | 0, _ | 0, 25) | 0
    na = D
    pa = hb(y | 0, w | 0, 16777216, 0) | 0
    pa = jb(pa | 0, D | 0, 25) | 0
    aa = D
    v = hb(ca | 0, ia | 0, pa | 0, aa | 0) | 0
    ia = D
    aa = kb(pa | 0, aa | 0, 25) | 0
    pa = D
    l = hb(u | 0, r | 0, 16777216, 0) | 0
    l = jb(l | 0, D | 0, 25) | 0
    ca = D
    ja = hb(j | 0, ja | 0, l | 0, ca | 0) | 0
    j = D
    ca = kb(l | 0, ca | 0, 25) | 0
    l = D
    Z = hb(ma | 0, $ | 0, 33554432, 0) | 0
    Z = fb(Z | 0, D | 0, 26) | 0
    ka = D
    la = hb(Y | 0, la | 0, Z | 0, ka | 0) | 0
    ka = kb(Z | 0, ka | 0, 26) | 0
    ka = gb(ma | 0, $ | 0, ka | 0, D | 0) | 0
    $ = hb(oa | 0, ba | 0, 33554432, 0) | 0
    $ = fb($ | 0, D | 0, 26) | 0
    ma = D
    Z = hb($ | 0, ma | 0, o | 0, A | 0) | 0
    na = gb(Z | 0, D | 0, _ | 0, na | 0) | 0
    ma = kb($ | 0, ma | 0, 26) | 0
    ma = gb(oa | 0, ba | 0, ma | 0, D | 0) | 0
    ba = hb(k | 0, da | 0, 33554432, 0) | 0
    ba = fb(ba | 0, D | 0, 26) | 0
    oa = D
    $ = hb(ba | 0, oa | 0, y | 0, w | 0) | 0
    pa = gb($ | 0, D | 0, aa | 0, pa | 0) | 0
    oa = kb(ba | 0, oa | 0, 26) | 0
    oa = gb(k | 0, da | 0, oa | 0, D | 0) | 0
    da = hb(v | 0, ia | 0, 33554432, 0) | 0
    da = fb(da | 0, D | 0, 26) | 0
    k = D
    u = hb(da | 0, k | 0, u | 0, r | 0) | 0
    l = gb(u | 0, D | 0, ca | 0, l | 0) | 0
    k = kb(da | 0, k | 0, 26) | 0
    k = gb(v | 0, ia | 0, k | 0, D | 0) | 0
    ia = hb(ja | 0, j | 0, 33554432, 0) | 0
    ia = fb(ia | 0, D | 0, 26) | 0
    v = D
    u = hb(b | 0, 0, ia | 0, v | 0) | 0
    u = gb(u | 0, D | 0, ea | 0, ha | 0) | 0
    v = kb(ia | 0, v | 0, 26) | 0
    v = gb(ja | 0, j | 0, v | 0, D | 0) | 0
    j = a + 40 | 0
    ga(j | 0, ka | 0, 4, 0)
    ga(a + 44 | 0, la | 0, 4, 0)
    ga(a + 48 | 0, ma | 0, 4, 0)
    ga(a + 52 | 0, na | 0, 4, 0)
    ga(a + 56 | 0, oa | 0, 4, 0)
    ga(a + 60 | 0, pa | 0, 4, 0)
    ga(a + 64 | 0, k | 0, 4, 0)
    ga(a + 68 | 0, l | 0, 4, 0)
    ga(a + 72 | 0, v | 0, 4, 0)
    ga(a + 76 | 0, u | 0, 4, 0)
    u = a + 80 | 0
    ga(u | 0, 1 | 0, 4, 0)
    v = a + 84 | 0
    l = v + 0 | 0
    k = l + 36 | 0
    do {
      ga(l | 0, 0 | 0, 4, 0)
      l = l + 4 | 0
    } while ((l | 0) < (k | 0))
    Ja(c, j)
    ya(t, c, 240)
    r = c + 4 | 0
    s = c + 8 | 0
    k = c + 12 | 0
    l = c + 16 | 0
    m = c + 20 | 0
    n = c + 24 | 0
    o = c + 28 | 0
    p = c + 32 | 0
    q = c + 36 | 0
    E = fa(u | 0, 4, 0, 0) | 0 | 0
    oa = fa(v | 0, 4, 0, 0) | 0 | 0
    ca = fa(a + 88 | 0, 4, 0, 0) | 0 | 0
    I = fa(a + 92 | 0, 4, 0, 0) | 0 | 0
    G = fa(a + 96 | 0, 4, 0, 0) | 0 | 0
    C = fa(a + 100 | 0, 4, 0, 0) | 0 | 0
    B = fa(a + 104 | 0, 4, 0, 0) | 0 | 0
    z = fa(a + 108 | 0, 4, 0, 0) | 0 | 0
    x = fa(a + 112 | 0, 4, 0, 0) | 0 | 0
    v = fa(a + 116 | 0, 4, 0, 0) | 0 | 0
    w = (fa(r | 0, 4, 0, 0) | 0 | 0) - oa | 0
    y = (fa(s | 0, 4, 0, 0) | 0 | 0) - ca | 0
    A = (fa(k | 0, 4, 0, 0) | 0 | 0) - I | 0
    b = (fa(l | 0, 4, 0, 0) | 0 | 0) - G | 0
    F = (fa(m | 0, 4, 0, 0) | 0 | 0) - C | 0
    H = (fa(n | 0, 4, 0, 0) | 0 | 0) - B | 0
    V = (fa(o | 0, 4, 0, 0) | 0 | 0) - z | 0
    pa = (fa(p | 0, 4, 0, 0) | 0 | 0) - x | 0
    J = (fa(q | 0, 4, 0, 0) | 0 | 0) - v | 0
    ga(c | 0, (fa(c | 0, 4, 0, 0) | 0 | 0) - E | 0, 4, 0)
    ga(r | 0, w | 0, 4, 0)
    ga(s | 0, y | 0, 4, 0)
    ga(k | 0, A | 0, 4, 0)
    ga(l | 0, b | 0, 4, 0)
    ga(m | 0, F | 0, 4, 0)
    ga(n | 0, H | 0, 4, 0)
    ga(o | 0, V | 0, 4, 0)
    ga(p | 0, pa | 0, 4, 0)
    ga(q | 0, J | 0, 4, 0)
    J = t + 4 | 0
    pa = t + 8 | 0
    V = t + 12 | 0
    H = t + 16 | 0
    F = t + 20 | 0
    b = t + 24 | 0
    A = t + 28 | 0
    y = t + 32 | 0
    w = t + 36 | 0
    oa = oa + (fa(J | 0, 4, 0, 0) | 0 | 0) | 0
    ca = ca + (fa(pa | 0, 4, 0, 0) | 0 | 0) | 0
    I = I + (fa(V | 0, 4, 0, 0) | 0 | 0) | 0
    G = G + (fa(H | 0, 4, 0, 0) | 0 | 0) | 0
    C = C + (fa(F | 0, 4, 0, 0) | 0 | 0) | 0
    B = B + (fa(b | 0, 4, 0, 0) | 0 | 0) | 0
    z = z + (fa(A | 0, 4, 0, 0) | 0 | 0) | 0
    x = x + (fa(y | 0, 4, 0, 0) | 0 | 0) | 0
    v = v + (fa(w | 0, 4, 0, 0) | 0 | 0) | 0
    ga(t | 0, E + (fa(t | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
    ga(J | 0, oa | 0, 4, 0)
    ga(pa | 0, ca | 0, 4, 0)
    ga(V | 0, I | 0, 4, 0)
    ga(H | 0, G | 0, 4, 0)
    ga(F | 0, C | 0, 4, 0)
    ga(b | 0, B | 0, 4, 0)
    ga(A | 0, z | 0, 4, 0)
    ga(y | 0, x | 0, 4, 0)
    ga(w | 0, v | 0, 4, 0)
    Ka(a, c, t)
    Ja(d, a)
    ya(d, d, t)
    v = d + 4 | 0
    w = d + 8 | 0
    x = d + 12 | 0
    y = d + 16 | 0
    z = d + 20 | 0
    A = d + 24 | 0
    B = d + 28 | 0
    b = d + 32 | 0
    C = d + 36 | 0
    F = (fa(v | 0, 4, 0, 0) | 0 | 0) - (fa(r | 0, 4, 0, 0) | 0 | 0) | 0
    G = (fa(w | 0, 4, 0, 0) | 0 | 0) - (fa(s | 0, 4, 0, 0) | 0 | 0) | 0
    H = (fa(x | 0, 4, 0, 0) | 0 | 0) - (fa(k | 0, 4, 0, 0) | 0 | 0) | 0
    I = (fa(y | 0, 4, 0, 0) | 0 | 0) - (fa(l | 0, 4, 0, 0) | 0 | 0) | 0
    V = (fa(z | 0, 4, 0, 0) | 0 | 0) - (fa(m | 0, 4, 0, 0) | 0 | 0) | 0
    ca = (fa(A | 0, 4, 0, 0) | 0 | 0) - (fa(n | 0, 4, 0, 0) | 0 | 0) | 0
    pa = (fa(B | 0, 4, 0, 0) | 0 | 0) - (fa(o | 0, 4, 0, 0) | 0 | 0) | 0
    oa = (fa(b | 0, 4, 0, 0) | 0 | 0) - (fa(p | 0, 4, 0, 0) | 0 | 0) | 0
    J = (fa(C | 0, 4, 0, 0) | 0 | 0) - (fa(q | 0, 4, 0, 0) | 0 | 0) | 0
    ga(e | 0, (fa(d | 0, 4, 0, 0) | 0 | 0) - (fa(c | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
    E = e + 4 | 0
    ga(E | 0, F | 0, 4, 0)
    F = e + 8 | 0
    ga(F | 0, G | 0, 4, 0)
    G = e + 12 | 0
    ga(G | 0, H | 0, 4, 0)
    H = e + 16 | 0
    ga(H | 0, I | 0, 4, 0)
    I = e + 20 | 0
    ga(I | 0, V | 0, 4, 0)
    V = e + 24 | 0
    ga(V | 0, ca | 0, 4, 0)
    ca = e + 28 | 0
    ga(ca | 0, pa | 0, 4, 0)
    pa = e + 32 | 0
    ga(pa | 0, oa | 0, 4, 0)
    oa = e + 36 | 0
    ga(oa | 0, J | 0, 4, 0)
    Oa(f, e)
    J = f + 1 | 0
    K = f + 2 | 0
    L = f + 3 | 0
    M = f + 4 | 0
    N = f + 5 | 0
    O = f + 6 | 0
    P = f + 7 | 0
    Q = f + 8 | 0
    R = f + 9 | 0
    S = f + 10 | 0
    T = f + 11 | 0
    U = f + 12 | 0
    u = f + 13 | 0
    W = f + 14 | 0
    X = f + 15 | 0
    Y = f + 16 | 0
    Z = f + 17 | 0
    _ = f + 18 | 0
    $ = f + 19 | 0
    aa = f + 20 | 0
    ba = f + 21 | 0
    t = f + 22 | 0
    da = f + 23 | 0
    ea = f + 24 | 0
    ha = f + 25 | 0
    ia = f + 26 | 0
    ja = f + 27 | 0
    ka = f + 28 | 0
    la = f + 29 | 0
    ma = f + 30 | 0
    na = f + 31 | 0
    do {
      if (!((((fa(J >> 0 | 0, 1, 0, 0) | 0 | (fa(f >> 0 | 0, 1, 0, 0) | 0) | (fa(K >> 0 | 0, 1, 0, 0) | 0) | (fa(L >> 0 | 0, 1, 0, 0) | 0) | (fa(M >> 0 | 0, 1, 0, 0) | 0) | (fa(N >> 0 | 0, 1, 0, 0) | 0) | (fa(O >> 0 | 0, 1, 0, 0) | 0) | (fa(P >> 0 | 0, 1, 0, 0) | 0) | (fa(Q >> 0 | 0, 1, 0, 0) | 0) | (fa(R >> 0 | 0, 1, 0, 0) | 0) | (fa(S >> 0 | 0, 1, 0, 0) | 0) | (fa(T >> 0 | 0, 1, 0, 0) | 0) | (fa(U >> 0 | 0, 1, 0, 0) | 0) | (fa(u >> 0 | 0, 1, 0, 0) | 0) | (fa(W >> 0 | 0, 1, 0, 0) | 0) | (fa(X >> 0 | 0, 1, 0, 0) | 0) | (fa(Y >> 0 | 0, 1, 0, 0) | 0) | (fa(Z >> 0 | 0, 1, 0, 0) | 0) | (fa(_ >> 0 | 0, 1, 0, 0) | 0) | (fa($ >> 0 | 0, 1, 0, 0) | 0) | (fa(aa >> 0 | 0, 1, 0, 0) | 0) | (fa(ba >> 0 | 0, 1, 0, 0) | 0) | (fa(t >> 0 | 0, 1, 0, 0) | 0) | (fa(da >> 0 | 0, 1, 0, 0) | 0) | (fa(ea >> 0 | 0, 1, 0, 0) | 0) | (fa(ha >> 0 | 0, 1, 0, 0) | 0) | (fa(ia >> 0 | 0, 1, 0, 0) | 0) | (fa(ja >> 0 | 0, 1, 0, 0) | 0) | (fa(ka >> 0 | 0, 1, 0, 0) | 0) | (fa(la >> 0 | 0, 1, 0, 0) | 0) | (fa(ma >> 0 | 0, 1, 0, 0) | 0) | (fa(na >> 0 | 0, 1, 0, 0) | 0)) & 255) + -1 & -256 | 0) === -256)) {
        v = (fa(r | 0, 4, 0, 0) | 0 | 0) + (fa(v | 0, 4, 0, 0) | 0 | 0) | 0
        w = (fa(s | 0, 4, 0, 0) | 0 | 0) + (fa(w | 0, 4, 0, 0) | 0 | 0) | 0
        x = (fa(k | 0, 4, 0, 0) | 0 | 0) + (fa(x | 0, 4, 0, 0) | 0 | 0) | 0
        y = (fa(l | 0, 4, 0, 0) | 0 | 0) + (fa(y | 0, 4, 0, 0) | 0 | 0) | 0
        z = (fa(m | 0, 4, 0, 0) | 0 | 0) + (fa(z | 0, 4, 0, 0) | 0 | 0) | 0
        A = (fa(n | 0, 4, 0, 0) | 0 | 0) + (fa(A | 0, 4, 0, 0) | 0 | 0) | 0
        B = (fa(o | 0, 4, 0, 0) | 0 | 0) + (fa(B | 0, 4, 0, 0) | 0 | 0) | 0
        b = (fa(p | 0, 4, 0, 0) | 0 | 0) + (fa(b | 0, 4, 0, 0) | 0 | 0) | 0
        C = (fa(q | 0, 4, 0, 0) | 0 | 0) + (fa(C | 0, 4, 0, 0) | 0 | 0) | 0
        ga(e | 0, (fa(c | 0, 4, 0, 0) | 0 | 0) + (fa(d | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
        ga(E | 0, v | 0, 4, 0)
        ga(F | 0, w | 0, 4, 0)
        ga(G | 0, x | 0, 4, 0)
        ga(H | 0, y | 0, 4, 0)
        ga(I | 0, z | 0, 4, 0)
        ga(V | 0, A | 0, 4, 0)
        ga(ca | 0, B | 0, 4, 0)
        ga(pa | 0, b | 0, 4, 0)
        ga(oa | 0, C | 0, 4, 0)
        Oa(f, e)
        if ((((fa(J >> 0 | 0, 1, 0, 0) | 0 | (fa(f >> 0 | 0, 1, 0, 0) | 0) | (fa(K >> 0 | 0, 1, 0, 0) | 0) | (fa(L >> 0 | 0, 1, 0, 0) | 0) | (fa(M >> 0 | 0, 1, 0, 0) | 0) | (fa(N >> 0 | 0, 1, 0, 0) | 0) | (fa(O >> 0 | 0, 1, 0, 0) | 0) | (fa(P >> 0 | 0, 1, 0, 0) | 0) | (fa(Q >> 0 | 0, 1, 0, 0) | 0) | (fa(R >> 0 | 0, 1, 0, 0) | 0) | (fa(S >> 0 | 0, 1, 0, 0) | 0) | (fa(T >> 0 | 0, 1, 0, 0) | 0) | (fa(U >> 0 | 0, 1, 0, 0) | 0) | (fa(u >> 0 | 0, 1, 0, 0) | 0) | (fa(W >> 0 | 0, 1, 0, 0) | 0) | (fa(X >> 0 | 0, 1, 0, 0) | 0) | (fa(Y >> 0 | 0, 1, 0, 0) | 0) | (fa(Z >> 0 | 0, 1, 0, 0) | 0) | (fa(_ >> 0 | 0, 1, 0, 0) | 0) | (fa($ >> 0 | 0, 1, 0, 0) | 0) | (fa(aa >> 0 | 0, 1, 0, 0) | 0) | (fa(ba >> 0 | 0, 1, 0, 0) | 0) | (fa(t >> 0 | 0, 1, 0, 0) | 0) | (fa(da >> 0 | 0, 1, 0, 0) | 0) | (fa(ea >> 0 | 0, 1, 0, 0) | 0) | (fa(ha >> 0 | 0, 1, 0, 0) | 0) | (fa(ia >> 0 | 0, 1, 0, 0) | 0) | (fa(ja >> 0 | 0, 1, 0, 0) | 0) | (fa(ka >> 0 | 0, 1, 0, 0) | 0) | (fa(la >> 0 | 0, 1, 0, 0) | 0) | (fa(ma >> 0 | 0, 1, 0, 0) | 0) | (fa(na >> 0 | 0, 1, 0, 0) | 0)) & 255) + -1 & -256 | 0) === -256) {
          ya(a, a, 280)
          break
        } else {
          pa = -1
          i = h
          return pa | 0
        }
      }
    } while (0)
    Oa(f, a)
    do {
      if (((fa(f >> 0 | 0, 1, 0, 0) | 0) & 1 | 0) !== ((fa(g >> 0 | 0, 1, 0, 1) | 0 | 0) >>> 7 | 0)) {
        Oa(f, a)
        if ((((fa(J >> 0 | 0, 1, 0, 0) | 0 | (fa(f >> 0 | 0, 1, 0, 0) | 0) | (fa(K >> 0 | 0, 1, 0, 0) | 0) | (fa(L >> 0 | 0, 1, 0, 0) | 0) | (fa(M >> 0 | 0, 1, 0, 0) | 0) | (fa(N >> 0 | 0, 1, 0, 0) | 0) | (fa(O >> 0 | 0, 1, 0, 0) | 0) | (fa(P >> 0 | 0, 1, 0, 0) | 0) | (fa(Q >> 0 | 0, 1, 0, 0) | 0) | (fa(R >> 0 | 0, 1, 0, 0) | 0) | (fa(S >> 0 | 0, 1, 0, 0) | 0) | (fa(T >> 0 | 0, 1, 0, 0) | 0) | (fa(U >> 0 | 0, 1, 0, 0) | 0) | (fa(u >> 0 | 0, 1, 0, 0) | 0) | (fa(W >> 0 | 0, 1, 0, 0) | 0) | (fa(X >> 0 | 0, 1, 0, 0) | 0) | (fa(Y >> 0 | 0, 1, 0, 0) | 0) | (fa(Z >> 0 | 0, 1, 0, 0) | 0) | (fa(_ >> 0 | 0, 1, 0, 0) | 0) | (fa($ >> 0 | 0, 1, 0, 0) | 0) | (fa(aa >> 0 | 0, 1, 0, 0) | 0) | (fa(ba >> 0 | 0, 1, 0, 0) | 0) | (fa(t >> 0 | 0, 1, 0, 0) | 0) | (fa(da >> 0 | 0, 1, 0, 0) | 0) | (fa(ea >> 0 | 0, 1, 0, 0) | 0) | (fa(ha >> 0 | 0, 1, 0, 0) | 0) | (fa(ia >> 0 | 0, 1, 0, 0) | 0) | (fa(ja >> 0 | 0, 1, 0, 0) | 0) | (fa(ka >> 0 | 0, 1, 0, 0) | 0) | (fa(la >> 0 | 0, 1, 0, 0) | 0) | (fa(ma >> 0 | 0, 1, 0, 0) | 0) | (fa(na >> 0 | 0, 1, 0, 0) | 0)) & 255) + -1 & -256 | 0) === -256) {
          pa = -1
          i = h
          return pa | 0
        } else {
          Y = a + 4 | 0
          _ = a + 8 | 0
          aa = a + 12 | 0
          ca = a + 16 | 0
          ea = a + 20 | 0
          ia = a + 24 | 0
          ka = a + 28 | 0
          ma = a + 32 | 0
          oa = a + 36 | 0
          Z = 0 - (fa(Y | 0, 4, 0, 0) | 0 | 0) | 0
          $ = 0 - (fa(_ | 0, 4, 0, 0) | 0 | 0) | 0
          ba = 0 - (fa(aa | 0, 4, 0, 0) | 0 | 0) | 0
          da = 0 - (fa(ca | 0, 4, 0, 0) | 0 | 0) | 0
          ha = 0 - (fa(ea | 0, 4, 0, 0) | 0 | 0) | 0
          ja = 0 - (fa(ia | 0, 4, 0, 0) | 0 | 0) | 0
          la = 0 - (fa(ka | 0, 4, 0, 0) | 0 | 0) | 0
          na = 0 - (fa(ma | 0, 4, 0, 0) | 0 | 0) | 0
          pa = 0 - (fa(oa | 0, 4, 0, 0) | 0 | 0) | 0
          ga(a | 0, 0 - (fa(a | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
          ga(Y | 0, Z | 0, 4, 0)
          ga(_ | 0, $ | 0, 4, 0)
          ga(aa | 0, ba | 0, 4, 0)
          ga(ca | 0, da | 0, 4, 0)
          ga(ea | 0, ha | 0, 4, 0)
          ga(ia | 0, ja | 0, 4, 0)
          ga(ka | 0, la | 0, 4, 0)
          ga(ma | 0, na | 0, 4, 0)
          ga(oa | 0, pa | 0, 4, 0)
          break
        }
      }
    } while (0)
    ya(a + 120 | 0, a, j)
    pa = 0
    i = h
    return pa | 0
  }

  function Ja (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var E = 0

    var F = 0

    var G = 0

    var H = 0

    var I = 0

    var J = 0

    var K = 0

    var L = 0

    var M = 0

    var N = 0

    var O = 0

    var P = 0

    var Q = 0

    var R = 0

    var S = 0

    var T = 0

    var U = 0

    var V = 0

    var W = 0

    var X = 0

    var Y = 0

    var Z = 0

    var _ = 0

    var $ = 0

    var aa = 0

    var ba = 0

    var ca = 0

    var da = 0

    var ea = 0

    var ha = 0

    var ia = 0

    var ja = 0

    var ka = 0

    var la = 0

    var ma = 0

    var na = 0

    var oa = 0

    var pa = 0

    var qa = 0

    var ra = 0

    var sa = 0

    var ta = 0

    var ua = 0

    var va = 0

    var wa = 0

    var xa = 0

    var ya = 0

    var za = 0

    var Aa = 0

    var Ba = 0

    var Ca = 0

    var Da = 0

    var Ea = 0

    var Fa = 0

    var Ga = 0

    var Ha = 0

    var Ia = 0

    var Ja = 0

    var Ka = 0

    var La = 0

    var Ma = 0

    var Na = 0

    var Oa = 0

    var Pa = 0

    var Qa = 0

    var Ra = 0

    var Sa = 0

    var Ta = 0

    var Ua = 0

    var Va = 0

    var Wa = 0

    var Xa = 0

    var Ya = 0

    var Za = 0

    var _a = 0

    var $a = 0

    var ab = 0

    var bb = 0

    var cb = 0

    var db = 0

    var eb = 0

    var ib = 0

    var jb = 0

    var lb = 0

    var mb = 0

    var nb = 0
    c = i
    eb = fa(b | 0, 4, 0, 0) | 0 | 0
    xa = fa(b + 4 | 0, 4, 0, 0) | 0 | 0
    k = fa(b + 8 | 0, 4, 0, 0) | 0 | 0
    oa = fa(b + 12 | 0, 4, 0, 0) | 0 | 0
    e = fa(b + 16 | 0, 4, 0, 0) | 0 | 0
    jb = fa(b + 20 | 0, 4, 0, 0) | 0 | 0
    Z = fa(b + 24 | 0, 4, 0, 0) | 0 | 0
    Oa = fa(b + 28 | 0, 4, 0, 0) | 0 | 0
    h = fa(b + 32 | 0, 4, 0, 0) | 0 | 0
    b = fa(b + 36 | 0, 4, 0, 0) | 0 | 0
    m = eb << 1
    q = xa << 1
    _a = k << 1
    f = oa << 1
    qa = e << 1
    C = jb << 1
    n = Z << 1
    j = Oa << 1
    Na = jb * 38 | 0
    ua = Z * 19 | 0
    ya = Oa * 38 | 0
    ea = h * 19 | 0
    nb = b * 38 | 0
    ib = ((eb | 0) < 0) << 31 >> 31
    ib = sb(eb | 0, ib | 0, eb | 0, ib | 0) | 0
    eb = D
    p = ((m | 0) < 0) << 31 >> 31
    wa = ((xa | 0) < 0) << 31 >> 31
    La = sb(m | 0, p | 0, xa | 0, wa | 0) | 0
    Ka = D
    l = ((k | 0) < 0) << 31 >> 31
    Za = sb(k | 0, l | 0, m | 0, p | 0) | 0
    Ya = D
    pa = ((oa | 0) < 0) << 31 >> 31
    Xa = sb(oa | 0, pa | 0, m | 0, p | 0) | 0
    Wa = D
    E = ((e | 0) < 0) << 31 >> 31
    Ra = sb(e | 0, E | 0, m | 0, p | 0) | 0
    Qa = D
    lb = ((jb | 0) < 0) << 31 >> 31
    Ba = sb(jb | 0, lb | 0, m | 0, p | 0) | 0
    Aa = D
    g = ((Z | 0) < 0) << 31 >> 31
    ja = sb(Z | 0, g | 0, m | 0, p | 0) | 0
    ia = D
    Pa = ((Oa | 0) < 0) << 31 >> 31
    S = sb(Oa | 0, Pa | 0, m | 0, p | 0) | 0
    R = D
    B = ((h | 0) < 0) << 31 >> 31
    G = sb(h | 0, B | 0, m | 0, p | 0) | 0
    F = D
    r = ((b | 0) < 0) << 31 >> 31
    p = sb(b | 0, r | 0, m | 0, p | 0) | 0
    m = D
    o = ((q | 0) < 0) << 31 >> 31
    wa = sb(q | 0, o | 0, xa | 0, wa | 0) | 0
    xa = D
    ca = sb(q | 0, o | 0, k | 0, l | 0) | 0
    da = D
    Q = ((f | 0) < 0) << 31 >> 31
    Va = sb(f | 0, Q | 0, q | 0, o | 0) | 0
    Ua = D
    Fa = sb(e | 0, E | 0, q | 0, o | 0) | 0
    Ea = D
    d = ((C | 0) < 0) << 31 >> 31
    la = sb(C | 0, d | 0, q | 0, o | 0) | 0
    ka = D
    U = sb(Z | 0, g | 0, q | 0, o | 0) | 0
    T = D
    P = ((j | 0) < 0) << 31 >> 31
    I = sb(j | 0, P | 0, q | 0, o | 0) | 0
    H = D
    u = sb(h | 0, B | 0, q | 0, o | 0) | 0
    t = D
    mb = ((nb | 0) < 0) << 31 >> 31
    o = sb(nb | 0, mb | 0, q | 0, o | 0) | 0
    q = D
    Ta = sb(k | 0, l | 0, k | 0, l | 0) | 0
    Sa = D
    $a = ((_a | 0) < 0) << 31 >> 31
    Da = sb(_a | 0, $a | 0, oa | 0, pa | 0) | 0
    Ca = D
    na = sb(e | 0, E | 0, _a | 0, $a | 0) | 0
    ma = D
    Y = sb(jb | 0, lb | 0, _a | 0, $a | 0) | 0
    X = D
    O = sb(Z | 0, g | 0, _a | 0, $a | 0) | 0
    N = D
    w = sb(Oa | 0, Pa | 0, _a | 0, $a | 0) | 0
    v = D
    ha = ((ea | 0) < 0) << 31 >> 31
    $a = sb(ea | 0, ha | 0, _a | 0, $a | 0) | 0
    _a = D
    l = sb(nb | 0, mb | 0, k | 0, l | 0) | 0
    k = D
    pa = sb(f | 0, Q | 0, oa | 0, pa | 0) | 0
    oa = D
    W = sb(f | 0, Q | 0, e | 0, E | 0) | 0
    V = D
    K = sb(C | 0, d | 0, f | 0, Q | 0) | 0
    J = D
    A = sb(Z | 0, g | 0, f | 0, Q | 0) | 0
    z = D
    za = ((ya | 0) < 0) << 31 >> 31
    bb = sb(ya | 0, za | 0, f | 0, Q | 0) | 0
    ab = D
    Ha = sb(ea | 0, ha | 0, f | 0, Q | 0) | 0
    Ga = D
    Q = sb(nb | 0, mb | 0, f | 0, Q | 0) | 0
    f = D
    M = sb(e | 0, E | 0, e | 0, E | 0) | 0
    L = D
    ra = ((qa | 0) < 0) << 31 >> 31
    y = sb(qa | 0, ra | 0, jb | 0, lb | 0) | 0
    x = D
    va = ((ua | 0) < 0) << 31 >> 31
    db = sb(ua | 0, va | 0, qa | 0, ra | 0) | 0
    cb = D
    Ja = sb(ya | 0, za | 0, e | 0, E | 0) | 0
    Ia = D
    ra = sb(ea | 0, ha | 0, qa | 0, ra | 0) | 0
    qa = D
    E = sb(nb | 0, mb | 0, e | 0, E | 0) | 0
    e = D
    lb = sb(Na | 0, ((Na | 0) < 0) << 31 >> 31 | 0, jb | 0, lb | 0) | 0
    jb = D
    Na = sb(ua | 0, va | 0, C | 0, d | 0) | 0
    Ma = D
    ta = sb(ya | 0, za | 0, C | 0, d | 0) | 0
    sa = D
    $ = sb(ea | 0, ha | 0, C | 0, d | 0) | 0
    _ = D
    d = sb(nb | 0, mb | 0, C | 0, d | 0) | 0
    C = D
    va = sb(ua | 0, va | 0, Z | 0, g | 0) | 0
    ua = D
    ba = sb(ya | 0, za | 0, Z | 0, g | 0) | 0
    aa = D
    n = sb(ea | 0, ha | 0, n | 0, ((n | 0) < 0) << 31 >> 31 | 0) | 0
    s = D
    g = sb(nb | 0, mb | 0, Z | 0, g | 0) | 0
    Z = D
    Pa = sb(ya | 0, za | 0, Oa | 0, Pa | 0) | 0
    Oa = D
    za = sb(ea | 0, ha | 0, j | 0, P | 0) | 0
    ya = D
    P = sb(nb | 0, mb | 0, j | 0, P | 0) | 0
    j = D
    ha = sb(ea | 0, ha | 0, h | 0, B | 0) | 0
    ea = D
    B = sb(nb | 0, mb | 0, h | 0, B | 0) | 0
    h = D
    r = sb(nb | 0, mb | 0, b | 0, r | 0) | 0
    b = D
    eb = hb(lb | 0, jb | 0, ib | 0, eb | 0) | 0
    cb = hb(eb | 0, D | 0, db | 0, cb | 0) | 0
    ab = hb(cb | 0, D | 0, bb | 0, ab | 0) | 0
    _a = hb(ab | 0, D | 0, $a | 0, _a | 0) | 0
    q = hb(_a | 0, D | 0, o | 0, q | 0) | 0
    o = D
    xa = hb(Za | 0, Ya | 0, wa | 0, xa | 0) | 0
    wa = D
    da = hb(Xa | 0, Wa | 0, ca | 0, da | 0) | 0
    ca = D
    Sa = hb(Va | 0, Ua | 0, Ta | 0, Sa | 0) | 0
    Qa = hb(Sa | 0, D | 0, Ra | 0, Qa | 0) | 0
    Oa = hb(Qa | 0, D | 0, Pa | 0, Oa | 0) | 0
    s = hb(Oa | 0, D | 0, n | 0, s | 0) | 0
    C = hb(s | 0, D | 0, d | 0, C | 0) | 0
    d = D
    s = hb(q | 0, o | 0, 33554432, 0) | 0
    s = fb(s | 0, D | 0, 26) | 0
    n = D
    Ka = hb(Na | 0, Ma | 0, La | 0, Ka | 0) | 0
    Ia = hb(Ka | 0, D | 0, Ja | 0, Ia | 0) | 0
    Ga = hb(Ia | 0, D | 0, Ha | 0, Ga | 0) | 0
    k = hb(Ga | 0, D | 0, l | 0, k | 0) | 0
    k = hb(k | 0, D | 0, s | 0, n | 0) | 0
    l = D
    n = kb(s | 0, n | 0, 26) | 0
    n = gb(q | 0, o | 0, n | 0, D | 0) | 0
    o = D
    q = hb(C | 0, d | 0, 33554432, 0) | 0
    q = fb(q | 0, D | 0, 26) | 0
    s = D
    Ca = hb(Fa | 0, Ea | 0, Da | 0, Ca | 0) | 0
    Aa = hb(Ca | 0, D | 0, Ba | 0, Aa | 0) | 0
    ya = hb(Aa | 0, D | 0, za | 0, ya | 0) | 0
    Z = hb(ya | 0, D | 0, g | 0, Z | 0) | 0
    Z = hb(Z | 0, D | 0, q | 0, s | 0) | 0
    g = D
    s = kb(q | 0, s | 0, 26) | 0
    s = gb(C | 0, d | 0, s | 0, D | 0) | 0
    d = D
    C = hb(k | 0, l | 0, 16777216, 0) | 0
    C = fb(C | 0, D | 0, 25) | 0
    q = D
    ua = hb(xa | 0, wa | 0, va | 0, ua | 0) | 0
    sa = hb(ua | 0, D | 0, ta | 0, sa | 0) | 0
    qa = hb(sa | 0, D | 0, ra | 0, qa | 0) | 0
    f = hb(qa | 0, D | 0, Q | 0, f | 0) | 0
    f = hb(f | 0, D | 0, C | 0, q | 0) | 0
    Q = D
    q = kb(C | 0, q | 0, 25) | 0
    q = gb(k | 0, l | 0, q | 0, D | 0) | 0
    l = D
    k = hb(Z | 0, g | 0, 16777216, 0) | 0
    k = fb(k | 0, D | 0, 25) | 0
    C = D
    ma = hb(pa | 0, oa | 0, na | 0, ma | 0) | 0
    ka = hb(ma | 0, D | 0, la | 0, ka | 0) | 0
    ia = hb(ka | 0, D | 0, ja | 0, ia | 0) | 0
    ea = hb(ia | 0, D | 0, ha | 0, ea | 0) | 0
    j = hb(ea | 0, D | 0, P | 0, j | 0) | 0
    j = hb(j | 0, D | 0, k | 0, C | 0) | 0
    P = D
    C = kb(k | 0, C | 0, 25) | 0
    C = gb(Z | 0, g | 0, C | 0, D | 0) | 0
    g = D
    Z = hb(f | 0, Q | 0, 33554432, 0) | 0
    Z = fb(Z | 0, D | 0, 26) | 0
    k = D
    aa = hb(da | 0, ca | 0, ba | 0, aa | 0) | 0
    _ = hb(aa | 0, D | 0, $ | 0, _ | 0) | 0
    e = hb(_ | 0, D | 0, E | 0, e | 0) | 0
    e = hb(e | 0, D | 0, Z | 0, k | 0) | 0
    E = D
    k = kb(Z | 0, k | 0, 26) | 0
    k = gb(f | 0, Q | 0, k | 0, D | 0) | 0
    Q = hb(j | 0, P | 0, 33554432, 0) | 0
    Q = fb(Q | 0, D | 0, 26) | 0
    f = D
    V = hb(Y | 0, X | 0, W | 0, V | 0) | 0
    T = hb(V | 0, D | 0, U | 0, T | 0) | 0
    R = hb(T | 0, D | 0, S | 0, R | 0) | 0
    h = hb(R | 0, D | 0, B | 0, h | 0) | 0
    h = hb(h | 0, D | 0, Q | 0, f | 0) | 0
    B = D
    f = kb(Q | 0, f | 0, 26) | 0
    f = gb(j | 0, P | 0, f | 0, D | 0) | 0
    P = hb(e | 0, E | 0, 16777216, 0) | 0
    P = fb(P | 0, D | 0, 25) | 0
    j = D
    d = hb(P | 0, j | 0, s | 0, d | 0) | 0
    s = D
    j = kb(P | 0, j | 0, 25) | 0
    j = gb(e | 0, E | 0, j | 0, D | 0) | 0
    E = hb(h | 0, B | 0, 16777216, 0) | 0
    E = fb(E | 0, D | 0, 25) | 0
    e = D
    L = hb(O | 0, N | 0, M | 0, L | 0) | 0
    J = hb(L | 0, D | 0, K | 0, J | 0) | 0
    H = hb(J | 0, D | 0, I | 0, H | 0) | 0
    F = hb(H | 0, D | 0, G | 0, F | 0) | 0
    b = hb(F | 0, D | 0, r | 0, b | 0) | 0
    b = hb(b | 0, D | 0, E | 0, e | 0) | 0
    r = D
    e = kb(E | 0, e | 0, 25) | 0
    e = gb(h | 0, B | 0, e | 0, D | 0) | 0
    B = hb(d | 0, s | 0, 33554432, 0) | 0
    B = fb(B | 0, D | 0, 26) | 0
    h = D
    g = hb(C | 0, g | 0, B | 0, h | 0) | 0
    h = kb(B | 0, h | 0, 26) | 0
    h = gb(d | 0, s | 0, h | 0, D | 0) | 0
    s = hb(b | 0, r | 0, 33554432, 0) | 0
    s = fb(s | 0, D | 0, 26) | 0
    d = D
    x = hb(A | 0, z | 0, y | 0, x | 0) | 0
    v = hb(x | 0, D | 0, w | 0, v | 0) | 0
    t = hb(v | 0, D | 0, u | 0, t | 0) | 0
    m = hb(t | 0, D | 0, p | 0, m | 0) | 0
    m = hb(m | 0, D | 0, s | 0, d | 0) | 0
    p = D
    d = kb(s | 0, d | 0, 26) | 0
    d = gb(b | 0, r | 0, d | 0, D | 0) | 0
    r = hb(m | 0, p | 0, 16777216, 0) | 0
    r = fb(r | 0, D | 0, 25) | 0
    b = D
    s = sb(r | 0, b | 0, 19, 0) | 0
    o = hb(s | 0, D | 0, n | 0, o | 0) | 0
    n = D
    b = kb(r | 0, b | 0, 25) | 0
    b = gb(m | 0, p | 0, b | 0, D | 0) | 0
    p = hb(o | 0, n | 0, 33554432, 0) | 0
    p = fb(p | 0, D | 0, 26) | 0
    m = D
    l = hb(q | 0, l | 0, p | 0, m | 0) | 0
    m = kb(p | 0, m | 0, 26) | 0
    m = gb(o | 0, n | 0, m | 0, D | 0) | 0
    ga(a | 0, m | 0, 4, 0)
    ga(a + 4 | 0, l | 0, 4, 0)
    ga(a + 8 | 0, k | 0, 4, 0)
    ga(a + 12 | 0, j | 0, 4, 0)
    ga(a + 16 | 0, h | 0, 4, 0)
    ga(a + 20 | 0, g | 0, 4, 0)
    ga(a + 24 | 0, f | 0, 4, 0)
    ga(a + 28 | 0, e | 0, 4, 0)
    ga(a + 32 | 0, d | 0, 4, 0)
    ga(a + 36 | 0, b | 0, 4, 0)
    i = c
  }

  function Ka (a, b, c) {
    a = a | 0
    b = b | 0
    c = c | 0
    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0
    g = i
    i = i + 208 | 0
    f = g + 160 | 0
    e = g + 120 | 0
    h = g + 80 | 0
    d = g + 40 | 0
    j = g
    Ja(f, c)
    ya(f, f, c)
    Ja(e, f)
    ya(e, e, c)
    ya(e, e, b)
    Ja(h, e)
    Ja(d, h)
    Ja(d, d)
    ya(d, e, d)
    ya(h, h, d)
    Ja(h, h)
    ya(h, d, h)
    Ja(d, h)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    ya(h, d, h)
    Ja(d, h)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    ya(d, d, h)
    Ja(j, d)
    Ja(j, j)
    Ja(j, j)
    Ja(j, j)
    Ja(j, j)
    Ja(j, j)
    Ja(j, j)
    Ja(j, j)
    Ja(j, j)
    Ja(j, j)
    Ja(j, j)
    Ja(j, j)
    Ja(j, j)
    Ja(j, j)
    Ja(j, j)
    Ja(j, j)
    Ja(j, j)
    Ja(j, j)
    Ja(j, j)
    Ja(j, j)
    ya(d, j, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    ya(h, d, h)
    Ja(d, h)
    c = 0
    do {
      Ja(d, d)
      c = c + 1 | 0
    } while ((c | 0) !== 49)
    ya(d, d, h)
    Ja(j, d)
    c = 0
    do {
      Ja(j, j)
      c = c + 1 | 0
    } while ((c | 0) !== 99)
    ya(d, j, d)
    j = 0
    do {
      Ja(d, d)
      j = j + 1 | 0
    } while ((j | 0) !== 50)
    ya(h, d, h)
    Ja(h, h)
    Ja(h, h)
    ya(h, h, e)
    ya(h, h, f)
    ya(a, h, b)
    i = g
  }

  function La (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var E = 0

    var F = 0

    var G = 0

    var H = 0

    var I = 0

    var J = 0

    var K = 0

    var L = 0

    var M = 0

    var N = 0

    var O = 0

    var P = 0

    var Q = 0

    var R = 0

    var S = 0

    var T = 0

    var U = 0

    var V = 0

    var W = 0

    var X = 0

    var Y = 0

    var Z = 0

    var _ = 0

    var $ = 0

    var aa = 0

    var ba = 0

    var ca = 0

    var da = 0

    var ea = 0

    var ha = 0

    var ia = 0

    var ja = 0

    var ka = 0

    var la = 0

    var ma = 0

    var na = 0

    var oa = 0

    var pa = 0

    var qa = 0

    var ra = 0

    var sa = 0

    var ta = 0

    var ua = 0

    var va = 0

    var wa = 0

    var xa = 0

    var ya = 0

    var za = 0

    var Aa = 0

    var Ba = 0

    var Ca = 0

    var Da = 0

    var Ea = 0

    var Fa = 0

    var Ga = 0

    var Ha = 0

    var Ia = 0

    var Ja = 0

    var Ka = 0

    var La = 0

    var Ma = 0

    var Na = 0

    var Oa = 0

    var Pa = 0

    var Qa = 0

    var Ra = 0

    var Sa = 0

    var Ta = 0

    var Ua = 0

    var Va = 0

    var Wa = 0

    var Xa = 0

    var Ya = 0

    var Za = 0

    var _a = 0

    var $a = 0

    var ab = 0

    var bb = 0

    var cb = 0

    var db = 0

    var eb = 0

    var ib = 0

    var jb = 0

    var lb = 0

    var mb = 0

    var nb = 0
    c = i
    eb = fa(b | 0, 4, 0, 0) | 0 | 0
    Oa = fa(b + 4 | 0, 4, 0, 0) | 0 | 0
    k = fa(b + 8 | 0, 4, 0, 0) | 0 | 0
    ea = fa(b + 12 | 0, 4, 0, 0) | 0 | 0
    e = fa(b + 16 | 0, 4, 0, 0) | 0 | 0
    jb = fa(b + 20 | 0, 4, 0, 0) | 0 | 0
    y = fa(b + 24 | 0, 4, 0, 0) | 0 | 0
    sa = fa(b + 28 | 0, 4, 0, 0) | 0 | 0
    h = fa(b + 32 | 0, 4, 0, 0) | 0 | 0
    b = fa(b + 36 | 0, 4, 0, 0) | 0 | 0
    m = eb << 1
    o = Oa << 1
    _a = k << 1
    f = ea << 1
    Ia = e << 1
    d = jb << 1
    ra = y << 1
    j = sa << 1
    Za = jb * 38 | 0
    Ma = y * 19 | 0
    ia = sa * 38 | 0
    Y = h * 19 | 0
    nb = b * 38 | 0
    ib = ((eb | 0) < 0) << 31 >> 31
    ib = sb(eb | 0, ib | 0, eb | 0, ib | 0) | 0
    eb = D
    p = ((m | 0) < 0) << 31 >> 31
    Pa = ((Oa | 0) < 0) << 31 >> 31
    Xa = sb(m | 0, p | 0, Oa | 0, Pa | 0) | 0
    Wa = D
    l = ((k | 0) < 0) << 31 >> 31
    Ra = sb(k | 0, l | 0, m | 0, p | 0) | 0
    Qa = D
    ha = ((ea | 0) < 0) << 31 >> 31
    Ha = sb(ea | 0, ha | 0, m | 0, p | 0) | 0
    Ga = D
    v = ((e | 0) < 0) << 31 >> 31
    va = sb(e | 0, v | 0, m | 0, p | 0) | 0
    ua = D
    lb = ((jb | 0) < 0) << 31 >> 31
    la = sb(jb | 0, lb | 0, m | 0, p | 0) | 0
    ka = D
    g = ((y | 0) < 0) << 31 >> 31
    $ = sb(y | 0, g | 0, m | 0, p | 0) | 0
    _ = D
    ta = ((sa | 0) < 0) << 31 >> 31
    R = sb(sa | 0, ta | 0, m | 0, p | 0) | 0
    Q = D
    t = ((h | 0) < 0) << 31 >> 31
    H = sb(h | 0, t | 0, m | 0, p | 0) | 0
    G = D
    r = ((b | 0) < 0) << 31 >> 31
    p = sb(b | 0, r | 0, m | 0, p | 0) | 0
    m = D
    q = ((o | 0) < 0) << 31 >> 31
    Pa = sb(o | 0, q | 0, Oa | 0, Pa | 0) | 0
    Oa = D
    Fa = sb(o | 0, q | 0, k | 0, l | 0) | 0
    Ea = D
    x = ((f | 0) < 0) << 31 >> 31
    za = sb(f | 0, x | 0, o | 0, q | 0) | 0
    ya = D
    pa = sb(e | 0, v | 0, o | 0, q | 0) | 0
    oa = D
    u = ((d | 0) < 0) << 31 >> 31
    ba = sb(d | 0, u | 0, o | 0, q | 0) | 0
    aa = D
    T = sb(y | 0, g | 0, o | 0, q | 0) | 0
    S = D
    w = ((j | 0) < 0) << 31 >> 31
    J = sb(j | 0, w | 0, o | 0, q | 0) | 0
    I = D
    n = sb(h | 0, t | 0, o | 0, q | 0) | 0
    s = D
    mb = ((nb | 0) < 0) << 31 >> 31
    q = sb(nb | 0, mb | 0, o | 0, q | 0) | 0
    o = D
    xa = sb(k | 0, l | 0, k | 0, l | 0) | 0
    wa = D
    $a = ((_a | 0) < 0) << 31 >> 31
    na = sb(_a | 0, $a | 0, ea | 0, ha | 0) | 0
    ma = D
    da = sb(e | 0, v | 0, _a | 0, $a | 0) | 0
    ca = D
    X = sb(jb | 0, lb | 0, _a | 0, $a | 0) | 0
    W = D
    P = sb(y | 0, g | 0, _a | 0, $a | 0) | 0
    O = D
    A = sb(sa | 0, ta | 0, _a | 0, $a | 0) | 0
    z = D
    Z = ((Y | 0) < 0) << 31 >> 31
    $a = sb(Y | 0, Z | 0, _a | 0, $a | 0) | 0
    _a = D
    l = sb(nb | 0, mb | 0, k | 0, l | 0) | 0
    k = D
    ha = sb(f | 0, x | 0, ea | 0, ha | 0) | 0
    ea = D
    V = sb(f | 0, x | 0, e | 0, v | 0) | 0
    U = D
    L = sb(d | 0, u | 0, f | 0, x | 0) | 0
    K = D
    F = sb(y | 0, g | 0, f | 0, x | 0) | 0
    E = D
    ja = ((ia | 0) < 0) << 31 >> 31
    bb = sb(ia | 0, ja | 0, f | 0, x | 0) | 0
    ab = D
    Ta = sb(Y | 0, Z | 0, f | 0, x | 0) | 0
    Sa = D
    x = sb(nb | 0, mb | 0, f | 0, x | 0) | 0
    f = D
    N = sb(e | 0, v | 0, e | 0, v | 0) | 0
    M = D
    Ja = ((Ia | 0) < 0) << 31 >> 31
    C = sb(Ia | 0, Ja | 0, jb | 0, lb | 0) | 0
    B = D
    Na = ((Ma | 0) < 0) << 31 >> 31
    db = sb(Ma | 0, Na | 0, Ia | 0, Ja | 0) | 0
    cb = D
    Va = sb(ia | 0, ja | 0, e | 0, v | 0) | 0
    Ua = D
    Ja = sb(Y | 0, Z | 0, Ia | 0, Ja | 0) | 0
    Ia = D
    v = sb(nb | 0, mb | 0, e | 0, v | 0) | 0
    e = D
    lb = sb(Za | 0, ((Za | 0) < 0) << 31 >> 31 | 0, jb | 0, lb | 0) | 0
    jb = D
    Za = sb(Ma | 0, Na | 0, d | 0, u | 0) | 0
    Ya = D
    La = sb(ia | 0, ja | 0, d | 0, u | 0) | 0
    Ka = D
    Ba = sb(Y | 0, Z | 0, d | 0, u | 0) | 0
    Aa = D
    u = sb(nb | 0, mb | 0, d | 0, u | 0) | 0
    d = D
    Na = sb(Ma | 0, Na | 0, y | 0, g | 0) | 0
    Ma = D
    Da = sb(ia | 0, ja | 0, y | 0, g | 0) | 0
    Ca = D
    ra = sb(Y | 0, Z | 0, ra | 0, ((ra | 0) < 0) << 31 >> 31 | 0) | 0
    qa = D
    g = sb(nb | 0, mb | 0, y | 0, g | 0) | 0
    y = D
    ta = sb(ia | 0, ja | 0, sa | 0, ta | 0) | 0
    sa = D
    ja = sb(Y | 0, Z | 0, j | 0, w | 0) | 0
    ia = D
    w = sb(nb | 0, mb | 0, j | 0, w | 0) | 0
    j = D
    Z = sb(Y | 0, Z | 0, h | 0, t | 0) | 0
    Y = D
    t = sb(nb | 0, mb | 0, h | 0, t | 0) | 0
    h = D
    r = sb(nb | 0, mb | 0, b | 0, r | 0) | 0
    b = D
    eb = hb(lb | 0, jb | 0, ib | 0, eb | 0) | 0
    cb = hb(eb | 0, D | 0, db | 0, cb | 0) | 0
    ab = hb(cb | 0, D | 0, bb | 0, ab | 0) | 0
    _a = hb(ab | 0, D | 0, $a | 0, _a | 0) | 0
    o = hb(_a | 0, D | 0, q | 0, o | 0) | 0
    q = D
    Wa = hb(Za | 0, Ya | 0, Xa | 0, Wa | 0) | 0
    Ua = hb(Wa | 0, D | 0, Va | 0, Ua | 0) | 0
    Sa = hb(Ua | 0, D | 0, Ta | 0, Sa | 0) | 0
    k = hb(Sa | 0, D | 0, l | 0, k | 0) | 0
    l = D
    Oa = hb(Ra | 0, Qa | 0, Pa | 0, Oa | 0) | 0
    Ma = hb(Oa | 0, D | 0, Na | 0, Ma | 0) | 0
    Ka = hb(Ma | 0, D | 0, La | 0, Ka | 0) | 0
    Ia = hb(Ka | 0, D | 0, Ja | 0, Ia | 0) | 0
    f = hb(Ia | 0, D | 0, x | 0, f | 0) | 0
    x = D
    Ea = hb(Ha | 0, Ga | 0, Fa | 0, Ea | 0) | 0
    Ca = hb(Ea | 0, D | 0, Da | 0, Ca | 0) | 0
    Aa = hb(Ca | 0, D | 0, Ba | 0, Aa | 0) | 0
    e = hb(Aa | 0, D | 0, v | 0, e | 0) | 0
    v = D
    wa = hb(za | 0, ya | 0, xa | 0, wa | 0) | 0
    ua = hb(wa | 0, D | 0, va | 0, ua | 0) | 0
    sa = hb(ua | 0, D | 0, ta | 0, sa | 0) | 0
    qa = hb(sa | 0, D | 0, ra | 0, qa | 0) | 0
    d = hb(qa | 0, D | 0, u | 0, d | 0) | 0
    u = D
    ma = hb(pa | 0, oa | 0, na | 0, ma | 0) | 0
    ka = hb(ma | 0, D | 0, la | 0, ka | 0) | 0
    ia = hb(ka | 0, D | 0, ja | 0, ia | 0) | 0
    y = hb(ia | 0, D | 0, g | 0, y | 0) | 0
    g = D
    ca = hb(ha | 0, ea | 0, da | 0, ca | 0) | 0
    aa = hb(ca | 0, D | 0, ba | 0, aa | 0) | 0
    _ = hb(aa | 0, D | 0, $ | 0, _ | 0) | 0
    Y = hb(_ | 0, D | 0, Z | 0, Y | 0) | 0
    j = hb(Y | 0, D | 0, w | 0, j | 0) | 0
    w = D
    U = hb(X | 0, W | 0, V | 0, U | 0) | 0
    S = hb(U | 0, D | 0, T | 0, S | 0) | 0
    Q = hb(S | 0, D | 0, R | 0, Q | 0) | 0
    h = hb(Q | 0, D | 0, t | 0, h | 0) | 0
    t = D
    M = hb(P | 0, O | 0, N | 0, M | 0) | 0
    K = hb(M | 0, D | 0, L | 0, K | 0) | 0
    I = hb(K | 0, D | 0, J | 0, I | 0) | 0
    G = hb(I | 0, D | 0, H | 0, G | 0) | 0
    b = hb(G | 0, D | 0, r | 0, b | 0) | 0
    r = D
    B = hb(F | 0, E | 0, C | 0, B | 0) | 0
    z = hb(B | 0, D | 0, A | 0, z | 0) | 0
    s = hb(z | 0, D | 0, n | 0, s | 0) | 0
    m = hb(s | 0, D | 0, p | 0, m | 0) | 0
    p = D
    q = kb(o | 0, q | 0, 1) | 0
    o = D
    l = kb(k | 0, l | 0, 1) | 0
    k = D
    x = kb(f | 0, x | 0, 1) | 0
    f = D
    v = kb(e | 0, v | 0, 1) | 0
    e = D
    u = kb(d | 0, u | 0, 1) | 0
    d = D
    g = kb(y | 0, g | 0, 1) | 0
    y = D
    w = kb(j | 0, w | 0, 1) | 0
    j = D
    t = kb(h | 0, t | 0, 1) | 0
    h = D
    r = kb(b | 0, r | 0, 1) | 0
    b = D
    p = kb(m | 0, p | 0, 1) | 0
    m = D
    s = hb(q | 0, o | 0, 33554432, 0) | 0
    s = fb(s | 0, D | 0, 26) | 0
    n = D
    k = hb(s | 0, n | 0, l | 0, k | 0) | 0
    l = D
    n = kb(s | 0, n | 0, 26) | 0
    n = gb(q | 0, o | 0, n | 0, D | 0) | 0
    o = D
    q = hb(u | 0, d | 0, 33554432, 0) | 0
    q = fb(q | 0, D | 0, 26) | 0
    s = D
    y = hb(q | 0, s | 0, g | 0, y | 0) | 0
    g = D
    s = kb(q | 0, s | 0, 26) | 0
    s = gb(u | 0, d | 0, s | 0, D | 0) | 0
    d = D
    u = hb(k | 0, l | 0, 16777216, 0) | 0
    u = fb(u | 0, D | 0, 25) | 0
    q = D
    f = hb(u | 0, q | 0, x | 0, f | 0) | 0
    x = D
    q = kb(u | 0, q | 0, 25) | 0
    q = gb(k | 0, l | 0, q | 0, D | 0) | 0
    l = D
    k = hb(y | 0, g | 0, 16777216, 0) | 0
    k = fb(k | 0, D | 0, 25) | 0
    u = D
    j = hb(k | 0, u | 0, w | 0, j | 0) | 0
    w = D
    u = kb(k | 0, u | 0, 25) | 0
    u = gb(y | 0, g | 0, u | 0, D | 0) | 0
    g = D
    y = hb(f | 0, x | 0, 33554432, 0) | 0
    y = fb(y | 0, D | 0, 26) | 0
    k = D
    e = hb(y | 0, k | 0, v | 0, e | 0) | 0
    v = D
    k = kb(y | 0, k | 0, 26) | 0
    k = gb(f | 0, x | 0, k | 0, D | 0) | 0
    x = hb(j | 0, w | 0, 33554432, 0) | 0
    x = fb(x | 0, D | 0, 26) | 0
    f = D
    h = hb(x | 0, f | 0, t | 0, h | 0) | 0
    t = D
    f = kb(x | 0, f | 0, 26) | 0
    f = gb(j | 0, w | 0, f | 0, D | 0) | 0
    w = hb(e | 0, v | 0, 16777216, 0) | 0
    w = fb(w | 0, D | 0, 25) | 0
    j = D
    d = hb(w | 0, j | 0, s | 0, d | 0) | 0
    s = D
    j = kb(w | 0, j | 0, 25) | 0
    j = gb(e | 0, v | 0, j | 0, D | 0) | 0
    v = hb(h | 0, t | 0, 16777216, 0) | 0
    v = fb(v | 0, D | 0, 25) | 0
    e = D
    b = hb(v | 0, e | 0, r | 0, b | 0) | 0
    r = D
    e = kb(v | 0, e | 0, 25) | 0
    e = gb(h | 0, t | 0, e | 0, D | 0) | 0
    t = hb(d | 0, s | 0, 33554432, 0) | 0
    t = fb(t | 0, D | 0, 26) | 0
    h = D
    g = hb(u | 0, g | 0, t | 0, h | 0) | 0
    h = kb(t | 0, h | 0, 26) | 0
    h = gb(d | 0, s | 0, h | 0, D | 0) | 0
    s = hb(b | 0, r | 0, 33554432, 0) | 0
    s = fb(s | 0, D | 0, 26) | 0
    d = D
    m = hb(s | 0, d | 0, p | 0, m | 0) | 0
    p = D
    d = kb(s | 0, d | 0, 26) | 0
    d = gb(b | 0, r | 0, d | 0, D | 0) | 0
    r = hb(m | 0, p | 0, 16777216, 0) | 0
    r = fb(r | 0, D | 0, 25) | 0
    b = D
    s = sb(r | 0, b | 0, 19, 0) | 0
    o = hb(s | 0, D | 0, n | 0, o | 0) | 0
    n = D
    b = kb(r | 0, b | 0, 25) | 0
    b = gb(m | 0, p | 0, b | 0, D | 0) | 0
    p = hb(o | 0, n | 0, 33554432, 0) | 0
    p = fb(p | 0, D | 0, 26) | 0
    m = D
    l = hb(q | 0, l | 0, p | 0, m | 0) | 0
    m = kb(p | 0, m | 0, 26) | 0
    m = gb(o | 0, n | 0, m | 0, D | 0) | 0
    ga(a | 0, m | 0, 4, 0)
    ga(a + 4 | 0, l | 0, 4, 0)
    ga(a + 8 | 0, k | 0, 4, 0)
    ga(a + 12 | 0, j | 0, 4, 0)
    ga(a + 16 | 0, h | 0, 4, 0)
    ga(a + 20 | 0, g | 0, 4, 0)
    ga(a + 24 | 0, f | 0, 4, 0)
    ga(a + 28 | 0, e | 0, 4, 0)
    ga(a + 32 | 0, d | 0, 4, 0)
    ga(a + 36 | 0, b | 0, 4, 0)
    i = c
  }

  function Ma (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0
    c = i
    i = i + 160 | 0
    d = c + 120 | 0
    g = c + 80 | 0
    e = c + 40 | 0
    f = c
    Na(g, b + 80 | 0)
    ya(e, b, g)
    ya(f, b + 40 | 0, g)
    Oa(a, f)
    Oa(d, e)
    b = a + 31 | 0
    ga(b >> 0 | 0, (fa(b >> 0 | 0, 1, 0, 1) | 0 | 0) ^ (fa(d >> 0 | 0, 1, 0, 1) | 0 | 0) << 7 | 0, 1, 0)
    i = c
  }

  function Na (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0
    f = i
    i = i + 160 | 0
    e = f + 120 | 0
    c = f + 80 | 0
    d = f + 40 | 0
    g = f
    Ja(e, b)
    Ja(c, e)
    Ja(c, c)
    ya(c, b, c)
    ya(e, e, c)
    Ja(d, e)
    ya(c, c, d)
    Ja(d, c)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    ya(c, d, c)
    Ja(d, c)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    ya(d, d, c)
    Ja(g, d)
    Ja(g, g)
    Ja(g, g)
    Ja(g, g)
    Ja(g, g)
    Ja(g, g)
    Ja(g, g)
    Ja(g, g)
    Ja(g, g)
    Ja(g, g)
    Ja(g, g)
    Ja(g, g)
    Ja(g, g)
    Ja(g, g)
    Ja(g, g)
    Ja(g, g)
    Ja(g, g)
    Ja(g, g)
    Ja(g, g)
    Ja(g, g)
    ya(d, g, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    Ja(d, d)
    ya(c, d, c)
    Ja(d, c)
    b = 0
    do {
      Ja(d, d)
      b = b + 1 | 0
    } while ((b | 0) !== 49)
    ya(d, d, c)
    Ja(g, d)
    b = 0
    do {
      Ja(g, g)
      b = b + 1 | 0
    } while ((b | 0) !== 99)
    ya(d, g, d)
    Ja(d, d)
    g = 0
    do {
      Ja(d, d)
      g = g + 1 | 0
    } while ((g | 0) !== 49)
    ya(c, d, c)
    Ja(c, c)
    Ja(c, c)
    Ja(c, c)
    Ja(c, c)
    Ja(c, c)
    ya(a, c, e)
    i = f
  }

  function Oa (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var i = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0
    k = fa(b | 0, 4, 0, 0) | 0 | 0
    j = fa(b + 4 | 0, 4, 0, 0) | 0 | 0
    i = fa(b + 8 | 0, 4, 0, 0) | 0 | 0
    h = fa(b + 12 | 0, 4, 0, 0) | 0 | 0
    g = fa(b + 16 | 0, 4, 0, 0) | 0 | 0
    f = fa(b + 20 | 0, 4, 0, 0) | 0 | 0
    e = fa(b + 24 | 0, 4, 0, 0) | 0 | 0
    d = fa(b + 28 | 0, 4, 0, 0) | 0 | 0
    m = fa(b + 32 | 0, 4, 0, 0) | 0 | 0
    c = fa(b + 36 | 0, 4, 0, 0) | 0 | 0
    k = (((((((((((((c * 19 | 0) + 16777216 >> 25) + k >> 26) + j >> 25) + i >> 26) + h >> 25) + g >> 26) + f >> 25) + e >> 26) + d >> 25) + m >> 26) + c >> 25) * 19 | 0) + k | 0
    l = k >> 26
    j = l + j | 0
    l = k - (l << 26) | 0
    k = j >> 25
    i = k + i | 0
    k = j - (k << 25) | 0
    j = i >> 26
    h = j + h | 0
    j = i - (j << 26) | 0
    i = h >> 25
    g = i + g | 0
    i = h - (i << 25) | 0
    h = g >> 26
    f = h + f | 0
    h = g - (h << 26) | 0
    g = f >> 25
    e = g + e | 0
    g = f - (g << 25) | 0
    f = e >> 26
    d = f + d | 0
    f = e - (f << 26) | 0
    e = d >> 25
    b = e + m | 0
    e = d - (e << 25) | 0
    d = b >> 26
    c = d + c | 0
    d = b - (d << 26) | 0
    b = c & 33554431
    ga(a >> 0 | 0, l | 0, 1, 0)
    ga(a + 1 >> 0 | 0, l >>> 8 | 0, 1, 0)
    ga(a + 2 >> 0 | 0, l >>> 16 | 0, 1, 0)
    ga(a + 3 >> 0 | 0, k << 2 | l >>> 24 | 0, 1, 0)
    ga(a + 4 >> 0 | 0, k >>> 6 | 0, 1, 0)
    ga(a + 5 >> 0 | 0, k >>> 14 | 0, 1, 0)
    ga(a + 6 >> 0 | 0, j << 3 | k >>> 22 | 0, 1, 0)
    ga(a + 7 >> 0 | 0, j >>> 5 | 0, 1, 0)
    ga(a + 8 >> 0 | 0, j >>> 13 | 0, 1, 0)
    ga(a + 9 >> 0 | 0, i << 5 | j >>> 21 | 0, 1, 0)
    ga(a + 10 >> 0 | 0, i >>> 3 | 0, 1, 0)
    ga(a + 11 >> 0 | 0, i >>> 11 | 0, 1, 0)
    ga(a + 12 >> 0 | 0, h << 6 | i >>> 19 | 0, 1, 0)
    ga(a + 13 >> 0 | 0, h >>> 2 | 0, 1, 0)
    ga(a + 14 >> 0 | 0, h >>> 10 | 0, 1, 0)
    ga(a + 15 >> 0 | 0, h >>> 18 | 0, 1, 0)
    ga(a + 16 >> 0 | 0, g | 0, 1, 0)
    ga(a + 17 >> 0 | 0, g >>> 8 | 0, 1, 0)
    ga(a + 18 >> 0 | 0, g >>> 16 | 0, 1, 0)
    ga(a + 19 >> 0 | 0, f << 1 | g >>> 24 | 0, 1, 0)
    ga(a + 20 >> 0 | 0, f >>> 7 | 0, 1, 0)
    ga(a + 21 >> 0 | 0, f >>> 15 | 0, 1, 0)
    ga(a + 22 >> 0 | 0, e << 3 | f >>> 23 | 0, 1, 0)
    ga(a + 23 >> 0 | 0, e >>> 5 | 0, 1, 0)
    ga(a + 24 >> 0 | 0, e >>> 13 | 0, 1, 0)
    ga(a + 25 >> 0 | 0, d << 4 | e >>> 21 | 0, 1, 0)
    ga(a + 26 >> 0 | 0, d >>> 4 | 0, 1, 0)
    ga(a + 27 >> 0 | 0, d >>> 12 | 0, 1, 0)
    ga(a + 28 >> 0 | 0, d >>> 20 | b << 6 | 0, 1, 0)
    ga(a + 29 >> 0 | 0, c >>> 2 | 0, 1, 0)
    ga(a + 30 >> 0 | 0, c >>> 10 | 0, 1, 0)
    ga(a + 31 >> 0 | 0, b >>> 18 | 0, 1, 0)
  }

  function Pa (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0
    c = i
    i = i + 592 | 0
    g = c + 400 | 0
    d = c + 520 | 0
    f = c + 240 | 0
    h = c + 120 | 0
    e = c
    j = 0
    do {
      q = fa(b + j >> 0 | 0, 1, 0, 0) | 0 | 0
      p = j << 1
      ga(d + p >> 0 | 0, q & 15 | 0, 1, 0)
      ga(d + (p | 1) >> 0 | 0, (q & 255) >>> 4 | 0, 1, 0)
      j = j + 1 | 0
    } while ((j | 0) !== 32)
    b = 0
    j = 0
    do {
      p = d + j | 0
      q = (fa(p >> 0 | 0, 1, 0, 1) | 0 | 0) + b | 0
      b = (q << 24) + 134217728 >> 28
      ga(p >> 0 | 0, q - (b << 4) | 0, 1, 0)
      j = j + 1 | 0
    } while ((j | 0) !== 63)
    m = d + 63 | 0
    ga(m >> 0 | 0, (fa(m >> 0 | 0, 1, 0, 1) | 0 | 0) + b | 0, 1, 0)
    m = a + 0 | 0
    n = m + 40 | 0
    do {
      ga(m | 0, 0 | 0, 4, 0)
      m = m + 4 | 0
    } while ((m | 0) < (n | 0))
    j = a + 40 | 0
    ga(j | 0, 1 | 0, 4, 0)
    k = a + 44 | 0
    m = k + 0 | 0
    n = m + 36 | 0
    do {
      ga(m | 0, 0 | 0, 4, 0)
      m = m + 4 | 0
    } while ((m | 0) < (n | 0))
    b = a + 80 | 0
    ga(b | 0, 1 | 0, 4, 0)
    l = a + 84 | 0
    m = l + 0 | 0
    n = m + 76 | 0
    do {
      ga(m | 0, 0 | 0, 4, 0)
      m = m + 4 | 0
    } while ((m | 0) < (n | 0))
    m = f + 120 | 0
    n = f + 40 | 0
    p = f + 80 | 0
    o = a + 120 | 0
    q = 1
    do {
      Qa(e, (q | 0) / 2 | 0, fa(d + q >> 0 | 0, 1, 0, 0) | 0 | 0)
      Ga(f, a, e)
      ya(a, f, m)
      ya(j, n, p)
      ya(b, p, m)
      ya(o, f, n)
      q = q + 2 | 0
    } while ((q | 0) < 64)
    y = fa(a + 4 | 0, 4, 0, 0) | 0 | 0
    w = fa(a + 8 | 0, 4, 0, 0) | 0 | 0
    v = fa(a + 12 | 0, 4, 0, 0) | 0 | 0
    u = fa(a + 16 | 0, 4, 0, 0) | 0 | 0
    t = fa(a + 20 | 0, 4, 0, 0) | 0 | 0
    s = fa(a + 24 | 0, 4, 0, 0) | 0 | 0
    r = fa(a + 28 | 0, 4, 0, 0) | 0 | 0
    q = fa(a + 32 | 0, 4, 0, 0) | 0 | 0
    x = fa(a + 36 | 0, 4, 0, 0) | 0 | 0
    ga(g | 0, fa(a | 0, 4, 0, 0) | 0 | 0, 4, 0)
    ga(g + 4 | 0, y | 0, 4, 0)
    ga(g + 8 | 0, w | 0, 4, 0)
    ga(g + 12 | 0, v | 0, 4, 0)
    ga(g + 16 | 0, u | 0, 4, 0)
    ga(g + 20 | 0, t | 0, 4, 0)
    ga(g + 24 | 0, s | 0, 4, 0)
    ga(g + 28 | 0, r | 0, 4, 0)
    ga(g + 32 | 0, q | 0, 4, 0)
    ga(g + 36 | 0, x | 0, 4, 0)
    x = fa(k | 0, 4, 0, 0) | 0 | 0
    q = fa(a + 48 | 0, 4, 0, 0) | 0 | 0
    k = fa(a + 52 | 0, 4, 0, 0) | 0 | 0
    r = fa(a + 56 | 0, 4, 0, 0) | 0 | 0
    s = fa(a + 60 | 0, 4, 0, 0) | 0 | 0
    t = fa(a + 64 | 0, 4, 0, 0) | 0 | 0
    u = fa(a + 68 | 0, 4, 0, 0) | 0 | 0
    v = fa(a + 72 | 0, 4, 0, 0) | 0 | 0
    w = fa(a + 76 | 0, 4, 0, 0) | 0 | 0
    ga(g + 40 | 0, fa(j | 0, 4, 0, 0) | 0 | 0, 4, 0)
    ga(g + 44 | 0, x | 0, 4, 0)
    ga(g + 48 | 0, q | 0, 4, 0)
    ga(g + 52 | 0, k | 0, 4, 0)
    ga(g + 56 | 0, r | 0, 4, 0)
    ga(g + 60 | 0, s | 0, 4, 0)
    ga(g + 64 | 0, t | 0, 4, 0)
    ga(g + 68 | 0, u | 0, 4, 0)
    ga(g + 72 | 0, v | 0, 4, 0)
    ga(g + 76 | 0, w | 0, 4, 0)
    w = fa(l | 0, 4, 0, 0) | 0 | 0
    v = fa(a + 88 | 0, 4, 0, 0) | 0 | 0
    u = fa(a + 92 | 0, 4, 0, 0) | 0 | 0
    t = fa(a + 96 | 0, 4, 0, 0) | 0 | 0
    s = fa(a + 100 | 0, 4, 0, 0) | 0 | 0
    r = fa(a + 104 | 0, 4, 0, 0) | 0 | 0
    k = fa(a + 108 | 0, 4, 0, 0) | 0 | 0
    l = fa(a + 112 | 0, 4, 0, 0) | 0 | 0
    q = fa(a + 116 | 0, 4, 0, 0) | 0 | 0
    ga(g + 80 | 0, fa(b | 0, 4, 0, 0) | 0 | 0, 4, 0)
    ga(g + 84 | 0, w | 0, 4, 0)
    ga(g + 88 | 0, v | 0, 4, 0)
    ga(g + 92 | 0, u | 0, 4, 0)
    ga(g + 96 | 0, t | 0, 4, 0)
    ga(g + 100 | 0, s | 0, 4, 0)
    ga(g + 104 | 0, r | 0, 4, 0)
    ga(g + 108 | 0, k | 0, 4, 0)
    ga(g + 112 | 0, l | 0, 4, 0)
    ga(g + 116 | 0, q | 0, 4, 0)
    Ea(f, g)
    ya(h, f, m)
    q = h + 40 | 0
    ya(q, n, p)
    g = h + 80 | 0
    ya(g, p, m)
    Ea(f, h)
    ya(h, f, m)
    ya(q, n, p)
    ya(g, p, m)
    Ea(f, h)
    ya(h, f, m)
    ya(q, n, p)
    ya(g, p, m)
    Ea(f, h)
    ya(a, f, m)
    ya(j, n, p)
    ya(b, p, m)
    ya(o, f, n)
    g = 0
    do {
      Qa(e, (g | 0) / 2 | 0, fa(d + g >> 0 | 0, 1, 0, 0) | 0 | 0)
      Ga(f, a, e)
      ya(a, f, m)
      ya(j, n, p)
      ya(b, p, m)
      ya(o, f, n)
      g = g + 2 | 0
    } while ((g | 0) < 64)
    i = c
  }

  function Qa (a, b, c) {
    a = a | 0
    b = b | 0
    c = c | 0
    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0
    d = i
    i = i + 128 | 0
    e = d
    f = c << 24 >> 24
    f = jb(f | 0, ((f | 0) < 0) << 31 >> 31 | 0, 63) | 0
    j = c << 24 >> 24
    j = j - ((j & 0 - f) << 1) | 0
    ga(a | 0, 1 | 0, 4, 0)
    c = a + 4 | 0
    h = c + 0 | 0
    g = h + 36 | 0
    do {
      ga(h | 0, 0 | 0, 4, 0)
      h = h + 4 | 0
    } while ((h | 0) < (g | 0))
    k = a + 40 | 0
    ga(k | 0, 1 | 0, 4, 0)
    l = a + 44 | 0
    h = l + 0 | 0
    g = h + 76 | 0
    do {
      ga(h | 0, 0 | 0, 4, 0)
      h = h + 4 | 0
    } while ((h | 0) < (g | 0))
    r = j & 255
    q = ((r ^ 1) + -1 | 0) >>> 31
    bb(a, 360 + (b * 960 | 0) | 0, q)
    bb(k, 400 + (b * 960 | 0) | 0, q)
    j = a + 80 | 0
    bb(j, 440 + (b * 960 | 0) | 0, q)
    q = ((r ^ 2) + -1 | 0) >>> 31
    bb(a, 480 + (b * 960 | 0) | 0, q)
    bb(k, 520 + (b * 960 | 0) | 0, q)
    bb(j, 560 + (b * 960 | 0) | 0, q)
    q = ((r ^ 3) + -1 | 0) >>> 31
    bb(a, 600 + (b * 960 | 0) | 0, q)
    bb(k, 640 + (b * 960 | 0) | 0, q)
    bb(j, 680 + (b * 960 | 0) | 0, q)
    q = ((r ^ 4) + -1 | 0) >>> 31
    bb(a, 720 + (b * 960 | 0) | 0, q)
    bb(k, 760 + (b * 960 | 0) | 0, q)
    bb(j, 800 + (b * 960 | 0) | 0, q)
    q = ((r ^ 5) + -1 | 0) >>> 31
    bb(a, 840 + (b * 960 | 0) | 0, q)
    bb(k, 880 + (b * 960 | 0) | 0, q)
    bb(j, 920 + (b * 960 | 0) | 0, q)
    q = ((r ^ 6) + -1 | 0) >>> 31
    bb(a, 960 + (b * 960 | 0) | 0, q)
    bb(k, 1e3 + (b * 960 | 0) | 0, q)
    bb(j, 1040 + (b * 960 | 0) | 0, q)
    q = ((r ^ 7) + -1 | 0) >>> 31
    bb(a, 1080 + (b * 960 | 0) | 0, q)
    bb(k, 1120 + (b * 960 | 0) | 0, q)
    bb(j, 1160 + (b * 960 | 0) | 0, q)
    r = ((r ^ 8) + -1 | 0) >>> 31
    bb(a, 1200 + (b * 960 | 0) | 0, r)
    bb(k, 1240 + (b * 960 | 0) | 0, r)
    bb(j, 1280 + (b * 960 | 0) | 0, r)
    l = fa(l | 0, 4, 0, 0) | 0 | 0
    r = fa(a + 48 | 0, 4, 0, 0) | 0 | 0
    q = fa(a + 52 | 0, 4, 0, 0) | 0 | 0
    p = fa(a + 56 | 0, 4, 0, 0) | 0 | 0
    o = fa(a + 60 | 0, 4, 0, 0) | 0 | 0
    n = fa(a + 64 | 0, 4, 0, 0) | 0 | 0
    m = fa(a + 68 | 0, 4, 0, 0) | 0 | 0
    b = fa(a + 72 | 0, 4, 0, 0) | 0 | 0
    h = fa(a + 76 | 0, 4, 0, 0) | 0 | 0
    ga(e | 0, fa(k | 0, 4, 0, 0) | 0 | 0, 4, 0)
    ga(e + 4 | 0, l | 0, 4, 0)
    ga(e + 8 | 0, r | 0, 4, 0)
    ga(e + 12 | 0, q | 0, 4, 0)
    ga(e + 16 | 0, p | 0, 4, 0)
    ga(e + 20 | 0, o | 0, 4, 0)
    ga(e + 24 | 0, n | 0, 4, 0)
    ga(e + 28 | 0, m | 0, 4, 0)
    ga(e + 32 | 0, b | 0, 4, 0)
    ga(e + 36 | 0, h | 0, 4, 0)
    h = e + 40 | 0
    c = fa(c | 0, 4, 0, 0) | 0 | 0
    b = fa(a + 8 | 0, 4, 0, 0) | 0 | 0
    m = fa(a + 12 | 0, 4, 0, 0) | 0 | 0
    n = fa(a + 16 | 0, 4, 0, 0) | 0 | 0
    o = fa(a + 20 | 0, 4, 0, 0) | 0 | 0
    p = fa(a + 24 | 0, 4, 0, 0) | 0 | 0
    q = fa(a + 28 | 0, 4, 0, 0) | 0 | 0
    r = fa(a + 32 | 0, 4, 0, 0) | 0 | 0
    l = fa(a + 36 | 0, 4, 0, 0) | 0 | 0
    ga(h | 0, fa(a | 0, 4, 0, 0) | 0 | 0, 4, 0)
    ga(e + 44 | 0, c | 0, 4, 0)
    ga(e + 48 | 0, b | 0, 4, 0)
    ga(e + 52 | 0, m | 0, 4, 0)
    ga(e + 56 | 0, n | 0, 4, 0)
    ga(e + 60 | 0, o | 0, 4, 0)
    ga(e + 64 | 0, p | 0, 4, 0)
    ga(e + 68 | 0, q | 0, 4, 0)
    ga(e + 72 | 0, r | 0, 4, 0)
    ga(e + 76 | 0, l | 0, 4, 0)
    l = e + 80 | 0
    r = 0 - (fa(a + 84 | 0, 4, 0, 0) | 0 | 0) | 0
    q = 0 - (fa(a + 88 | 0, 4, 0, 0) | 0 | 0) | 0
    p = 0 - (fa(a + 92 | 0, 4, 0, 0) | 0 | 0) | 0
    o = 0 - (fa(a + 96 | 0, 4, 0, 0) | 0 | 0) | 0
    n = 0 - (fa(a + 100 | 0, 4, 0, 0) | 0 | 0) | 0
    m = 0 - (fa(a + 104 | 0, 4, 0, 0) | 0 | 0) | 0
    b = 0 - (fa(a + 108 | 0, 4, 0, 0) | 0 | 0) | 0
    c = 0 - (fa(a + 112 | 0, 4, 0, 0) | 0 | 0) | 0
    g = 0 - (fa(a + 116 | 0, 4, 0, 0) | 0 | 0) | 0
    ga(l | 0, 0 - (fa(j | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
    ga(e + 84 | 0, r | 0, 4, 0)
    ga(e + 88 | 0, q | 0, 4, 0)
    ga(e + 92 | 0, p | 0, 4, 0)
    ga(e + 96 | 0, o | 0, 4, 0)
    ga(e + 100 | 0, n | 0, 4, 0)
    ga(e + 104 | 0, m | 0, 4, 0)
    ga(e + 108 | 0, b | 0, 4, 0)
    ga(e + 112 | 0, c | 0, 4, 0)
    ga(e + 116 | 0, g | 0, 4, 0)
    bb(a, e, f)
    bb(k, h, f)
    bb(j, l, f)
    i = d
  }

  function Ra (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0
    c = i
    i = i + 160 | 0
    d = c + 120 | 0
    g = c + 80 | 0
    e = c + 40 | 0
    f = c
    Na(g, b + 80 | 0)
    ya(e, b, g)
    ya(f, b + 40 | 0, g)
    Oa(a, f)
    Oa(d, e)
    b = a + 31 | 0
    ga(b >> 0 | 0, (fa(b >> 0 | 0, 1, 0, 1) | 0 | 0) ^ (fa(d >> 0 | 0, 1, 0, 1) | 0 | 0) << 7 | 0, 1, 0)
    i = c
  }

  function Sa (a) {
    a = a | 0
    var b = 0

    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var E = 0

    var F = 0

    var G = 0

    var H = 0

    var I = 0

    var J = 0

    var K = 0

    var L = 0

    var M = 0

    var N = 0

    var O = 0

    var P = 0

    var Q = 0

    var R = 0

    var S = 0

    var T = 0

    var U = 0

    var V = 0

    var W = 0

    var X = 0

    var Y = 0

    var Z = 0

    var _ = 0

    var $ = 0

    var aa = 0

    var ba = 0

    var ca = 0

    var da = 0

    var ea = 0

    var ha = 0

    var ia = 0

    var ja = 0

    var ka = 0

    var la = 0

    var ma = 0

    var na = 0

    var oa = 0

    var pa = 0

    var qa = 0

    var ra = 0

    var sa = 0

    var ta = 0

    var ua = 0

    var va = 0

    var wa = 0

    var xa = 0

    var ya = 0

    var za = 0

    var Aa = 0

    var Ba = 0

    var Ca = 0

    var Da = 0

    var Ea = 0

    var Fa = 0

    var Ga = 0

    var Ha = 0

    var Ia = 0

    var Ja = 0

    var Ka = 0

    var La = 0

    var Ma = 0

    var Na = 0

    var Oa = 0

    var Pa = 0

    var Qa = 0

    var Ra = 0

    var Sa = 0

    var Ta = 0

    var Ua = 0

    var Va = 0

    var Wa = 0

    var Xa = 0

    var Ya = 0

    var Za = 0

    var _a = 0

    var $a = 0

    var ab = 0

    var bb = 0

    var cb = 0

    var db = 0

    var eb = 0

    var ib = 0

    var lb = 0

    var mb = 0

    var nb = 0
    b = i
    ea = a + 1 | 0
    ca = a + 2 | 0
    La = fa(ca >> 0 | 0, 1, 0, 0) | 0 | 0
    da = fa(a >> 0 | 0, 1, 0, 1) | 0 | 0
    W = kb(fa(ea >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    xa = D
    La = La & 255
    U = kb(La | 0, 0, 16) | 0
    aa = a + 3 | 0
    ua = kb(fa(aa >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    ra = D
    $ = a + 4 | 0
    V = kb(fa($ >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    ra = ra | D
    Z = a + 5 | 0
    N = fa(Z >> 0 | 0, 1, 0, 1) | 0 | 0
    X = kb(N | 0, 0, 24) | 0
    ra = jb(ua | La | V | X | 0, ra | D | 0, 5) | 0
    X = a + 6 | 0
    V = a + 7 | 0
    La = fa(V >> 0 | 0, 1, 0, 0) | 0 | 0
    ua = kb(fa(X >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Ma = D
    La = La & 255
    T = kb(La | 0, 0, 16) | 0
    Ma = jb(ua | N | T | 0, Ma | D | 0, 2) | 0
    T = a + 8 | 0
    N = kb(fa(T >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    ua = D
    S = a + 9 | 0
    Ia = kb(fa(S >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    ua = ua | D
    Q = a + 10 | 0
    Ua = fa(Q >> 0 | 0, 1, 0, 1) | 0 | 0
    O = kb(Ua | 0, 0, 24) | 0
    ua = jb(N | La | Ia | O | 0, ua | D | 0, 7) | 0
    O = a + 11 | 0
    Ia = kb(fa(O >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    La = D
    N = a + 12 | 0
    H = kb(fa(N >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    La = La | D
    L = a + 13 | 0
    u = fa(L >> 0 | 0, 1, 0, 1) | 0 | 0
    J = kb(u | 0, 0, 24) | 0
    La = jb(Ia | Ua | H | J | 0, La | D | 0, 4) | 0
    J = a + 14 | 0
    H = a + 15 | 0
    Ua = fa(H >> 0 | 0, 1, 0, 0) | 0 | 0
    Ia = kb(fa(J >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Fa = D
    Ua = Ua & 255
    F = kb(Ua | 0, 0, 16) | 0
    Fa = jb(Ia | u | F | 0, Fa | D | 0, 1) | 0
    F = a + 16 | 0
    u = kb(fa(F >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Ia = D
    E = a + 17 | 0
    w = kb(fa(E >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    Ia = Ia | D
    B = a + 18 | 0
    v = fa(B >> 0 | 0, 1, 0, 1) | 0 | 0
    z = kb(v | 0, 0, 24) | 0
    Ia = jb(u | Ua | w | z | 0, Ia | D | 0, 6) | 0
    z = a + 19 | 0
    w = a + 20 | 0
    Ua = fa(w >> 0 | 0, 1, 0, 0) | 0 | 0
    u = kb(fa(z >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Va = D
    Ua = kb(Ua & 255 | 0, 0, 16) | 0
    Va = jb(u | v | Ua | 0, Va | D | 0, 3) | 0
    Ua = D
    v = a + 21 | 0
    u = a + 22 | 0
    s = a + 23 | 0
    Sa = fa(s >> 0 | 0, 1, 0, 0) | 0 | 0
    cb = fa(v >> 0 | 0, 1, 0, 1) | 0 | 0
    db = kb(fa(u >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    ab = D
    Sa = Sa & 255
    bb = kb(Sa | 0, 0, 16) | 0
    q = a + 24 | 0
    Aa = kb(fa(q >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    la = D
    p = a + 25 | 0
    j = kb(fa(p >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    la = la | D
    n = a + 26 | 0
    Ja = fa(n >> 0 | 0, 1, 0, 1) | 0 | 0
    l = kb(Ja | 0, 0, 24) | 0
    la = jb(Aa | Sa | j | l | 0, la | D | 0, 5) | 0
    l = a + 27 | 0
    j = a + 28 | 0
    Sa = fa(j >> 0 | 0, 1, 0, 0) | 0 | 0
    Aa = kb(fa(l >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    $a = D
    Sa = Sa & 255
    g = kb(Sa | 0, 0, 16) | 0
    $a = jb(Aa | Ja | g | 0, $a | D | 0, 2) | 0
    g = a + 29 | 0
    Ja = kb(fa(g >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Aa = D
    f = a + 30 | 0
    mb = kb(fa(f >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    Aa = Aa | D
    c = a + 31 | 0
    t = fa(c >> 0 | 0, 1, 0, 1) | 0 | 0
    ta = kb(t | 0, 0, 24) | 0
    Aa = jb(Ja | Sa | mb | ta | 0, Aa | D | 0, 7) | 0
    ta = kb(fa(a + 32 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    mb = D
    Sa = kb(fa(a + 33 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    mb = mb | D
    Ja = fa(a + 34 >> 0 | 0, 1, 0, 1) | 0 | 0
    Ca = kb(Ja | 0, 0, 24) | 0
    mb = jb(ta | t | Sa | Ca | 0, mb | D | 0, 4) | 0
    Ca = fa(a + 36 >> 0 | 0, 1, 0, 0) | 0 | 0
    Sa = kb(fa(a + 35 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    t = D
    Ca = Ca & 255
    ta = kb(Ca | 0, 0, 16) | 0
    t = jb(Sa | Ja | ta | 0, t | D | 0, 1) | 0
    ta = kb(fa(a + 37 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Ja = D
    Sa = kb(fa(a + 38 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    Ja = Ja | D
    wa = fa(a + 39 >> 0 | 0, 1, 0, 1) | 0 | 0
    ha = kb(wa | 0, 0, 24) | 0
    Ja = jb(ta | Ca | Sa | ha | 0, Ja | D | 0, 6) | 0
    ha = fa(a + 41 >> 0 | 0, 1, 0, 0) | 0 | 0
    Sa = kb(fa(a + 40 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Ca = D
    ha = kb(ha & 255 | 0, 0, 16) | 0
    Ca = jb(Sa | wa | ha | 0, Ca | D | 0, 3) | 0
    ha = D
    wa = fa(a + 44 >> 0 | 0, 1, 0, 0) | 0 | 0
    Sa = fa(a + 42 >> 0 | 0, 1, 0, 1) | 0 | 0
    ta = kb(fa(a + 43 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    G = D
    wa = wa & 255
    na = kb(wa | 0, 0, 16) | 0
    Ga = kb(fa(a + 45 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    K = D
    Oa = kb(fa(a + 46 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    K = K | D
    nb = fa(a + 47 >> 0 | 0, 1, 0, 1) | 0 | 0
    M = kb(nb | 0, 0, 24) | 0
    K = jb(Ga | wa | Oa | M | 0, K | D | 0, 5) | 0
    M = fa(a + 49 >> 0 | 0, 1, 0, 0) | 0 | 0
    Oa = kb(fa(a + 48 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    wa = D
    M = M & 255
    Ga = kb(M | 0, 0, 16) | 0
    wa = jb(Oa | nb | Ga | 0, wa | D | 0, 2) | 0
    wa = wa & 2097151
    Ga = kb(fa(a + 50 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    nb = D
    Oa = kb(fa(a + 51 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    nb = nb | D
    Ka = fa(a + 52 >> 0 | 0, 1, 0, 1) | 0 | 0
    m = kb(Ka | 0, 0, 24) | 0
    nb = jb(Ga | M | Oa | m | 0, nb | D | 0, 7) | 0
    nb = nb & 2097151
    m = kb(fa(a + 53 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Oa = D
    M = kb(fa(a + 54 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    Oa = Oa | D
    Ga = fa(a + 55 >> 0 | 0, 1, 0, 1) | 0 | 0
    R = kb(Ga | 0, 0, 24) | 0
    Oa = jb(m | Ka | M | R | 0, Oa | D | 0, 4) | 0
    Oa = Oa & 2097151
    R = fa(a + 57 >> 0 | 0, 1, 0, 0) | 0 | 0
    M = kb(fa(a + 56 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Ka = D
    R = R & 255
    m = kb(R | 0, 0, 16) | 0
    Ka = jb(M | Ga | m | 0, Ka | D | 0, 1) | 0
    Ka = Ka & 2097151
    m = kb(fa(a + 58 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Ga = D
    M = kb(fa(a + 59 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    Ga = Ga | D
    ja = fa(a + 60 >> 0 | 0, 1, 0, 1) | 0 | 0
    ia = kb(ja | 0, 0, 24) | 0
    Ga = jb(m | R | M | ia | 0, Ga | D | 0, 6) | 0
    Ga = Ga & 2097151
    ia = kb(fa(a + 61 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    M = D
    R = kb(fa(a + 62 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    M = M | D
    m = kb(fa(a + 63 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    M = jb(ia | ja | R | m | 0, M | D | 0, 3) | 0
    m = D
    R = sb(M | 0, m | 0, 666643, 0) | 0
    ja = D
    ia = sb(M | 0, m | 0, 470296, 0) | 0
    I = D
    r = sb(M | 0, m | 0, 654183, 0) | 0
    C = D
    P = sb(M | 0, m | 0, -997805, -1) | 0
    Y = D
    k = sb(M | 0, m | 0, 136657, 0) | 0
    e = D
    m = sb(M | 0, m | 0, -683901, -1) | 0
    G = hb(m | 0, D | 0, ta | Sa | na & 2031616 | 0, G | 0) | 0
    na = D
    Sa = sb(Ga | 0, 0, 666643, 0) | 0
    ta = D
    m = sb(Ga | 0, 0, 470296, 0) | 0
    M = D
    Xa = sb(Ga | 0, 0, 654183, 0) | 0
    Ra = D
    Ba = sb(Ga | 0, 0, -997805, -1) | 0
    _ = D
    Pa = sb(Ga | 0, 0, 136657, 0) | 0
    Qa = D
    Ga = sb(Ga | 0, 0, -683901, -1) | 0
    y = D
    d = sb(Ka | 0, 0, 666643, 0) | 0
    ba = D
    Ha = sb(Ka | 0, 0, 470296, 0) | 0
    va = D
    o = sb(Ka | 0, 0, 654183, 0) | 0
    Na = D
    eb = sb(Ka | 0, 0, -997805, -1) | 0
    Wa = D
    ya = sb(Ka | 0, 0, 136657, 0) | 0
    oa = D
    Ka = sb(Ka | 0, 0, -683901, -1) | 0
    Ja = hb(Ka | 0, D | 0, Ja & 2097151 | 0, 0) | 0
    Qa = hb(Ja | 0, D | 0, Pa | 0, Qa | 0) | 0
    Y = hb(Qa | 0, D | 0, P | 0, Y | 0) | 0
    P = D
    Qa = sb(Oa | 0, 0, 666643, 0) | 0
    Pa = D
    Ja = sb(Oa | 0, 0, 470296, 0) | 0
    Ka = D
    Ya = sb(Oa | 0, 0, 654183, 0) | 0
    sa = D
    Da = sb(Oa | 0, 0, -997805, -1) | 0
    ka = D
    lb = sb(Oa | 0, 0, 136657, 0) | 0
    ib = D
    Oa = sb(Oa | 0, 0, -683901, -1) | 0
    h = D
    A = sb(nb | 0, 0, 666643, 0) | 0
    x = D
    ma = sb(nb | 0, 0, 470296, 0) | 0
    Ta = D
    qa = sb(nb | 0, 0, 654183, 0) | 0
    pa = D
    _a = sb(nb | 0, 0, -997805, -1) | 0
    Za = D
    za = sb(nb | 0, 0, 136657, 0) | 0
    Ea = D
    nb = sb(nb | 0, 0, -683901, -1) | 0
    mb = hb(nb | 0, D | 0, mb & 2097151 | 0, 0) | 0
    ib = hb(mb | 0, D | 0, lb | 0, ib | 0) | 0
    Wa = hb(ib | 0, D | 0, eb | 0, Wa | 0) | 0
    Ra = hb(Wa | 0, D | 0, Xa | 0, Ra | 0) | 0
    I = hb(Ra | 0, D | 0, ia | 0, I | 0) | 0
    ia = D
    Ra = sb(wa | 0, 0, 666643, 0) | 0
    Ia = hb(Ra | 0, D | 0, Ia & 2097151 | 0, 0) | 0
    Ra = D
    Xa = sb(wa | 0, 0, 470296, 0) | 0
    Wa = D
    eb = sb(wa | 0, 0, 654183, 0) | 0
    ab = hb(eb | 0, D | 0, db | cb | bb & 2031616 | 0, ab | 0) | 0
    Ta = hb(ab | 0, D | 0, ma | 0, Ta | 0) | 0
    Pa = hb(Ta | 0, D | 0, Qa | 0, Pa | 0) | 0
    Qa = D
    Ta = sb(wa | 0, 0, -997805, -1) | 0
    ma = D
    ab = sb(wa | 0, 0, 136657, 0) | 0
    $a = hb(ab | 0, D | 0, $a & 2097151 | 0, 0) | 0
    Za = hb($a | 0, D | 0, _a | 0, Za | 0) | 0
    sa = hb(Za | 0, D | 0, Ya | 0, sa | 0) | 0
    va = hb(sa | 0, D | 0, Ha | 0, va | 0) | 0
    ta = hb(va | 0, D | 0, Sa | 0, ta | 0) | 0
    Sa = D
    wa = sb(wa | 0, 0, -683901, -1) | 0
    va = D
    Ha = hb(Ia | 0, Ra | 0, 1048576, 0) | 0
    Ha = jb(Ha | 0, D | 0, 21) | 0
    sa = D
    Ua = hb(Xa | 0, Wa | 0, Va | 0, Ua | 0) | 0
    Ua = hb(Ua | 0, D | 0, Ha | 0, sa | 0) | 0
    x = hb(Ua | 0, D | 0, A | 0, x | 0) | 0
    A = D
    sa = kb(Ha | 0, sa | 0, 21) | 0
    sa = gb(Ia | 0, Ra | 0, sa | 0, D | 0) | 0
    Ra = D
    Ia = hb(Pa | 0, Qa | 0, 1048576, 0) | 0
    Ia = jb(Ia | 0, D | 0, 21) | 0
    Ha = D
    la = hb(Ta | 0, ma | 0, la & 2097151 | 0, 0) | 0
    pa = hb(la | 0, D | 0, qa | 0, pa | 0) | 0
    Ka = hb(pa | 0, D | 0, Ja | 0, Ka | 0) | 0
    ba = hb(Ka | 0, D | 0, d | 0, ba | 0) | 0
    ba = hb(ba | 0, D | 0, Ia | 0, Ha | 0) | 0
    d = D
    Ha = kb(Ia | 0, Ha | 0, 21) | 0
    Ia = D
    Ka = hb(ta | 0, Sa | 0, 1048576, 0) | 0
    Ka = fb(Ka | 0, D | 0, 21) | 0
    Ja = D
    Aa = hb(wa | 0, va | 0, Aa & 2097151 | 0, 0) | 0
    Ea = hb(Aa | 0, D | 0, za | 0, Ea | 0) | 0
    ka = hb(Ea | 0, D | 0, Da | 0, ka | 0) | 0
    Na = hb(ka | 0, D | 0, o | 0, Na | 0) | 0
    M = hb(Na | 0, D | 0, m | 0, M | 0) | 0
    ja = hb(M | 0, D | 0, R | 0, ja | 0) | 0
    ja = hb(ja | 0, D | 0, Ka | 0, Ja | 0) | 0
    R = D
    Ja = kb(Ka | 0, Ja | 0, 21) | 0
    Ka = D
    M = hb(I | 0, ia | 0, 1048576, 0) | 0
    M = fb(M | 0, D | 0, 21) | 0
    m = D
    t = hb(Oa | 0, h | 0, t & 2097151 | 0, 0) | 0
    oa = hb(t | 0, D | 0, ya | 0, oa | 0) | 0
    _ = hb(oa | 0, D | 0, Ba | 0, _ | 0) | 0
    C = hb(_ | 0, D | 0, r | 0, C | 0) | 0
    C = hb(C | 0, D | 0, M | 0, m | 0) | 0
    r = D
    m = kb(M | 0, m | 0, 21) | 0
    m = gb(I | 0, ia | 0, m | 0, D | 0) | 0
    ia = D
    I = hb(Y | 0, P | 0, 1048576, 0) | 0
    I = fb(I | 0, D | 0, 21) | 0
    M = D
    ha = hb(Ga | 0, y | 0, Ca | 0, ha | 0) | 0
    e = hb(ha | 0, D | 0, k | 0, e | 0) | 0
    e = hb(e | 0, D | 0, I | 0, M | 0) | 0
    k = D
    M = kb(I | 0, M | 0, 21) | 0
    M = gb(Y | 0, P | 0, M | 0, D | 0) | 0
    P = D
    Y = hb(G | 0, na | 0, 1048576, 0) | 0
    Y = fb(Y | 0, D | 0, 21) | 0
    I = D
    K = hb(Y | 0, I | 0, K & 2097151 | 0, 0) | 0
    ha = D
    I = kb(Y | 0, I | 0, 21) | 0
    I = gb(G | 0, na | 0, I | 0, D | 0) | 0
    na = D
    G = hb(x | 0, A | 0, 1048576, 0) | 0
    G = jb(G | 0, D | 0, 21) | 0
    Y = D
    Ca = kb(G | 0, Y | 0, 21) | 0
    Ca = gb(x | 0, A | 0, Ca | 0, D | 0) | 0
    A = D
    x = hb(ba | 0, d | 0, 1048576, 0) | 0
    x = fb(x | 0, D | 0, 21) | 0
    y = D
    Ga = kb(x | 0, y | 0, 21) | 0
    Ga = gb(ba | 0, d | 0, Ga | 0, D | 0) | 0
    d = D
    ba = hb(ja | 0, R | 0, 1048576, 0) | 0
    ba = fb(ba | 0, D | 0, 21) | 0
    _ = D
    ia = hb(m | 0, ia | 0, ba | 0, _ | 0) | 0
    m = D
    _ = kb(ba | 0, _ | 0, 21) | 0
    _ = gb(ja | 0, R | 0, _ | 0, D | 0) | 0
    R = D
    ja = hb(C | 0, r | 0, 1048576, 0) | 0
    ja = fb(ja | 0, D | 0, 21) | 0
    ba = D
    P = hb(ja | 0, ba | 0, M | 0, P | 0) | 0
    M = D
    ba = kb(ja | 0, ba | 0, 21) | 0
    ba = gb(C | 0, r | 0, ba | 0, D | 0) | 0
    r = D
    C = hb(e | 0, k | 0, 1048576, 0) | 0
    C = fb(C | 0, D | 0, 21) | 0
    ja = D
    na = hb(C | 0, ja | 0, I | 0, na | 0) | 0
    I = D
    ja = kb(C | 0, ja | 0, 21) | 0
    ja = gb(e | 0, k | 0, ja | 0, D | 0) | 0
    k = D
    e = sb(K | 0, ha | 0, 666643, 0) | 0
    Fa = hb(e | 0, D | 0, Fa & 2097151 | 0, 0) | 0
    e = D
    C = sb(K | 0, ha | 0, 470296, 0) | 0
    C = hb(sa | 0, Ra | 0, C | 0, D | 0) | 0
    Ra = D
    sa = sb(K | 0, ha | 0, 654183, 0) | 0
    sa = hb(Ca | 0, A | 0, sa | 0, D | 0) | 0
    A = D
    Ca = sb(K | 0, ha | 0, -997805, -1) | 0
    Ba = D
    oa = sb(K | 0, ha | 0, 136657, 0) | 0
    oa = hb(Ga | 0, d | 0, oa | 0, D | 0) | 0
    d = D
    ha = sb(K | 0, ha | 0, -683901, -1) | 0
    K = D
    y = hb(ta | 0, Sa | 0, x | 0, y | 0) | 0
    Ka = gb(y | 0, D | 0, Ja | 0, Ka | 0) | 0
    K = hb(Ka | 0, D | 0, ha | 0, K | 0) | 0
    ha = D
    Ka = sb(na | 0, I | 0, 666643, 0) | 0
    Ja = D
    y = sb(na | 0, I | 0, 470296, 0) | 0
    x = D
    Sa = sb(na | 0, I | 0, 654183, 0) | 0
    Sa = hb(C | 0, Ra | 0, Sa | 0, D | 0) | 0
    Ra = D
    C = sb(na | 0, I | 0, -997805, -1) | 0
    C = hb(sa | 0, A | 0, C | 0, D | 0) | 0
    A = D
    sa = sb(na | 0, I | 0, 136657, 0) | 0
    ta = D
    I = sb(na | 0, I | 0, -683901, -1) | 0
    I = hb(oa | 0, d | 0, I | 0, D | 0) | 0
    d = D
    oa = sb(ja | 0, k | 0, 666643, 0) | 0
    na = D
    Ga = sb(ja | 0, k | 0, 470296, 0) | 0
    ya = D
    t = sb(ja | 0, k | 0, 654183, 0) | 0
    h = D
    Oa = sb(ja | 0, k | 0, -997805, -1) | 0
    Na = D
    o = sb(ja | 0, k | 0, 136657, 0) | 0
    ka = D
    k = sb(ja | 0, k | 0, -683901, -1) | 0
    ja = D
    Y = hb(Pa | 0, Qa | 0, G | 0, Y | 0) | 0
    Ia = gb(Y | 0, D | 0, Ha | 0, Ia | 0) | 0
    Ba = hb(Ia | 0, D | 0, Ca | 0, Ba | 0) | 0
    ta = hb(Ba | 0, D | 0, sa | 0, ta | 0) | 0
    ja = hb(ta | 0, D | 0, k | 0, ja | 0) | 0
    k = D
    ta = sb(P | 0, M | 0, 666643, 0) | 0
    sa = D
    Ba = sb(P | 0, M | 0, 470296, 0) | 0
    Ca = D
    Ia = sb(P | 0, M | 0, 654183, 0) | 0
    Ha = D
    Y = sb(P | 0, M | 0, -997805, -1) | 0
    G = D
    Qa = sb(P | 0, M | 0, 136657, 0) | 0
    Pa = D
    M = sb(P | 0, M | 0, -683901, -1) | 0
    P = D
    Da = sb(ba | 0, r | 0, 666643, 0) | 0
    Ea = D
    za = sb(ba | 0, r | 0, 470296, 0) | 0
    Aa = D
    va = sb(ba | 0, r | 0, 654183, 0) | 0
    wa = D
    pa = sb(ba | 0, r | 0, -997805, -1) | 0
    qa = D
    la = sb(ba | 0, r | 0, 136657, 0) | 0
    ma = D
    r = sb(ba | 0, r | 0, -683901, -1) | 0
    ba = D
    Pa = hb(Sa | 0, Ra | 0, Qa | 0, Pa | 0) | 0
    Na = hb(Pa | 0, D | 0, Oa | 0, Na | 0) | 0
    ba = hb(Na | 0, D | 0, r | 0, ba | 0) | 0
    r = D
    Na = sb(ia | 0, m | 0, 666643, 0) | 0
    xa = hb(Na | 0, D | 0, W | da | U & 2031616 | 0, xa | 0) | 0
    U = D
    da = sb(ia | 0, m | 0, 470296, 0) | 0
    W = D
    Na = sb(ia | 0, m | 0, 654183, 0) | 0
    Ma = hb(Na | 0, D | 0, Ma & 2097151 | 0, 0) | 0
    sa = hb(Ma | 0, D | 0, ta | 0, sa | 0) | 0
    Aa = hb(sa | 0, D | 0, za | 0, Aa | 0) | 0
    za = D
    sa = sb(ia | 0, m | 0, -997805, -1) | 0
    ta = D
    Ma = sb(ia | 0, m | 0, 136657, 0) | 0
    La = hb(Ma | 0, D | 0, La & 2097151 | 0, 0) | 0
    Ja = hb(La | 0, D | 0, Ka | 0, Ja | 0) | 0
    Ha = hb(Ja | 0, D | 0, Ia | 0, Ha | 0) | 0
    ya = hb(Ha | 0, D | 0, Ga | 0, ya | 0) | 0
    qa = hb(ya | 0, D | 0, pa | 0, qa | 0) | 0
    pa = D
    m = sb(ia | 0, m | 0, -683901, -1) | 0
    ia = D
    ya = hb(xa | 0, U | 0, 1048576, 0) | 0
    ya = fb(ya | 0, D | 0, 21) | 0
    Ga = D
    ra = hb(da | 0, W | 0, ra & 2097151 | 0, 0) | 0
    Ea = hb(ra | 0, D | 0, Da | 0, Ea | 0) | 0
    Ea = hb(Ea | 0, D | 0, ya | 0, Ga | 0) | 0
    Da = D
    Ga = kb(ya | 0, Ga | 0, 21) | 0
    Ga = gb(xa | 0, U | 0, Ga | 0, D | 0) | 0
    U = D
    xa = hb(Aa | 0, za | 0, 1048576, 0) | 0
    xa = fb(xa | 0, D | 0, 21) | 0
    ya = D
    ua = hb(sa | 0, ta | 0, ua & 2097151 | 0, 0) | 0
    Ca = hb(ua | 0, D | 0, Ba | 0, Ca | 0) | 0
    na = hb(Ca | 0, D | 0, oa | 0, na | 0) | 0
    wa = hb(na | 0, D | 0, va | 0, wa | 0) | 0
    wa = hb(wa | 0, D | 0, xa | 0, ya | 0) | 0
    va = D
    ya = kb(xa | 0, ya | 0, 21) | 0
    xa = D
    na = hb(qa | 0, pa | 0, 1048576, 0) | 0
    na = fb(na | 0, D | 0, 21) | 0
    oa = D
    ia = hb(Fa | 0, e | 0, m | 0, ia | 0) | 0
    x = hb(ia | 0, D | 0, y | 0, x | 0) | 0
    G = hb(x | 0, D | 0, Y | 0, G | 0) | 0
    h = hb(G | 0, D | 0, t | 0, h | 0) | 0
    ma = hb(h | 0, D | 0, la | 0, ma | 0) | 0
    ma = hb(ma | 0, D | 0, na | 0, oa | 0) | 0
    la = D
    oa = kb(na | 0, oa | 0, 21) | 0
    na = D
    h = hb(ba | 0, r | 0, 1048576, 0) | 0
    h = fb(h | 0, D | 0, 21) | 0
    t = D
    P = hb(C | 0, A | 0, M | 0, P | 0) | 0
    ka = hb(P | 0, D | 0, o | 0, ka | 0) | 0
    ka = hb(ka | 0, D | 0, h | 0, t | 0) | 0
    o = D
    t = kb(h | 0, t | 0, 21) | 0
    t = gb(ba | 0, r | 0, t | 0, D | 0) | 0
    r = D
    ba = hb(ja | 0, k | 0, 1048576, 0) | 0
    ba = fb(ba | 0, D | 0, 21) | 0
    h = D
    d = hb(I | 0, d | 0, ba | 0, h | 0) | 0
    I = D
    h = kb(ba | 0, h | 0, 21) | 0
    h = gb(ja | 0, k | 0, h | 0, D | 0) | 0
    k = D
    ja = hb(K | 0, ha | 0, 1048576, 0) | 0
    ja = fb(ja | 0, D | 0, 21) | 0
    ba = D
    R = hb(ja | 0, ba | 0, _ | 0, R | 0) | 0
    _ = D
    ba = kb(ja | 0, ba | 0, 21) | 0
    ba = gb(K | 0, ha | 0, ba | 0, D | 0) | 0
    ha = D
    K = hb(Ea | 0, Da | 0, 1048576, 0) | 0
    K = fb(K | 0, D | 0, 21) | 0
    ja = D
    P = kb(K | 0, ja | 0, 21) | 0
    M = D
    A = hb(wa | 0, va | 0, 1048576, 0) | 0
    A = fb(A | 0, D | 0, 21) | 0
    C = D
    G = kb(A | 0, C | 0, 21) | 0
    Y = D
    x = hb(ma | 0, la | 0, 1048576, 0) | 0
    x = fb(x | 0, D | 0, 21) | 0
    y = D
    r = hb(t | 0, r | 0, x | 0, y | 0) | 0
    t = D
    y = kb(x | 0, y | 0, 21) | 0
    x = D
    ia = hb(ka | 0, o | 0, 1048576, 0) | 0
    ia = fb(ia | 0, D | 0, 21) | 0
    m = D
    k = hb(h | 0, k | 0, ia | 0, m | 0) | 0
    h = D
    m = kb(ia | 0, m | 0, 21) | 0
    m = gb(ka | 0, o | 0, m | 0, D | 0) | 0
    o = D
    ka = hb(d | 0, I | 0, 1048576, 0) | 0
    ka = fb(ka | 0, D | 0, 21) | 0
    ia = D
    ha = hb(ba | 0, ha | 0, ka | 0, ia | 0) | 0
    ba = D
    ia = kb(ka | 0, ia | 0, 21) | 0
    ia = gb(d | 0, I | 0, ia | 0, D | 0) | 0
    I = D
    d = hb(R | 0, _ | 0, 1048576, 0) | 0
    d = fb(d | 0, D | 0, 21) | 0
    ka = D
    e = kb(d | 0, ka | 0, 21) | 0
    e = gb(R | 0, _ | 0, e | 0, D | 0) | 0
    _ = D
    R = sb(d | 0, ka | 0, 666643, 0) | 0
    R = hb(Ga | 0, U | 0, R | 0, D | 0) | 0
    U = D
    Ga = sb(d | 0, ka | 0, 470296, 0) | 0
    Fa = D
    Ca = sb(d | 0, ka | 0, 654183, 0) | 0
    Ba = D
    ua = sb(d | 0, ka | 0, -997805, -1) | 0
    ta = D
    sa = sb(d | 0, ka | 0, 136657, 0) | 0
    ra = D
    ka = sb(d | 0, ka | 0, -683901, -1) | 0
    d = D
    W = fb(R | 0, U | 0, 21) | 0
    da = D
    Da = hb(Ga | 0, Fa | 0, Ea | 0, Da | 0) | 0
    M = gb(Da | 0, D | 0, P | 0, M | 0) | 0
    M = hb(M | 0, D | 0, W | 0, da | 0) | 0
    P = D
    da = kb(W | 0, da | 0, 21) | 0
    da = gb(R | 0, U | 0, da | 0, D | 0) | 0
    U = D
    R = fb(M | 0, P | 0, 21) | 0
    W = D
    za = hb(Ca | 0, Ba | 0, Aa | 0, za | 0) | 0
    xa = gb(za | 0, D | 0, ya | 0, xa | 0) | 0
    ja = hb(xa | 0, D | 0, K | 0, ja | 0) | 0
    ja = hb(ja | 0, D | 0, R | 0, W | 0) | 0
    K = D
    W = kb(R | 0, W | 0, 21) | 0
    W = gb(M | 0, P | 0, W | 0, D | 0) | 0
    P = D
    M = fb(ja | 0, K | 0, 21) | 0
    R = D
    ta = hb(wa | 0, va | 0, ua | 0, ta | 0) | 0
    Y = gb(ta | 0, D | 0, G | 0, Y | 0) | 0
    Y = hb(Y | 0, D | 0, M | 0, R | 0) | 0
    G = D
    R = kb(M | 0, R | 0, 21) | 0
    R = gb(ja | 0, K | 0, R | 0, D | 0) | 0
    K = D
    ja = fb(Y | 0, G | 0, 21) | 0
    M = D
    pa = hb(sa | 0, ra | 0, qa | 0, pa | 0) | 0
    na = gb(pa | 0, D | 0, oa | 0, na | 0) | 0
    C = hb(na | 0, D | 0, A | 0, C | 0) | 0
    C = hb(C | 0, D | 0, ja | 0, M | 0) | 0
    A = D
    M = kb(ja | 0, M | 0, 21) | 0
    M = gb(Y | 0, G | 0, M | 0, D | 0) | 0
    G = D
    Y = fb(C | 0, A | 0, 21) | 0
    ja = D
    d = hb(ma | 0, la | 0, ka | 0, d | 0) | 0
    x = gb(d | 0, D | 0, y | 0, x | 0) | 0
    x = hb(x | 0, D | 0, Y | 0, ja | 0) | 0
    y = D
    ja = kb(Y | 0, ja | 0, 21) | 0
    ja = gb(C | 0, A | 0, ja | 0, D | 0) | 0
    A = D
    C = fb(x | 0, y | 0, 21) | 0
    Y = D
    t = hb(r | 0, t | 0, C | 0, Y | 0) | 0
    r = D
    Y = kb(C | 0, Y | 0, 21) | 0
    Y = gb(x | 0, y | 0, Y | 0, D | 0) | 0
    y = D
    x = fb(t | 0, r | 0, 21) | 0
    C = D
    o = hb(x | 0, C | 0, m | 0, o | 0) | 0
    m = D
    C = kb(x | 0, C | 0, 21) | 0
    C = gb(t | 0, r | 0, C | 0, D | 0) | 0
    r = D
    t = fb(o | 0, m | 0, 21) | 0
    x = D
    h = hb(k | 0, h | 0, t | 0, x | 0) | 0
    k = D
    x = kb(t | 0, x | 0, 21) | 0
    x = gb(o | 0, m | 0, x | 0, D | 0) | 0
    m = D
    o = fb(h | 0, k | 0, 21) | 0
    t = D
    I = hb(o | 0, t | 0, ia | 0, I | 0) | 0
    ia = D
    t = kb(o | 0, t | 0, 21) | 0
    t = gb(h | 0, k | 0, t | 0, D | 0) | 0
    k = D
    h = fb(I | 0, ia | 0, 21) | 0
    o = D
    ba = hb(ha | 0, ba | 0, h | 0, o | 0) | 0
    ha = D
    o = kb(h | 0, o | 0, 21) | 0
    o = gb(I | 0, ia | 0, o | 0, D | 0) | 0
    ia = D
    I = fb(ba | 0, ha | 0, 21) | 0
    h = D
    _ = hb(I | 0, h | 0, e | 0, _ | 0) | 0
    e = D
    h = kb(I | 0, h | 0, 21) | 0
    h = gb(ba | 0, ha | 0, h | 0, D | 0) | 0
    ha = D
    ba = fb(_ | 0, e | 0, 21) | 0
    I = D
    d = kb(ba | 0, I | 0, 21) | 0
    d = gb(_ | 0, e | 0, d | 0, D | 0) | 0
    e = D
    _ = sb(ba | 0, I | 0, 666643, 0) | 0
    U = hb(_ | 0, D | 0, da | 0, U | 0) | 0
    da = D
    _ = sb(ba | 0, I | 0, 470296, 0) | 0
    _ = hb(W | 0, P | 0, _ | 0, D | 0) | 0
    P = D
    W = sb(ba | 0, I | 0, 654183, 0) | 0
    W = hb(R | 0, K | 0, W | 0, D | 0) | 0
    K = D
    R = sb(ba | 0, I | 0, -997805, -1) | 0
    R = hb(M | 0, G | 0, R | 0, D | 0) | 0
    G = D
    M = sb(ba | 0, I | 0, 136657, 0) | 0
    M = hb(ja | 0, A | 0, M | 0, D | 0) | 0
    A = D
    I = sb(ba | 0, I | 0, -683901, -1) | 0
    I = hb(Y | 0, y | 0, I | 0, D | 0) | 0
    y = D
    Y = fb(U | 0, da | 0, 21) | 0
    ba = D
    P = hb(_ | 0, P | 0, Y | 0, ba | 0) | 0
    _ = D
    ba = kb(Y | 0, ba | 0, 21) | 0
    ba = gb(U | 0, da | 0, ba | 0, D | 0) | 0
    da = D
    U = fb(P | 0, _ | 0, 21) | 0
    Y = D
    K = hb(W | 0, K | 0, U | 0, Y | 0) | 0
    W = D
    Y = kb(U | 0, Y | 0, 21) | 0
    Y = gb(P | 0, _ | 0, Y | 0, D | 0) | 0
    _ = D
    P = fb(K | 0, W | 0, 21) | 0
    U = D
    G = hb(R | 0, G | 0, P | 0, U | 0) | 0
    R = D
    U = kb(P | 0, U | 0, 21) | 0
    U = gb(K | 0, W | 0, U | 0, D | 0) | 0
    W = D
    K = fb(G | 0, R | 0, 21) | 0
    P = D
    A = hb(M | 0, A | 0, K | 0, P | 0) | 0
    M = D
    P = kb(K | 0, P | 0, 21) | 0
    P = gb(G | 0, R | 0, P | 0, D | 0) | 0
    R = D
    G = fb(A | 0, M | 0, 21) | 0
    K = D
    y = hb(I | 0, y | 0, G | 0, K | 0) | 0
    I = D
    K = kb(G | 0, K | 0, 21) | 0
    K = gb(A | 0, M | 0, K | 0, D | 0) | 0
    M = D
    A = fb(y | 0, I | 0, 21) | 0
    G = D
    r = hb(A | 0, G | 0, C | 0, r | 0) | 0
    C = D
    G = kb(A | 0, G | 0, 21) | 0
    G = gb(y | 0, I | 0, G | 0, D | 0) | 0
    I = D
    y = fb(r | 0, C | 0, 21) | 0
    A = D
    m = hb(y | 0, A | 0, x | 0, m | 0) | 0
    x = D
    A = kb(y | 0, A | 0, 21) | 0
    A = gb(r | 0, C | 0, A | 0, D | 0) | 0
    C = D
    r = fb(m | 0, x | 0, 21) | 0
    y = D
    k = hb(r | 0, y | 0, t | 0, k | 0) | 0
    t = D
    y = kb(r | 0, y | 0, 21) | 0
    y = gb(m | 0, x | 0, y | 0, D | 0) | 0
    x = D
    m = fb(k | 0, t | 0, 21) | 0
    r = D
    ia = hb(m | 0, r | 0, o | 0, ia | 0) | 0
    o = D
    r = kb(m | 0, r | 0, 21) | 0
    r = gb(k | 0, t | 0, r | 0, D | 0) | 0
    t = D
    k = fb(ia | 0, o | 0, 21) | 0
    m = D
    ha = hb(k | 0, m | 0, h | 0, ha | 0) | 0
    h = D
    m = kb(k | 0, m | 0, 21) | 0
    m = gb(ia | 0, o | 0, m | 0, D | 0) | 0
    o = D
    ia = fb(ha | 0, h | 0, 21) | 0
    k = D
    e = hb(ia | 0, k | 0, d | 0, e | 0) | 0
    d = D
    k = kb(ia | 0, k | 0, 21) | 0
    k = gb(ha | 0, h | 0, k | 0, D | 0) | 0
    h = D
    ga(a >> 0 | 0, ba | 0, 1, 0)
    a = jb(ba | 0, da | 0, 8) | 0
    ga(ea >> 0 | 0, a | 0, 1, 0)
    a = jb(ba | 0, da | 0, 16) | 0
    da = D
    ba = kb(Y | 0, _ | 0, 5) | 0
    D | da
    ga(ca >> 0 | 0, ba | a | 0, 1, 0)
    a = jb(Y | 0, _ | 0, 3) | 0
    ga(aa >> 0 | 0, a | 0, 1, 0)
    a = jb(Y | 0, _ | 0, 11) | 0
    ga($ >> 0 | 0, a | 0, 1, 0)
    a = jb(Y | 0, _ | 0, 19) | 0
    _ = D
    Y = kb(U | 0, W | 0, 2) | 0
    D | _
    ga(Z >> 0 | 0, Y | a | 0, 1, 0)
    a = jb(U | 0, W | 0, 6) | 0
    ga(X >> 0 | 0, a | 0, 1, 0)
    a = jb(U | 0, W | 0, 14) | 0
    W = D
    U = kb(P | 0, R | 0, 7) | 0
    D | W
    ga(V >> 0 | 0, U | a | 0, 1, 0)
    a = jb(P | 0, R | 0, 1) | 0
    ga(T >> 0 | 0, a | 0, 1, 0)
    a = jb(P | 0, R | 0, 9) | 0
    ga(S >> 0 | 0, a | 0, 1, 0)
    a = jb(P | 0, R | 0, 17) | 0
    R = D
    P = kb(K | 0, M | 0, 4) | 0
    D | R
    ga(Q >> 0 | 0, P | a | 0, 1, 0)
    a = jb(K | 0, M | 0, 4) | 0
    ga(O >> 0 | 0, a | 0, 1, 0)
    a = jb(K | 0, M | 0, 12) | 0
    ga(N >> 0 | 0, a | 0, 1, 0)
    a = jb(K | 0, M | 0, 20) | 0
    M = D
    K = kb(G | 0, I | 0, 1) | 0
    D | M
    ga(L >> 0 | 0, K | a | 0, 1, 0)
    a = jb(G | 0, I | 0, 7) | 0
    ga(J >> 0 | 0, a | 0, 1, 0)
    a = jb(G | 0, I | 0, 15) | 0
    I = D
    G = kb(A | 0, C | 0, 6) | 0
    D | I
    ga(H >> 0 | 0, G | a | 0, 1, 0)
    a = jb(A | 0, C | 0, 2) | 0
    ga(F >> 0 | 0, a | 0, 1, 0)
    a = jb(A | 0, C | 0, 10) | 0
    ga(E >> 0 | 0, a | 0, 1, 0)
    a = jb(A | 0, C | 0, 18) | 0
    C = D
    A = kb(y | 0, x | 0, 3) | 0
    D | C
    ga(B >> 0 | 0, A | a | 0, 1, 0)
    a = jb(y | 0, x | 0, 5) | 0
    ga(z >> 0 | 0, a | 0, 1, 0)
    a = jb(y | 0, x | 0, 13) | 0
    ga(w >> 0 | 0, a | 0, 1, 0)
    ga(v >> 0 | 0, r | 0, 1, 0)
    a = jb(r | 0, t | 0, 8) | 0
    ga(u >> 0 | 0, a | 0, 1, 0)
    a = jb(r | 0, t | 0, 16) | 0
    t = D
    r = kb(m | 0, o | 0, 5) | 0
    D | t
    ga(s >> 0 | 0, r | a | 0, 1, 0)
    a = jb(m | 0, o | 0, 3) | 0
    ga(q >> 0 | 0, a | 0, 1, 0)
    a = jb(m | 0, o | 0, 11) | 0
    ga(p >> 0 | 0, a | 0, 1, 0)
    a = jb(m | 0, o | 0, 19) | 0
    o = D
    m = kb(k | 0, h | 0, 2) | 0
    D | o
    ga(n >> 0 | 0, m | a | 0, 1, 0)
    a = jb(k | 0, h | 0, 6) | 0
    ga(l >> 0 | 0, a | 0, 1, 0)
    h = jb(k | 0, h | 0, 14) | 0
    k = D
    a = kb(e | 0, d | 0, 7) | 0
    k | D
    ga(j >> 0 | 0, h | a | 0, 1, 0)
    a = jb(e | 0, d | 0, 1) | 0
    ga(g >> 0 | 0, a | 0, 1, 0)
    a = jb(e | 0, d | 0, 9) | 0
    ga(f >> 0 | 0, a | 0, 1, 0)
    a = jb(e | 0, d | 0, 17) | 0
    ga(c >> 0 | 0, a | 0, 1, 0)
    i = b
  }

  function Ta (a, b, c) {
    a = a | 0
    b = b | 0
    c = c | 0
    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var D = 0

    var E = 0

    var F = 0

    var G = 0

    var H = 0

    var I = 0

    var J = 0

    var K = 0

    var L = 0

    var M = 0

    var N = 0

    var O = 0

    var P = 0

    var Q = 0

    var R = 0

    var S = 0

    var T = 0

    var U = 0

    var V = 0

    var W = 0

    var X = 0

    var Y = 0

    var Z = 0

    var _ = 0

    var $ = 0

    var aa = 0

    var ba = 0

    var ca = 0

    var da = 0

    var ea = 0

    var ha = 0

    var ia = 0

    var ja = 0

    var ka = 0

    var la = 0

    var ma = 0

    var na = 0

    var oa = 0

    var pa = 0

    var qa = 0

    var ra = 0

    var sa = 0

    var ta = 0

    var ua = 0

    var va = 0

    var wa = 0

    var za = 0

    var Ba = 0

    var Ca = 0

    var Da = 0

    var Fa = 0

    var Ga = 0

    var Ha = 0

    var Ia = 0

    var Ja = 0

    var Ka = 0

    var La = 0

    var Ma = 0

    var Na = 0

    var Oa = 0

    var Pa = 0

    var Qa = 0

    var Ra = 0

    var Sa = 0

    var Ta = 0

    var Ua = 0

    var Va = 0

    var Wa = 0

    var Xa = 0

    var Ya = 0

    var Za = 0

    var _a = 0

    var $a = 0

    var ab = 0

    var cb = 0

    var db = 0

    var eb = 0

    var fb = 0

    var gb = 0

    var hb = 0

    var ib = 0

    var kb = 0

    var lb = 0

    var mb = 0

    var nb = 0

    var ob = 0

    var pb = 0

    var qb = 0

    var rb = 0

    var sb = 0

    var tb = 0

    var ub = 0

    var vb = 0

    var wb = 0

    var xb = 0

    var yb = 0

    var zb = 0

    var Ab = 0

    var Bb = 0

    var Cb = 0

    var Db = 0

    var Eb = 0

    var Fb = 0

    var Gb = 0

    var Hb = 0

    var Ib = 0

    var Jb = 0

    var Kb = 0
    j = i
    i = i + 1984 | 0
    f = j + 1920 | 0
    k = j + 640 | 0
    g = j + 480 | 0
    h = j + 320 | 0
    d = j + 160 | 0
    e = j
    l = 0
    m = 0
    do {
      Cb = (fa(b + m >> 0 | 0, 1, 0, 1) | 0 | 0) + l | 0
      Eb = Cb + 8 >> 4
      Db = m << 1
      ga(f + Db >> 0 | 0, Cb - (Eb << 4) | 0, 1, 0)
      l = Eb + 8 >> 4
      ga(f + (Db | 1) >> 0 | 0, Eb - (l << 4) | 0, 1, 0)
      m = m + 1 | 0
    } while ((m | 0) !== 31)
    m = (fa(b + 31 >> 0 | 0, 1, 0, 1) | 0 | 0) + l | 0
    p = m + 8 >> 4
    ga(f + 62 >> 0 | 0, m - (p << 4) | 0, 1, 0)
    ga(f + 63 >> 0 | 0, p | 0, 1, 0)
    Aa(k, c)
    p = g + 120 | 0
    m = h + 40 | 0
    b = g + 40 | 0
    l = g + 80 | 0
    n = h + 80 | 0
    o = h + 120 | 0
    q = 0
    do {
      xa(g, c, k + (q * 160 | 0) | 0)
      ya(h, g, p)
      ya(m, b, l)
      ya(n, l, p)
      ya(o, g, b)
      q = q + 1 | 0
      Aa(k + (q * 160 | 0) | 0, h)
    } while ((q | 0) !== 7)
    v = a + 0 | 0
    u = v + 40 | 0
    do {
      ga(v | 0, 0 | 0, 4, 0)
      v = v + 4 | 0
    } while ((v | 0) < (u | 0))
    w = a + 40 | 0
    ga(w | 0, 1 | 0, 4, 0)
    v = a + 44 | 0
    u = v + 36 | 0
    do {
      ga(v | 0, 0 | 0, 4, 0)
      v = v + 4 | 0
    } while ((v | 0) < (u | 0))
    x = a + 80 | 0
    ga(x | 0, 1 | 0, 4, 0)
    v = a + 84 | 0
    u = v + 36 | 0
    do {
      ga(v | 0, 0 | 0, 4, 0)
      v = v + 4 | 0
    } while ((v | 0) < (u | 0))
    Ca = d + 4 | 0
    y = d + 40 | 0
    z = d + 44 | 0
    A = d + 80 | 0
    B = d + 84 | 0
    C = k + 40 | 0
    D = k + 80 | 0
    E = d + 120 | 0
    F = k + 120 | 0
    G = k + 160 | 0
    H = k + 200 | 0
    I = k + 240 | 0
    J = k + 280 | 0
    K = k + 320 | 0
    L = k + 360 | 0
    M = k + 400 | 0
    N = k + 440 | 0
    O = k + 480 | 0
    P = k + 520 | 0
    Q = k + 560 | 0
    R = k + 600 | 0
    S = k + 640 | 0
    T = k + 680 | 0
    U = k + 720 | 0
    V = k + 760 | 0
    W = k + 800 | 0
    X = k + 840 | 0
    Y = k + 880 | 0
    Z = k + 920 | 0
    _ = k + 960 | 0
    $ = k + 1e3 | 0
    aa = k + 1040 | 0
    ba = k + 1080 | 0
    ca = k + 1120 | 0
    da = k + 1160 | 0
    ea = k + 1200 | 0
    ha = k + 1240 | 0
    ia = d + 48 | 0
    ja = d + 52 | 0
    ka = d + 56 | 0
    la = d + 60 | 0
    ma = d + 64 | 0
    na = d + 68 | 0
    oa = d + 72 | 0
    pa = d + 76 | 0
    Eb = e + 4 | 0
    ra = e + 8 | 0
    sa = e + 12 | 0
    ta = e + 16 | 0
    ua = e + 20 | 0
    va = e + 24 | 0
    wa = e + 28 | 0
    za = e + 32 | 0
    Ba = e + 36 | 0
    Ma = e + 40 | 0
    Da = d + 8 | 0
    Fa = d + 12 | 0
    Ga = d + 16 | 0
    Ha = d + 20 | 0
    Ia = d + 24 | 0
    Ja = d + 28 | 0
    Ka = d + 32 | 0
    La = d + 36 | 0
    Na = e + 44 | 0
    Oa = e + 48 | 0
    Pa = e + 52 | 0
    Qa = e + 56 | 0
    Ra = e + 60 | 0
    Sa = e + 64 | 0
    Ta = e + 68 | 0
    Ua = e + 72 | 0
    Va = e + 76 | 0
    db = e + 80 | 0
    Wa = d + 88 | 0
    Xa = d + 92 | 0
    Ya = d + 96 | 0
    Za = d + 100 | 0
    _a = d + 104 | 0
    $a = d + 108 | 0
    ab = d + 112 | 0
    cb = d + 116 | 0
    eb = e + 84 | 0
    fb = e + 88 | 0
    gb = e + 92 | 0
    hb = e + 96 | 0
    ib = e + 100 | 0
    kb = e + 104 | 0
    lb = e + 108 | 0
    mb = e + 112 | 0
    nb = e + 116 | 0
    xb = e + 120 | 0
    ob = d + 124 | 0
    pb = d + 128 | 0
    qb = d + 132 | 0
    rb = d + 136 | 0
    sb = d + 140 | 0
    tb = d + 144 | 0
    ub = d + 148 | 0
    vb = d + 152 | 0
    wb = d + 156 | 0
    yb = e + 124 | 0
    zb = e + 128 | 0
    Ab = e + 132 | 0
    Bb = e + 136 | 0
    Cb = e + 140 | 0
    Db = e + 144 | 0
    t = e + 148 | 0
    r = e + 152 | 0
    q = e + 156 | 0
    c = 63
    while (1) {
      qa = fa(f + c >> 0 | 0, 1, 0, 0) | 0 | 0
      s = qa << 24 >> 24
      s = jb(s | 0, ((s | 0) < 0) << 31 >> 31 | 0, 63) | 0
      qa = qa << 24 >> 24
      qa = qa - ((qa & 0 - s) << 1) | 0
      Ea(g, a)
      ya(a, g, p)
      ya(w, b, l)
      ya(x, l, p)
      Ea(g, a)
      ya(a, g, p)
      ya(w, b, l)
      ya(x, l, p)
      Ea(g, a)
      ya(a, g, p)
      ya(w, b, l)
      ya(x, l, p)
      Ea(g, a)
      ya(h, g, p)
      ya(m, b, l)
      ya(n, l, p)
      ya(o, g, b)
      ga(d | 0, 1 | 0, 4, 0)
      v = Ca + 0 | 0
      u = v + 36 | 0
      do {
        ga(v | 0, 0 | 0, 4, 0)
        v = v + 4 | 0
      } while ((v | 0) < (u | 0))
      ga(y | 0, 1 | 0, 4, 0)
      v = z + 0 | 0
      u = v + 36 | 0
      do {
        ga(v | 0, 0 | 0, 4, 0)
        v = v + 4 | 0
      } while ((v | 0) < (u | 0))
      ga(A | 0, 1 | 0, 4, 0)
      v = B + 0 | 0
      u = v + 76 | 0
      do {
        ga(v | 0, 0 | 0, 4, 0)
        v = v + 4 | 0
      } while ((v | 0) < (u | 0))
      qa = qa & 255
      v = ((qa ^ 1) + -1 | 0) >>> 31
      bb(d, k, v)
      bb(y, C, v)
      bb(A, D, v)
      bb(E, F, v)
      v = ((qa ^ 2) + -1 | 0) >>> 31
      bb(d, G, v)
      bb(y, H, v)
      bb(A, I, v)
      bb(E, J, v)
      v = ((qa ^ 3) + -1 | 0) >>> 31
      bb(d, K, v)
      bb(y, L, v)
      bb(A, M, v)
      bb(E, N, v)
      v = ((qa ^ 4) + -1 | 0) >>> 31
      bb(d, O, v)
      bb(y, P, v)
      bb(A, Q, v)
      bb(E, R, v)
      v = ((qa ^ 5) + -1 | 0) >>> 31
      bb(d, S, v)
      bb(y, T, v)
      bb(A, U, v)
      bb(E, V, v)
      v = ((qa ^ 6) + -1 | 0) >>> 31
      bb(d, W, v)
      bb(y, X, v)
      bb(A, Y, v)
      bb(E, Z, v)
      v = ((qa ^ 7) + -1 | 0) >>> 31
      bb(d, _, v)
      bb(y, $, v)
      bb(A, aa, v)
      bb(E, ba, v)
      qa = ((qa ^ 8) + -1 | 0) >>> 31
      bb(d, ca, qa)
      bb(y, da, qa)
      bb(A, ea, qa)
      bb(E, ha, qa)
      qa = fa(z | 0, 4, 0, 0) | 0 | 0
      v = fa(ia | 0, 4, 0, 0) | 0 | 0
      u = fa(ja | 0, 4, 0, 0) | 0 | 0
      Fb = fa(ka | 0, 4, 0, 0) | 0 | 0
      Gb = fa(la | 0, 4, 0, 0) | 0 | 0
      Hb = fa(ma | 0, 4, 0, 0) | 0 | 0
      Ib = fa(na | 0, 4, 0, 0) | 0 | 0
      Jb = fa(oa | 0, 4, 0, 0) | 0 | 0
      Kb = fa(pa | 0, 4, 0, 0) | 0 | 0
      ga(e | 0, fa(y | 0, 4, 0, 0) | 0 | 0, 4, 0)
      ga(Eb | 0, qa | 0, 4, 0)
      ga(ra | 0, v | 0, 4, 0)
      ga(sa | 0, u | 0, 4, 0)
      ga(ta | 0, Fb | 0, 4, 0)
      ga(ua | 0, Gb | 0, 4, 0)
      ga(va | 0, Hb | 0, 4, 0)
      ga(wa | 0, Ib | 0, 4, 0)
      ga(za | 0, Jb | 0, 4, 0)
      ga(Ba | 0, Kb | 0, 4, 0)
      Kb = fa(Ca | 0, 4, 0, 0) | 0 | 0
      Jb = fa(Da | 0, 4, 0, 0) | 0 | 0
      Ib = fa(Fa | 0, 4, 0, 0) | 0 | 0
      Hb = fa(Ga | 0, 4, 0, 0) | 0 | 0
      Gb = fa(Ha | 0, 4, 0, 0) | 0 | 0
      Fb = fa(Ia | 0, 4, 0, 0) | 0 | 0
      u = fa(Ja | 0, 4, 0, 0) | 0 | 0
      v = fa(Ka | 0, 4, 0, 0) | 0 | 0
      qa = fa(La | 0, 4, 0, 0) | 0 | 0
      ga(Ma | 0, fa(d | 0, 4, 0, 0) | 0 | 0, 4, 0)
      ga(Na | 0, Kb | 0, 4, 0)
      ga(Oa | 0, Jb | 0, 4, 0)
      ga(Pa | 0, Ib | 0, 4, 0)
      ga(Qa | 0, Hb | 0, 4, 0)
      ga(Ra | 0, Gb | 0, 4, 0)
      ga(Sa | 0, Fb | 0, 4, 0)
      ga(Ta | 0, u | 0, 4, 0)
      ga(Ua | 0, v | 0, 4, 0)
      ga(Va | 0, qa | 0, 4, 0)
      qa = fa(B | 0, 4, 0, 0) | 0 | 0
      v = fa(Wa | 0, 4, 0, 0) | 0 | 0
      u = fa(Xa | 0, 4, 0, 0) | 0 | 0
      Fb = fa(Ya | 0, 4, 0, 0) | 0 | 0
      Gb = fa(Za | 0, 4, 0, 0) | 0 | 0
      Hb = fa(_a | 0, 4, 0, 0) | 0 | 0
      Ib = fa($a | 0, 4, 0, 0) | 0 | 0
      Jb = fa(ab | 0, 4, 0, 0) | 0 | 0
      Kb = fa(cb | 0, 4, 0, 0) | 0 | 0
      ga(db | 0, fa(A | 0, 4, 0, 0) | 0 | 0, 4, 0)
      ga(eb | 0, qa | 0, 4, 0)
      ga(fb | 0, v | 0, 4, 0)
      ga(gb | 0, u | 0, 4, 0)
      ga(hb | 0, Fb | 0, 4, 0)
      ga(ib | 0, Gb | 0, 4, 0)
      ga(kb | 0, Hb | 0, 4, 0)
      ga(lb | 0, Ib | 0, 4, 0)
      ga(mb | 0, Jb | 0, 4, 0)
      ga(nb | 0, Kb | 0, 4, 0)
      Kb = 0 - (fa(ob | 0, 4, 0, 0) | 0 | 0) | 0
      Jb = 0 - (fa(pb | 0, 4, 0, 0) | 0 | 0) | 0
      Ib = 0 - (fa(qb | 0, 4, 0, 0) | 0 | 0) | 0
      Hb = 0 - (fa(rb | 0, 4, 0, 0) | 0 | 0) | 0
      Gb = 0 - (fa(sb | 0, 4, 0, 0) | 0 | 0) | 0
      Fb = 0 - (fa(tb | 0, 4, 0, 0) | 0 | 0) | 0
      u = 0 - (fa(ub | 0, 4, 0, 0) | 0 | 0) | 0
      v = 0 - (fa(vb | 0, 4, 0, 0) | 0 | 0) | 0
      qa = 0 - (fa(wb | 0, 4, 0, 0) | 0 | 0) | 0
      ga(xb | 0, 0 - (fa(E | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
      ga(yb | 0, Kb | 0, 4, 0)
      ga(zb | 0, Jb | 0, 4, 0)
      ga(Ab | 0, Ib | 0, 4, 0)
      ga(Bb | 0, Hb | 0, 4, 0)
      ga(Cb | 0, Gb | 0, 4, 0)
      ga(Db | 0, Fb | 0, 4, 0)
      ga(t | 0, u | 0, 4, 0)
      ga(r | 0, v | 0, 4, 0)
      ga(q | 0, qa | 0, 4, 0)
      bb(d, e, s)
      bb(y, Ma, s)
      bb(A, db, s)
      bb(E, xb, s)
      xa(g, h, d)
      ya(a, g, p)
      ya(w, b, l)
      ya(x, l, p)
      if ((c | 0) > 0) {
        c = c + -1 | 0
      } else {
        break
      }
    }
    i = j
  }

  function Ua (a, b, c, d, e) {
    a = a | 0
    b = b | 0
    c = c | 0
    d = d | 0
    e = e | 0
    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0
    h = i
    i = i + 2112 | 0
    f = h + 1856 | 0
    g = h + 1600 | 0
    l = h + 320 | 0
    j = h + 160 | 0
    k = h
    Da(f, b)
    Da(g, d)
    za(l, c)
    c = a + 0 | 0
    m = c + 40 | 0
    do {
      ga(c | 0, 0 | 0, 4, 0)
      c = c + 4 | 0
    } while ((c | 0) < (m | 0))
    b = a + 40 | 0
    ga(b | 0, 1 | 0, 4, 0)
    c = a + 44 | 0
    m = c + 36 | 0
    do {
      ga(c | 0, 0 | 0, 4, 0)
      c = c + 4 | 0
    } while ((c | 0) < (m | 0))
    d = a + 80 | 0
    ga(d | 0, 1 | 0, 4, 0)
    c = a + 84 | 0
    m = c + 36 | 0
    do {
      ga(c | 0, 0 | 0, 4, 0)
      c = c + 4 | 0
    } while ((c | 0) < (m | 0))
    r = 255
    while (1) {
      if ((fa(f + r >> 0 | 0, 1, 0, 0) | 0 | 0) !== 0) {
        break
      }
      c = r + -1 | 0
      if ((fa(g + r >> 0 | 0, 1, 0, 0) | 0 | 0) !== 0) {
        break
      }
      if ((r | 0) > 0) {
        r = c
      } else {
        r = c
        break
      }
    }
    if (!((r | 0) > -1)) {
      i = h
      return
    }
    q = j + 120 | 0
    n = k + 40 | 0
    p = j + 40 | 0
    o = j + 80 | 0
    m = k + 80 | 0
    c = k + 120 | 0
    while (1) {
      Ea(j, a)
      s = fa(f + r >> 0 | 0, 1, 0, 0) | 0 | 0
      if (!(s << 24 >> 24 > 0)) {
        if (s << 24 >> 24 < 0) {
          ya(k, j, q)
          ya(n, p, o)
          ya(m, o, q)
          ya(c, j, p)
          Fa(j, k, l + (((s << 24 >> 24 | 0) / -2 | 0) * 160 | 0) | 0)
        }
      } else {
        ya(k, j, q)
        ya(n, p, o)
        ya(m, o, q)
        ya(c, j, p)
        xa(j, k, l + (((s << 24 >> 24 | 0) / 2 | 0) * 160 | 0) | 0)
      }
      s = fa(g + r >> 0 | 0, 1, 0, 0) | 0 | 0
      if (!(s << 24 >> 24 > 0)) {
        if (s << 24 >> 24 < 0) {
          ya(k, j, q)
          ya(n, p, o)
          ya(m, o, q)
          ya(c, j, p)
          Fa(j, k, e + (((s << 24 >> 24 | 0) / -2 | 0) * 160 | 0) | 0)
        }
      } else {
        ya(k, j, q)
        ya(n, p, o)
        ya(m, o, q)
        ya(c, j, p)
        xa(j, k, e + (((s << 24 >> 24 | 0) / 2 | 0) * 160 | 0) | 0)
      }
      ya(a, j, q)
      ya(b, p, o)
      ya(d, o, q)
      if ((r | 0) > 0) {
        r = r + -1 | 0
      } else {
        break
      }
    }
    i = h
  }

  function Va (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0
    c = i
    i = i + 128 | 0
    d = c
    Ea(a, b)
    b = a + 120 | 0
    ya(d, a, b)
    h = d + 40 | 0
    g = a + 40 | 0
    e = a + 80 | 0
    ya(h, g, e)
    f = d + 80 | 0
    ya(f, e, b)
    Ea(a, d)
    ya(d, a, b)
    ya(h, g, e)
    ya(f, e, b)
    Ea(a, d)
    i = c
  }

  function Wa (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var E = 0

    var F = 0

    var G = 0

    var H = 0

    var I = 0

    var J = 0

    var K = 0

    var L = 0

    var M = 0

    var N = 0

    var O = 0

    var P = 0

    var Q = 0

    var R = 0

    var S = 0

    var T = 0

    var U = 0

    var V = 0

    var W = 0

    var X = 0

    var Y = 0

    var Z = 0

    var _ = 0

    var $ = 0

    var aa = 0

    var ba = 0

    var ca = 0

    var da = 0

    var ea = 0

    var ha = 0

    var ia = 0

    var ja = 0

    var ka = 0

    var la = 0

    var ma = 0

    var oa = 0

    var pa = 0

    var qa = 0

    var ra = 0

    var sa = 0

    var ta = 0

    var ua = 0

    var va = 0

    var wa = 0

    var xa = 0

    var za = 0

    var Aa = 0

    var Ba = 0

    var Ca = 0

    var Da = 0

    var Ea = 0

    var Fa = 0

    var Ga = 0

    var Ha = 0

    var Ia = 0

    var Ma = 0

    var Pa = 0

    var Qa = 0

    var Ra = 0

    var Sa = 0

    var Ta = 0

    var Ua = 0

    var Va = 0
    e = i
    i = i + 432 | 0
    c = e + 400 | 0
    Ga = e + 360 | 0
    Ba = e + 320 | 0
    T = e + 280 | 0
    O = e + 240 | 0
    P = e + 200 | 0
    Q = e + 160 | 0
    L = e + 120 | 0
    M = e + 80 | 0
    S = e + 40 | 0
    d = e
    ia = fa(b >> 0 | 0, 1, 0, 1) | 0 | 0
    Ca = kb(fa(b + 1 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Da = D
    sa = kb(fa(b + 2 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    Da = Da | D
    ra = kb(fa(b + 3 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    Da = Da | D
    Ha = fa(b + 6 >> 0 | 0, 1, 0, 0) | 0 | 0
    Ea = fa(b + 4 >> 0 | 0, 1, 0, 1) | 0 | 0
    ta = kb(fa(b + 5 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Fa = D
    Ha = kb(Ha & 255 | 0, 0, 16) | 0
    Fa = kb(ta | Ea | Ha | 0, Fa | D | 0, 6) | 0
    Ha = D
    Ea = fa(b + 9 >> 0 | 0, 1, 0, 0) | 0 | 0
    ta = fa(b + 7 >> 0 | 0, 1, 0, 1) | 0 | 0
    Aa = kb(fa(b + 8 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    ma = D
    Ea = kb(Ea & 255 | 0, 0, 16) | 0
    ma = kb(Aa | ta | Ea | 0, ma | D | 0, 5) | 0
    Ea = D
    ta = fa(b + 12 >> 0 | 0, 1, 0, 0) | 0 | 0
    Aa = fa(b + 10 >> 0 | 0, 1, 0, 1) | 0 | 0
    ka = kb(fa(b + 11 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    va = D
    ta = kb(ta & 255 | 0, 0, 16) | 0
    va = kb(ka | Aa | ta | 0, va | D | 0, 3) | 0
    ta = D
    Aa = fa(b + 15 >> 0 | 0, 1, 0, 0) | 0 | 0
    ka = fa(b + 13 >> 0 | 0, 1, 0, 1) | 0 | 0
    W = kb(fa(b + 14 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    $ = D
    Aa = kb(Aa & 255 | 0, 0, 16) | 0
    $ = kb(W | ka | Aa | 0, $ | D | 0, 2) | 0
    Aa = D
    ka = fa(b + 16 >> 0 | 0, 1, 0, 1) | 0 | 0
    W = kb(fa(b + 17 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    pa = D
    xa = kb(fa(b + 18 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    pa = pa | D
    qa = kb(fa(b + 19 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    qa = W | ka | xa | qa
    pa = pa | D
    xa = fa(b + 22 >> 0 | 0, 1, 0, 0) | 0 | 0
    ka = fa(b + 20 >> 0 | 0, 1, 0, 1) | 0 | 0
    W = kb(fa(b + 21 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    X = D
    xa = kb(xa & 255 | 0, 0, 16) | 0
    X = kb(W | ka | xa | 0, X | D | 0, 7) | 0
    xa = D
    ka = fa(b + 25 >> 0 | 0, 1, 0, 0) | 0 | 0
    W = fa(b + 23 >> 0 | 0, 1, 0, 1) | 0 | 0
    Z = kb(fa(b + 24 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    la = D
    ka = kb(ka & 255 | 0, 0, 16) | 0
    la = kb(Z | W | ka | 0, la | D | 0, 5) | 0
    ka = D
    W = fa(b + 28 >> 0 | 0, 1, 0, 0) | 0 | 0
    Z = fa(b + 26 >> 0 | 0, 1, 0, 1) | 0 | 0
    wa = kb(fa(b + 27 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    oa = D
    W = kb(W & 255 | 0, 0, 16) | 0
    oa = kb(wa | Z | W | 0, oa | D | 0, 4) | 0
    W = D
    Z = fa(b + 31 >> 0 | 0, 1, 0, 0) | 0 | 0
    wa = fa(b + 29 >> 0 | 0, 1, 0, 1) | 0 | 0
    Y = kb(fa(b + 30 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    _ = D
    Z = kb(Z & 255 | 0, 0, 16) | 0
    _ = kb(Y | wa | Z | 0, _ | D | 0, 2) | 0
    Z = D
    wa = hb(_ | 0, Z | 0, 16777216, 0) | 0
    wa = jb(wa | 0, D | 0, 25) | 0
    Y = D
    U = sb(wa | 0, Y | 0, 19, 0) | 0
    Da = hb(U | 0, D | 0, Ca | ia | sa | ra | 0, Da | 0) | 0
    ra = D
    Y = kb(wa | 0, Y | 0, 25) | 0
    wa = D
    sa = hb(Fa | 0, Ha | 0, 16777216, 0) | 0
    sa = jb(sa | 0, D | 0, 25) | 0
    ia = D
    Ea = hb(ma | 0, Ea | 0, sa | 0, ia | 0) | 0
    ma = D
    ia = kb(sa | 0, ia | 0, 25) | 0
    ia = gb(Fa | 0, Ha | 0, ia | 0, D | 0) | 0
    Ha = D
    Fa = hb(va | 0, ta | 0, 16777216, 0) | 0
    Fa = jb(Fa | 0, D | 0, 25) | 0
    sa = D
    Aa = hb($ | 0, Aa | 0, Fa | 0, sa | 0) | 0
    $ = D
    sa = kb(Fa | 0, sa | 0, 25) | 0
    Fa = D
    Ca = hb(qa | 0, pa | 0, 16777216, 0) | 0
    Ca = jb(Ca | 0, D | 0, 25) | 0
    U = D
    xa = hb(X | 0, xa | 0, Ca | 0, U | 0) | 0
    X = D
    U = kb(Ca | 0, U | 0, 25) | 0
    Ca = D
    za = hb(la | 0, ka | 0, 16777216, 0) | 0
    za = jb(za | 0, D | 0, 25) | 0
    aa = D
    W = hb(oa | 0, W | 0, za | 0, aa | 0) | 0
    oa = D
    aa = kb(za | 0, aa | 0, 25) | 0
    za = D
    ja = hb(Da | 0, ra | 0, 33554432, 0) | 0
    ja = fb(ja | 0, D | 0, 26) | 0
    ha = D
    Ha = hb(ia | 0, Ha | 0, ja | 0, ha | 0) | 0
    ha = kb(ja | 0, ha | 0, 26) | 0
    ha = gb(Da | 0, ra | 0, ha | 0, D | 0) | 0
    ra = hb(Ea | 0, ma | 0, 33554432, 0) | 0
    ra = fb(ra | 0, D | 0, 26) | 0
    Da = D
    ta = hb(ra | 0, Da | 0, va | 0, ta | 0) | 0
    Fa = gb(ta | 0, D | 0, sa | 0, Fa | 0) | 0
    Da = kb(ra | 0, Da | 0, 26) | 0
    Da = gb(Ea | 0, ma | 0, Da | 0, D | 0) | 0
    ma = hb(Aa | 0, $ | 0, 33554432, 0) | 0
    ma = fb(ma | 0, D | 0, 26) | 0
    Ea = D
    pa = hb(ma | 0, Ea | 0, qa | 0, pa | 0) | 0
    Ca = gb(pa | 0, D | 0, U | 0, Ca | 0) | 0
    Ea = kb(ma | 0, Ea | 0, 26) | 0
    Ea = gb(Aa | 0, $ | 0, Ea | 0, D | 0) | 0
    $ = hb(xa | 0, X | 0, 33554432, 0) | 0
    $ = fb($ | 0, D | 0, 26) | 0
    Aa = D
    ka = hb($ | 0, Aa | 0, la | 0, ka | 0) | 0
    za = gb(ka | 0, D | 0, aa | 0, za | 0) | 0
    Aa = kb($ | 0, Aa | 0, 26) | 0
    Aa = gb(xa | 0, X | 0, Aa | 0, D | 0) | 0
    X = hb(W | 0, oa | 0, 33554432, 0) | 0
    X = fb(X | 0, D | 0, 26) | 0
    xa = D
    Z = hb(X | 0, xa | 0, _ | 0, Z | 0) | 0
    wa = gb(Z | 0, D | 0, Y | 0, wa | 0) | 0
    xa = kb(X | 0, xa | 0, 26) | 0
    xa = gb(W | 0, oa | 0, xa | 0, D | 0) | 0
    ga(Ga | 0, ha | 0, 4, 0)
    ga(Ga + 4 | 0, Ha | 0, 4, 0)
    ga(Ga + 8 | 0, Da | 0, 4, 0)
    ga(Ga + 12 | 0, Fa | 0, 4, 0)
    ga(Ga + 16 | 0, Ea | 0, 4, 0)
    ga(Ga + 20 | 0, Ca | 0, 4, 0)
    ga(Ga + 24 | 0, Aa | 0, 4, 0)
    ga(Ga + 28 | 0, za | 0, 4, 0)
    ga(Ga + 32 | 0, xa | 0, 4, 0)
    ga(Ga + 36 | 0, wa | 0, 4, 0)
    La(Ba, Ga)
    wa = T + 4 | 0
    ga(wa + 0 | 0, 0 | 0, 4, 0)
    ga(wa + 4 | 0, 0 | 0, 4, 0)
    ga(wa + 8 | 0, 0 | 0, 4, 0)
    ga(wa + 12 | 0, 0 | 0, 4, 0)
    ga(wa + 16 | 0, 0 | 0, 4, 0)
    ga(wa + 20 | 0, 0 | 0, 4, 0)
    ga(wa + 24 | 0, 0 | 0, 4, 0)
    ga(wa + 28 | 0, 0 | 0, 4, 0)
    xa = fa(Ba + 4 | 0, 4, 0, 0) | 0 | 0
    za = fa(Ba + 8 | 0, 4, 0, 0) | 0 | 0
    Aa = fa(Ba + 12 | 0, 4, 0, 0) | 0 | 0
    Ca = fa(Ba + 16 | 0, 4, 0, 0) | 0 | 0
    Ea = fa(Ba + 20 | 0, 4, 0, 0) | 0 | 0
    Fa = fa(Ba + 24 | 0, 4, 0, 0) | 0 | 0
    Da = fa(Ba + 28 | 0, 4, 0, 0) | 0 | 0
    Ha = fa(Ba + 32 | 0, 4, 0, 0) | 0 | 0
    ha = fa(Ba + 36 | 0, 4, 0, 0) | 0 | 0
    oa = T + 8 | 0
    W = T + 12 | 0
    X = T + 16 | 0
    Y = T + 20 | 0
    Z = T + 24 | 0
    _ = T + 28 | 0
    $ = T + 32 | 0
    aa = T + 36 | 0
    ga(T | 0, (fa(Ba | 0, 4, 0, 0) | 0 | 0) + 1 | 0, 4, 0)
    ga(wa | 0, xa | 0, 4, 0)
    ga(oa | 0, za | 0, 4, 0)
    ga(W | 0, Aa | 0, 4, 0)
    ga(X | 0, Ca | 0, 4, 0)
    ga(Y | 0, Ea | 0, 4, 0)
    ga(Z | 0, Fa | 0, 4, 0)
    ga(_ | 0, Da | 0, 4, 0)
    ga($ | 0, Ha | 0, 4, 0)
    ga(aa | 0, ha | 0, 4, 0)
    Ja(O, T)
    ya(P, 32040, Ba)
    ha = O + 4 | 0
    Ha = O + 8 | 0
    Da = O + 12 | 0
    Fa = O + 16 | 0
    Ea = O + 20 | 0
    Ca = O + 24 | 0
    Aa = O + 28 | 0
    za = O + 32 | 0
    xa = O + 36 | 0
    ka = P + 4 | 0
    la = P + 8 | 0
    ma = P + 12 | 0
    U = P + 16 | 0
    pa = P + 20 | 0
    qa = P + 24 | 0
    ra = P + 28 | 0
    sa = P + 32 | 0
    ta = P + 36 | 0
    va = (fa(ka | 0, 4, 0, 0) | 0 | 0) + (fa(ha | 0, 4, 0, 0) | 0 | 0) | 0
    ja = (fa(la | 0, 4, 0, 0) | 0 | 0) + (fa(Ha | 0, 4, 0, 0) | 0 | 0) | 0
    ia = (fa(ma | 0, 4, 0, 0) | 0 | 0) + (fa(Da | 0, 4, 0, 0) | 0 | 0) | 0
    ea = (fa(U | 0, 4, 0, 0) | 0 | 0) + (fa(Fa | 0, 4, 0, 0) | 0 | 0) | 0
    da = (fa(pa | 0, 4, 0, 0) | 0 | 0) + (fa(Ea | 0, 4, 0, 0) | 0 | 0) | 0
    ca = (fa(qa | 0, 4, 0, 0) | 0 | 0) + (fa(Ca | 0, 4, 0, 0) | 0 | 0) | 0
    ba = (fa(ra | 0, 4, 0, 0) | 0 | 0) + (fa(Aa | 0, 4, 0, 0) | 0 | 0) | 0
    V = (fa(sa | 0, 4, 0, 0) | 0 | 0) + (fa(za | 0, 4, 0, 0) | 0 | 0) | 0
    t = (fa(ta | 0, 4, 0, 0) | 0 | 0) + (fa(xa | 0, 4, 0, 0) | 0 | 0) | 0
    ga(O | 0, (fa(P | 0, 4, 0, 0) | 0 | 0) + (fa(O | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
    ga(ha | 0, va | 0, 4, 0)
    ga(Ha | 0, ja | 0, 4, 0)
    ga(Da | 0, ia | 0, 4, 0)
    ga(Fa | 0, ea | 0, 4, 0)
    ga(Ea | 0, da | 0, 4, 0)
    ga(Ca | 0, ca | 0, 4, 0)
    ga(Aa | 0, ba | 0, 4, 0)
    ga(za | 0, V | 0, 4, 0)
    ga(xa | 0, t | 0, 4, 0)
    Ka(a, T, O)
    Ja(P, a)
    ya(O, P, O)
    t = (fa(wa | 0, 4, 0, 0) | 0 | 0) - (fa(ha | 0, 4, 0, 0) | 0 | 0) | 0
    V = (fa(oa | 0, 4, 0, 0) | 0 | 0) - (fa(Ha | 0, 4, 0, 0) | 0 | 0) | 0
    ba = (fa(W | 0, 4, 0, 0) | 0 | 0) - (fa(Da | 0, 4, 0, 0) | 0 | 0) | 0
    ca = (fa(X | 0, 4, 0, 0) | 0 | 0) - (fa(Fa | 0, 4, 0, 0) | 0 | 0) | 0
    da = (fa(Y | 0, 4, 0, 0) | 0 | 0) - (fa(Ea | 0, 4, 0, 0) | 0 | 0) | 0
    ea = (fa(Z | 0, 4, 0, 0) | 0 | 0) - (fa(Ca | 0, 4, 0, 0) | 0 | 0) | 0
    ia = (fa(_ | 0, 4, 0, 0) | 0 | 0) - (fa(Aa | 0, 4, 0, 0) | 0 | 0) | 0
    ja = (fa($ | 0, 4, 0, 0) | 0 | 0) - (fa(za | 0, 4, 0, 0) | 0 | 0) | 0
    va = (fa(aa | 0, 4, 0, 0) | 0 | 0) - (fa(xa | 0, 4, 0, 0) | 0 | 0) | 0
    ga(P | 0, (fa(T | 0, 4, 0, 0) | 0 | 0) - (fa(O | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
    ga(ka | 0, t | 0, 4, 0)
    ga(la | 0, V | 0, 4, 0)
    ga(ma | 0, ba | 0, 4, 0)
    ga(U | 0, ca | 0, 4, 0)
    ga(pa | 0, da | 0, 4, 0)
    ga(qa | 0, ea | 0, 4, 0)
    ga(ra | 0, ia | 0, 4, 0)
    ga(sa | 0, ja | 0, 4, 0)
    ga(ta | 0, va | 0, 4, 0)
    va = fa(32084 | 0, 4, 0, 0) | 0 | 0
    ja = fa(32088 | 0, 4, 0, 0) | 0 | 0
    ia = fa(32092 | 0, 4, 0, 0) | 0 | 0
    ea = fa(32096 | 0, 4, 0, 0) | 0 | 0
    da = fa(32100 | 0, 4, 0, 0) | 0 | 0
    ca = fa(32104 | 0, 4, 0, 0) | 0 | 0
    ba = fa(32108 | 0, 4, 0, 0) | 0 | 0
    V = fa(32112 | 0, 4, 0, 0) | 0 | 0
    t = fa(32116 | 0, 4, 0, 0) | 0 | 0
    ga(Q | 0, fa(8020 * 4 | 0, 4, 0, 0) | 0 | 0, 4, 0)
    ua = Q + 4 | 0
    ga(ua | 0, va | 0, 4, 0)
    va = Q + 8 | 0
    ga(va | 0, ja | 0, 4, 0)
    ja = Q + 12 | 0
    ga(ja | 0, ia | 0, 4, 0)
    ia = Q + 16 | 0
    ga(ia | 0, ea | 0, 4, 0)
    ea = Q + 20 | 0
    ga(ea | 0, da | 0, 4, 0)
    da = Q + 24 | 0
    ga(da | 0, ca | 0, 4, 0)
    ca = Q + 28 | 0
    ga(ca | 0, ba | 0, 4, 0)
    ba = Q + 32 | 0
    ga(ba | 0, V | 0, 4, 0)
    V = Q + 36 | 0
    ga(V | 0, t | 0, 4, 0)
    Oa(c, P)
    t = c + 1 | 0
    J = c + 2 | 0
    f = c + 3 | 0
    u = c + 4 | 0
    g = c + 5 | 0
    h = c + 6 | 0
    j = c + 7 | 0
    k = c + 8 | 0
    l = c + 9 | 0
    m = c + 10 | 0
    n = c + 11 | 0
    o = c + 12 | 0
    p = c + 13 | 0
    q = c + 14 | 0
    r = c + 15 | 0
    s = c + 16 | 0
    K = c + 17 | 0
    b = c + 18 | 0
    v = c + 19 | 0
    w = c + 20 | 0
    x = c + 21 | 0
    y = c + 22 | 0
    z = c + 23 | 0
    A = c + 24 | 0
    B = c + 25 | 0
    C = c + 26 | 0
    E = c + 27 | 0
    F = c + 28 | 0
    G = c + 29 | 0
    H = c + 30 | 0
    I = c + 31 | 0
    do {
      if (!((((fa(t >> 0 | 0, 1, 0, 0) | 0 | (fa(c >> 0 | 0, 1, 0, 0) | 0) | (fa(J >> 0 | 0, 1, 0, 0) | 0) | (fa(f >> 0 | 0, 1, 0, 0) | 0) | (fa(u >> 0 | 0, 1, 0, 0) | 0) | (fa(g >> 0 | 0, 1, 0, 0) | 0) | (fa(h >> 0 | 0, 1, 0, 0) | 0) | (fa(j >> 0 | 0, 1, 0, 0) | 0) | (fa(k >> 0 | 0, 1, 0, 0) | 0) | (fa(l >> 0 | 0, 1, 0, 0) | 0) | (fa(m >> 0 | 0, 1, 0, 0) | 0) | (fa(n >> 0 | 0, 1, 0, 0) | 0) | (fa(o >> 0 | 0, 1, 0, 0) | 0) | (fa(p >> 0 | 0, 1, 0, 0) | 0) | (fa(q >> 0 | 0, 1, 0, 0) | 0) | (fa(r >> 0 | 0, 1, 0, 0) | 0) | (fa(s >> 0 | 0, 1, 0, 0) | 0) | (fa(K >> 0 | 0, 1, 0, 0) | 0) | (fa(b >> 0 | 0, 1, 0, 0) | 0) | (fa(v >> 0 | 0, 1, 0, 0) | 0) | (fa(w >> 0 | 0, 1, 0, 0) | 0) | (fa(x >> 0 | 0, 1, 0, 0) | 0) | (fa(y >> 0 | 0, 1, 0, 0) | 0) | (fa(z >> 0 | 0, 1, 0, 0) | 0) | (fa(A >> 0 | 0, 1, 0, 0) | 0) | (fa(B >> 0 | 0, 1, 0, 0) | 0) | (fa(C >> 0 | 0, 1, 0, 0) | 0) | (fa(E >> 0 | 0, 1, 0, 0) | 0) | (fa(F >> 0 | 0, 1, 0, 0) | 0) | (fa(G >> 0 | 0, 1, 0, 0) | 0) | (fa(H >> 0 | 0, 1, 0, 0) | 0) | (fa(I >> 0 | 0, 1, 0, 0) | 0)) & 255) + -1 & -256 | 0) === -256)) {
        Va = (fa(ha | 0, 4, 0, 0) | 0 | 0) + (fa(wa | 0, 4, 0, 0) | 0 | 0) | 0
        Ua = (fa(Ha | 0, 4, 0, 0) | 0 | 0) + (fa(oa | 0, 4, 0, 0) | 0 | 0) | 0
        Ta = (fa(Da | 0, 4, 0, 0) | 0 | 0) + (fa(W | 0, 4, 0, 0) | 0 | 0) | 0
        Sa = (fa(Fa | 0, 4, 0, 0) | 0 | 0) + (fa(X | 0, 4, 0, 0) | 0 | 0) | 0
        Ra = (fa(Ea | 0, 4, 0, 0) | 0 | 0) + (fa(Y | 0, 4, 0, 0) | 0 | 0) | 0
        Qa = (fa(Ca | 0, 4, 0, 0) | 0 | 0) + (fa(Z | 0, 4, 0, 0) | 0 | 0) | 0
        Pa = (fa(Aa | 0, 4, 0, 0) | 0 | 0) + (fa(_ | 0, 4, 0, 0) | 0 | 0) | 0
        Ma = (fa(za | 0, 4, 0, 0) | 0 | 0) + (fa($ | 0, 4, 0, 0) | 0 | 0) | 0
        Ia = (fa(xa | 0, 4, 0, 0) | 0 | 0) + (fa(aa | 0, 4, 0, 0) | 0 | 0) | 0
        ga(P | 0, (fa(O | 0, 4, 0, 0) | 0 | 0) + (fa(T | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
        ga(ka | 0, Va | 0, 4, 0)
        ga(la | 0, Ua | 0, 4, 0)
        ga(ma | 0, Ta | 0, 4, 0)
        ga(U | 0, Sa | 0, 4, 0)
        ga(pa | 0, Ra | 0, 4, 0)
        ga(qa | 0, Qa | 0, 4, 0)
        ga(ra | 0, Pa | 0, 4, 0)
        ga(sa | 0, Ma | 0, 4, 0)
        ga(ta | 0, Ia | 0, 4, 0)
        Oa(c, P)
        if ((((fa(t >> 0 | 0, 1, 0, 0) | 0 | (fa(c >> 0 | 0, 1, 0, 0) | 0) | (fa(J >> 0 | 0, 1, 0, 0) | 0) | (fa(f >> 0 | 0, 1, 0, 0) | 0) | (fa(u >> 0 | 0, 1, 0, 0) | 0) | (fa(g >> 0 | 0, 1, 0, 0) | 0) | (fa(h >> 0 | 0, 1, 0, 0) | 0) | (fa(j >> 0 | 0, 1, 0, 0) | 0) | (fa(k >> 0 | 0, 1, 0, 0) | 0) | (fa(l >> 0 | 0, 1, 0, 0) | 0) | (fa(m >> 0 | 0, 1, 0, 0) | 0) | (fa(n >> 0 | 0, 1, 0, 0) | 0) | (fa(o >> 0 | 0, 1, 0, 0) | 0) | (fa(p >> 0 | 0, 1, 0, 0) | 0) | (fa(q >> 0 | 0, 1, 0, 0) | 0) | (fa(r >> 0 | 0, 1, 0, 0) | 0) | (fa(s >> 0 | 0, 1, 0, 0) | 0) | (fa(K >> 0 | 0, 1, 0, 0) | 0) | (fa(b >> 0 | 0, 1, 0, 0) | 0) | (fa(v >> 0 | 0, 1, 0, 0) | 0) | (fa(w >> 0 | 0, 1, 0, 0) | 0) | (fa(x >> 0 | 0, 1, 0, 0) | 0) | (fa(y >> 0 | 0, 1, 0, 0) | 0) | (fa(z >> 0 | 0, 1, 0, 0) | 0) | (fa(A >> 0 | 0, 1, 0, 0) | 0) | (fa(B >> 0 | 0, 1, 0, 0) | 0) | (fa(C >> 0 | 0, 1, 0, 0) | 0) | (fa(E >> 0 | 0, 1, 0, 0) | 0) | (fa(F >> 0 | 0, 1, 0, 0) | 0) | (fa(G >> 0 | 0, 1, 0, 0) | 0) | (fa(H >> 0 | 0, 1, 0, 0) | 0) | (fa(I >> 0 | 0, 1, 0, 0) | 0)) & 255) + -1 & -256 | 0) === -256) {
          ya(a, a, 32120)
          N = 5
          break
        }
        ya(O, O, 280)
        Ba = fa(Ha | 0, 4, 0, 0) | 0 | 0
        Da = fa(Da | 0, 4, 0, 0) | 0 | 0
        Fa = fa(Fa | 0, 4, 0, 0) | 0 | 0
        Ea = fa(Ea | 0, 4, 0, 0) | 0 | 0
        Ca = fa(Ca | 0, 4, 0, 0) | 0 | 0
        Aa = fa(Aa | 0, 4, 0, 0) | 0 | 0
        za = fa(za | 0, 4, 0, 0) | 0 | 0
        xa = fa(xa | 0, 4, 0, 0) | 0 | 0
        Ia = (fa(wa | 0, 4, 0, 0) | 0 | 0) - (fa(ha | 0, 4, 0, 0) | 0 | 0) | 0
        Ma = (fa(oa | 0, 4, 0, 0) | 0 | 0) - Ba | 0
        Pa = (fa(W | 0, 4, 0, 0) | 0 | 0) - Da | 0
        Qa = (fa(X | 0, 4, 0, 0) | 0 | 0) - Fa | 0
        Ra = (fa(Y | 0, 4, 0, 0) | 0 | 0) - Ea | 0
        Sa = (fa(Z | 0, 4, 0, 0) | 0 | 0) - Ca | 0
        Ta = (fa(_ | 0, 4, 0, 0) | 0 | 0) - Aa | 0
        Ua = (fa($ | 0, 4, 0, 0) | 0 | 0) - za | 0
        Va = (fa(aa | 0, 4, 0, 0) | 0 | 0) - xa | 0
        ga(P | 0, (fa(T | 0, 4, 0, 0) | 0 | 0) - (fa(O | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
        ga(ka | 0, Ia | 0, 4, 0)
        ga(la | 0, Ma | 0, 4, 0)
        ga(ma | 0, Pa | 0, 4, 0)
        ga(U | 0, Qa | 0, 4, 0)
        ga(pa | 0, Ra | 0, 4, 0)
        ga(qa | 0, Sa | 0, 4, 0)
        ga(ra | 0, Ta | 0, 4, 0)
        ga(sa | 0, Ua | 0, 4, 0)
        ga(ta | 0, Va | 0, 4, 0)
        Oa(c, P)
        if ((((fa(t >> 0 | 0, 1, 0, 0) | 0 | (fa(c >> 0 | 0, 1, 0, 0) | 0) | (fa(J >> 0 | 0, 1, 0, 0) | 0) | (fa(f >> 0 | 0, 1, 0, 0) | 0) | (fa(u >> 0 | 0, 1, 0, 0) | 0) | (fa(g >> 0 | 0, 1, 0, 0) | 0) | (fa(h >> 0 | 0, 1, 0, 0) | 0) | (fa(j >> 0 | 0, 1, 0, 0) | 0) | (fa(k >> 0 | 0, 1, 0, 0) | 0) | (fa(l >> 0 | 0, 1, 0, 0) | 0) | (fa(m >> 0 | 0, 1, 0, 0) | 0) | (fa(n >> 0 | 0, 1, 0, 0) | 0) | (fa(o >> 0 | 0, 1, 0, 0) | 0) | (fa(p >> 0 | 0, 1, 0, 0) | 0) | (fa(q >> 0 | 0, 1, 0, 0) | 0) | (fa(r >> 0 | 0, 1, 0, 0) | 0) | (fa(s >> 0 | 0, 1, 0, 0) | 0) | (fa(K >> 0 | 0, 1, 0, 0) | 0) | (fa(b >> 0 | 0, 1, 0, 0) | 0) | (fa(v >> 0 | 0, 1, 0, 0) | 0) | (fa(w >> 0 | 0, 1, 0, 0) | 0) | (fa(x >> 0 | 0, 1, 0, 0) | 0) | (fa(y >> 0 | 0, 1, 0, 0) | 0) | (fa(z >> 0 | 0, 1, 0, 0) | 0) | (fa(A >> 0 | 0, 1, 0, 0) | 0) | (fa(B >> 0 | 0, 1, 0, 0) | 0) | (fa(C >> 0 | 0, 1, 0, 0) | 0) | (fa(E >> 0 | 0, 1, 0, 0) | 0) | (fa(F >> 0 | 0, 1, 0, 0) | 0) | (fa(G >> 0 | 0, 1, 0, 0) | 0) | (fa(H >> 0 | 0, 1, 0, 0) | 0) | (fa(I >> 0 | 0, 1, 0, 0) | 0)) & 255) + -1 & -256 | 0) === -256) {
          ya(a, a, 32240)
          R = 1
          break
        }
        Ia = (fa(ha | 0, 4, 0, 0) | 0 | 0) + (fa(wa | 0, 4, 0, 0) | 0 | 0) | 0
        Ma = Ba + (fa(oa | 0, 4, 0, 0) | 0 | 0) | 0
        Pa = Da + (fa(W | 0, 4, 0, 0) | 0 | 0) | 0
        Qa = Fa + (fa(X | 0, 4, 0, 0) | 0 | 0) | 0
        Ra = Ea + (fa(Y | 0, 4, 0, 0) | 0 | 0) | 0
        Sa = Ca + (fa(Z | 0, 4, 0, 0) | 0 | 0) | 0
        Ta = Aa + (fa(_ | 0, 4, 0, 0) | 0 | 0) | 0
        Ua = za + (fa($ | 0, 4, 0, 0) | 0 | 0) | 0
        Va = xa + (fa(aa | 0, 4, 0, 0) | 0 | 0) | 0
        ga(P | 0, (fa(O | 0, 4, 0, 0) | 0 | 0) + (fa(T | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
        ga(ka | 0, Ia | 0, 4, 0)
        ga(la | 0, Ma | 0, 4, 0)
        ga(ma | 0, Pa | 0, 4, 0)
        ga(U | 0, Qa | 0, 4, 0)
        ga(pa | 0, Ra | 0, 4, 0)
        ga(qa | 0, Sa | 0, 4, 0)
        ga(ra | 0, Ta | 0, 4, 0)
        ga(sa | 0, Ua | 0, 4, 0)
        ga(ta | 0, Va | 0, 4, 0)
        Oa(c, P)
        if ((((fa(t >> 0 | 0, 1, 0, 0) | 0 | (fa(c >> 0 | 0, 1, 0, 0) | 0) | (fa(J >> 0 | 0, 1, 0, 0) | 0) | (fa(f >> 0 | 0, 1, 0, 0) | 0) | (fa(u >> 0 | 0, 1, 0, 0) | 0) | (fa(g >> 0 | 0, 1, 0, 0) | 0) | (fa(h >> 0 | 0, 1, 0, 0) | 0) | (fa(j >> 0 | 0, 1, 0, 0) | 0) | (fa(k >> 0 | 0, 1, 0, 0) | 0) | (fa(l >> 0 | 0, 1, 0, 0) | 0) | (fa(m >> 0 | 0, 1, 0, 0) | 0) | (fa(n >> 0 | 0, 1, 0, 0) | 0) | (fa(o >> 0 | 0, 1, 0, 0) | 0) | (fa(p >> 0 | 0, 1, 0, 0) | 0) | (fa(q >> 0 | 0, 1, 0, 0) | 0) | (fa(r >> 0 | 0, 1, 0, 0) | 0) | (fa(s >> 0 | 0, 1, 0, 0) | 0) | (fa(K >> 0 | 0, 1, 0, 0) | 0) | (fa(b >> 0 | 0, 1, 0, 0) | 0) | (fa(v >> 0 | 0, 1, 0, 0) | 0) | (fa(w >> 0 | 0, 1, 0, 0) | 0) | (fa(x >> 0 | 0, 1, 0, 0) | 0) | (fa(y >> 0 | 0, 1, 0, 0) | 0) | (fa(z >> 0 | 0, 1, 0, 0) | 0) | (fa(A >> 0 | 0, 1, 0, 0) | 0) | (fa(B >> 0 | 0, 1, 0, 0) | 0) | (fa(C >> 0 | 0, 1, 0, 0) | 0) | (fa(E >> 0 | 0, 1, 0, 0) | 0) | (fa(F >> 0 | 0, 1, 0, 0) | 0) | (fa(G >> 0 | 0, 1, 0, 0) | 0) | (fa(H >> 0 | 0, 1, 0, 0) | 0) | (fa(I >> 0 | 0, 1, 0, 0) | 0)) & 255) + -1 & -256 | 0) === -256) {
          ya(a, a, 32200)
          R = 1
          break
        } else {
          na(8, 48, 2107, 88)
        }
      } else {
        ya(a, a, 32160)
        N = 5
      }
    } while (0)
    if ((N | 0) === 5) {
      ya(a, a, Ga)
      ya(Q, Q, Ba)
      R = 0
    }
    Oa(c, a)
    do {
      if (((fa(c >> 0 | 0, 1, 0, 0) | 0) & 1 | 0) !== (R | 0)) {
        Oa(c, a)
        if ((((fa(t >> 0 | 0, 1, 0, 0) | 0 | (fa(c >> 0 | 0, 1, 0, 0) | 0) | (fa(J >> 0 | 0, 1, 0, 0) | 0) | (fa(f >> 0 | 0, 1, 0, 0) | 0) | (fa(u >> 0 | 0, 1, 0, 0) | 0) | (fa(g >> 0 | 0, 1, 0, 0) | 0) | (fa(h >> 0 | 0, 1, 0, 0) | 0) | (fa(j >> 0 | 0, 1, 0, 0) | 0) | (fa(k >> 0 | 0, 1, 0, 0) | 0) | (fa(l >> 0 | 0, 1, 0, 0) | 0) | (fa(m >> 0 | 0, 1, 0, 0) | 0) | (fa(n >> 0 | 0, 1, 0, 0) | 0) | (fa(o >> 0 | 0, 1, 0, 0) | 0) | (fa(p >> 0 | 0, 1, 0, 0) | 0) | (fa(q >> 0 | 0, 1, 0, 0) | 0) | (fa(r >> 0 | 0, 1, 0, 0) | 0) | (fa(s >> 0 | 0, 1, 0, 0) | 0) | (fa(K >> 0 | 0, 1, 0, 0) | 0) | (fa(b >> 0 | 0, 1, 0, 0) | 0) | (fa(v >> 0 | 0, 1, 0, 0) | 0) | (fa(w >> 0 | 0, 1, 0, 0) | 0) | (fa(x >> 0 | 0, 1, 0, 0) | 0) | (fa(y >> 0 | 0, 1, 0, 0) | 0) | (fa(z >> 0 | 0, 1, 0, 0) | 0) | (fa(A >> 0 | 0, 1, 0, 0) | 0) | (fa(B >> 0 | 0, 1, 0, 0) | 0) | (fa(C >> 0 | 0, 1, 0, 0) | 0) | (fa(E >> 0 | 0, 1, 0, 0) | 0) | (fa(F >> 0 | 0, 1, 0, 0) | 0) | (fa(G >> 0 | 0, 1, 0, 0) | 0) | (fa(H >> 0 | 0, 1, 0, 0) | 0) | (fa(I >> 0 | 0, 1, 0, 0) | 0)) & 255) + -1 & -256 | 0) === -256) {
          na(120, 48, 2117, 88)
        } else {
          za = a + 4 | 0
          Ba = a + 8 | 0
          Da = a + 12 | 0
          Fa = a + 16 | 0
          Ha = a + 20 | 0
          Ma = a + 24 | 0
          Qa = a + 28 | 0
          Sa = a + 32 | 0
          Ua = a + 36 | 0
          Aa = 0 - (fa(za | 0, 4, 0, 0) | 0 | 0) | 0
          Ca = 0 - (fa(Ba | 0, 4, 0, 0) | 0 | 0) | 0
          Ea = 0 - (fa(Da | 0, 4, 0, 0) | 0 | 0) | 0
          Ga = 0 - (fa(Fa | 0, 4, 0, 0) | 0 | 0) | 0
          Ia = 0 - (fa(Ha | 0, 4, 0, 0) | 0 | 0) | 0
          Pa = 0 - (fa(Ma | 0, 4, 0, 0) | 0 | 0) | 0
          Ra = 0 - (fa(Qa | 0, 4, 0, 0) | 0 | 0) | 0
          Ta = 0 - (fa(Sa | 0, 4, 0, 0) | 0 | 0) | 0
          Va = 0 - (fa(Ua | 0, 4, 0, 0) | 0 | 0) | 0
          ga(a | 0, 0 - (fa(a | 0, 4, 0, 0) | 0 | 0) | 0, 4, 0)
          ga(za | 0, Aa | 0, 4, 0)
          ga(Ba | 0, Ca | 0, 4, 0)
          ga(Da | 0, Ea | 0, 4, 0)
          ga(Fa | 0, Ga | 0, 4, 0)
          ga(Ha | 0, Ia | 0, 4, 0)
          ga(Ma | 0, Pa | 0, 4, 0)
          ga(Qa | 0, Ra | 0, 4, 0)
          ga(Sa | 0, Ta | 0, 4, 0)
          ga(Ua | 0, Va | 0, 4, 0)
          break
        }
      }
    } while (0)
    R = a + 80 | 0
    Ia = fa(Q | 0, 4, 0, 0) | 0 | 0
    Pa = fa(ua | 0, 4, 0, 0) | 0 | 0
    Ra = fa(va | 0, 4, 0, 0) | 0 | 0
    Ta = fa(ja | 0, 4, 0, 0) | 0 | 0
    Va = fa(ia | 0, 4, 0, 0) | 0 | 0
    U = fa(ea | 0, 4, 0, 0) | 0 | 0
    P = fa(da | 0, 4, 0, 0) | 0 | 0
    ca = fa(ca | 0, 4, 0, 0) | 0 | 0
    ba = fa(ba | 0, 4, 0, 0) | 0 | 0
    V = fa(V | 0, 4, 0, 0) | 0 | 0
    Ma = fa(T | 0, 4, 0, 0) | 0 | 0
    Qa = fa(wa | 0, 4, 0, 0) | 0 | 0
    Sa = fa(oa | 0, 4, 0, 0) | 0 | 0
    Ua = fa(W | 0, 4, 0, 0) | 0 | 0
    W = fa(X | 0, 4, 0, 0) | 0 | 0
    Q = fa(Y | 0, 4, 0, 0) | 0 | 0
    N = fa(Z | 0, 4, 0, 0) | 0 | 0
    Z = fa(_ | 0, 4, 0, 0) | 0 | 0
    X = fa($ | 0, 4, 0, 0) | 0 | 0
    T = fa(aa | 0, 4, 0, 0) | 0 | 0
    ga(R | 0, Ma + Ia | 0, 4, 0)
    ga(a + 84 | 0, Qa + Pa | 0, 4, 0)
    ga(a + 88 | 0, Sa + Ra | 0, 4, 0)
    ga(a + 92 | 0, Ua + Ta | 0, 4, 0)
    ga(a + 96 | 0, W + Va | 0, 4, 0)
    ga(a + 100 | 0, Q + U | 0, 4, 0)
    ga(a + 104 | 0, N + P | 0, 4, 0)
    ga(a + 108 | 0, Z + ca | 0, 4, 0)
    ga(a + 112 | 0, X + ba | 0, 4, 0)
    ga(a + 116 | 0, T + V | 0, 4, 0)
    O = a + 40 | 0
    ga(O | 0, Ia - Ma | 0, 4, 0)
    ga(a + 44 | 0, Pa - Qa | 0, 4, 0)
    ga(a + 48 | 0, Ra - Sa | 0, 4, 0)
    ga(a + 52 | 0, Ta - Ua | 0, 4, 0)
    ga(a + 56 | 0, Va - W | 0, 4, 0)
    ga(a + 60 | 0, U - Q | 0, 4, 0)
    ga(a + 64 | 0, P - N | 0, 4, 0)
    ga(a + 68 | 0, ca - Z | 0, 4, 0)
    ga(a + 72 | 0, ba - X | 0, 4, 0)
    ga(a + 76 | 0, V - T | 0, 4, 0)
    ya(a, a, R)
    Na(S, R)
    ya(L, a, S)
    ya(M, O, S)
    Ja(L, L)
    Ja(M, M)
    ya(d, L, M)
    ya(d, 240, d)
    O = d + 4 | 0
    a = d + 8 | 0
    R = d + 12 | 0
    T = d + 16 | 0
    V = d + 20 | 0
    X = d + 24 | 0
    Z = d + 28 | 0
    $ = d + 32 | 0
    ba = d + 36 | 0
    ca = L + 4 | 0
    N = (fa(L | 0, 4, 0, 0) | 0 | 0) + (fa(d | 0, 4, 0, 0) | 0 | 0) - (fa(M | 0, 4, 0, 0) | 0 | 0) | 0
    P = (fa(ca | 0, 4, 0, 0) | 0 | 0) + (fa(O | 0, 4, 0, 0) | 0 | 0) - (fa(M + 4 | 0, 4, 0, 0) | 0 | 0) | 0
    Q = (fa(L + 8 | 0, 4, 0, 0) | 0 | 0) + (fa(a | 0, 4, 0, 0) | 0 | 0) - (fa(M + 8 | 0, 4, 0, 0) | 0 | 0) | 0
    S = (fa(L + 12 | 0, 4, 0, 0) | 0 | 0) + (fa(R | 0, 4, 0, 0) | 0 | 0) - (fa(M + 12 | 0, 4, 0, 0) | 0 | 0) | 0
    U = (fa(L + 16 | 0, 4, 0, 0) | 0 | 0) + (fa(T | 0, 4, 0, 0) | 0 | 0) - (fa(M + 16 | 0, 4, 0, 0) | 0 | 0) | 0
    W = (fa(L + 20 | 0, 4, 0, 0) | 0 | 0) + (fa(V | 0, 4, 0, 0) | 0 | 0) - (fa(M + 20 | 0, 4, 0, 0) | 0 | 0) | 0
    Y = (fa(L + 24 | 0, 4, 0, 0) | 0 | 0) + (fa(X | 0, 4, 0, 0) | 0 | 0) - (fa(M + 24 | 0, 4, 0, 0) | 0 | 0) | 0
    _ = (fa(L + 28 | 0, 4, 0, 0) | 0 | 0) + (fa(Z | 0, 4, 0, 0) | 0 | 0) - (fa(M + 28 | 0, 4, 0, 0) | 0 | 0) | 0
    aa = (fa(L + 32 | 0, 4, 0, 0) | 0 | 0) + (fa($ | 0, 4, 0, 0) | 0 | 0) - (fa(M + 32 | 0, 4, 0, 0) | 0 | 0) | 0
    M = (fa(L + 36 | 0, 4, 0, 0) | 0 | 0) + (fa(ba | 0, 4, 0, 0) | 0 | 0) - (fa(M + 36 | 0, 4, 0, 0) | 0 | 0) | 0
    ga(L | 0, 1 | 0, 4, 0)
    ca = ca + 0 | 0
    L = ca + 36 | 0
    do {
      ga(ca | 0, 0 | 0, 4, 0)
      ca = ca + 4 | 0
    } while ((ca | 0) < (L | 0))
    ga(d | 0, N + 1 | 0, 4, 0)
    ga(O | 0, P | 0, 4, 0)
    ga(a | 0, Q | 0, 4, 0)
    ga(R | 0, S | 0, 4, 0)
    ga(T | 0, U | 0, 4, 0)
    ga(V | 0, W | 0, 4, 0)
    ga(X | 0, Y | 0, 4, 0)
    ga(Z | 0, _ | 0, 4, 0)
    ga($ | 0, aa | 0, 4, 0)
    ga(ba | 0, M | 0, 4, 0)
    Oa(c, d)
    if ((((fa(t >> 0 | 0, 1, 0, 0) | 0 | (fa(c >> 0 | 0, 1, 0, 0) | 0) | (fa(J >> 0 | 0, 1, 0, 0) | 0) | (fa(f >> 0 | 0, 1, 0, 0) | 0) | (fa(u >> 0 | 0, 1, 0, 0) | 0) | (fa(g >> 0 | 0, 1, 0, 0) | 0) | (fa(h >> 0 | 0, 1, 0, 0) | 0) | (fa(j >> 0 | 0, 1, 0, 0) | 0) | (fa(k >> 0 | 0, 1, 0, 0) | 0) | (fa(l >> 0 | 0, 1, 0, 0) | 0) | (fa(m >> 0 | 0, 1, 0, 0) | 0) | (fa(n >> 0 | 0, 1, 0, 0) | 0) | (fa(o >> 0 | 0, 1, 0, 0) | 0) | (fa(p >> 0 | 0, 1, 0, 0) | 0) | (fa(q >> 0 | 0, 1, 0, 0) | 0) | (fa(r >> 0 | 0, 1, 0, 0) | 0) | (fa(s >> 0 | 0, 1, 0, 0) | 0) | (fa(K >> 0 | 0, 1, 0, 0) | 0) | (fa(b >> 0 | 0, 1, 0, 0) | 0) | (fa(v >> 0 | 0, 1, 0, 0) | 0) | (fa(w >> 0 | 0, 1, 0, 0) | 0) | (fa(x >> 0 | 0, 1, 0, 0) | 0) | (fa(y >> 0 | 0, 1, 0, 0) | 0) | (fa(z >> 0 | 0, 1, 0, 0) | 0) | (fa(A >> 0 | 0, 1, 0, 0) | 0) | (fa(B >> 0 | 0, 1, 0, 0) | 0) | (fa(C >> 0 | 0, 1, 0, 0) | 0) | (fa(E >> 0 | 0, 1, 0, 0) | 0) | (fa(F >> 0 | 0, 1, 0, 0) | 0) | (fa(G >> 0 | 0, 1, 0, 0) | 0) | (fa(H >> 0 | 0, 1, 0, 0) | 0) | (fa(I >> 0 | 0, 1, 0, 0) | 0)) & 255) + -1 & -256 | 0) === -256) {
      i = e
    } else {
      na(144, 48, 2137, 88)
    }
  }

  function Xa (a) {
    a = a | 0
    var b = 0

    var c = 0
    b = i
    c = a + 0 | 0
    a = c + 32 | 0
    do {
      ga(c >> 0 | 0, 0 | 0, 1, 0)
      c = c + 1 | 0
    } while ((c | 0) < (a | 0))
    i = b
  }

  function Ya (a) {
    a = a | 0
    var b = 0

    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var E = 0

    var F = 0

    var G = 0

    var H = 0

    var I = 0

    var J = 0

    var K = 0

    var L = 0

    var M = 0

    var N = 0

    var O = 0

    var P = 0

    var Q = 0

    var R = 0

    var S = 0

    var T = 0

    var U = 0

    var V = 0

    var W = 0

    var X = 0

    var Y = 0

    var Z = 0

    var _ = 0

    var $ = 0

    var aa = 0

    var ba = 0

    var ca = 0

    var da = 0

    var ea = 0

    var ha = 0

    var ia = 0

    var ja = 0

    var ka = 0

    var la = 0

    var ma = 0

    var na = 0

    var oa = 0

    var pa = 0

    var qa = 0

    var ra = 0

    var sa = 0

    var ta = 0

    var ua = 0

    var va = 0

    var wa = 0

    var xa = 0

    var ya = 0

    var za = 0

    var Aa = 0

    var Ba = 0

    var Ca = 0
    b = i
    ea = a + 1 | 0
    ca = a + 2 | 0
    xa = fa(ca >> 0 | 0, 1, 0, 0) | 0 | 0
    aa = fa(a >> 0 | 0, 1, 0, 1) | 0 | 0
    ra = kb(fa(ea >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    R = D
    xa = xa & 255
    ya = kb(xa | 0, 0, 16) | 0
    ya = ra | aa | ya & 2031616
    aa = a + 3 | 0
    ra = kb(fa(aa >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    wa = D
    $ = a + 4 | 0
    V = kb(fa($ >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    wa = wa | D
    Z = a + 5 | 0
    N = fa(Z >> 0 | 0, 1, 0, 1) | 0 | 0
    X = kb(N | 0, 0, 24) | 0
    wa = jb(ra | xa | V | X | 0, wa | D | 0, 5) | 0
    X = a + 6 | 0
    V = a + 7 | 0
    xa = fa(V >> 0 | 0, 1, 0, 0) | 0 | 0
    ra = kb(fa(X >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Aa = D
    xa = xa & 255
    T = kb(xa | 0, 0, 16) | 0
    Aa = jb(ra | N | T | 0, Aa | D | 0, 2) | 0
    Aa = Aa & 2097151
    T = a + 8 | 0
    N = kb(fa(T >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    ra = D
    S = a + 9 | 0
    sa = kb(fa(S >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    ra = ra | D
    Q = a + 10 | 0
    la = fa(Q >> 0 | 0, 1, 0, 1) | 0 | 0
    O = kb(la | 0, 0, 24) | 0
    ra = jb(N | xa | sa | O | 0, ra | D | 0, 7) | 0
    O = a + 11 | 0
    sa = kb(fa(O >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    xa = D
    N = a + 12 | 0
    H = kb(fa(N >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    xa = xa | D
    L = a + 13 | 0
    u = fa(L >> 0 | 0, 1, 0, 1) | 0 | 0
    J = kb(u | 0, 0, 24) | 0
    xa = jb(sa | la | H | J | 0, xa | D | 0, 4) | 0
    xa = xa & 2097151
    J = a + 14 | 0
    H = a + 15 | 0
    la = fa(H >> 0 | 0, 1, 0, 0) | 0 | 0
    sa = kb(fa(J >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    pa = D
    la = la & 255
    F = kb(la | 0, 0, 16) | 0
    pa = jb(sa | u | F | 0, pa | D | 0, 1) | 0
    F = a + 16 | 0
    u = kb(fa(F >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    sa = D
    E = a + 17 | 0
    w = kb(fa(E >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    sa = sa | D
    B = a + 18 | 0
    v = fa(B >> 0 | 0, 1, 0, 1) | 0 | 0
    z = kb(v | 0, 0, 24) | 0
    sa = jb(u | la | w | z | 0, sa | D | 0, 6) | 0
    sa = sa & 2097151
    z = a + 19 | 0
    w = a + 20 | 0
    la = fa(w >> 0 | 0, 1, 0, 0) | 0 | 0
    u = kb(fa(z >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    o = D
    la = kb(la & 255 | 0, 0, 16) | 0
    o = jb(u | v | la | 0, o | D | 0, 3) | 0
    la = D
    v = a + 21 | 0
    u = a + 22 | 0
    s = a + 23 | 0
    U = fa(s >> 0 | 0, 1, 0, 0) | 0 | 0
    q = fa(v >> 0 | 0, 1, 0, 1) | 0 | 0
    _ = kb(fa(u >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    ma = D
    U = U & 255
    na = kb(U | 0, 0, 16) | 0
    na = _ | q | na & 2031616
    q = a + 24 | 0
    _ = kb(fa(q >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    da = D
    p = a + 25 | 0
    j = kb(fa(p >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    da = da | D
    n = a + 26 | 0
    M = fa(n >> 0 | 0, 1, 0, 1) | 0 | 0
    l = kb(M | 0, 0, 24) | 0
    da = jb(_ | U | j | l | 0, da | D | 0, 5) | 0
    l = a + 27 | 0
    j = a + 28 | 0
    U = fa(j >> 0 | 0, 1, 0, 0) | 0 | 0
    _ = kb(fa(l >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    d = D
    U = U & 255
    g = kb(U | 0, 0, 16) | 0
    d = jb(_ | M | g | 0, d | D | 0, 2) | 0
    d = d & 2097151
    g = a + 29 | 0
    M = kb(fa(g >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    _ = D
    f = a + 30 | 0
    za = kb(fa(f >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    _ = _ | D
    c = a + 31 | 0
    P = kb(fa(c >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    _ = jb(M | U | za | P | 0, _ | D | 0, 7) | 0
    P = D
    za = hb(ya | 0, R | 0, 1048576, 0) | 0
    za = jb(za | 0, D | 0, 21) | 0
    U = D
    wa = hb(wa & 2097151 | 0, 0, za | 0, U | 0) | 0
    M = D
    U = kb(za | 0, U | 0, 21) | 0
    U = gb(ya | 0, R | 0, U | 0, D | 0) | 0
    R = D
    ya = hb(Aa | 0, 0, 1048576, 0) | 0
    ya = jb(ya | 0, D | 0, 21) | 0
    za = D
    ra = hb(ra & 2097151 | 0, 0, ya | 0, za | 0) | 0
    Y = D
    za = kb(ya | 0, za | 0, 21) | 0
    ya = D
    ta = hb(xa | 0, 0, 1048576, 0) | 0
    ta = jb(ta | 0, D | 0, 21) | 0
    ua = D
    pa = hb(pa & 2097151 | 0, 0, ta | 0, ua | 0) | 0
    x = D
    ua = kb(ta | 0, ua | 0, 21) | 0
    ta = D
    t = hb(sa | 0, 0, 1048576, 0) | 0
    t = jb(t | 0, D | 0, 21) | 0
    r = D
    la = hb(o | 0, la | 0, t | 0, r | 0) | 0
    o = D
    r = kb(t | 0, r | 0, 21) | 0
    t = D
    h = hb(na | 0, ma | 0, 1048576, 0) | 0
    h = jb(h | 0, D | 0, 21) | 0
    k = D
    da = hb(da & 2097151 | 0, 0, h | 0, k | 0) | 0
    I = D
    k = kb(h | 0, k | 0, 21) | 0
    h = D
    ba = hb(d | 0, 0, 1048576, 0) | 0
    ba = jb(ba | 0, D | 0, 21) | 0
    ha = D
    P = hb(_ | 0, P | 0, ba | 0, ha | 0) | 0
    _ = D
    ha = kb(ba | 0, ha | 0, 21) | 0
    ba = D
    Ca = hb(wa | 0, M | 0, 1048576, 0) | 0
    Ca = jb(Ca | 0, D | 0, 21) | 0
    Ba = D
    K = kb(Ca | 0, Ba | 0, 21) | 0
    K = gb(wa | 0, M | 0, K | 0, D | 0) | 0
    M = D
    wa = hb(ra | 0, Y | 0, 1048576, 0) | 0
    wa = jb(wa | 0, D | 0, 21) | 0
    va = D
    A = kb(wa | 0, va | 0, 21) | 0
    A = gb(ra | 0, Y | 0, A | 0, D | 0) | 0
    Y = D
    ra = hb(pa | 0, x | 0, 1048576, 0) | 0
    ra = jb(ra | 0, D | 0, 21) | 0
    qa = D
    W = kb(ra | 0, qa | 0, 21) | 0
    W = gb(pa | 0, x | 0, W | 0, D | 0) | 0
    x = D
    pa = hb(la | 0, o | 0, 1048576, 0) | 0
    pa = jb(pa | 0, D | 0, 21) | 0
    oa = D
    m = kb(pa | 0, oa | 0, 21) | 0
    m = gb(la | 0, o | 0, m | 0, D | 0) | 0
    o = D
    la = hb(da | 0, I | 0, 1048576, 0) | 0
    la = jb(la | 0, D | 0, 21) | 0
    ka = D
    ia = kb(la | 0, ka | 0, 21) | 0
    ia = gb(da | 0, I | 0, ia | 0, D | 0) | 0
    I = D
    da = hb(P | 0, _ | 0, 1048576, 0) | 0
    da = jb(da | 0, D | 0, 21) | 0
    y = D
    e = kb(da | 0, y | 0, 21) | 0
    e = gb(P | 0, _ | 0, e | 0, D | 0) | 0
    _ = D
    P = sb(da | 0, y | 0, 666643, 0) | 0
    R = hb(P | 0, D | 0, U | 0, R | 0) | 0
    U = D
    P = sb(da | 0, y | 0, 470296, 0) | 0
    P = hb(K | 0, M | 0, P | 0, D | 0) | 0
    M = D
    K = sb(da | 0, y | 0, 654183, 0) | 0
    ja = D
    G = sb(da | 0, y | 0, -997805, -1) | 0
    G = hb(A | 0, Y | 0, G | 0, D | 0) | 0
    Y = D
    A = sb(da | 0, y | 0, 136657, 0) | 0
    C = D
    y = sb(da | 0, y | 0, -683901, -1) | 0
    y = hb(W | 0, x | 0, y | 0, D | 0) | 0
    x = D
    W = fb(R | 0, U | 0, 21) | 0
    da = D
    M = hb(P | 0, M | 0, W | 0, da | 0) | 0
    P = D
    da = kb(W | 0, da | 0, 21) | 0
    da = gb(R | 0, U | 0, da | 0, D | 0) | 0
    U = D
    R = fb(M | 0, P | 0, 21) | 0
    W = D
    Aa = hb(Ca | 0, Ba | 0, Aa | 0, 0) | 0
    ya = gb(Aa | 0, D | 0, za | 0, ya | 0) | 0
    ja = hb(ya | 0, D | 0, K | 0, ja | 0) | 0
    ja = hb(ja | 0, D | 0, R | 0, W | 0) | 0
    K = D
    W = kb(R | 0, W | 0, 21) | 0
    W = gb(M | 0, P | 0, W | 0, D | 0) | 0
    P = D
    M = fb(ja | 0, K | 0, 21) | 0
    R = D
    Y = hb(G | 0, Y | 0, M | 0, R | 0) | 0
    G = D
    R = kb(M | 0, R | 0, 21) | 0
    R = gb(ja | 0, K | 0, R | 0, D | 0) | 0
    K = D
    ja = fb(Y | 0, G | 0, 21) | 0
    M = D
    va = hb(xa | 0, 0, wa | 0, va | 0) | 0
    ta = gb(va | 0, D | 0, ua | 0, ta | 0) | 0
    C = hb(ta | 0, D | 0, A | 0, C | 0) | 0
    C = hb(C | 0, D | 0, ja | 0, M | 0) | 0
    A = D
    M = kb(ja | 0, M | 0, 21) | 0
    M = gb(Y | 0, G | 0, M | 0, D | 0) | 0
    G = D
    Y = fb(C | 0, A | 0, 21) | 0
    ja = D
    x = hb(y | 0, x | 0, Y | 0, ja | 0) | 0
    y = D
    ja = kb(Y | 0, ja | 0, 21) | 0
    ja = gb(C | 0, A | 0, ja | 0, D | 0) | 0
    A = D
    C = fb(x | 0, y | 0, 21) | 0
    Y = D
    qa = hb(sa | 0, 0, ra | 0, qa | 0) | 0
    t = gb(qa | 0, D | 0, r | 0, t | 0) | 0
    t = hb(t | 0, D | 0, C | 0, Y | 0) | 0
    r = D
    Y = kb(C | 0, Y | 0, 21) | 0
    Y = gb(x | 0, y | 0, Y | 0, D | 0) | 0
    y = D
    x = fb(t | 0, r | 0, 21) | 0
    C = D
    o = hb(x | 0, C | 0, m | 0, o | 0) | 0
    m = D
    C = kb(x | 0, C | 0, 21) | 0
    C = gb(t | 0, r | 0, C | 0, D | 0) | 0
    r = D
    t = fb(o | 0, m | 0, 21) | 0
    x = D
    ma = hb(pa | 0, oa | 0, na | 0, ma | 0) | 0
    h = gb(ma | 0, D | 0, k | 0, h | 0) | 0
    h = hb(h | 0, D | 0, t | 0, x | 0) | 0
    k = D
    x = kb(t | 0, x | 0, 21) | 0
    x = gb(o | 0, m | 0, x | 0, D | 0) | 0
    m = D
    o = fb(h | 0, k | 0, 21) | 0
    t = D
    I = hb(o | 0, t | 0, ia | 0, I | 0) | 0
    ia = D
    t = kb(o | 0, t | 0, 21) | 0
    t = gb(h | 0, k | 0, t | 0, D | 0) | 0
    k = D
    h = fb(I | 0, ia | 0, 21) | 0
    o = D
    d = hb(la | 0, ka | 0, d | 0, 0) | 0
    ba = gb(d | 0, D | 0, ha | 0, ba | 0) | 0
    ba = hb(ba | 0, D | 0, h | 0, o | 0) | 0
    ha = D
    o = kb(h | 0, o | 0, 21) | 0
    o = gb(I | 0, ia | 0, o | 0, D | 0) | 0
    ia = D
    I = fb(ba | 0, ha | 0, 21) | 0
    h = D
    _ = hb(I | 0, h | 0, e | 0, _ | 0) | 0
    e = D
    h = kb(I | 0, h | 0, 21) | 0
    h = gb(ba | 0, ha | 0, h | 0, D | 0) | 0
    ha = D
    ba = fb(_ | 0, e | 0, 21) | 0
    I = D
    d = kb(ba | 0, I | 0, 21) | 0
    d = gb(_ | 0, e | 0, d | 0, D | 0) | 0
    e = D
    _ = sb(ba | 0, I | 0, 666643, 0) | 0
    U = hb(_ | 0, D | 0, da | 0, U | 0) | 0
    da = D
    _ = sb(ba | 0, I | 0, 470296, 0) | 0
    _ = hb(W | 0, P | 0, _ | 0, D | 0) | 0
    P = D
    W = sb(ba | 0, I | 0, 654183, 0) | 0
    W = hb(R | 0, K | 0, W | 0, D | 0) | 0
    K = D
    R = sb(ba | 0, I | 0, -997805, -1) | 0
    R = hb(M | 0, G | 0, R | 0, D | 0) | 0
    G = D
    M = sb(ba | 0, I | 0, 136657, 0) | 0
    M = hb(ja | 0, A | 0, M | 0, D | 0) | 0
    A = D
    I = sb(ba | 0, I | 0, -683901, -1) | 0
    I = hb(Y | 0, y | 0, I | 0, D | 0) | 0
    y = D
    Y = fb(U | 0, da | 0, 21) | 0
    ba = D
    P = hb(_ | 0, P | 0, Y | 0, ba | 0) | 0
    _ = D
    ba = kb(Y | 0, ba | 0, 21) | 0
    ba = gb(U | 0, da | 0, ba | 0, D | 0) | 0
    da = D
    U = fb(P | 0, _ | 0, 21) | 0
    Y = D
    K = hb(W | 0, K | 0, U | 0, Y | 0) | 0
    W = D
    Y = kb(U | 0, Y | 0, 21) | 0
    Y = gb(P | 0, _ | 0, Y | 0, D | 0) | 0
    _ = D
    P = fb(K | 0, W | 0, 21) | 0
    U = D
    G = hb(R | 0, G | 0, P | 0, U | 0) | 0
    R = D
    U = kb(P | 0, U | 0, 21) | 0
    U = gb(K | 0, W | 0, U | 0, D | 0) | 0
    W = D
    K = fb(G | 0, R | 0, 21) | 0
    P = D
    A = hb(M | 0, A | 0, K | 0, P | 0) | 0
    M = D
    P = kb(K | 0, P | 0, 21) | 0
    P = gb(G | 0, R | 0, P | 0, D | 0) | 0
    R = D
    G = fb(A | 0, M | 0, 21) | 0
    K = D
    y = hb(I | 0, y | 0, G | 0, K | 0) | 0
    I = D
    K = kb(G | 0, K | 0, 21) | 0
    K = gb(A | 0, M | 0, K | 0, D | 0) | 0
    M = D
    A = fb(y | 0, I | 0, 21) | 0
    G = D
    r = hb(A | 0, G | 0, C | 0, r | 0) | 0
    C = D
    G = kb(A | 0, G | 0, 21) | 0
    G = gb(y | 0, I | 0, G | 0, D | 0) | 0
    I = D
    y = fb(r | 0, C | 0, 21) | 0
    A = D
    m = hb(y | 0, A | 0, x | 0, m | 0) | 0
    x = D
    A = kb(y | 0, A | 0, 21) | 0
    A = gb(r | 0, C | 0, A | 0, D | 0) | 0
    C = D
    r = fb(m | 0, x | 0, 21) | 0
    y = D
    k = hb(r | 0, y | 0, t | 0, k | 0) | 0
    t = D
    y = kb(r | 0, y | 0, 21) | 0
    y = gb(m | 0, x | 0, y | 0, D | 0) | 0
    x = D
    m = fb(k | 0, t | 0, 21) | 0
    r = D
    ia = hb(m | 0, r | 0, o | 0, ia | 0) | 0
    o = D
    r = kb(m | 0, r | 0, 21) | 0
    r = gb(k | 0, t | 0, r | 0, D | 0) | 0
    t = D
    k = fb(ia | 0, o | 0, 21) | 0
    m = D
    ha = hb(k | 0, m | 0, h | 0, ha | 0) | 0
    h = D
    m = kb(k | 0, m | 0, 21) | 0
    m = gb(ia | 0, o | 0, m | 0, D | 0) | 0
    o = D
    ia = fb(ha | 0, h | 0, 21) | 0
    k = D
    e = hb(ia | 0, k | 0, d | 0, e | 0) | 0
    d = D
    k = kb(ia | 0, k | 0, 21) | 0
    k = gb(ha | 0, h | 0, k | 0, D | 0) | 0
    h = D
    ga(a >> 0 | 0, ba | 0, 1, 0)
    a = jb(ba | 0, da | 0, 8) | 0
    ga(ea >> 0 | 0, a | 0, 1, 0)
    a = jb(ba | 0, da | 0, 16) | 0
    da = D
    ba = kb(Y | 0, _ | 0, 5) | 0
    D | da
    ga(ca >> 0 | 0, ba | a | 0, 1, 0)
    a = jb(Y | 0, _ | 0, 3) | 0
    ga(aa >> 0 | 0, a | 0, 1, 0)
    a = jb(Y | 0, _ | 0, 11) | 0
    ga($ >> 0 | 0, a | 0, 1, 0)
    a = jb(Y | 0, _ | 0, 19) | 0
    _ = D
    Y = kb(U | 0, W | 0, 2) | 0
    D | _
    ga(Z >> 0 | 0, Y | a | 0, 1, 0)
    a = jb(U | 0, W | 0, 6) | 0
    ga(X >> 0 | 0, a | 0, 1, 0)
    a = jb(U | 0, W | 0, 14) | 0
    W = D
    U = kb(P | 0, R | 0, 7) | 0
    D | W
    ga(V >> 0 | 0, U | a | 0, 1, 0)
    a = jb(P | 0, R | 0, 1) | 0
    ga(T >> 0 | 0, a | 0, 1, 0)
    a = jb(P | 0, R | 0, 9) | 0
    ga(S >> 0 | 0, a | 0, 1, 0)
    a = jb(P | 0, R | 0, 17) | 0
    R = D
    P = kb(K | 0, M | 0, 4) | 0
    D | R
    ga(Q >> 0 | 0, P | a | 0, 1, 0)
    a = jb(K | 0, M | 0, 4) | 0
    ga(O >> 0 | 0, a | 0, 1, 0)
    a = jb(K | 0, M | 0, 12) | 0
    ga(N >> 0 | 0, a | 0, 1, 0)
    a = jb(K | 0, M | 0, 20) | 0
    M = D
    K = kb(G | 0, I | 0, 1) | 0
    D | M
    ga(L >> 0 | 0, K | a | 0, 1, 0)
    a = jb(G | 0, I | 0, 7) | 0
    ga(J >> 0 | 0, a | 0, 1, 0)
    a = jb(G | 0, I | 0, 15) | 0
    I = D
    G = kb(A | 0, C | 0, 6) | 0
    D | I
    ga(H >> 0 | 0, G | a | 0, 1, 0)
    a = jb(A | 0, C | 0, 2) | 0
    ga(F >> 0 | 0, a | 0, 1, 0)
    a = jb(A | 0, C | 0, 10) | 0
    ga(E >> 0 | 0, a | 0, 1, 0)
    a = jb(A | 0, C | 0, 18) | 0
    C = D
    A = kb(y | 0, x | 0, 3) | 0
    D | C
    ga(B >> 0 | 0, A | a | 0, 1, 0)
    a = jb(y | 0, x | 0, 5) | 0
    ga(z >> 0 | 0, a | 0, 1, 0)
    a = jb(y | 0, x | 0, 13) | 0
    ga(w >> 0 | 0, a | 0, 1, 0)
    ga(v >> 0 | 0, r | 0, 1, 0)
    a = jb(r | 0, t | 0, 8) | 0
    ga(u >> 0 | 0, a | 0, 1, 0)
    a = jb(r | 0, t | 0, 16) | 0
    t = D
    r = kb(m | 0, o | 0, 5) | 0
    D | t
    ga(s >> 0 | 0, r | a | 0, 1, 0)
    a = jb(m | 0, o | 0, 3) | 0
    ga(q >> 0 | 0, a | 0, 1, 0)
    a = jb(m | 0, o | 0, 11) | 0
    ga(p >> 0 | 0, a | 0, 1, 0)
    a = jb(m | 0, o | 0, 19) | 0
    o = D
    m = kb(k | 0, h | 0, 2) | 0
    D | o
    ga(n >> 0 | 0, m | a | 0, 1, 0)
    a = jb(k | 0, h | 0, 6) | 0
    ga(l >> 0 | 0, a | 0, 1, 0)
    h = jb(k | 0, h | 0, 14) | 0
    k = D
    a = kb(e | 0, d | 0, 7) | 0
    k | D
    ga(j >> 0 | 0, h | a | 0, 1, 0)
    a = jb(e | 0, d | 0, 1) | 0
    ga(g >> 0 | 0, a | 0, 1, 0)
    a = jb(e | 0, d | 0, 9) | 0
    ga(f >> 0 | 0, a | 0, 1, 0)
    a = jb(e | 0, d | 0, 17) | 0
    ga(c >> 0 | 0, a | 0, 1, 0)
    i = b
  }

  function Za (a, b, c) {
    a = a | 0
    b = b | 0
    c = c | 0
    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var E = 0

    var F = 0

    var G = 0

    var H = 0

    var I = 0

    var J = 0

    var K = 0

    var L = 0

    var M = 0

    var N = 0

    var O = 0

    var P = 0

    var Q = 0

    var R = 0

    var S = 0

    var T = 0

    var U = 0

    var V = 0

    var W = 0

    var X = 0

    var Y = 0

    var Z = 0

    var _ = 0

    var $ = 0
    d = i
    $ = fa(b + 2 >> 0 | 0, 1, 0, 0) | 0 | 0
    Z = fa(b >> 0 | 0, 1, 0, 1) | 0 | 0
    Y = kb(fa(b + 1 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    W = D
    $ = $ & 255
    s = kb($ | 0, 0, 16) | 0
    P = kb(fa(b + 3 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    q = D
    V = kb(fa(b + 4 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    q = q | D
    z = fa(b + 5 >> 0 | 0, 1, 0, 1) | 0 | 0
    Q = kb(z | 0, 0, 24) | 0
    q = jb(P | $ | V | Q | 0, q | D | 0, 5) | 0
    Q = fa(b + 7 >> 0 | 0, 1, 0, 0) | 0 | 0
    V = kb(fa(b + 6 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    $ = D
    Q = Q & 255
    P = kb(Q | 0, 0, 16) | 0
    $ = jb(V | z | P | 0, $ | D | 0, 2) | 0
    P = kb(fa(b + 8 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    z = D
    V = kb(fa(b + 9 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    z = z | D
    k = fa(b + 10 >> 0 | 0, 1, 0, 1) | 0 | 0
    R = kb(k | 0, 0, 24) | 0
    z = jb(P | Q | V | R | 0, z | D | 0, 7) | 0
    R = kb(fa(b + 11 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    V = D
    Q = kb(fa(b + 12 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    V = V | D
    P = fa(b + 13 >> 0 | 0, 1, 0, 1) | 0 | 0
    F = kb(P | 0, 0, 24) | 0
    V = jb(R | k | Q | F | 0, V | D | 0, 4) | 0
    F = fa(b + 15 >> 0 | 0, 1, 0, 0) | 0 | 0
    Q = kb(fa(b + 14 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    k = D
    F = F & 255
    R = kb(F | 0, 0, 16) | 0
    k = jb(Q | P | R | 0, k | D | 0, 1) | 0
    R = kb(fa(b + 16 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    P = D
    Q = kb(fa(b + 17 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    P = P | D
    H = fa(b + 18 >> 0 | 0, 1, 0, 1) | 0 | 0
    e = kb(H | 0, 0, 24) | 0
    P = jb(R | F | Q | e | 0, P | D | 0, 6) | 0
    e = fa(b + 20 >> 0 | 0, 1, 0, 0) | 0 | 0
    Q = kb(fa(b + 19 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    F = D
    e = kb(e & 255 | 0, 0, 16) | 0
    F = jb(Q | H | e | 0, F | D | 0, 3) | 0
    e = D
    H = fa(b + 23 >> 0 | 0, 1, 0, 0) | 0 | 0
    Q = fa(b + 21 >> 0 | 0, 1, 0, 1) | 0 | 0
    R = kb(fa(b + 22 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    J = D
    H = H & 255
    I = kb(H | 0, 0, 16) | 0
    M = kb(fa(b + 24 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    o = D
    _ = kb(fa(b + 25 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    o = o | D
    v = fa(b + 26 >> 0 | 0, 1, 0, 1) | 0 | 0
    p = kb(v | 0, 0, 24) | 0
    o = jb(M | H | _ | p | 0, o | D | 0, 5) | 0
    p = fa(b + 28 >> 0 | 0, 1, 0, 0) | 0 | 0
    _ = kb(fa(b + 27 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    H = D
    p = p & 255
    M = kb(p | 0, 0, 16) | 0
    H = jb(_ | v | M | 0, H | D | 0, 2) | 0
    M = kb(fa(b + 29 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    v = D
    _ = kb(fa(b + 30 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    v = v | D
    w = kb(fa(b + 31 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    v = jb(M | p | _ | w | 0, v | D | 0, 7) | 0
    w = D
    _ = fa(c + 2 >> 0 | 0, 1, 0, 0) | 0 | 0
    p = fa(c >> 0 | 0, 1, 0, 1) | 0 | 0
    M = kb(fa(c + 1 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    t = D
    _ = _ & 255
    S = kb(_ | 0, 0, 16) | 0
    O = kb(fa(c + 3 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    T = D
    U = kb(fa(c + 4 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    T = T | D
    N = fa(c + 5 >> 0 | 0, 1, 0, 1) | 0 | 0
    f = kb(N | 0, 0, 24) | 0
    T = jb(O | _ | U | f | 0, T | D | 0, 5) | 0
    f = fa(c + 7 >> 0 | 0, 1, 0, 0) | 0 | 0
    U = kb(fa(c + 6 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    _ = D
    f = f & 255
    O = kb(f | 0, 0, 16) | 0
    _ = jb(U | N | O | 0, _ | D | 0, 2) | 0
    O = kb(fa(c + 8 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    N = D
    U = kb(fa(c + 9 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    N = N | D
    L = fa(c + 10 >> 0 | 0, 1, 0, 1) | 0 | 0
    g = kb(L | 0, 0, 24) | 0
    N = jb(O | f | U | g | 0, N | D | 0, 7) | 0
    g = kb(fa(c + 11 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    U = D
    f = kb(fa(c + 12 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    U = U | D
    O = fa(c + 13 >> 0 | 0, 1, 0, 1) | 0 | 0
    A = kb(O | 0, 0, 24) | 0
    U = jb(g | L | f | A | 0, U | D | 0, 4) | 0
    A = fa(c + 15 >> 0 | 0, 1, 0, 0) | 0 | 0
    f = kb(fa(c + 14 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    L = D
    A = A & 255
    g = kb(A | 0, 0, 16) | 0
    L = jb(f | O | g | 0, L | D | 0, 1) | 0
    g = kb(fa(c + 16 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    O = D
    f = kb(fa(c + 17 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    O = O | D
    G = fa(c + 18 >> 0 | 0, 1, 0, 1) | 0 | 0
    B = kb(G | 0, 0, 24) | 0
    O = jb(g | A | f | B | 0, O | D | 0, 6) | 0
    B = fa(c + 20 >> 0 | 0, 1, 0, 0) | 0 | 0
    f = kb(fa(c + 19 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    A = D
    B = kb(B & 255 | 0, 0, 16) | 0
    A = jb(f | G | B | 0, A | D | 0, 3) | 0
    B = D
    G = fa(c + 23 >> 0 | 0, 1, 0, 0) | 0 | 0
    f = fa(c + 21 >> 0 | 0, 1, 0, 1) | 0 | 0
    g = kb(fa(c + 22 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    h = D
    G = G & 255
    l = kb(G | 0, 0, 16) | 0
    j = kb(fa(c + 24 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    y = D
    u = kb(fa(c + 25 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    y = y | D
    x = fa(c + 26 >> 0 | 0, 1, 0, 1) | 0 | 0
    K = kb(x | 0, 0, 24) | 0
    y = jb(j | G | u | K | 0, y | D | 0, 5) | 0
    K = fa(c + 28 >> 0 | 0, 1, 0, 0) | 0 | 0
    u = kb(fa(c + 27 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    G = D
    K = K & 255
    j = kb(K | 0, 0, 16) | 0
    G = jb(u | x | j | 0, G | D | 0, 2) | 0
    j = kb(fa(c + 29 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    x = D
    u = kb(fa(c + 30 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    x = x | D
    X = kb(fa(c + 31 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    x = jb(j | K | u | X | 0, x | D | 0, 7) | 0
    X = D
    W = hb(M | p | S & 2031616 | 0, t | 0, Y | Z | s & 2031616 | 0, W | 0) | 0
    s = D
    $ = hb(_ & 2097151 | 0, 0, $ & 2097151 | 0, 0) | 0
    _ = D
    V = hb(U & 2097151 | 0, 0, V & 2097151 | 0, 0) | 0
    U = D
    k = hb(L & 2097151 | 0, 0, k & 2097151 | 0, 0) | 0
    L = D
    P = hb(O & 2097151 | 0, 0, P & 2097151 | 0, 0) | 0
    O = D
    e = hb(A | 0, B | 0, F | 0, e | 0) | 0
    F = D
    J = hb(g | f | l & 2031616 | 0, h | 0, R | Q | I & 2031616 | 0, J | 0) | 0
    I = D
    H = hb(G & 2097151 | 0, 0, H & 2097151 | 0, 0) | 0
    G = D
    w = hb(x | 0, X | 0, v | 0, w | 0) | 0
    v = D
    X = hb(W | 0, s | 0, 1048576, 0) | 0
    X = jb(X | 0, D | 0, 21) | 0
    x = D
    q = hb(X | 0, x | 0, q & 2097151 | 0, 0) | 0
    T = hb(q | 0, D | 0, T & 2097151 | 0, 0) | 0
    q = D
    x = kb(X | 0, x | 0, 21) | 0
    x = gb(W | 0, s | 0, x | 0, D | 0) | 0
    s = D
    W = hb($ | 0, _ | 0, 1048576, 0) | 0
    W = jb(W | 0, D | 0, 21) | 0
    X = D
    z = hb(W | 0, X | 0, z & 2097151 | 0, 0) | 0
    N = hb(z | 0, D | 0, N & 2097151 | 0, 0) | 0
    z = D
    X = kb(W | 0, X | 0, 21) | 0
    W = D
    Q = hb(V | 0, U | 0, 1048576, 0) | 0
    Q = jb(Q | 0, D | 0, 21) | 0
    R = D
    L = hb(k | 0, L | 0, Q | 0, R | 0) | 0
    k = D
    R = kb(Q | 0, R | 0, 21) | 0
    Q = D
    h = hb(P | 0, O | 0, 1048576, 0) | 0
    h = jb(h | 0, D | 0, 21) | 0
    l = D
    F = hb(e | 0, F | 0, h | 0, l | 0) | 0
    e = D
    l = kb(h | 0, l | 0, 21) | 0
    h = D
    f = hb(J | 0, I | 0, 1048576, 0) | 0
    f = jb(f | 0, D | 0, 21) | 0
    g = D
    o = hb(f | 0, g | 0, o & 2097151 | 0, 0) | 0
    y = hb(o | 0, D | 0, y & 2097151 | 0, 0) | 0
    o = D
    g = kb(f | 0, g | 0, 21) | 0
    f = D
    B = hb(H | 0, G | 0, 1048576, 0) | 0
    B = jb(B | 0, D | 0, 21) | 0
    A = D
    v = hb(w | 0, v | 0, B | 0, A | 0) | 0
    w = D
    A = kb(B | 0, A | 0, 21) | 0
    B = D
    Z = hb(T | 0, q | 0, 1048576, 0) | 0
    Z = jb(Z | 0, D | 0, 21) | 0
    Y = D
    t = kb(Z | 0, Y | 0, 21) | 0
    t = gb(T | 0, q | 0, t | 0, D | 0) | 0
    q = D
    T = hb(N | 0, z | 0, 1048576, 0) | 0
    T = jb(T | 0, D | 0, 21) | 0
    S = D
    p = kb(T | 0, S | 0, 21) | 0
    p = gb(N | 0, z | 0, p | 0, D | 0) | 0
    z = D
    N = hb(L | 0, k | 0, 1048576, 0) | 0
    N = jb(N | 0, D | 0, 21) | 0
    M = D
    u = kb(N | 0, M | 0, 21) | 0
    u = gb(L | 0, k | 0, u | 0, D | 0) | 0
    k = D
    L = hb(F | 0, e | 0, 1048576, 0) | 0
    L = jb(L | 0, D | 0, 21) | 0
    K = D
    j = kb(L | 0, K | 0, 21) | 0
    j = gb(F | 0, e | 0, j | 0, D | 0) | 0
    e = D
    F = hb(y | 0, o | 0, 1048576, 0) | 0
    F = jb(F | 0, D | 0, 21) | 0
    b = D
    C = kb(F | 0, b | 0, 21) | 0
    C = gb(y | 0, o | 0, C | 0, D | 0) | 0
    o = D
    y = hb(v | 0, w | 0, 1048576, 0) | 0
    y = jb(y | 0, D | 0, 21) | 0
    m = D
    c = kb(y | 0, m | 0, 21) | 0
    c = gb(v | 0, w | 0, c | 0, D | 0) | 0
    w = D
    v = sb(y | 0, m | 0, 666643, 0) | 0
    s = hb(v | 0, D | 0, x | 0, s | 0) | 0
    x = D
    v = sb(y | 0, m | 0, 470296, 0) | 0
    v = hb(t | 0, q | 0, v | 0, D | 0) | 0
    q = D
    t = sb(y | 0, m | 0, 654183, 0) | 0
    E = D
    r = sb(y | 0, m | 0, -997805, -1) | 0
    r = hb(p | 0, z | 0, r | 0, D | 0) | 0
    z = D
    p = sb(y | 0, m | 0, 136657, 0) | 0
    n = D
    m = sb(y | 0, m | 0, -683901, -1) | 0
    m = hb(u | 0, k | 0, m | 0, D | 0) | 0
    k = D
    u = fb(s | 0, x | 0, 21) | 0
    y = D
    q = hb(v | 0, q | 0, u | 0, y | 0) | 0
    v = D
    y = kb(u | 0, y | 0, 21) | 0
    y = gb(s | 0, x | 0, y | 0, D | 0) | 0
    x = D
    s = fb(q | 0, v | 0, 21) | 0
    u = D
    Y = hb($ | 0, _ | 0, Z | 0, Y | 0) | 0
    W = gb(Y | 0, D | 0, X | 0, W | 0) | 0
    E = hb(W | 0, D | 0, t | 0, E | 0) | 0
    E = hb(E | 0, D | 0, s | 0, u | 0) | 0
    t = D
    u = kb(s | 0, u | 0, 21) | 0
    u = gb(q | 0, v | 0, u | 0, D | 0) | 0
    v = D
    q = fb(E | 0, t | 0, 21) | 0
    s = D
    z = hb(r | 0, z | 0, q | 0, s | 0) | 0
    r = D
    s = kb(q | 0, s | 0, 21) | 0
    s = gb(E | 0, t | 0, s | 0, D | 0) | 0
    t = D
    E = fb(z | 0, r | 0, 21) | 0
    q = D
    S = hb(V | 0, U | 0, T | 0, S | 0) | 0
    Q = gb(S | 0, D | 0, R | 0, Q | 0) | 0
    n = hb(Q | 0, D | 0, p | 0, n | 0) | 0
    n = hb(n | 0, D | 0, E | 0, q | 0) | 0
    p = D
    q = kb(E | 0, q | 0, 21) | 0
    q = gb(z | 0, r | 0, q | 0, D | 0) | 0
    r = D
    z = fb(n | 0, p | 0, 21) | 0
    E = D
    k = hb(m | 0, k | 0, z | 0, E | 0) | 0
    m = D
    E = kb(z | 0, E | 0, 21) | 0
    E = gb(n | 0, p | 0, E | 0, D | 0) | 0
    p = D
    n = fb(k | 0, m | 0, 21) | 0
    z = D
    M = hb(P | 0, O | 0, N | 0, M | 0) | 0
    h = gb(M | 0, D | 0, l | 0, h | 0) | 0
    h = hb(h | 0, D | 0, n | 0, z | 0) | 0
    l = D
    z = kb(n | 0, z | 0, 21) | 0
    z = gb(k | 0, m | 0, z | 0, D | 0) | 0
    m = D
    k = fb(h | 0, l | 0, 21) | 0
    n = D
    e = hb(k | 0, n | 0, j | 0, e | 0) | 0
    j = D
    n = kb(k | 0, n | 0, 21) | 0
    n = gb(h | 0, l | 0, n | 0, D | 0) | 0
    l = D
    h = fb(e | 0, j | 0, 21) | 0
    k = D
    I = hb(L | 0, K | 0, J | 0, I | 0) | 0
    f = gb(I | 0, D | 0, g | 0, f | 0) | 0
    f = hb(f | 0, D | 0, h | 0, k | 0) | 0
    g = D
    k = kb(h | 0, k | 0, 21) | 0
    k = gb(e | 0, j | 0, k | 0, D | 0) | 0
    j = D
    e = fb(f | 0, g | 0, 21) | 0
    h = D
    o = hb(e | 0, h | 0, C | 0, o | 0) | 0
    C = D
    h = kb(e | 0, h | 0, 21) | 0
    h = gb(f | 0, g | 0, h | 0, D | 0) | 0
    g = D
    f = fb(o | 0, C | 0, 21) | 0
    e = D
    b = hb(H | 0, G | 0, F | 0, b | 0) | 0
    B = gb(b | 0, D | 0, A | 0, B | 0) | 0
    B = hb(B | 0, D | 0, f | 0, e | 0) | 0
    A = D
    e = kb(f | 0, e | 0, 21) | 0
    e = gb(o | 0, C | 0, e | 0, D | 0) | 0
    C = D
    o = fb(B | 0, A | 0, 21) | 0
    f = D
    w = hb(o | 0, f | 0, c | 0, w | 0) | 0
    c = D
    f = kb(o | 0, f | 0, 21) | 0
    f = gb(B | 0, A | 0, f | 0, D | 0) | 0
    A = D
    B = fb(w | 0, c | 0, 21) | 0
    o = D
    b = kb(B | 0, o | 0, 21) | 0
    b = gb(w | 0, c | 0, b | 0, D | 0) | 0
    c = D
    w = sb(B | 0, o | 0, 666643, 0) | 0
    x = hb(w | 0, D | 0, y | 0, x | 0) | 0
    y = D
    w = sb(B | 0, o | 0, 470296, 0) | 0
    w = hb(u | 0, v | 0, w | 0, D | 0) | 0
    v = D
    u = sb(B | 0, o | 0, 654183, 0) | 0
    u = hb(s | 0, t | 0, u | 0, D | 0) | 0
    t = D
    s = sb(B | 0, o | 0, -997805, -1) | 0
    s = hb(q | 0, r | 0, s | 0, D | 0) | 0
    r = D
    q = sb(B | 0, o | 0, 136657, 0) | 0
    q = hb(E | 0, p | 0, q | 0, D | 0) | 0
    p = D
    o = sb(B | 0, o | 0, -683901, -1) | 0
    o = hb(z | 0, m | 0, o | 0, D | 0) | 0
    m = D
    z = fb(x | 0, y | 0, 21) | 0
    B = D
    v = hb(w | 0, v | 0, z | 0, B | 0) | 0
    w = D
    B = kb(z | 0, B | 0, 21) | 0
    B = gb(x | 0, y | 0, B | 0, D | 0) | 0
    y = D
    x = fb(v | 0, w | 0, 21) | 0
    z = D
    t = hb(u | 0, t | 0, x | 0, z | 0) | 0
    u = D
    z = kb(x | 0, z | 0, 21) | 0
    z = gb(v | 0, w | 0, z | 0, D | 0) | 0
    w = D
    v = fb(t | 0, u | 0, 21) | 0
    x = D
    r = hb(s | 0, r | 0, v | 0, x | 0) | 0
    s = D
    x = kb(v | 0, x | 0, 21) | 0
    x = gb(t | 0, u | 0, x | 0, D | 0) | 0
    u = D
    t = fb(r | 0, s | 0, 21) | 0
    v = D
    p = hb(q | 0, p | 0, t | 0, v | 0) | 0
    q = D
    v = kb(t | 0, v | 0, 21) | 0
    v = gb(r | 0, s | 0, v | 0, D | 0) | 0
    s = D
    r = fb(p | 0, q | 0, 21) | 0
    t = D
    m = hb(o | 0, m | 0, r | 0, t | 0) | 0
    o = D
    t = kb(r | 0, t | 0, 21) | 0
    t = gb(p | 0, q | 0, t | 0, D | 0) | 0
    q = D
    p = fb(m | 0, o | 0, 21) | 0
    r = D
    l = hb(p | 0, r | 0, n | 0, l | 0) | 0
    n = D
    r = kb(p | 0, r | 0, 21) | 0
    r = gb(m | 0, o | 0, r | 0, D | 0) | 0
    o = D
    m = fb(l | 0, n | 0, 21) | 0
    p = D
    j = hb(m | 0, p | 0, k | 0, j | 0) | 0
    k = D
    p = kb(m | 0, p | 0, 21) | 0
    p = gb(l | 0, n | 0, p | 0, D | 0) | 0
    n = D
    l = fb(j | 0, k | 0, 21) | 0
    m = D
    g = hb(l | 0, m | 0, h | 0, g | 0) | 0
    h = D
    m = kb(l | 0, m | 0, 21) | 0
    m = gb(j | 0, k | 0, m | 0, D | 0) | 0
    k = D
    j = fb(g | 0, h | 0, 21) | 0
    l = D
    C = hb(j | 0, l | 0, e | 0, C | 0) | 0
    e = D
    l = kb(j | 0, l | 0, 21) | 0
    l = gb(g | 0, h | 0, l | 0, D | 0) | 0
    h = D
    g = fb(C | 0, e | 0, 21) | 0
    j = D
    A = hb(g | 0, j | 0, f | 0, A | 0) | 0
    f = D
    j = kb(g | 0, j | 0, 21) | 0
    j = gb(C | 0, e | 0, j | 0, D | 0) | 0
    e = D
    C = fb(A | 0, f | 0, 21) | 0
    g = D
    c = hb(C | 0, g | 0, b | 0, c | 0) | 0
    b = D
    g = kb(C | 0, g | 0, 21) | 0
    g = gb(A | 0, f | 0, g | 0, D | 0) | 0
    f = D
    ga(a >> 0 | 0, B | 0, 1, 0)
    A = jb(B | 0, y | 0, 8) | 0
    ga(a + 1 >> 0 | 0, A | 0, 1, 0)
    y = jb(B | 0, y | 0, 16) | 0
    B = D
    A = kb(z | 0, w | 0, 5) | 0
    D | B
    ga(a + 2 >> 0 | 0, A | y | 0, 1, 0)
    y = jb(z | 0, w | 0, 3) | 0
    ga(a + 3 >> 0 | 0, y | 0, 1, 0)
    y = jb(z | 0, w | 0, 11) | 0
    ga(a + 4 >> 0 | 0, y | 0, 1, 0)
    w = jb(z | 0, w | 0, 19) | 0
    z = D
    y = kb(x | 0, u | 0, 2) | 0
    D | z
    ga(a + 5 >> 0 | 0, y | w | 0, 1, 0)
    w = jb(x | 0, u | 0, 6) | 0
    ga(a + 6 >> 0 | 0, w | 0, 1, 0)
    u = jb(x | 0, u | 0, 14) | 0
    x = D
    w = kb(v | 0, s | 0, 7) | 0
    D | x
    ga(a + 7 >> 0 | 0, w | u | 0, 1, 0)
    u = jb(v | 0, s | 0, 1) | 0
    ga(a + 8 >> 0 | 0, u | 0, 1, 0)
    u = jb(v | 0, s | 0, 9) | 0
    ga(a + 9 >> 0 | 0, u | 0, 1, 0)
    s = jb(v | 0, s | 0, 17) | 0
    v = D
    u = kb(t | 0, q | 0, 4) | 0
    D | v
    ga(a + 10 >> 0 | 0, u | s | 0, 1, 0)
    s = jb(t | 0, q | 0, 4) | 0
    ga(a + 11 >> 0 | 0, s | 0, 1, 0)
    s = jb(t | 0, q | 0, 12) | 0
    ga(a + 12 >> 0 | 0, s | 0, 1, 0)
    q = jb(t | 0, q | 0, 20) | 0
    t = D
    s = kb(r | 0, o | 0, 1) | 0
    D | t
    ga(a + 13 >> 0 | 0, s | q | 0, 1, 0)
    q = jb(r | 0, o | 0, 7) | 0
    ga(a + 14 >> 0 | 0, q | 0, 1, 0)
    o = jb(r | 0, o | 0, 15) | 0
    r = D
    q = kb(p | 0, n | 0, 6) | 0
    D | r
    ga(a + 15 >> 0 | 0, q | o | 0, 1, 0)
    o = jb(p | 0, n | 0, 2) | 0
    ga(a + 16 >> 0 | 0, o | 0, 1, 0)
    o = jb(p | 0, n | 0, 10) | 0
    ga(a + 17 >> 0 | 0, o | 0, 1, 0)
    n = jb(p | 0, n | 0, 18) | 0
    p = D
    o = kb(m | 0, k | 0, 3) | 0
    D | p
    ga(a + 18 >> 0 | 0, o | n | 0, 1, 0)
    n = jb(m | 0, k | 0, 5) | 0
    ga(a + 19 >> 0 | 0, n | 0, 1, 0)
    k = jb(m | 0, k | 0, 13) | 0
    ga(a + 20 >> 0 | 0, k | 0, 1, 0)
    ga(a + 21 >> 0 | 0, l | 0, 1, 0)
    k = jb(l | 0, h | 0, 8) | 0
    ga(a + 22 >> 0 | 0, k | 0, 1, 0)
    h = jb(l | 0, h | 0, 16) | 0
    l = D
    k = kb(j | 0, e | 0, 5) | 0
    D | l
    ga(a + 23 >> 0 | 0, k | h | 0, 1, 0)
    h = jb(j | 0, e | 0, 3) | 0
    ga(a + 24 >> 0 | 0, h | 0, 1, 0)
    h = jb(j | 0, e | 0, 11) | 0
    ga(a + 25 >> 0 | 0, h | 0, 1, 0)
    e = jb(j | 0, e | 0, 19) | 0
    j = D
    h = kb(g | 0, f | 0, 2) | 0
    D | j
    ga(a + 26 >> 0 | 0, h | e | 0, 1, 0)
    e = jb(g | 0, f | 0, 6) | 0
    ga(a + 27 >> 0 | 0, e | 0, 1, 0)
    f = jb(g | 0, f | 0, 14) | 0
    g = D
    e = kb(c | 0, b | 0, 7) | 0
    g | D
    ga(a + 28 >> 0 | 0, f | e | 0, 1, 0)
    e = jb(c | 0, b | 0, 1) | 0
    ga(a + 29 >> 0 | 0, e | 0, 1, 0)
    e = jb(c | 0, b | 0, 9) | 0
    ga(a + 30 >> 0 | 0, e | 0, 1, 0)
    b = jb(c | 0, b | 0, 17) | 0
    ga(a + 31 >> 0 | 0, b | 0, 1, 0)
    i = d
  }

  function _a (a, b, c) {
    a = a | 0
    b = b | 0
    c = c | 0
    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var E = 0

    var F = 0

    var G = 0

    var H = 0

    var I = 0

    var J = 0

    var K = 0

    var L = 0

    var M = 0

    var N = 0

    var O = 0

    var P = 0

    var Q = 0

    var R = 0

    var S = 0

    var T = 0

    var U = 0

    var V = 0

    var W = 0

    var X = 0

    var Y = 0

    var Z = 0

    var _ = 0

    var $ = 0
    d = i
    Y = fa(b + 2 >> 0 | 0, 1, 0, 0) | 0 | 0
    p = fa(b >> 0 | 0, 1, 0, 1) | 0 | 0
    M = kb(fa(b + 1 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    t = D
    Y = Y & 255
    S = kb(Y | 0, 0, 16) | 0
    O = kb(fa(b + 3 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    T = D
    U = kb(fa(b + 4 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    T = T | D
    N = fa(b + 5 >> 0 | 0, 1, 0, 1) | 0 | 0
    f = kb(N | 0, 0, 24) | 0
    T = jb(O | Y | U | f | 0, T | D | 0, 5) | 0
    f = fa(b + 7 >> 0 | 0, 1, 0, 0) | 0 | 0
    U = kb(fa(b + 6 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Y = D
    f = f & 255
    O = kb(f | 0, 0, 16) | 0
    Y = jb(U | N | O | 0, Y | D | 0, 2) | 0
    O = kb(fa(b + 8 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    N = D
    U = kb(fa(b + 9 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    N = N | D
    L = fa(b + 10 >> 0 | 0, 1, 0, 1) | 0 | 0
    g = kb(L | 0, 0, 24) | 0
    N = jb(O | f | U | g | 0, N | D | 0, 7) | 0
    g = kb(fa(b + 11 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    U = D
    f = kb(fa(b + 12 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    U = U | D
    O = fa(b + 13 >> 0 | 0, 1, 0, 1) | 0 | 0
    A = kb(O | 0, 0, 24) | 0
    U = jb(g | L | f | A | 0, U | D | 0, 4) | 0
    A = fa(b + 15 >> 0 | 0, 1, 0, 0) | 0 | 0
    f = kb(fa(b + 14 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    L = D
    A = A & 255
    g = kb(A | 0, 0, 16) | 0
    L = jb(f | O | g | 0, L | D | 0, 1) | 0
    g = kb(fa(b + 16 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    O = D
    f = kb(fa(b + 17 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    O = O | D
    Q = fa(b + 18 >> 0 | 0, 1, 0, 1) | 0 | 0
    B = kb(Q | 0, 0, 24) | 0
    O = jb(g | A | f | B | 0, O | D | 0, 6) | 0
    B = fa(b + 20 >> 0 | 0, 1, 0, 0) | 0 | 0
    f = kb(fa(b + 19 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    A = D
    B = kb(B & 255 | 0, 0, 16) | 0
    A = jb(f | Q | B | 0, A | D | 0, 3) | 0
    B = D
    Q = fa(b + 23 >> 0 | 0, 1, 0, 0) | 0 | 0
    f = fa(b + 21 >> 0 | 0, 1, 0, 1) | 0 | 0
    g = kb(fa(b + 22 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    h = D
    Q = Q & 255
    l = kb(Q | 0, 0, 16) | 0
    _ = kb(fa(b + 24 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    y = D
    Z = kb(fa(b + 25 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    y = y | D
    x = fa(b + 26 >> 0 | 0, 1, 0, 1) | 0 | 0
    $ = kb(x | 0, 0, 24) | 0
    y = jb(_ | Q | Z | $ | 0, y | D | 0, 5) | 0
    $ = fa(b + 28 >> 0 | 0, 1, 0, 0) | 0 | 0
    Z = kb(fa(b + 27 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Q = D
    $ = $ & 255
    _ = kb($ | 0, 0, 16) | 0
    Q = jb(Z | x | _ | 0, Q | D | 0, 2) | 0
    _ = kb(fa(b + 29 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    x = D
    Z = kb(fa(b + 30 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    x = x | D
    X = kb(fa(b + 31 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    x = jb(_ | $ | Z | X | 0, x | D | 0, 7) | 0
    X = D
    Z = fa(c + 2 >> 0 | 0, 1, 0, 0) | 0 | 0
    $ = fa(c >> 0 | 0, 1, 0, 1) | 0 | 0
    _ = kb(fa(c + 1 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    W = D
    Z = Z & 255
    s = kb(Z | 0, 0, 16) | 0
    P = kb(fa(c + 3 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    q = D
    V = kb(fa(c + 4 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    q = q | D
    z = fa(c + 5 >> 0 | 0, 1, 0, 1) | 0 | 0
    b = kb(z | 0, 0, 24) | 0
    q = jb(P | Z | V | b | 0, q | D | 0, 5) | 0
    b = fa(c + 7 >> 0 | 0, 1, 0, 0) | 0 | 0
    V = kb(fa(c + 6 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Z = D
    b = b & 255
    P = kb(b | 0, 0, 16) | 0
    Z = jb(V | z | P | 0, Z | D | 0, 2) | 0
    P = kb(fa(c + 8 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    z = D
    V = kb(fa(c + 9 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    z = z | D
    k = fa(c + 10 >> 0 | 0, 1, 0, 1) | 0 | 0
    R = kb(k | 0, 0, 24) | 0
    z = jb(P | b | V | R | 0, z | D | 0, 7) | 0
    R = kb(fa(c + 11 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    V = D
    b = kb(fa(c + 12 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    V = V | D
    P = fa(c + 13 >> 0 | 0, 1, 0, 1) | 0 | 0
    H = kb(P | 0, 0, 24) | 0
    V = jb(R | k | b | H | 0, V | D | 0, 4) | 0
    H = fa(c + 15 >> 0 | 0, 1, 0, 0) | 0 | 0
    b = kb(fa(c + 14 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    k = D
    H = H & 255
    R = kb(H | 0, 0, 16) | 0
    k = jb(b | P | R | 0, k | D | 0, 1) | 0
    R = kb(fa(c + 16 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    P = D
    b = kb(fa(c + 17 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    P = P | D
    F = fa(c + 18 >> 0 | 0, 1, 0, 1) | 0 | 0
    e = kb(F | 0, 0, 24) | 0
    P = jb(R | H | b | e | 0, P | D | 0, 6) | 0
    e = fa(c + 20 >> 0 | 0, 1, 0, 0) | 0 | 0
    b = kb(fa(c + 19 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    H = D
    e = kb(e & 255 | 0, 0, 16) | 0
    H = jb(b | F | e | 0, H | D | 0, 3) | 0
    e = D
    F = fa(c + 23 >> 0 | 0, 1, 0, 0) | 0 | 0
    b = fa(c + 21 >> 0 | 0, 1, 0, 1) | 0 | 0
    R = kb(fa(c + 22 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    J = D
    F = F & 255
    I = kb(F | 0, 0, 16) | 0
    j = kb(fa(c + 24 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    o = D
    u = kb(fa(c + 25 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    o = o | D
    v = fa(c + 26 >> 0 | 0, 1, 0, 1) | 0 | 0
    K = kb(v | 0, 0, 24) | 0
    o = jb(j | F | u | K | 0, o | D | 0, 5) | 0
    K = fa(c + 28 >> 0 | 0, 1, 0, 0) | 0 | 0
    u = kb(fa(c + 27 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    F = D
    K = K & 255
    j = kb(K | 0, 0, 16) | 0
    F = jb(u | v | j | 0, F | D | 0, 2) | 0
    j = kb(fa(c + 29 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    v = D
    u = kb(fa(c + 30 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    v = v | D
    w = kb(fa(c + 31 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    v = jb(j | K | u | w | 0, v | D | 0, 7) | 0
    w = D
    W = gb(M | p | S & 2031616 | 0, t | 0, _ | $ | s & 2031616 | 0, W | 0) | 0
    s = D
    q = gb(T & 2097151 | 0, 0, q & 2097151 | 0, 0) | 0
    T = D
    Z = gb(Y & 2097151 | 0, 0, Z & 2097151 | 0, 0) | 0
    Y = D
    z = gb(N & 2097151 | 0, 0, z & 2097151 | 0, 0) | 0
    N = D
    V = gb(U & 2097151 | 0, 0, V & 2097151 | 0, 0) | 0
    U = D
    k = gb(L & 2097151 | 0, 0, k & 2097151 | 0, 0) | 0
    L = D
    P = gb(O & 2097151 | 0, 0, P & 2097151 | 0, 0) | 0
    O = D
    e = gb(A | 0, B | 0, H | 0, e | 0) | 0
    H = D
    J = gb(g | f | l & 2031616 | 0, h | 0, R | b | I & 2031616 | 0, J | 0) | 0
    I = D
    o = gb(y & 2097151 | 0, 0, o & 2097151 | 0, 0) | 0
    y = D
    F = gb(Q & 2097151 | 0, 0, F & 2097151 | 0, 0) | 0
    b = D
    w = gb(x | 0, X | 0, v | 0, w | 0) | 0
    v = D
    X = hb(W | 0, s | 0, 1048576, 0) | 0
    X = fb(X | 0, D | 0, 21) | 0
    x = D
    T = hb(q | 0, T | 0, X | 0, x | 0) | 0
    q = D
    x = kb(X | 0, x | 0, 21) | 0
    x = gb(W | 0, s | 0, x | 0, D | 0) | 0
    s = D
    W = hb(Z | 0, Y | 0, 1048576, 0) | 0
    W = fb(W | 0, D | 0, 21) | 0
    X = D
    N = hb(z | 0, N | 0, W | 0, X | 0) | 0
    z = D
    X = kb(W | 0, X | 0, 21) | 0
    W = D
    Q = hb(V | 0, U | 0, 1048576, 0) | 0
    Q = fb(Q | 0, D | 0, 21) | 0
    R = D
    L = hb(k | 0, L | 0, Q | 0, R | 0) | 0
    k = D
    R = kb(Q | 0, R | 0, 21) | 0
    Q = D
    h = hb(P | 0, O | 0, 1048576, 0) | 0
    h = fb(h | 0, D | 0, 21) | 0
    l = D
    H = hb(e | 0, H | 0, h | 0, l | 0) | 0
    e = D
    l = kb(h | 0, l | 0, 21) | 0
    h = D
    f = hb(J | 0, I | 0, 1048576, 0) | 0
    f = fb(f | 0, D | 0, 21) | 0
    g = D
    y = hb(o | 0, y | 0, f | 0, g | 0) | 0
    o = D
    g = kb(f | 0, g | 0, 21) | 0
    f = D
    B = hb(F | 0, b | 0, 1048576, 0) | 0
    B = fb(B | 0, D | 0, 21) | 0
    A = D
    v = hb(w | 0, v | 0, B | 0, A | 0) | 0
    w = D
    A = kb(B | 0, A | 0, 21) | 0
    B = D
    $ = hb(T | 0, q | 0, 1048576, 0) | 0
    $ = fb($ | 0, D | 0, 21) | 0
    _ = D
    t = kb($ | 0, _ | 0, 21) | 0
    t = gb(T | 0, q | 0, t | 0, D | 0) | 0
    q = D
    T = hb(N | 0, z | 0, 1048576, 0) | 0
    T = fb(T | 0, D | 0, 21) | 0
    S = D
    p = kb(T | 0, S | 0, 21) | 0
    p = gb(N | 0, z | 0, p | 0, D | 0) | 0
    z = D
    N = hb(L | 0, k | 0, 1048576, 0) | 0
    N = fb(N | 0, D | 0, 21) | 0
    M = D
    u = kb(N | 0, M | 0, 21) | 0
    u = gb(L | 0, k | 0, u | 0, D | 0) | 0
    k = D
    L = hb(H | 0, e | 0, 1048576, 0) | 0
    L = fb(L | 0, D | 0, 21) | 0
    K = D
    j = kb(L | 0, K | 0, 21) | 0
    j = gb(H | 0, e | 0, j | 0, D | 0) | 0
    e = D
    H = hb(y | 0, o | 0, 1048576, 0) | 0
    H = fb(H | 0, D | 0, 21) | 0
    G = D
    C = kb(H | 0, G | 0, 21) | 0
    C = gb(y | 0, o | 0, C | 0, D | 0) | 0
    o = D
    y = hb(v | 0, w | 0, 1048576, 0) | 0
    y = fb(y | 0, D | 0, 21) | 0
    m = D
    c = kb(y | 0, m | 0, 21) | 0
    c = gb(v | 0, w | 0, c | 0, D | 0) | 0
    w = D
    v = sb(y | 0, m | 0, 666643, 0) | 0
    s = hb(v | 0, D | 0, x | 0, s | 0) | 0
    x = D
    v = sb(y | 0, m | 0, 470296, 0) | 0
    v = hb(t | 0, q | 0, v | 0, D | 0) | 0
    q = D
    t = sb(y | 0, m | 0, 654183, 0) | 0
    E = D
    r = sb(y | 0, m | 0, -997805, -1) | 0
    r = hb(p | 0, z | 0, r | 0, D | 0) | 0
    z = D
    p = sb(y | 0, m | 0, 136657, 0) | 0
    n = D
    m = sb(y | 0, m | 0, -683901, -1) | 0
    m = hb(u | 0, k | 0, m | 0, D | 0) | 0
    k = D
    u = fb(s | 0, x | 0, 21) | 0
    y = D
    q = hb(v | 0, q | 0, u | 0, y | 0) | 0
    v = D
    y = kb(u | 0, y | 0, 21) | 0
    y = gb(s | 0, x | 0, y | 0, D | 0) | 0
    x = D
    s = fb(q | 0, v | 0, 21) | 0
    u = D
    Y = hb($ | 0, _ | 0, Z | 0, Y | 0) | 0
    W = gb(Y | 0, D | 0, X | 0, W | 0) | 0
    E = hb(W | 0, D | 0, t | 0, E | 0) | 0
    E = hb(E | 0, D | 0, s | 0, u | 0) | 0
    t = D
    u = kb(s | 0, u | 0, 21) | 0
    u = gb(q | 0, v | 0, u | 0, D | 0) | 0
    v = D
    q = fb(E | 0, t | 0, 21) | 0
    s = D
    z = hb(r | 0, z | 0, q | 0, s | 0) | 0
    r = D
    s = kb(q | 0, s | 0, 21) | 0
    s = gb(E | 0, t | 0, s | 0, D | 0) | 0
    t = D
    E = fb(z | 0, r | 0, 21) | 0
    q = D
    S = hb(V | 0, U | 0, T | 0, S | 0) | 0
    Q = gb(S | 0, D | 0, R | 0, Q | 0) | 0
    n = hb(Q | 0, D | 0, p | 0, n | 0) | 0
    n = hb(n | 0, D | 0, E | 0, q | 0) | 0
    p = D
    q = kb(E | 0, q | 0, 21) | 0
    q = gb(z | 0, r | 0, q | 0, D | 0) | 0
    r = D
    z = fb(n | 0, p | 0, 21) | 0
    E = D
    k = hb(m | 0, k | 0, z | 0, E | 0) | 0
    m = D
    E = kb(z | 0, E | 0, 21) | 0
    E = gb(n | 0, p | 0, E | 0, D | 0) | 0
    p = D
    n = fb(k | 0, m | 0, 21) | 0
    z = D
    M = hb(P | 0, O | 0, N | 0, M | 0) | 0
    h = gb(M | 0, D | 0, l | 0, h | 0) | 0
    h = hb(h | 0, D | 0, n | 0, z | 0) | 0
    l = D
    z = kb(n | 0, z | 0, 21) | 0
    z = gb(k | 0, m | 0, z | 0, D | 0) | 0
    m = D
    k = fb(h | 0, l | 0, 21) | 0
    n = D
    e = hb(k | 0, n | 0, j | 0, e | 0) | 0
    j = D
    n = kb(k | 0, n | 0, 21) | 0
    n = gb(h | 0, l | 0, n | 0, D | 0) | 0
    l = D
    h = fb(e | 0, j | 0, 21) | 0
    k = D
    I = hb(L | 0, K | 0, J | 0, I | 0) | 0
    f = gb(I | 0, D | 0, g | 0, f | 0) | 0
    f = hb(f | 0, D | 0, h | 0, k | 0) | 0
    g = D
    k = kb(h | 0, k | 0, 21) | 0
    k = gb(e | 0, j | 0, k | 0, D | 0) | 0
    j = D
    e = fb(f | 0, g | 0, 21) | 0
    h = D
    o = hb(e | 0, h | 0, C | 0, o | 0) | 0
    C = D
    h = kb(e | 0, h | 0, 21) | 0
    h = gb(f | 0, g | 0, h | 0, D | 0) | 0
    g = D
    f = fb(o | 0, C | 0, 21) | 0
    e = D
    b = hb(H | 0, G | 0, F | 0, b | 0) | 0
    B = gb(b | 0, D | 0, A | 0, B | 0) | 0
    B = hb(B | 0, D | 0, f | 0, e | 0) | 0
    A = D
    e = kb(f | 0, e | 0, 21) | 0
    e = gb(o | 0, C | 0, e | 0, D | 0) | 0
    C = D
    o = fb(B | 0, A | 0, 21) | 0
    f = D
    w = hb(o | 0, f | 0, c | 0, w | 0) | 0
    c = D
    f = kb(o | 0, f | 0, 21) | 0
    f = gb(B | 0, A | 0, f | 0, D | 0) | 0
    A = D
    B = fb(w | 0, c | 0, 21) | 0
    o = D
    b = kb(B | 0, o | 0, 21) | 0
    b = gb(w | 0, c | 0, b | 0, D | 0) | 0
    c = D
    w = sb(B | 0, o | 0, 666643, 0) | 0
    x = hb(w | 0, D | 0, y | 0, x | 0) | 0
    y = D
    w = sb(B | 0, o | 0, 470296, 0) | 0
    w = hb(u | 0, v | 0, w | 0, D | 0) | 0
    v = D
    u = sb(B | 0, o | 0, 654183, 0) | 0
    u = hb(s | 0, t | 0, u | 0, D | 0) | 0
    t = D
    s = sb(B | 0, o | 0, -997805, -1) | 0
    s = hb(q | 0, r | 0, s | 0, D | 0) | 0
    r = D
    q = sb(B | 0, o | 0, 136657, 0) | 0
    q = hb(E | 0, p | 0, q | 0, D | 0) | 0
    p = D
    o = sb(B | 0, o | 0, -683901, -1) | 0
    o = hb(z | 0, m | 0, o | 0, D | 0) | 0
    m = D
    z = fb(x | 0, y | 0, 21) | 0
    B = D
    v = hb(w | 0, v | 0, z | 0, B | 0) | 0
    w = D
    B = kb(z | 0, B | 0, 21) | 0
    B = gb(x | 0, y | 0, B | 0, D | 0) | 0
    y = D
    x = fb(v | 0, w | 0, 21) | 0
    z = D
    t = hb(u | 0, t | 0, x | 0, z | 0) | 0
    u = D
    z = kb(x | 0, z | 0, 21) | 0
    z = gb(v | 0, w | 0, z | 0, D | 0) | 0
    w = D
    v = fb(t | 0, u | 0, 21) | 0
    x = D
    r = hb(s | 0, r | 0, v | 0, x | 0) | 0
    s = D
    x = kb(v | 0, x | 0, 21) | 0
    x = gb(t | 0, u | 0, x | 0, D | 0) | 0
    u = D
    t = fb(r | 0, s | 0, 21) | 0
    v = D
    p = hb(q | 0, p | 0, t | 0, v | 0) | 0
    q = D
    v = kb(t | 0, v | 0, 21) | 0
    v = gb(r | 0, s | 0, v | 0, D | 0) | 0
    s = D
    r = fb(p | 0, q | 0, 21) | 0
    t = D
    m = hb(o | 0, m | 0, r | 0, t | 0) | 0
    o = D
    t = kb(r | 0, t | 0, 21) | 0
    t = gb(p | 0, q | 0, t | 0, D | 0) | 0
    q = D
    p = fb(m | 0, o | 0, 21) | 0
    r = D
    l = hb(p | 0, r | 0, n | 0, l | 0) | 0
    n = D
    r = kb(p | 0, r | 0, 21) | 0
    r = gb(m | 0, o | 0, r | 0, D | 0) | 0
    o = D
    m = fb(l | 0, n | 0, 21) | 0
    p = D
    j = hb(m | 0, p | 0, k | 0, j | 0) | 0
    k = D
    p = kb(m | 0, p | 0, 21) | 0
    p = gb(l | 0, n | 0, p | 0, D | 0) | 0
    n = D
    l = fb(j | 0, k | 0, 21) | 0
    m = D
    g = hb(l | 0, m | 0, h | 0, g | 0) | 0
    h = D
    m = kb(l | 0, m | 0, 21) | 0
    m = gb(j | 0, k | 0, m | 0, D | 0) | 0
    k = D
    j = fb(g | 0, h | 0, 21) | 0
    l = D
    C = hb(j | 0, l | 0, e | 0, C | 0) | 0
    e = D
    l = kb(j | 0, l | 0, 21) | 0
    l = gb(g | 0, h | 0, l | 0, D | 0) | 0
    h = D
    g = fb(C | 0, e | 0, 21) | 0
    j = D
    A = hb(g | 0, j | 0, f | 0, A | 0) | 0
    f = D
    j = kb(g | 0, j | 0, 21) | 0
    j = gb(C | 0, e | 0, j | 0, D | 0) | 0
    e = D
    C = fb(A | 0, f | 0, 21) | 0
    g = D
    c = hb(C | 0, g | 0, b | 0, c | 0) | 0
    b = D
    g = kb(C | 0, g | 0, 21) | 0
    g = gb(A | 0, f | 0, g | 0, D | 0) | 0
    f = D
    ga(a >> 0 | 0, B | 0, 1, 0)
    A = jb(B | 0, y | 0, 8) | 0
    ga(a + 1 >> 0 | 0, A | 0, 1, 0)
    y = jb(B | 0, y | 0, 16) | 0
    B = D
    A = kb(z | 0, w | 0, 5) | 0
    D | B
    ga(a + 2 >> 0 | 0, A | y | 0, 1, 0)
    y = jb(z | 0, w | 0, 3) | 0
    ga(a + 3 >> 0 | 0, y | 0, 1, 0)
    y = jb(z | 0, w | 0, 11) | 0
    ga(a + 4 >> 0 | 0, y | 0, 1, 0)
    w = jb(z | 0, w | 0, 19) | 0
    z = D
    y = kb(x | 0, u | 0, 2) | 0
    D | z
    ga(a + 5 >> 0 | 0, y | w | 0, 1, 0)
    w = jb(x | 0, u | 0, 6) | 0
    ga(a + 6 >> 0 | 0, w | 0, 1, 0)
    u = jb(x | 0, u | 0, 14) | 0
    x = D
    w = kb(v | 0, s | 0, 7) | 0
    D | x
    ga(a + 7 >> 0 | 0, w | u | 0, 1, 0)
    u = jb(v | 0, s | 0, 1) | 0
    ga(a + 8 >> 0 | 0, u | 0, 1, 0)
    u = jb(v | 0, s | 0, 9) | 0
    ga(a + 9 >> 0 | 0, u | 0, 1, 0)
    s = jb(v | 0, s | 0, 17) | 0
    v = D
    u = kb(t | 0, q | 0, 4) | 0
    D | v
    ga(a + 10 >> 0 | 0, u | s | 0, 1, 0)
    s = jb(t | 0, q | 0, 4) | 0
    ga(a + 11 >> 0 | 0, s | 0, 1, 0)
    s = jb(t | 0, q | 0, 12) | 0
    ga(a + 12 >> 0 | 0, s | 0, 1, 0)
    q = jb(t | 0, q | 0, 20) | 0
    t = D
    s = kb(r | 0, o | 0, 1) | 0
    D | t
    ga(a + 13 >> 0 | 0, s | q | 0, 1, 0)
    q = jb(r | 0, o | 0, 7) | 0
    ga(a + 14 >> 0 | 0, q | 0, 1, 0)
    o = jb(r | 0, o | 0, 15) | 0
    r = D
    q = kb(p | 0, n | 0, 6) | 0
    D | r
    ga(a + 15 >> 0 | 0, q | o | 0, 1, 0)
    o = jb(p | 0, n | 0, 2) | 0
    ga(a + 16 >> 0 | 0, o | 0, 1, 0)
    o = jb(p | 0, n | 0, 10) | 0
    ga(a + 17 >> 0 | 0, o | 0, 1, 0)
    n = jb(p | 0, n | 0, 18) | 0
    p = D
    o = kb(m | 0, k | 0, 3) | 0
    D | p
    ga(a + 18 >> 0 | 0, o | n | 0, 1, 0)
    n = jb(m | 0, k | 0, 5) | 0
    ga(a + 19 >> 0 | 0, n | 0, 1, 0)
    k = jb(m | 0, k | 0, 13) | 0
    ga(a + 20 >> 0 | 0, k | 0, 1, 0)
    ga(a + 21 >> 0 | 0, l | 0, 1, 0)
    k = jb(l | 0, h | 0, 8) | 0
    ga(a + 22 >> 0 | 0, k | 0, 1, 0)
    h = jb(l | 0, h | 0, 16) | 0
    l = D
    k = kb(j | 0, e | 0, 5) | 0
    D | l
    ga(a + 23 >> 0 | 0, k | h | 0, 1, 0)
    h = jb(j | 0, e | 0, 3) | 0
    ga(a + 24 >> 0 | 0, h | 0, 1, 0)
    h = jb(j | 0, e | 0, 11) | 0
    ga(a + 25 >> 0 | 0, h | 0, 1, 0)
    e = jb(j | 0, e | 0, 19) | 0
    j = D
    h = kb(g | 0, f | 0, 2) | 0
    D | j
    ga(a + 26 >> 0 | 0, h | e | 0, 1, 0)
    e = jb(g | 0, f | 0, 6) | 0
    ga(a + 27 >> 0 | 0, e | 0, 1, 0)
    f = jb(g | 0, f | 0, 14) | 0
    g = D
    e = kb(c | 0, b | 0, 7) | 0
    g | D
    ga(a + 28 >> 0 | 0, f | e | 0, 1, 0)
    e = jb(c | 0, b | 0, 1) | 0
    ga(a + 29 >> 0 | 0, e | 0, 1, 0)
    e = jb(c | 0, b | 0, 9) | 0
    ga(a + 30 >> 0 | 0, e | 0, 1, 0)
    b = jb(c | 0, b | 0, 17) | 0
    ga(a + 31 >> 0 | 0, b | 0, 1, 0)
    i = d
  }

  function $a (a, b, c, d) {
    a = a | 0
    b = b | 0
    c = c | 0
    d = d | 0
    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var E = 0

    var F = 0

    var G = 0

    var H = 0

    var I = 0

    var J = 0

    var K = 0

    var L = 0

    var M = 0

    var N = 0

    var O = 0

    var P = 0

    var Q = 0

    var R = 0

    var S = 0

    var T = 0

    var U = 0

    var V = 0

    var W = 0

    var X = 0

    var Y = 0

    var Z = 0

    var _ = 0

    var $ = 0

    var aa = 0

    var ba = 0

    var ca = 0

    var da = 0

    var ea = 0

    var ha = 0

    var ia = 0

    var ja = 0

    var ka = 0

    var la = 0

    var ma = 0

    var na = 0

    var oa = 0

    var pa = 0

    var qa = 0

    var ra = 0

    var sa = 0

    var ta = 0

    var ua = 0

    var va = 0

    var wa = 0

    var xa = 0

    var ya = 0

    var za = 0

    var Aa = 0

    var Ba = 0

    var Ca = 0

    var Da = 0

    var Ea = 0

    var Fa = 0

    var Ga = 0

    var Ha = 0

    var Ia = 0

    var Ja = 0

    var Ka = 0

    var La = 0

    var Ma = 0

    var Na = 0

    var Oa = 0

    var Pa = 0

    var Qa = 0

    var Ra = 0

    var Sa = 0

    var Ta = 0

    var Ua = 0

    var Va = 0

    var Wa = 0

    var Xa = 0

    var Ya = 0

    var Za = 0

    var _a = 0

    var $a = 0

    var ab = 0

    var bb = 0

    var cb = 0

    var db = 0

    var eb = 0

    var ib = 0

    var lb = 0

    var mb = 0

    var nb = 0

    var ob = 0

    var pb = 0

    var qb = 0

    var rb = 0

    var tb = 0

    var ub = 0

    var vb = 0

    var wb = 0

    var xb = 0

    var yb = 0

    var zb = 0

    var Ab = 0

    var Bb = 0

    var Cb = 0

    var Db = 0

    var Eb = 0

    var Fb = 0

    var Gb = 0

    var Hb = 0

    var Ib = 0

    var Jb = 0

    var Kb = 0

    var Lb = 0

    var Mb = 0

    var Nb = 0

    var Ob = 0

    var Pb = 0

    var Qb = 0

    var Rb = 0

    var Sb = 0

    var Tb = 0

    var Ub = 0

    var Vb = 0

    var Wb = 0

    var Xb = 0

    var Yb = 0

    var Zb = 0

    var _b = 0

    var $b = 0

    var ac = 0

    var bc = 0

    var cc = 0

    var dc = 0

    var ec = 0

    var fc = 0

    var gc = 0

    var hc = 0

    var ic = 0

    var jc = 0

    var kc = 0

    var lc = 0

    var mc = 0

    var nc = 0

    var oc = 0

    var pc = 0

    var qc = 0

    var rc = 0

    var sc = 0

    var tc = 0

    var uc = 0

    var vc = 0

    var wc = 0

    var xc = 0

    var yc = 0

    var zc = 0

    var Ac = 0

    var Bc = 0
    e = i
    q = fa(b + 2 >> 0 | 0, 1, 0, 0) | 0 | 0
    Qa = fa(b >> 0 | 0, 1, 0, 1) | 0 | 0
    Ab = kb(fa(b + 1 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    zb = D
    q = q & 255
    _ = kb(q | 0, 0, 16) | 0
    _ = Ab | Qa | _ & 2031616
    Qa = kb(fa(b + 3 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Ab = D
    o = kb(fa(b + 4 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    Ab = Ab | D
    u = fa(b + 5 >> 0 | 0, 1, 0, 1) | 0 | 0
    Z = kb(u | 0, 0, 24) | 0
    Ab = jb(Qa | q | o | Z | 0, Ab | D | 0, 5) | 0
    Ab = Ab & 2097151
    Z = fa(b + 7 >> 0 | 0, 1, 0, 0) | 0 | 0
    o = kb(fa(b + 6 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    q = D
    Z = Z & 255
    Qa = kb(Z | 0, 0, 16) | 0
    q = jb(o | u | Qa | 0, q | D | 0, 2) | 0
    q = q & 2097151
    Qa = kb(fa(b + 8 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    u = D
    o = kb(fa(b + 9 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    u = u | D
    j = fa(b + 10 >> 0 | 0, 1, 0, 1) | 0 | 0
    w = kb(j | 0, 0, 24) | 0
    u = jb(Qa | Z | o | w | 0, u | D | 0, 7) | 0
    u = u & 2097151
    w = kb(fa(b + 11 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    o = D
    Z = kb(fa(b + 12 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    o = o | D
    Qa = fa(b + 13 >> 0 | 0, 1, 0, 1) | 0 | 0
    na = kb(Qa | 0, 0, 24) | 0
    o = jb(w | j | Z | na | 0, o | D | 0, 4) | 0
    o = o & 2097151
    na = fa(b + 15 >> 0 | 0, 1, 0, 0) | 0 | 0
    Z = kb(fa(b + 14 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    j = D
    na = na & 255
    w = kb(na | 0, 0, 16) | 0
    j = jb(Z | Qa | w | 0, j | D | 0, 1) | 0
    j = j & 2097151
    w = kb(fa(b + 16 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Qa = D
    Z = kb(fa(b + 17 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    Qa = Qa | D
    Ga = fa(b + 18 >> 0 | 0, 1, 0, 1) | 0 | 0
    ya = kb(Ga | 0, 0, 24) | 0
    Qa = jb(w | na | Z | ya | 0, Qa | D | 0, 6) | 0
    Qa = Qa & 2097151
    ya = fa(b + 20 >> 0 | 0, 1, 0, 0) | 0 | 0
    Z = kb(fa(b + 19 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    na = D
    ya = kb(ya & 255 | 0, 0, 16) | 0
    na = jb(Z | Ga | ya | 0, na | D | 0, 3) | 0
    ya = D
    Ga = fa(b + 23 >> 0 | 0, 1, 0, 0) | 0 | 0
    Z = fa(b + 21 >> 0 | 0, 1, 0, 1) | 0 | 0
    w = kb(fa(b + 22 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    qb = D
    Ga = Ga & 255
    Na = kb(Ga | 0, 0, 16) | 0
    Na = w | Z | Na & 2031616
    Z = kb(fa(b + 24 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    w = D
    mb = kb(fa(b + 25 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    w = w | D
    x = fa(b + 26 >> 0 | 0, 1, 0, 1) | 0 | 0
    Ua = kb(x | 0, 0, 24) | 0
    w = jb(Z | Ga | mb | Ua | 0, w | D | 0, 5) | 0
    w = w & 2097151
    Ua = fa(b + 28 >> 0 | 0, 1, 0, 0) | 0 | 0
    mb = kb(fa(b + 27 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Ga = D
    Ua = Ua & 255
    Z = kb(Ua | 0, 0, 16) | 0
    Ga = jb(mb | x | Z | 0, Ga | D | 0, 2) | 0
    Ga = Ga & 2097151
    Z = kb(fa(b + 29 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    x = D
    mb = kb(fa(b + 30 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    x = x | D
    Ha = kb(fa(b + 31 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    x = jb(Z | Ua | mb | Ha | 0, x | D | 0, 7) | 0
    Ha = D
    mb = fa(c + 2 >> 0 | 0, 1, 0, 0) | 0 | 0
    Ua = fa(c >> 0 | 0, 1, 0, 1) | 0 | 0
    Z = kb(fa(c + 1 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Fb = D
    mb = mb & 255
    Eb = kb(mb | 0, 0, 16) | 0
    Eb = Z | Ua | Eb & 2031616
    Ua = kb(fa(c + 3 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Z = D
    la = kb(fa(c + 4 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    Z = Z | D
    r = fa(c + 5 >> 0 | 0, 1, 0, 1) | 0 | 0
    zc = kb(r | 0, 0, 24) | 0
    Z = jb(Ua | mb | la | zc | 0, Z | D | 0, 5) | 0
    Z = Z & 2097151
    zc = fa(c + 7 >> 0 | 0, 1, 0, 0) | 0 | 0
    la = kb(fa(c + 6 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    mb = D
    zc = zc & 255
    Ua = kb(zc | 0, 0, 16) | 0
    mb = jb(la | r | Ua | 0, mb | D | 0, 2) | 0
    mb = mb & 2097151
    Ua = kb(fa(c + 8 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    r = D
    la = kb(fa(c + 9 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    r = r | D
    t = fa(c + 10 >> 0 | 0, 1, 0, 1) | 0 | 0
    X = kb(t | 0, 0, 24) | 0
    r = jb(Ua | zc | la | X | 0, r | D | 0, 7) | 0
    r = r & 2097151
    X = kb(fa(c + 11 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    la = D
    zc = kb(fa(c + 12 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    la = la | D
    Ua = fa(c + 13 >> 0 | 0, 1, 0, 1) | 0 | 0
    Bc = kb(Ua | 0, 0, 24) | 0
    la = jb(X | t | zc | Bc | 0, la | D | 0, 4) | 0
    la = la & 2097151
    Bc = fa(c + 15 >> 0 | 0, 1, 0, 0) | 0 | 0
    zc = kb(fa(c + 14 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    t = D
    Bc = Bc & 255
    X = kb(Bc | 0, 0, 16) | 0
    t = jb(zc | Ua | X | 0, t | D | 0, 1) | 0
    t = t & 2097151
    X = kb(fa(c + 16 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Ua = D
    zc = kb(fa(c + 17 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    Ua = Ua | D
    F = fa(c + 18 >> 0 | 0, 1, 0, 1) | 0 | 0
    A = kb(F | 0, 0, 24) | 0
    Ua = jb(X | Bc | zc | A | 0, Ua | D | 0, 6) | 0
    Ua = Ua & 2097151
    A = fa(c + 20 >> 0 | 0, 1, 0, 0) | 0 | 0
    zc = kb(fa(c + 19 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Bc = D
    A = kb(A & 255 | 0, 0, 16) | 0
    Bc = jb(zc | F | A | 0, Bc | D | 0, 3) | 0
    A = D
    F = fa(c + 23 >> 0 | 0, 1, 0, 0) | 0 | 0
    zc = fa(c + 21 >> 0 | 0, 1, 0, 1) | 0 | 0
    X = kb(fa(c + 22 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    ob = D
    F = F & 255
    za = kb(F | 0, 0, 16) | 0
    za = X | zc | za & 2031616
    zc = kb(fa(c + 24 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    X = D
    Ia = kb(fa(c + 25 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    X = X | D
    Fa = fa(c + 26 >> 0 | 0, 1, 0, 1) | 0 | 0
    qa = kb(Fa | 0, 0, 24) | 0
    X = jb(zc | F | Ia | qa | 0, X | D | 0, 5) | 0
    X = X & 2097151
    qa = fa(c + 28 >> 0 | 0, 1, 0, 0) | 0 | 0
    Ia = kb(fa(c + 27 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    F = D
    qa = qa & 255
    zc = kb(qa | 0, 0, 16) | 0
    F = jb(Ia | Fa | zc | 0, F | D | 0, 2) | 0
    F = F & 2097151
    zc = kb(fa(c + 29 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Fa = D
    Ia = kb(fa(c + 30 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    Fa = Fa | D
    ha = kb(fa(c + 31 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    Fa = jb(zc | qa | Ia | ha | 0, Fa | D | 0, 7) | 0
    ha = D
    Ia = fa(d + 2 >> 0 | 0, 1, 0, 0) | 0 | 0
    qa = fa(d >> 0 | 0, 1, 0, 1) | 0 | 0
    zc = kb(fa(d + 1 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    W = D
    Ia = Ia & 255
    ua = kb(Ia | 0, 0, 16) | 0
    L = kb(fa(d + 3 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Ba = D
    wa = kb(fa(d + 4 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    Ba = Ba | D
    pb = fa(d + 5 >> 0 | 0, 1, 0, 1) | 0 | 0
    H = kb(pb | 0, 0, 24) | 0
    Ba = jb(L | Ia | wa | H | 0, Ba | D | 0, 5) | 0
    H = fa(d + 7 >> 0 | 0, 1, 0, 0) | 0 | 0
    wa = kb(fa(d + 6 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    Ia = D
    H = H & 255
    L = kb(H | 0, 0, 16) | 0
    Ia = jb(wa | pb | L | 0, Ia | D | 0, 2) | 0
    L = kb(fa(d + 8 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    pb = D
    wa = kb(fa(d + 9 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    pb = pb | D
    R = fa(d + 10 >> 0 | 0, 1, 0, 1) | 0 | 0
    Ib = kb(R | 0, 0, 24) | 0
    pb = jb(L | H | wa | Ib | 0, pb | D | 0, 7) | 0
    Ib = kb(fa(d + 11 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    wa = D
    H = kb(fa(d + 12 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    wa = wa | D
    L = fa(d + 13 >> 0 | 0, 1, 0, 1) | 0 | 0
    M = kb(L | 0, 0, 24) | 0
    wa = jb(Ib | R | H | M | 0, wa | D | 0, 4) | 0
    M = fa(d + 15 >> 0 | 0, 1, 0, 0) | 0 | 0
    H = kb(fa(d + 14 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    R = D
    M = M & 255
    Ib = kb(M | 0, 0, 16) | 0
    R = jb(H | L | Ib | 0, R | D | 0, 1) | 0
    Ib = kb(fa(d + 16 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    L = D
    H = kb(fa(d + 17 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    L = L | D
    sa = fa(d + 18 >> 0 | 0, 1, 0, 1) | 0 | 0
    B = kb(sa | 0, 0, 24) | 0
    L = jb(Ib | M | H | B | 0, L | D | 0, 6) | 0
    B = fa(d + 20 >> 0 | 0, 1, 0, 0) | 0 | 0
    H = kb(fa(d + 19 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    M = D
    B = kb(B & 255 | 0, 0, 16) | 0
    M = jb(H | sa | B | 0, M | D | 0, 3) | 0
    B = D
    sa = fa(d + 23 >> 0 | 0, 1, 0, 0) | 0 | 0
    H = fa(d + 21 >> 0 | 0, 1, 0, 1) | 0 | 0
    Ib = kb(fa(d + 22 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    $a = D
    sa = sa & 255
    Ca = kb(sa | 0, 0, 16) | 0
    va = kb(fa(d + 24 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    G = D
    Ea = kb(fa(d + 25 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    G = G | D
    yb = fa(d + 26 >> 0 | 0, 1, 0, 1) | 0 | 0
    Ja = kb(yb | 0, 0, 24) | 0
    G = jb(va | sa | Ea | Ja | 0, G | D | 0, 5) | 0
    Ja = fa(d + 28 >> 0 | 0, 1, 0, 0) | 0 | 0
    Ea = kb(fa(d + 27 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    sa = D
    Ja = Ja & 255
    va = kb(Ja | 0, 0, 16) | 0
    sa = jb(Ea | yb | va | 0, sa | D | 0, 2) | 0
    va = kb(fa(d + 29 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    yb = D
    Ea = kb(fa(d + 30 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    yb = yb | D
    d = kb(fa(d + 31 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    yb = jb(va | Ja | Ea | d | 0, yb | D | 0, 7) | 0
    d = D
    Ea = sb(Eb | 0, Fb | 0, _ | 0, zb | 0) | 0
    Ea = gb(zc | qa | ua & 2031616 | 0, W | 0, Ea | 0, D | 0) | 0
    W = D
    ua = sb(Z | 0, 0, _ | 0, zb | 0) | 0
    qa = D
    zc = sb(Eb | 0, Fb | 0, Ab | 0, 0) | 0
    zc = hb(ua | 0, qa | 0, zc | 0, D | 0) | 0
    qa = D
    ua = sb(mb | 0, 0, _ | 0, zb | 0) | 0
    Ja = D
    va = sb(Z | 0, 0, Ab | 0, 0) | 0
    uc = D
    ma = sb(Eb | 0, Fb | 0, q | 0, 0) | 0
    ma = hb(va | 0, uc | 0, ma | 0, D | 0) | 0
    Ja = hb(ma | 0, D | 0, ua | 0, Ja | 0) | 0
    Ja = gb(Ia & 2097151 | 0, 0, Ja | 0, D | 0) | 0
    Ia = D
    ua = sb(r | 0, 0, _ | 0, zb | 0) | 0
    ma = D
    uc = sb(mb | 0, 0, Ab | 0, 0) | 0
    va = D
    yc = sb(Z | 0, 0, q | 0, 0) | 0
    xc = D
    wc = sb(Eb | 0, Fb | 0, u | 0, 0) | 0
    vc = D
    La = sb(la | 0, 0, _ | 0, zb | 0) | 0
    xa = D
    lc = sb(r | 0, 0, Ab | 0, 0) | 0
    Q = D
    nc = sb(mb | 0, 0, q | 0, 0) | 0
    Ka = D
    oc = sb(Z | 0, 0, u | 0, 0) | 0
    pc = D
    mc = sb(Eb | 0, Fb | 0, o | 0, 0) | 0
    mc = hb(oc | 0, pc | 0, mc | 0, D | 0) | 0
    Ka = hb(mc | 0, D | 0, nc | 0, Ka | 0) | 0
    Q = hb(Ka | 0, D | 0, lc | 0, Q | 0) | 0
    xa = hb(Q | 0, D | 0, La | 0, xa | 0) | 0
    xa = gb(wa & 2097151 | 0, 0, xa | 0, D | 0) | 0
    wa = D
    La = sb(t | 0, 0, _ | 0, zb | 0) | 0
    Q = D
    lc = sb(la | 0, 0, Ab | 0, 0) | 0
    Ka = D
    nc = sb(r | 0, 0, q | 0, 0) | 0
    mc = D
    pc = sb(mb | 0, 0, u | 0, 0) | 0
    oc = D
    tc = sb(Z | 0, 0, o | 0, 0) | 0
    sc = D
    rc = sb(Eb | 0, Fb | 0, j | 0, 0) | 0
    qc = D
    N = sb(Ua | 0, 0, _ | 0, zb | 0) | 0
    K = D
    _b = sb(t | 0, 0, Ab | 0, 0) | 0
    g = D
    ac = sb(la | 0, 0, q | 0, 0) | 0
    Zb = D
    cc = sb(r | 0, 0, u | 0, 0) | 0
    $b = D
    ec = sb(mb | 0, 0, o | 0, 0) | 0
    bc = D
    fc = sb(Z | 0, 0, j | 0, 0) | 0
    gc = D
    dc = sb(Eb | 0, Fb | 0, Qa | 0, 0) | 0
    dc = hb(fc | 0, gc | 0, dc | 0, D | 0) | 0
    bc = hb(dc | 0, D | 0, ec | 0, bc | 0) | 0
    $b = hb(bc | 0, D | 0, cc | 0, $b | 0) | 0
    Zb = hb($b | 0, D | 0, ac | 0, Zb | 0) | 0
    g = hb(Zb | 0, D | 0, _b | 0, g | 0) | 0
    K = hb(g | 0, D | 0, N | 0, K | 0) | 0
    K = gb(L & 2097151 | 0, 0, K | 0, D | 0) | 0
    L = D
    N = sb(Bc | 0, A | 0, _ | 0, zb | 0) | 0
    g = D
    _b = sb(Ua | 0, 0, Ab | 0, 0) | 0
    Zb = D
    ac = sb(t | 0, 0, q | 0, 0) | 0
    $b = D
    cc = sb(la | 0, 0, u | 0, 0) | 0
    bc = D
    ec = sb(r | 0, 0, o | 0, 0) | 0
    dc = D
    gc = sb(mb | 0, 0, j | 0, 0) | 0
    fc = D
    kc = sb(Z | 0, 0, Qa | 0, 0) | 0
    jc = D
    ic = sb(Eb | 0, Fb | 0, na | 0, ya | 0) | 0
    hc = D
    Da = sb(za | 0, ob | 0, _ | 0, zb | 0) | 0
    _a = D
    Jb = sb(Bc | 0, A | 0, Ab | 0, 0) | 0
    Kb = D
    Lb = sb(Ua | 0, 0, q | 0, 0) | 0
    Mb = D
    Nb = sb(t | 0, 0, u | 0, 0) | 0
    Ob = D
    Pb = sb(la | 0, 0, o | 0, 0) | 0
    Qb = D
    Rb = sb(r | 0, 0, j | 0, 0) | 0
    Sb = D
    Tb = sb(mb | 0, 0, Qa | 0, 0) | 0
    Ub = D
    Wb = sb(Z | 0, 0, na | 0, ya | 0) | 0
    Xb = D
    Yb = sb(Eb | 0, Fb | 0, Na | 0, qb | 0) | 0
    Yb = hb(Wb | 0, Xb | 0, Yb | 0, D | 0) | 0
    Ub = hb(Yb | 0, D | 0, Tb | 0, Ub | 0) | 0
    Sb = hb(Ub | 0, D | 0, Rb | 0, Sb | 0) | 0
    Qb = hb(Sb | 0, D | 0, Pb | 0, Qb | 0) | 0
    Ob = hb(Qb | 0, D | 0, Nb | 0, Ob | 0) | 0
    Mb = hb(Ob | 0, D | 0, Lb | 0, Mb | 0) | 0
    Kb = hb(Mb | 0, D | 0, Jb | 0, Kb | 0) | 0
    _a = hb(Kb | 0, D | 0, Da | 0, _a | 0) | 0
    _a = gb(Ib | H | Ca & 2031616 | 0, $a | 0, _a | 0, D | 0) | 0
    $a = D
    Ca = sb(X | 0, 0, _ | 0, zb | 0) | 0
    H = D
    Ib = sb(za | 0, ob | 0, Ab | 0, 0) | 0
    Da = D
    Kb = sb(Bc | 0, A | 0, q | 0, 0) | 0
    Jb = D
    Mb = sb(Ua | 0, 0, u | 0, 0) | 0
    Lb = D
    Ob = sb(t | 0, 0, o | 0, 0) | 0
    Nb = D
    Qb = sb(la | 0, 0, j | 0, 0) | 0
    Pb = D
    Sb = sb(r | 0, 0, Qa | 0, 0) | 0
    Rb = D
    Ub = sb(mb | 0, 0, na | 0, ya | 0) | 0
    Tb = D
    Yb = sb(Z | 0, 0, Na | 0, qb | 0) | 0
    Xb = D
    Wb = sb(Eb | 0, Fb | 0, w | 0, 0) | 0
    Vb = D
    Ya = sb(F | 0, 0, _ | 0, zb | 0) | 0
    ta = D
    pa = sb(X | 0, 0, Ab | 0, 0) | 0
    Za = D
    rb = sb(za | 0, ob | 0, q | 0, 0) | 0
    oa = D
    ea = sb(Bc | 0, A | 0, u | 0, 0) | 0
    tb = D
    Sa = sb(Ua | 0, 0, o | 0, 0) | 0
    l = D
    eb = sb(t | 0, 0, j | 0, 0) | 0
    Ta = D
    ca = sb(la | 0, 0, Qa | 0, 0) | 0
    ib = D
    Wa = sb(r | 0, 0, na | 0, ya | 0) | 0
    da = D
    aa = sb(mb | 0, 0, Na | 0, qb | 0) | 0
    Xa = D
    Gb = sb(Z | 0, 0, w | 0, 0) | 0
    Hb = D
    c = sb(Eb | 0, Fb | 0, Ga | 0, 0) | 0
    c = hb(Gb | 0, Hb | 0, c | 0, D | 0) | 0
    Xa = hb(c | 0, D | 0, aa | 0, Xa | 0) | 0
    da = hb(Xa | 0, D | 0, Wa | 0, da | 0) | 0
    ib = hb(da | 0, D | 0, ca | 0, ib | 0) | 0
    Ta = hb(ib | 0, D | 0, eb | 0, Ta | 0) | 0
    l = hb(Ta | 0, D | 0, Sa | 0, l | 0) | 0
    tb = hb(l | 0, D | 0, ea | 0, tb | 0) | 0
    oa = hb(tb | 0, D | 0, rb | 0, oa | 0) | 0
    Za = hb(oa | 0, D | 0, pa | 0, Za | 0) | 0
    ta = hb(Za | 0, D | 0, Ya | 0, ta | 0) | 0
    ta = gb(sa & 2097151 | 0, 0, ta | 0, D | 0) | 0
    sa = D
    zb = sb(Fa | 0, ha | 0, _ | 0, zb | 0) | 0
    _ = D
    Ya = sb(F | 0, 0, Ab | 0, 0) | 0
    Za = D
    pa = sb(X | 0, 0, q | 0, 0) | 0
    oa = D
    rb = sb(za | 0, ob | 0, u | 0, 0) | 0
    tb = D
    ea = sb(Bc | 0, A | 0, o | 0, 0) | 0
    l = D
    Sa = sb(Ua | 0, 0, j | 0, 0) | 0
    Ta = D
    eb = sb(t | 0, 0, Qa | 0, 0) | 0
    ib = D
    ca = sb(la | 0, 0, na | 0, ya | 0) | 0
    da = D
    Wa = sb(r | 0, 0, Na | 0, qb | 0) | 0
    Xa = D
    aa = sb(mb | 0, 0, w | 0, 0) | 0
    c = D
    Hb = sb(Z | 0, 0, Ga | 0, 0) | 0
    Gb = D
    Fb = sb(Eb | 0, Fb | 0, x | 0, Ha | 0) | 0
    Eb = D
    Ab = sb(Fa | 0, ha | 0, Ab | 0, 0) | 0
    Bb = D
    cb = sb(F | 0, 0, q | 0, 0) | 0
    v = D
    ja = sb(X | 0, 0, u | 0, 0) | 0
    db = D
    Cb = sb(za | 0, ob | 0, o | 0, 0) | 0
    nb = D
    f = sb(Bc | 0, A | 0, j | 0, 0) | 0
    Db = D
    vb = sb(Ua | 0, 0, Qa | 0, 0) | 0
    h = D
    Ra = sb(t | 0, 0, na | 0, ya | 0) | 0
    ub = D
    Pa = sb(la | 0, 0, Na | 0, qb | 0) | 0
    ia = D
    Y = sb(r | 0, 0, w | 0, 0) | 0
    Oa = D
    y = sb(mb | 0, 0, Ga | 0, 0) | 0
    lb = D
    Z = sb(Z | 0, 0, x | 0, Ha | 0) | 0
    Z = hb(y | 0, lb | 0, Z | 0, D | 0) | 0
    Oa = hb(Z | 0, D | 0, Y | 0, Oa | 0) | 0
    ia = hb(Oa | 0, D | 0, Pa | 0, ia | 0) | 0
    ub = hb(ia | 0, D | 0, Ra | 0, ub | 0) | 0
    h = hb(ub | 0, D | 0, vb | 0, h | 0) | 0
    Db = hb(h | 0, D | 0, f | 0, Db | 0) | 0
    nb = hb(Db | 0, D | 0, Cb | 0, nb | 0) | 0
    db = hb(nb | 0, D | 0, ja | 0, db | 0) | 0
    v = hb(db | 0, D | 0, cb | 0, v | 0) | 0
    Bb = hb(v | 0, D | 0, Ab | 0, Bb | 0) | 0
    Ab = D
    q = sb(Fa | 0, ha | 0, q | 0, 0) | 0
    v = D
    cb = sb(F | 0, 0, u | 0, 0) | 0
    db = D
    ja = sb(X | 0, 0, o | 0, 0) | 0
    nb = D
    Cb = sb(za | 0, ob | 0, j | 0, 0) | 0
    Db = D
    f = sb(Bc | 0, A | 0, Qa | 0, 0) | 0
    h = D
    vb = sb(Ua | 0, 0, na | 0, ya | 0) | 0
    ub = D
    Ra = sb(t | 0, 0, Na | 0, qb | 0) | 0
    ia = D
    Pa = sb(la | 0, 0, w | 0, 0) | 0
    Oa = D
    Y = sb(r | 0, 0, Ga | 0, 0) | 0
    Z = D
    mb = sb(mb | 0, 0, x | 0, Ha | 0) | 0
    lb = D
    u = sb(Fa | 0, ha | 0, u | 0, 0) | 0
    y = D
    ab = sb(F | 0, 0, o | 0, 0) | 0
    I = D
    n = sb(X | 0, 0, j | 0, 0) | 0
    bb = D
    ba = sb(za | 0, ob | 0, Qa | 0, 0) | 0
    $ = D
    V = sb(Bc | 0, A | 0, na | 0, ya | 0) | 0
    s = D
    J = sb(Ua | 0, 0, Na | 0, qb | 0) | 0
    U = D
    z = sb(t | 0, 0, w | 0, 0) | 0
    C = D
    b = sb(la | 0, 0, Ga | 0, 0) | 0
    p = D
    r = sb(r | 0, 0, x | 0, Ha | 0) | 0
    r = hb(b | 0, p | 0, r | 0, D | 0) | 0
    C = hb(r | 0, D | 0, z | 0, C | 0) | 0
    U = hb(C | 0, D | 0, J | 0, U | 0) | 0
    s = hb(U | 0, D | 0, V | 0, s | 0) | 0
    $ = hb(s | 0, D | 0, ba | 0, $ | 0) | 0
    bb = hb($ | 0, D | 0, n | 0, bb | 0) | 0
    I = hb(bb | 0, D | 0, ab | 0, I | 0) | 0
    y = hb(I | 0, D | 0, u | 0, y | 0) | 0
    u = D
    o = sb(Fa | 0, ha | 0, o | 0, 0) | 0
    I = D
    ab = sb(F | 0, 0, j | 0, 0) | 0
    bb = D
    n = sb(X | 0, 0, Qa | 0, 0) | 0
    $ = D
    ba = sb(za | 0, ob | 0, na | 0, ya | 0) | 0
    s = D
    V = sb(Bc | 0, A | 0, Na | 0, qb | 0) | 0
    U = D
    J = sb(Ua | 0, 0, w | 0, 0) | 0
    C = D
    z = sb(t | 0, 0, Ga | 0, 0) | 0
    r = D
    la = sb(la | 0, 0, x | 0, Ha | 0) | 0
    p = D
    b = sb(Fa | 0, ha | 0, j | 0, 0) | 0
    j = D
    xb = sb(F | 0, 0, Qa | 0, 0) | 0
    ka = D
    P = sb(X | 0, 0, na | 0, ya | 0) | 0
    wb = D
    m = sb(za | 0, ob | 0, Na | 0, qb | 0) | 0
    O = D
    E = sb(Bc | 0, A | 0, w | 0, 0) | 0
    k = D
    ra = sb(Ua | 0, 0, Ga | 0, 0) | 0
    Va = D
    t = sb(t | 0, 0, x | 0, Ha | 0) | 0
    t = hb(ra | 0, Va | 0, t | 0, D | 0) | 0
    k = hb(t | 0, D | 0, E | 0, k | 0) | 0
    O = hb(k | 0, D | 0, m | 0, O | 0) | 0
    wb = hb(O | 0, D | 0, P | 0, wb | 0) | 0
    ka = hb(wb | 0, D | 0, xb | 0, ka | 0) | 0
    j = hb(ka | 0, D | 0, b | 0, j | 0) | 0
    b = D
    Qa = sb(Fa | 0, ha | 0, Qa | 0, 0) | 0
    ka = D
    xb = sb(F | 0, 0, na | 0, ya | 0) | 0
    wb = D
    P = sb(X | 0, 0, Na | 0, qb | 0) | 0
    O = D
    m = sb(za | 0, ob | 0, w | 0, 0) | 0
    k = D
    E = sb(Bc | 0, A | 0, Ga | 0, 0) | 0
    t = D
    Ua = sb(Ua | 0, 0, x | 0, Ha | 0) | 0
    Va = D
    ya = sb(Fa | 0, ha | 0, na | 0, ya | 0) | 0
    na = D
    ra = sb(F | 0, 0, Na | 0, qb | 0) | 0
    Aa = D
    S = sb(X | 0, 0, w | 0, 0) | 0
    T = D
    Ma = sb(za | 0, ob | 0, Ga | 0, 0) | 0
    Ac = D
    A = sb(Bc | 0, A | 0, x | 0, Ha | 0) | 0
    A = hb(Ma | 0, Ac | 0, A | 0, D | 0) | 0
    T = hb(A | 0, D | 0, S | 0, T | 0) | 0
    Aa = hb(T | 0, D | 0, ra | 0, Aa | 0) | 0
    na = hb(Aa | 0, D | 0, ya | 0, na | 0) | 0
    ya = D
    qb = sb(Fa | 0, ha | 0, Na | 0, qb | 0) | 0
    Na = D
    Aa = sb(F | 0, 0, w | 0, 0) | 0
    ra = D
    T = sb(X | 0, 0, Ga | 0, 0) | 0
    S = D
    ob = sb(za | 0, ob | 0, x | 0, Ha | 0) | 0
    za = D
    w = sb(Fa | 0, ha | 0, w | 0, 0) | 0
    A = D
    Ac = sb(F | 0, 0, Ga | 0, 0) | 0
    Ma = D
    X = sb(X | 0, 0, x | 0, Ha | 0) | 0
    X = hb(Ac | 0, Ma | 0, X | 0, D | 0) | 0
    A = hb(X | 0, D | 0, w | 0, A | 0) | 0
    w = D
    Ga = sb(Fa | 0, ha | 0, Ga | 0, 0) | 0
    X = D
    F = sb(F | 0, 0, x | 0, Ha | 0) | 0
    Ma = D
    Ha = gb(0, 0, x | 0, Ha | 0) | 0
    Ha = sb(Fa | 0, ha | 0, Ha | 0, D | 0) | 0
    ha = D
    Fa = hb(Ea | 0, W | 0, 1048576, 0) | 0
    Fa = fb(Fa | 0, D | 0, 21) | 0
    x = D
    qa = gb(Fa | 0, x | 0, zc | 0, qa | 0) | 0
    Ba = hb(qa | 0, D | 0, Ba & 2097151 | 0, 0) | 0
    qa = D
    x = kb(Fa | 0, x | 0, 21) | 0
    x = gb(Ea | 0, W | 0, x | 0, D | 0) | 0
    W = D
    Ea = hb(Ja | 0, Ia | 0, 1048576, 0) | 0
    Ea = fb(Ea | 0, D | 0, 21) | 0
    Fa = D
    vc = hb(yc | 0, xc | 0, wc | 0, vc | 0) | 0
    va = hb(vc | 0, D | 0, uc | 0, va | 0) | 0
    ma = hb(va | 0, D | 0, ua | 0, ma | 0) | 0
    ma = gb(Ea | 0, Fa | 0, ma | 0, D | 0) | 0
    pb = hb(ma | 0, D | 0, pb & 2097151 | 0, 0) | 0
    ma = D
    Fa = kb(Ea | 0, Fa | 0, 21) | 0
    Ea = D
    ua = hb(xa | 0, wa | 0, 1048576, 0) | 0
    ua = fb(ua | 0, D | 0, 21) | 0
    va = D
    qc = hb(tc | 0, sc | 0, rc | 0, qc | 0) | 0
    oc = hb(qc | 0, D | 0, pc | 0, oc | 0) | 0
    mc = hb(oc | 0, D | 0, nc | 0, mc | 0) | 0
    Ka = hb(mc | 0, D | 0, lc | 0, Ka | 0) | 0
    Q = hb(Ka | 0, D | 0, La | 0, Q | 0) | 0
    Q = gb(R & 2097151 | 0, 0, Q | 0, D | 0) | 0
    Q = hb(Q | 0, D | 0, ua | 0, va | 0) | 0
    R = D
    va = kb(ua | 0, va | 0, 21) | 0
    ua = D
    La = hb(K | 0, L | 0, 1048576, 0) | 0
    La = fb(La | 0, D | 0, 21) | 0
    Ka = D
    hc = hb(kc | 0, jc | 0, ic | 0, hc | 0) | 0
    fc = hb(hc | 0, D | 0, gc | 0, fc | 0) | 0
    dc = hb(fc | 0, D | 0, ec | 0, dc | 0) | 0
    bc = hb(dc | 0, D | 0, cc | 0, bc | 0) | 0
    $b = hb(bc | 0, D | 0, ac | 0, $b | 0) | 0
    Zb = hb($b | 0, D | 0, _b | 0, Zb | 0) | 0
    g = hb(Zb | 0, D | 0, N | 0, g | 0) | 0
    g = gb(M | 0, B | 0, g | 0, D | 0) | 0
    g = hb(g | 0, D | 0, La | 0, Ka | 0) | 0
    B = D
    Ka = kb(La | 0, Ka | 0, 21) | 0
    La = D
    M = hb(_a | 0, $a | 0, 1048576, 0) | 0
    M = fb(M | 0, D | 0, 21) | 0
    N = D
    Vb = hb(Yb | 0, Xb | 0, Wb | 0, Vb | 0) | 0
    Tb = hb(Vb | 0, D | 0, Ub | 0, Tb | 0) | 0
    Rb = hb(Tb | 0, D | 0, Sb | 0, Rb | 0) | 0
    Pb = hb(Rb | 0, D | 0, Qb | 0, Pb | 0) | 0
    Nb = hb(Pb | 0, D | 0, Ob | 0, Nb | 0) | 0
    Lb = hb(Nb | 0, D | 0, Mb | 0, Lb | 0) | 0
    Jb = hb(Lb | 0, D | 0, Kb | 0, Jb | 0) | 0
    Da = hb(Jb | 0, D | 0, Ib | 0, Da | 0) | 0
    H = hb(Da | 0, D | 0, Ca | 0, H | 0) | 0
    H = gb(M | 0, N | 0, H | 0, D | 0) | 0
    G = hb(H | 0, D | 0, G & 2097151 | 0, 0) | 0
    H = D
    N = kb(M | 0, N | 0, 21) | 0
    M = D
    Ca = hb(ta | 0, sa | 0, 1048576, 0) | 0
    Ca = fb(Ca | 0, D | 0, 21) | 0
    Da = D
    Eb = hb(Hb | 0, Gb | 0, Fb | 0, Eb | 0) | 0
    c = hb(Eb | 0, D | 0, aa | 0, c | 0) | 0
    Xa = hb(c | 0, D | 0, Wa | 0, Xa | 0) | 0
    da = hb(Xa | 0, D | 0, ca | 0, da | 0) | 0
    ib = hb(da | 0, D | 0, eb | 0, ib | 0) | 0
    Ta = hb(ib | 0, D | 0, Sa | 0, Ta | 0) | 0
    l = hb(Ta | 0, D | 0, ea | 0, l | 0) | 0
    tb = hb(l | 0, D | 0, rb | 0, tb | 0) | 0
    oa = hb(tb | 0, D | 0, pa | 0, oa | 0) | 0
    Za = hb(oa | 0, D | 0, Ya | 0, Za | 0) | 0
    _ = hb(Za | 0, D | 0, zb | 0, _ | 0) | 0
    _ = gb(yb | 0, d | 0, _ | 0, D | 0) | 0
    _ = hb(_ | 0, D | 0, Ca | 0, Da | 0) | 0
    d = D
    Da = kb(Ca | 0, Da | 0, 21) | 0
    Ca = D
    yb = gb(1048576, 0, Bb | 0, Ab | 0) | 0
    yb = fb(yb | 0, D | 0, 21) | 0
    zb = D
    lb = hb(Y | 0, Z | 0, mb | 0, lb | 0) | 0
    Oa = hb(lb | 0, D | 0, Pa | 0, Oa | 0) | 0
    ia = hb(Oa | 0, D | 0, Ra | 0, ia | 0) | 0
    ub = hb(ia | 0, D | 0, vb | 0, ub | 0) | 0
    h = hb(ub | 0, D | 0, f | 0, h | 0) | 0
    Db = hb(h | 0, D | 0, Cb | 0, Db | 0) | 0
    nb = hb(Db | 0, D | 0, ja | 0, nb | 0) | 0
    db = hb(nb | 0, D | 0, cb | 0, db | 0) | 0
    v = hb(db | 0, D | 0, q | 0, v | 0) | 0
    v = gb(yb | 0, zb | 0, v | 0, D | 0) | 0
    q = D
    zb = kb(yb | 0, zb | 0, 21) | 0
    yb = D
    db = gb(1048576, 0, y | 0, u | 0) | 0
    db = fb(db | 0, D | 0, 21) | 0
    cb = D
    p = hb(z | 0, r | 0, la | 0, p | 0) | 0
    C = hb(p | 0, D | 0, J | 0, C | 0) | 0
    U = hb(C | 0, D | 0, V | 0, U | 0) | 0
    s = hb(U | 0, D | 0, ba | 0, s | 0) | 0
    $ = hb(s | 0, D | 0, n | 0, $ | 0) | 0
    bb = hb($ | 0, D | 0, ab | 0, bb | 0) | 0
    I = hb(bb | 0, D | 0, o | 0, I | 0) | 0
    I = gb(db | 0, cb | 0, I | 0, D | 0) | 0
    o = D
    cb = kb(db | 0, cb | 0, 21) | 0
    db = D
    bb = gb(1048576, 0, j | 0, b | 0) | 0
    bb = fb(bb | 0, D | 0, 21) | 0
    ab = D
    Va = hb(E | 0, t | 0, Ua | 0, Va | 0) | 0
    k = hb(Va | 0, D | 0, m | 0, k | 0) | 0
    O = hb(k | 0, D | 0, P | 0, O | 0) | 0
    wb = hb(O | 0, D | 0, xb | 0, wb | 0) | 0
    ka = hb(wb | 0, D | 0, Qa | 0, ka | 0) | 0
    ka = gb(bb | 0, ab | 0, ka | 0, D | 0) | 0
    Qa = D
    ab = kb(bb | 0, ab | 0, 21) | 0
    bb = D
    wb = gb(1048576, 0, na | 0, ya | 0) | 0
    wb = fb(wb | 0, D | 0, 21) | 0
    xb = D
    za = hb(T | 0, S | 0, ob | 0, za | 0) | 0
    ra = hb(za | 0, D | 0, Aa | 0, ra | 0) | 0
    Na = hb(ra | 0, D | 0, qb | 0, Na | 0) | 0
    Na = gb(wb | 0, xb | 0, Na | 0, D | 0) | 0
    qb = D
    xb = kb(wb | 0, xb | 0, 21) | 0
    ya = hb(xb | 0, D | 0, na | 0, ya | 0) | 0
    na = D
    xb = gb(1048576, 0, A | 0, w | 0) | 0
    xb = fb(xb | 0, D | 0, 21) | 0
    wb = D
    Ma = hb(Ga | 0, X | 0, F | 0, Ma | 0) | 0
    Ma = gb(xb | 0, wb | 0, Ma | 0, D | 0) | 0
    F = D
    wb = kb(xb | 0, wb | 0, 21) | 0
    w = hb(wb | 0, D | 0, A | 0, w | 0) | 0
    A = D
    wb = hb(Ha | 0, ha | 0, 1048576, 0) | 0
    wb = fb(wb | 0, D | 0, 21) | 0
    xb = D
    X = kb(wb | 0, xb | 0, 21) | 0
    X = gb(Ha | 0, ha | 0, X | 0, D | 0) | 0
    ha = D
    Ha = hb(Ba | 0, qa | 0, 1048576, 0) | 0
    Ha = fb(Ha | 0, D | 0, 21) | 0
    Ga = D
    ra = kb(Ha | 0, Ga | 0, 21) | 0
    ra = gb(Ba | 0, qa | 0, ra | 0, D | 0) | 0
    qa = D
    Ba = hb(pb | 0, ma | 0, 1048576, 0) | 0
    Ba = fb(Ba | 0, D | 0, 21) | 0
    Aa = D
    za = kb(Ba | 0, Aa | 0, 21) | 0
    za = gb(pb | 0, ma | 0, za | 0, D | 0) | 0
    ma = D
    pb = hb(Q | 0, R | 0, 1048576, 0) | 0
    pb = fb(pb | 0, D | 0, 21) | 0
    ob = D
    S = kb(pb | 0, ob | 0, 21) | 0
    T = D
    O = hb(g | 0, B | 0, 1048576, 0) | 0
    O = fb(O | 0, D | 0, 21) | 0
    P = D
    k = kb(O | 0, P | 0, 21) | 0
    m = D
    Va = hb(G | 0, H | 0, 1048576, 0) | 0
    Va = fb(Va | 0, D | 0, 21) | 0
    Ua = D
    t = kb(Va | 0, Ua | 0, 21) | 0
    E = D
    $ = hb(_ | 0, d | 0, 1048576, 0) | 0
    $ = fb($ | 0, D | 0, 21) | 0
    n = D
    s = kb($ | 0, n | 0, 21) | 0
    ba = D
    U = hb(v | 0, q | 0, 1048576, 0) | 0
    U = fb(U | 0, D | 0, 21) | 0
    V = D
    C = kb(U | 0, V | 0, 21) | 0
    J = D
    p = hb(I | 0, o | 0, 1048576, 0) | 0
    p = fb(p | 0, D | 0, 21) | 0
    la = D
    r = kb(p | 0, la | 0, 21) | 0
    z = D
    nb = hb(ka | 0, Qa | 0, 1048576, 0) | 0
    nb = fb(nb | 0, D | 0, 21) | 0
    ja = D
    na = gb(nb | 0, ja | 0, ya | 0, na | 0) | 0
    ya = D
    ja = kb(nb | 0, ja | 0, 21) | 0
    ja = gb(ka | 0, Qa | 0, ja | 0, D | 0) | 0
    Qa = D
    ka = hb(Na | 0, qb | 0, 1048576, 0) | 0
    ka = fb(ka | 0, D | 0, 21) | 0
    nb = D
    A = gb(ka | 0, nb | 0, w | 0, A | 0) | 0
    w = D
    nb = kb(ka | 0, nb | 0, 21) | 0
    nb = gb(Na | 0, qb | 0, nb | 0, D | 0) | 0
    qb = D
    Na = hb(Ma | 0, F | 0, 1048576, 0) | 0
    Na = fb(Na | 0, D | 0, 21) | 0
    ka = D
    ha = hb(Na | 0, ka | 0, X | 0, ha | 0) | 0
    X = D
    ka = kb(Na | 0, ka | 0, 21) | 0
    ka = gb(Ma | 0, F | 0, ka | 0, D | 0) | 0
    F = D
    Ma = sb(wb | 0, xb | 0, 666643, 0) | 0
    Na = D
    Db = sb(wb | 0, xb | 0, 470296, 0) | 0
    Cb = D
    h = sb(wb | 0, xb | 0, 654183, 0) | 0
    f = D
    ub = sb(wb | 0, xb | 0, -997805, -1) | 0
    vb = D
    ia = sb(wb | 0, xb | 0, 136657, 0) | 0
    Ra = D
    xb = sb(wb | 0, xb | 0, -683901, -1) | 0
    b = gb(xb | 0, D | 0, j | 0, b | 0) | 0
    bb = gb(b | 0, D | 0, ab | 0, bb | 0) | 0
    la = hb(bb | 0, D | 0, p | 0, la | 0) | 0
    p = D
    bb = sb(ha | 0, X | 0, 666643, 0) | 0
    ab = D
    b = sb(ha | 0, X | 0, 470296, 0) | 0
    j = D
    xb = sb(ha | 0, X | 0, 654183, 0) | 0
    wb = D
    Oa = sb(ha | 0, X | 0, -997805, -1) | 0
    Pa = D
    lb = sb(ha | 0, X | 0, 136657, 0) | 0
    mb = D
    X = sb(ha | 0, X | 0, -683901, -1) | 0
    ha = D
    Z = sb(ka | 0, F | 0, 666643, 0) | 0
    Y = D
    Za = sb(ka | 0, F | 0, 470296, 0) | 0
    Ya = D
    oa = sb(ka | 0, F | 0, 654183, 0) | 0
    pa = D
    tb = sb(ka | 0, F | 0, -997805, -1) | 0
    rb = D
    l = sb(ka | 0, F | 0, 136657, 0) | 0
    ea = D
    F = sb(ka | 0, F | 0, -683901, -1) | 0
    ka = D
    u = gb(ub | 0, vb | 0, y | 0, u | 0) | 0
    db = gb(u | 0, D | 0, cb | 0, db | 0) | 0
    V = hb(db | 0, D | 0, U | 0, V | 0) | 0
    mb = hb(V | 0, D | 0, lb | 0, mb | 0) | 0
    ka = hb(mb | 0, D | 0, F | 0, ka | 0) | 0
    F = D
    mb = sb(A | 0, w | 0, 666643, 0) | 0
    lb = D
    V = sb(A | 0, w | 0, 470296, 0) | 0
    U = D
    db = sb(A | 0, w | 0, 654183, 0) | 0
    cb = D
    u = sb(A | 0, w | 0, -997805, -1) | 0
    y = D
    vb = sb(A | 0, w | 0, 136657, 0) | 0
    ub = D
    w = sb(A | 0, w | 0, -683901, -1) | 0
    A = D
    Ta = sb(nb | 0, qb | 0, 666643, 0) | 0
    Sa = D
    ib = sb(nb | 0, qb | 0, 470296, 0) | 0
    eb = D
    da = sb(nb | 0, qb | 0, 654183, 0) | 0
    ca = D
    Xa = sb(nb | 0, qb | 0, -997805, -1) | 0
    Wa = D
    c = sb(nb | 0, qb | 0, 136657, 0) | 0
    aa = D
    qb = sb(nb | 0, qb | 0, -683901, -1) | 0
    nb = D
    Ab = gb(Db | 0, Cb | 0, Bb | 0, Ab | 0) | 0
    yb = gb(Ab | 0, D | 0, zb | 0, yb | 0) | 0
    wb = hb(yb | 0, D | 0, xb | 0, wb | 0) | 0
    ub = hb(wb | 0, D | 0, vb | 0, ub | 0) | 0
    rb = hb(ub | 0, D | 0, tb | 0, rb | 0) | 0
    nb = hb(rb | 0, D | 0, qb | 0, nb | 0) | 0
    n = hb(nb | 0, D | 0, $ | 0, n | 0) | 0
    $ = D
    nb = sb(na | 0, ya | 0, 666643, 0) | 0
    nb = hb(pb | 0, ob | 0, nb | 0, D | 0) | 0
    L = hb(nb | 0, D | 0, K | 0, L | 0) | 0
    La = gb(L | 0, D | 0, Ka | 0, La | 0) | 0
    Ka = D
    L = sb(na | 0, ya | 0, 470296, 0) | 0
    K = D
    nb = sb(na | 0, ya | 0, 654183, 0) | 0
    lb = hb(nb | 0, D | 0, mb | 0, lb | 0) | 0
    eb = hb(lb | 0, D | 0, ib | 0, eb | 0) | 0
    $a = hb(eb | 0, D | 0, _a | 0, $a | 0) | 0
    P = hb($a | 0, D | 0, O | 0, P | 0) | 0
    M = gb(P | 0, D | 0, N | 0, M | 0) | 0
    N = D
    P = sb(na | 0, ya | 0, -997805, -1) | 0
    O = D
    $a = sb(na | 0, ya | 0, 136657, 0) | 0
    _a = D
    ab = hb(db | 0, cb | 0, bb | 0, ab | 0) | 0
    _a = hb(ab | 0, D | 0, $a | 0, _a | 0) | 0
    Ya = hb(_a | 0, D | 0, Za | 0, Ya | 0) | 0
    Wa = hb(Ya | 0, D | 0, Xa | 0, Wa | 0) | 0
    Ua = hb(Wa | 0, D | 0, Va | 0, Ua | 0) | 0
    sa = hb(Ua | 0, D | 0, ta | 0, sa | 0) | 0
    Ca = gb(sa | 0, D | 0, Da | 0, Ca | 0) | 0
    Da = D
    ya = sb(na | 0, ya | 0, -683901, -1) | 0
    na = D
    sa = hb(La | 0, Ka | 0, 1048576, 0) | 0
    sa = fb(sa | 0, D | 0, 21) | 0
    ta = D
    K = hb(Ta | 0, Sa | 0, L | 0, K | 0) | 0
    B = hb(K | 0, D | 0, g | 0, B | 0) | 0
    m = gb(B | 0, D | 0, k | 0, m | 0) | 0
    m = hb(m | 0, D | 0, sa | 0, ta | 0) | 0
    k = D
    ta = kb(sa | 0, ta | 0, 21) | 0
    sa = D
    B = hb(M | 0, N | 0, 1048576, 0) | 0
    B = fb(B | 0, D | 0, 21) | 0
    g = D
    U = hb(P | 0, O | 0, V | 0, U | 0) | 0
    Y = hb(U | 0, D | 0, Z | 0, Y | 0) | 0
    ca = hb(Y | 0, D | 0, da | 0, ca | 0) | 0
    H = hb(ca | 0, D | 0, G | 0, H | 0) | 0
    H = hb(H | 0, D | 0, B | 0, g | 0) | 0
    E = gb(H | 0, D | 0, t | 0, E | 0) | 0
    t = D
    g = kb(B | 0, g | 0, 21) | 0
    B = D
    H = hb(Ca | 0, Da | 0, 1048576, 0) | 0
    H = fb(H | 0, D | 0, 21) | 0
    G = D
    Na = hb(b | 0, j | 0, Ma | 0, Na | 0) | 0
    y = hb(Na | 0, D | 0, u | 0, y | 0) | 0
    na = hb(y | 0, D | 0, ya | 0, na | 0) | 0
    pa = hb(na | 0, D | 0, oa | 0, pa | 0) | 0
    aa = hb(pa | 0, D | 0, c | 0, aa | 0) | 0
    d = hb(aa | 0, D | 0, _ | 0, d | 0) | 0
    d = hb(d | 0, D | 0, H | 0, G | 0) | 0
    ba = gb(d | 0, D | 0, s | 0, ba | 0) | 0
    s = D
    G = kb(H | 0, G | 0, 21) | 0
    H = D
    d = hb(n | 0, $ | 0, 1048576, 0) | 0
    d = fb(d | 0, D | 0, 21) | 0
    _ = D
    f = hb(v | 0, q | 0, h | 0, f | 0) | 0
    J = gb(f | 0, D | 0, C | 0, J | 0) | 0
    Pa = hb(J | 0, D | 0, Oa | 0, Pa | 0) | 0
    A = hb(Pa | 0, D | 0, w | 0, A | 0) | 0
    ea = hb(A | 0, D | 0, l | 0, ea | 0) | 0
    ea = hb(ea | 0, D | 0, d | 0, _ | 0) | 0
    l = D
    _ = kb(d | 0, _ | 0, 21) | 0
    _ = gb(n | 0, $ | 0, _ | 0, D | 0) | 0
    $ = D
    n = hb(ka | 0, F | 0, 1048576, 0) | 0
    n = fb(n | 0, D | 0, 21) | 0
    d = D
    Ra = hb(I | 0, o | 0, ia | 0, Ra | 0) | 0
    z = gb(Ra | 0, D | 0, r | 0, z | 0) | 0
    ha = hb(z | 0, D | 0, X | 0, ha | 0) | 0
    ha = hb(ha | 0, D | 0, n | 0, d | 0) | 0
    X = D
    d = kb(n | 0, d | 0, 21) | 0
    d = gb(ka | 0, F | 0, d | 0, D | 0) | 0
    F = D
    ka = hb(la | 0, p | 0, 1048576, 0) | 0
    ka = fb(ka | 0, D | 0, 21) | 0
    n = D
    Qa = hb(ka | 0, n | 0, ja | 0, Qa | 0) | 0
    ja = D
    n = kb(ka | 0, n | 0, 21) | 0
    n = gb(la | 0, p | 0, n | 0, D | 0) | 0
    p = D
    la = hb(m | 0, k | 0, 1048576, 0) | 0
    la = fb(la | 0, D | 0, 21) | 0
    ka = D
    z = kb(la | 0, ka | 0, 21) | 0
    r = D
    Ra = hb(E | 0, t | 0, 1048576, 0) | 0
    Ra = fb(Ra | 0, D | 0, 21) | 0
    ia = D
    o = kb(Ra | 0, ia | 0, 21) | 0
    I = D
    A = hb(ba | 0, s | 0, 1048576, 0) | 0
    A = fb(A | 0, D | 0, 21) | 0
    w = D
    $ = hb(_ | 0, $ | 0, A | 0, w | 0) | 0
    _ = D
    w = kb(A | 0, w | 0, 21) | 0
    w = gb(ba | 0, s | 0, w | 0, D | 0) | 0
    s = D
    ba = hb(ea | 0, l | 0, 1048576, 0) | 0
    ba = fb(ba | 0, D | 0, 21) | 0
    A = D
    F = hb(ba | 0, A | 0, d | 0, F | 0) | 0
    d = D
    A = kb(ba | 0, A | 0, 21) | 0
    A = gb(ea | 0, l | 0, A | 0, D | 0) | 0
    l = D
    ea = hb(ha | 0, X | 0, 1048576, 0) | 0
    ea = fb(ea | 0, D | 0, 21) | 0
    ba = D
    p = hb(ea | 0, ba | 0, n | 0, p | 0) | 0
    n = D
    ba = kb(ea | 0, ba | 0, 21) | 0
    ba = gb(ha | 0, X | 0, ba | 0, D | 0) | 0
    X = D
    ha = sb(Qa | 0, ja | 0, 666643, 0) | 0
    ea = D
    Pa = sb(Qa | 0, ja | 0, 470296, 0) | 0
    Oa = D
    J = sb(Qa | 0, ja | 0, 654183, 0) | 0
    C = D
    f = sb(Qa | 0, ja | 0, -997805, -1) | 0
    h = D
    q = sb(Qa | 0, ja | 0, 136657, 0) | 0
    v = D
    ja = sb(Qa | 0, ja | 0, -683901, -1) | 0
    ja = hb(Ra | 0, ia | 0, ja | 0, D | 0) | 0
    Da = hb(ja | 0, D | 0, Ca | 0, Da | 0) | 0
    H = gb(Da | 0, D | 0, G | 0, H | 0) | 0
    G = D
    Da = sb(p | 0, n | 0, 666643, 0) | 0
    Ca = D
    ja = sb(p | 0, n | 0, 470296, 0) | 0
    ia = D
    Ra = sb(p | 0, n | 0, 654183, 0) | 0
    Qa = D
    aa = sb(p | 0, n | 0, -997805, -1) | 0
    c = D
    pa = sb(p | 0, n | 0, 136657, 0) | 0
    oa = D
    n = sb(p | 0, n | 0, -683901, -1) | 0
    p = D
    na = sb(ba | 0, X | 0, 666643, 0) | 0
    na = hb(za | 0, ma | 0, na | 0, D | 0) | 0
    ma = D
    za = sb(ba | 0, X | 0, 470296, 0) | 0
    ya = D
    y = sb(ba | 0, X | 0, 654183, 0) | 0
    u = D
    Na = sb(ba | 0, X | 0, -997805, -1) | 0
    Ma = D
    j = sb(ba | 0, X | 0, 136657, 0) | 0
    b = D
    X = sb(ba | 0, X | 0, -683901, -1) | 0
    ba = D
    h = hb(pa | 0, oa | 0, f | 0, h | 0) | 0
    ba = hb(h | 0, D | 0, X | 0, ba | 0) | 0
    N = hb(ba | 0, D | 0, M | 0, N | 0) | 0
    ka = hb(N | 0, D | 0, la | 0, ka | 0) | 0
    B = gb(ka | 0, D | 0, g | 0, B | 0) | 0
    g = D
    ka = sb(F | 0, d | 0, 666643, 0) | 0
    la = D
    N = sb(F | 0, d | 0, 470296, 0) | 0
    M = D
    ba = sb(F | 0, d | 0, 654183, 0) | 0
    X = D
    h = sb(F | 0, d | 0, -997805, -1) | 0
    f = D
    oa = sb(F | 0, d | 0, 136657, 0) | 0
    pa = D
    d = sb(F | 0, d | 0, -683901, -1) | 0
    F = D
    ca = sb(A | 0, l | 0, 666643, 0) | 0
    da = D
    Y = sb(A | 0, l | 0, 470296, 0) | 0
    Z = D
    U = sb(A | 0, l | 0, 654183, 0) | 0
    V = D
    O = sb(A | 0, l | 0, -997805, -1) | 0
    P = D
    K = sb(A | 0, l | 0, 136657, 0) | 0
    L = D
    l = sb(A | 0, l | 0, -683901, -1) | 0
    A = D
    Oa = hb(Ra | 0, Qa | 0, Pa | 0, Oa | 0) | 0
    Ma = hb(Oa | 0, D | 0, Na | 0, Ma | 0) | 0
    Ka = hb(Ma | 0, D | 0, La | 0, Ka | 0) | 0
    sa = gb(Ka | 0, D | 0, ta | 0, sa | 0) | 0
    pa = hb(sa | 0, D | 0, oa | 0, pa | 0) | 0
    A = hb(pa | 0, D | 0, l | 0, A | 0) | 0
    l = D
    pa = sb($ | 0, _ | 0, 666643, 0) | 0
    W = hb(pa | 0, D | 0, x | 0, W | 0) | 0
    x = D
    pa = sb($ | 0, _ | 0, 470296, 0) | 0
    oa = D
    sa = sb($ | 0, _ | 0, 654183, 0) | 0
    ta = D
    Ga = hb(Ja | 0, Ia | 0, Ha | 0, Ga | 0) | 0
    Ea = gb(Ga | 0, D | 0, Fa | 0, Ea | 0) | 0
    ta = hb(Ea | 0, D | 0, sa | 0, ta | 0) | 0
    la = hb(ta | 0, D | 0, ka | 0, la | 0) | 0
    Z = hb(la | 0, D | 0, Y | 0, Z | 0) | 0
    Y = D
    la = sb($ | 0, _ | 0, -997805, -1) | 0
    ka = D
    ta = sb($ | 0, _ | 0, 136657, 0) | 0
    sa = D
    Aa = hb(Da | 0, Ca | 0, Ba | 0, Aa | 0) | 0
    ya = hb(Aa | 0, D | 0, za | 0, ya | 0) | 0
    wa = hb(ya | 0, D | 0, xa | 0, wa | 0) | 0
    ua = gb(wa | 0, D | 0, va | 0, ua | 0) | 0
    sa = hb(ua | 0, D | 0, ta | 0, sa | 0) | 0
    X = hb(sa | 0, D | 0, ba | 0, X | 0) | 0
    P = hb(X | 0, D | 0, O | 0, P | 0) | 0
    O = D
    _ = sb($ | 0, _ | 0, -683901, -1) | 0
    $ = D
    X = hb(W | 0, x | 0, 1048576, 0) | 0
    X = fb(X | 0, D | 0, 21) | 0
    ba = D
    oa = hb(ra | 0, qa | 0, pa | 0, oa | 0) | 0
    da = hb(oa | 0, D | 0, ca | 0, da | 0) | 0
    da = hb(da | 0, D | 0, X | 0, ba | 0) | 0
    ca = D
    ba = kb(X | 0, ba | 0, 21) | 0
    ba = gb(W | 0, x | 0, ba | 0, D | 0) | 0
    x = D
    W = hb(Z | 0, Y | 0, 1048576, 0) | 0
    W = fb(W | 0, D | 0, 21) | 0
    X = D
    ka = hb(na | 0, ma | 0, la | 0, ka | 0) | 0
    M = hb(ka | 0, D | 0, N | 0, M | 0) | 0
    V = hb(M | 0, D | 0, U | 0, V | 0) | 0
    V = hb(V | 0, D | 0, W | 0, X | 0) | 0
    U = D
    X = kb(W | 0, X | 0, 21) | 0
    W = D
    M = hb(P | 0, O | 0, 1048576, 0) | 0
    M = fb(M | 0, D | 0, 21) | 0
    N = D
    ea = hb(ja | 0, ia | 0, ha | 0, ea | 0) | 0
    u = hb(ea | 0, D | 0, y | 0, u | 0) | 0
    R = hb(u | 0, D | 0, Q | 0, R | 0) | 0
    T = gb(R | 0, D | 0, S | 0, T | 0) | 0
    $ = hb(T | 0, D | 0, _ | 0, $ | 0) | 0
    f = hb($ | 0, D | 0, h | 0, f | 0) | 0
    L = hb(f | 0, D | 0, K | 0, L | 0) | 0
    L = hb(L | 0, D | 0, M | 0, N | 0) | 0
    K = D
    N = kb(M | 0, N | 0, 21) | 0
    M = D
    f = hb(A | 0, l | 0, 1048576, 0) | 0
    f = fb(f | 0, D | 0, 21) | 0
    h = D
    C = hb(aa | 0, c | 0, J | 0, C | 0) | 0
    b = hb(C | 0, D | 0, j | 0, b | 0) | 0
    k = hb(b | 0, D | 0, m | 0, k | 0) | 0
    r = gb(k | 0, D | 0, z | 0, r | 0) | 0
    F = hb(r | 0, D | 0, d | 0, F | 0) | 0
    F = hb(F | 0, D | 0, f | 0, h | 0) | 0
    d = D
    h = kb(f | 0, h | 0, 21) | 0
    h = gb(A | 0, l | 0, h | 0, D | 0) | 0
    l = D
    A = hb(B | 0, g | 0, 1048576, 0) | 0
    A = fb(A | 0, D | 0, 21) | 0
    f = D
    v = hb(n | 0, p | 0, q | 0, v | 0) | 0
    t = hb(v | 0, D | 0, E | 0, t | 0) | 0
    t = hb(t | 0, D | 0, A | 0, f | 0) | 0
    I = gb(t | 0, D | 0, o | 0, I | 0) | 0
    o = D
    f = kb(A | 0, f | 0, 21) | 0
    f = gb(B | 0, g | 0, f | 0, D | 0) | 0
    g = D
    B = hb(H | 0, G | 0, 1048576, 0) | 0
    B = fb(B | 0, D | 0, 21) | 0
    A = D
    s = hb(w | 0, s | 0, B | 0, A | 0) | 0
    w = D
    A = kb(B | 0, A | 0, 21) | 0
    B = D
    t = hb(da | 0, ca | 0, 1048576, 0) | 0
    t = fb(t | 0, D | 0, 21) | 0
    E = D
    v = kb(t | 0, E | 0, 21) | 0
    q = D
    p = hb(V | 0, U | 0, 1048576, 0) | 0
    p = fb(p | 0, D | 0, 21) | 0
    n = D
    r = kb(p | 0, n | 0, 21) | 0
    z = D
    k = hb(L | 0, K | 0, 1048576, 0) | 0
    k = fb(k | 0, D | 0, 21) | 0
    m = D
    l = hb(h | 0, l | 0, k | 0, m | 0) | 0
    h = D
    m = kb(k | 0, m | 0, 21) | 0
    k = D
    b = hb(F | 0, d | 0, 1048576, 0) | 0
    b = fb(b | 0, D | 0, 21) | 0
    j = D
    g = hb(f | 0, g | 0, b | 0, j | 0) | 0
    f = D
    j = kb(b | 0, j | 0, 21) | 0
    j = gb(F | 0, d | 0, j | 0, D | 0) | 0
    d = D
    F = hb(I | 0, o | 0, 1048576, 0) | 0
    F = fb(F | 0, D | 0, 21) | 0
    b = D
    C = kb(F | 0, b | 0, 21) | 0
    C = gb(I | 0, o | 0, C | 0, D | 0) | 0
    o = D
    I = hb(s | 0, w | 0, 1048576, 0) | 0
    I = fb(I | 0, D | 0, 21) | 0
    J = D
    c = kb(I | 0, J | 0, 21) | 0
    c = gb(s | 0, w | 0, c | 0, D | 0) | 0
    w = D
    s = sb(I | 0, J | 0, 666643, 0) | 0
    s = hb(ba | 0, x | 0, s | 0, D | 0) | 0
    x = D
    ba = sb(I | 0, J | 0, 470296, 0) | 0
    aa = D
    $ = sb(I | 0, J | 0, 654183, 0) | 0
    _ = D
    T = sb(I | 0, J | 0, -997805, -1) | 0
    S = D
    R = sb(I | 0, J | 0, 136657, 0) | 0
    Q = D
    J = sb(I | 0, J | 0, -683901, -1) | 0
    I = D
    u = fb(s | 0, x | 0, 21) | 0
    y = D
    aa = hb(da | 0, ca | 0, ba | 0, aa | 0) | 0
    q = gb(aa | 0, D | 0, v | 0, q | 0) | 0
    q = hb(q | 0, D | 0, u | 0, y | 0) | 0
    v = D
    y = kb(u | 0, y | 0, 21) | 0
    y = gb(s | 0, x | 0, y | 0, D | 0) | 0
    x = D
    s = fb(q | 0, v | 0, 21) | 0
    u = D
    Y = hb($ | 0, _ | 0, Z | 0, Y | 0) | 0
    W = gb(Y | 0, D | 0, X | 0, W | 0) | 0
    E = hb(W | 0, D | 0, t | 0, E | 0) | 0
    E = hb(E | 0, D | 0, s | 0, u | 0) | 0
    t = D
    u = kb(s | 0, u | 0, 21) | 0
    u = gb(q | 0, v | 0, u | 0, D | 0) | 0
    v = D
    q = fb(E | 0, t | 0, 21) | 0
    s = D
    S = hb(V | 0, U | 0, T | 0, S | 0) | 0
    z = gb(S | 0, D | 0, r | 0, z | 0) | 0
    z = hb(z | 0, D | 0, q | 0, s | 0) | 0
    r = D
    s = kb(q | 0, s | 0, 21) | 0
    s = gb(E | 0, t | 0, s | 0, D | 0) | 0
    t = D
    E = fb(z | 0, r | 0, 21) | 0
    q = D
    O = hb(R | 0, Q | 0, P | 0, O | 0) | 0
    M = gb(O | 0, D | 0, N | 0, M | 0) | 0
    n = hb(M | 0, D | 0, p | 0, n | 0) | 0
    n = hb(n | 0, D | 0, E | 0, q | 0) | 0
    p = D
    q = kb(E | 0, q | 0, 21) | 0
    q = gb(z | 0, r | 0, q | 0, D | 0) | 0
    r = D
    z = fb(n | 0, p | 0, 21) | 0
    E = D
    I = hb(L | 0, K | 0, J | 0, I | 0) | 0
    k = gb(I | 0, D | 0, m | 0, k | 0) | 0
    k = hb(k | 0, D | 0, z | 0, E | 0) | 0
    m = D
    E = kb(z | 0, E | 0, 21) | 0
    E = gb(n | 0, p | 0, E | 0, D | 0) | 0
    p = D
    n = fb(k | 0, m | 0, 21) | 0
    z = D
    h = hb(l | 0, h | 0, n | 0, z | 0) | 0
    l = D
    z = kb(n | 0, z | 0, 21) | 0
    z = gb(k | 0, m | 0, z | 0, D | 0) | 0
    m = D
    k = fb(h | 0, l | 0, 21) | 0
    n = D
    d = hb(k | 0, n | 0, j | 0, d | 0) | 0
    j = D
    n = kb(k | 0, n | 0, 21) | 0
    n = gb(h | 0, l | 0, n | 0, D | 0) | 0
    l = D
    h = fb(d | 0, j | 0, 21) | 0
    k = D
    f = hb(g | 0, f | 0, h | 0, k | 0) | 0
    g = D
    k = kb(h | 0, k | 0, 21) | 0
    k = gb(d | 0, j | 0, k | 0, D | 0) | 0
    j = D
    d = fb(f | 0, g | 0, 21) | 0
    h = D
    o = hb(d | 0, h | 0, C | 0, o | 0) | 0
    C = D
    h = kb(d | 0, h | 0, 21) | 0
    h = gb(f | 0, g | 0, h | 0, D | 0) | 0
    g = D
    f = fb(o | 0, C | 0, 21) | 0
    d = D
    b = hb(H | 0, G | 0, F | 0, b | 0) | 0
    B = gb(b | 0, D | 0, A | 0, B | 0) | 0
    B = hb(B | 0, D | 0, f | 0, d | 0) | 0
    A = D
    d = kb(f | 0, d | 0, 21) | 0
    d = gb(o | 0, C | 0, d | 0, D | 0) | 0
    C = D
    o = fb(B | 0, A | 0, 21) | 0
    f = D
    w = hb(o | 0, f | 0, c | 0, w | 0) | 0
    c = D
    f = kb(o | 0, f | 0, 21) | 0
    f = gb(B | 0, A | 0, f | 0, D | 0) | 0
    A = D
    B = fb(w | 0, c | 0, 21) | 0
    o = D
    b = kb(B | 0, o | 0, 21) | 0
    b = gb(w | 0, c | 0, b | 0, D | 0) | 0
    c = D
    w = sb(B | 0, o | 0, 666643, 0) | 0
    x = hb(w | 0, D | 0, y | 0, x | 0) | 0
    y = D
    w = sb(B | 0, o | 0, 470296, 0) | 0
    w = hb(u | 0, v | 0, w | 0, D | 0) | 0
    v = D
    u = sb(B | 0, o | 0, 654183, 0) | 0
    u = hb(s | 0, t | 0, u | 0, D | 0) | 0
    t = D
    s = sb(B | 0, o | 0, -997805, -1) | 0
    s = hb(q | 0, r | 0, s | 0, D | 0) | 0
    r = D
    q = sb(B | 0, o | 0, 136657, 0) | 0
    q = hb(E | 0, p | 0, q | 0, D | 0) | 0
    p = D
    o = sb(B | 0, o | 0, -683901, -1) | 0
    o = hb(z | 0, m | 0, o | 0, D | 0) | 0
    m = D
    z = fb(x | 0, y | 0, 21) | 0
    B = D
    v = hb(w | 0, v | 0, z | 0, B | 0) | 0
    w = D
    B = kb(z | 0, B | 0, 21) | 0
    B = gb(x | 0, y | 0, B | 0, D | 0) | 0
    y = D
    x = fb(v | 0, w | 0, 21) | 0
    z = D
    t = hb(u | 0, t | 0, x | 0, z | 0) | 0
    u = D
    z = kb(x | 0, z | 0, 21) | 0
    z = gb(v | 0, w | 0, z | 0, D | 0) | 0
    w = D
    v = fb(t | 0, u | 0, 21) | 0
    x = D
    r = hb(s | 0, r | 0, v | 0, x | 0) | 0
    s = D
    x = kb(v | 0, x | 0, 21) | 0
    x = gb(t | 0, u | 0, x | 0, D | 0) | 0
    u = D
    t = fb(r | 0, s | 0, 21) | 0
    v = D
    p = hb(q | 0, p | 0, t | 0, v | 0) | 0
    q = D
    v = kb(t | 0, v | 0, 21) | 0
    v = gb(r | 0, s | 0, v | 0, D | 0) | 0
    s = D
    r = fb(p | 0, q | 0, 21) | 0
    t = D
    m = hb(o | 0, m | 0, r | 0, t | 0) | 0
    o = D
    t = kb(r | 0, t | 0, 21) | 0
    t = gb(p | 0, q | 0, t | 0, D | 0) | 0
    q = D
    p = fb(m | 0, o | 0, 21) | 0
    r = D
    l = hb(p | 0, r | 0, n | 0, l | 0) | 0
    n = D
    r = kb(p | 0, r | 0, 21) | 0
    r = gb(m | 0, o | 0, r | 0, D | 0) | 0
    o = D
    m = fb(l | 0, n | 0, 21) | 0
    p = D
    j = hb(m | 0, p | 0, k | 0, j | 0) | 0
    k = D
    p = kb(m | 0, p | 0, 21) | 0
    p = gb(l | 0, n | 0, p | 0, D | 0) | 0
    n = D
    l = fb(j | 0, k | 0, 21) | 0
    m = D
    g = hb(l | 0, m | 0, h | 0, g | 0) | 0
    h = D
    m = kb(l | 0, m | 0, 21) | 0
    m = gb(j | 0, k | 0, m | 0, D | 0) | 0
    k = D
    j = fb(g | 0, h | 0, 21) | 0
    l = D
    C = hb(j | 0, l | 0, d | 0, C | 0) | 0
    d = D
    l = kb(j | 0, l | 0, 21) | 0
    l = gb(g | 0, h | 0, l | 0, D | 0) | 0
    h = D
    g = fb(C | 0, d | 0, 21) | 0
    j = D
    A = hb(g | 0, j | 0, f | 0, A | 0) | 0
    f = D
    j = kb(g | 0, j | 0, 21) | 0
    j = gb(C | 0, d | 0, j | 0, D | 0) | 0
    d = D
    C = fb(A | 0, f | 0, 21) | 0
    g = D
    c = hb(C | 0, g | 0, b | 0, c | 0) | 0
    b = D
    g = kb(C | 0, g | 0, 21) | 0
    g = gb(A | 0, f | 0, g | 0, D | 0) | 0
    f = D
    ga(a >> 0 | 0, B | 0, 1, 0)
    A = jb(B | 0, y | 0, 8) | 0
    ga(a + 1 >> 0 | 0, A | 0, 1, 0)
    y = jb(B | 0, y | 0, 16) | 0
    B = D
    A = kb(z | 0, w | 0, 5) | 0
    D | B
    ga(a + 2 >> 0 | 0, A | y | 0, 1, 0)
    y = jb(z | 0, w | 0, 3) | 0
    ga(a + 3 >> 0 | 0, y | 0, 1, 0)
    y = jb(z | 0, w | 0, 11) | 0
    ga(a + 4 >> 0 | 0, y | 0, 1, 0)
    w = jb(z | 0, w | 0, 19) | 0
    z = D
    y = kb(x | 0, u | 0, 2) | 0
    D | z
    ga(a + 5 >> 0 | 0, y | w | 0, 1, 0)
    w = jb(x | 0, u | 0, 6) | 0
    ga(a + 6 >> 0 | 0, w | 0, 1, 0)
    u = jb(x | 0, u | 0, 14) | 0
    x = D
    w = kb(v | 0, s | 0, 7) | 0
    D | x
    ga(a + 7 >> 0 | 0, w | u | 0, 1, 0)
    u = jb(v | 0, s | 0, 1) | 0
    ga(a + 8 >> 0 | 0, u | 0, 1, 0)
    u = jb(v | 0, s | 0, 9) | 0
    ga(a + 9 >> 0 | 0, u | 0, 1, 0)
    s = jb(v | 0, s | 0, 17) | 0
    v = D
    u = kb(t | 0, q | 0, 4) | 0
    D | v
    ga(a + 10 >> 0 | 0, u | s | 0, 1, 0)
    s = jb(t | 0, q | 0, 4) | 0
    ga(a + 11 >> 0 | 0, s | 0, 1, 0)
    s = jb(t | 0, q | 0, 12) | 0
    ga(a + 12 >> 0 | 0, s | 0, 1, 0)
    q = jb(t | 0, q | 0, 20) | 0
    t = D
    s = kb(r | 0, o | 0, 1) | 0
    D | t
    ga(a + 13 >> 0 | 0, s | q | 0, 1, 0)
    q = jb(r | 0, o | 0, 7) | 0
    ga(a + 14 >> 0 | 0, q | 0, 1, 0)
    o = jb(r | 0, o | 0, 15) | 0
    r = D
    q = kb(p | 0, n | 0, 6) | 0
    D | r
    ga(a + 15 >> 0 | 0, q | o | 0, 1, 0)
    o = jb(p | 0, n | 0, 2) | 0
    ga(a + 16 >> 0 | 0, o | 0, 1, 0)
    o = jb(p | 0, n | 0, 10) | 0
    ga(a + 17 >> 0 | 0, o | 0, 1, 0)
    n = jb(p | 0, n | 0, 18) | 0
    p = D
    o = kb(m | 0, k | 0, 3) | 0
    D | p
    ga(a + 18 >> 0 | 0, o | n | 0, 1, 0)
    n = jb(m | 0, k | 0, 5) | 0
    ga(a + 19 >> 0 | 0, n | 0, 1, 0)
    k = jb(m | 0, k | 0, 13) | 0
    ga(a + 20 >> 0 | 0, k | 0, 1, 0)
    ga(a + 21 >> 0 | 0, l | 0, 1, 0)
    k = jb(l | 0, h | 0, 8) | 0
    ga(a + 22 >> 0 | 0, k | 0, 1, 0)
    h = jb(l | 0, h | 0, 16) | 0
    l = D
    k = kb(j | 0, d | 0, 5) | 0
    D | l
    ga(a + 23 >> 0 | 0, k | h | 0, 1, 0)
    h = jb(j | 0, d | 0, 3) | 0
    ga(a + 24 >> 0 | 0, h | 0, 1, 0)
    h = jb(j | 0, d | 0, 11) | 0
    ga(a + 25 >> 0 | 0, h | 0, 1, 0)
    d = jb(j | 0, d | 0, 19) | 0
    j = D
    h = kb(g | 0, f | 0, 2) | 0
    D | j
    ga(a + 26 >> 0 | 0, h | d | 0, 1, 0)
    d = jb(g | 0, f | 0, 6) | 0
    ga(a + 27 >> 0 | 0, d | 0, 1, 0)
    f = jb(g | 0, f | 0, 14) | 0
    g = D
    d = kb(c | 0, b | 0, 7) | 0
    g | D
    ga(a + 28 >> 0 | 0, f | d | 0, 1, 0)
    d = jb(c | 0, b | 0, 1) | 0
    ga(a + 29 >> 0 | 0, d | 0, 1, 0)
    d = jb(c | 0, b | 0, 9) | 0
    ga(a + 30 >> 0 | 0, d | 0, 1, 0)
    b = jb(c | 0, b | 0, 17) | 0
    ga(a + 31 >> 0 | 0, b | 0, 1, 0)
    i = e
  }

  function ab (a) {
    a = a | 0
    var b = 0

    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var E = 0

    var F = 0

    var G = 0

    var H = 0

    var I = 0

    var J = 0

    var K = 0

    var L = 0

    var M = 0

    var N = 0

    var O = 0

    var P = 0

    var Q = 0
    b = i
    c = fa(a >> 0 | 0, 1, 0, 1) | 0 | 0
    Q = kb(fa(a + 1 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    P = D
    O = kb(fa(a + 2 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    P = P | D
    J = kb(fa(a + 3 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    P = P | D
    K = fa(a + 4 >> 0 | 0, 1, 0, 1) | 0 | 0
    N = kb(fa(a + 5 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    M = D
    L = kb(fa(a + 6 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    M = M | D
    E = kb(fa(a + 7 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    M = M | D
    F = fa(a + 8 >> 0 | 0, 1, 0, 1) | 0 | 0
    I = kb(fa(a + 9 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    H = D
    G = kb(fa(a + 10 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    H = H | D
    y = kb(fa(a + 11 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    H = H | D
    z = fa(a + 12 >> 0 | 0, 1, 0, 1) | 0 | 0
    C = kb(fa(a + 13 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    B = D
    A = kb(fa(a + 14 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    B = B | D
    t = kb(fa(a + 15 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    B = B | D
    w = fa(a + 16 >> 0 | 0, 1, 0, 1) | 0 | 0
    x = kb(fa(a + 17 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    o = D
    v = kb(fa(a + 18 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    o = o | D
    u = kb(fa(a + 19 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    o = o | D
    r = fa(a + 20 >> 0 | 0, 1, 0, 1) | 0 | 0
    s = kb(fa(a + 21 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    j = D
    q = kb(fa(a + 22 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    j = j | D
    p = kb(fa(a + 23 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    j = j | D
    m = fa(a + 24 >> 0 | 0, 1, 0, 1) | 0 | 0
    n = kb(fa(a + 25 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    d = D
    l = kb(fa(a + 26 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    d = d | D
    k = kb(fa(a + 27 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    d = d | D
    e = fa(a + 28 >> 0 | 0, 1, 0, 1) | 0 | 0
    h = kb(fa(a + 29 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 8) | 0
    g = D
    f = kb(fa(a + 30 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 16) | 0
    g = g | D
    a = kb(fa(a + 31 >> 0 | 0, 1, 0, 1) | 0 | 0 | 0, 0, 24) | 0
    g = g | D
    P = gb(1559614444, 0, Q | c | O | J | 0, P | 0) | 0
    J = D
    O = fb(P | 0, J | 0, 63) | 0
    c = D
    J = gb(0, 0, P | 0, J | 0) | 0
    J = jb(J | 0, D | 0, 63) | 0
    J = hb(O | 0, c | 0, J | 0, D | 0) | 0
    c = D
    M = gb(1477600026, 0, N | K | L | E | 0, M | 0) | 0
    E = D
    L = fb(M | 0, E | 0, 63) | 0
    K = D
    E = gb(0, 0, M | 0, E | 0) | 0
    E = fb(E | 0, D | 0, 63) | 0
    E = gb(L | 0, K | 0, E | 0, D | 0) | 0
    E = kb(E | 0, D | 0, 1) | 0
    E = hb(J | 0, c | 0, E | 0, D | 0) | 0
    c = D
    H = gb(-1560830762, 0, I | F | G | y | 0, H | 0) | 0
    y = D
    G = fb(H | 0, y | 0, 63) | 0
    F = D
    y = gb(0, 0, H | 0, y | 0) | 0
    y = fb(y | 0, D | 0, 63) | 0
    y = gb(G | 0, F | 0, y | 0, D | 0) | 0
    y = kb(y | 0, D | 0, 2) | 0
    y = hb(E | 0, c | 0, y | 0, D | 0) | 0
    c = D
    B = gb(350157278, 0, C | z | A | t | 0, B | 0) | 0
    t = D
    A = fb(B | 0, t | 0, 63) | 0
    z = D
    t = gb(0, 0, B | 0, t | 0) | 0
    t = fb(t | 0, D | 0, 63) | 0
    t = gb(A | 0, z | 0, t | 0, D | 0) | 0
    t = kb(t | 0, D | 0, 3) | 0
    t = hb(y | 0, c | 0, t | 0, D | 0) | 0
    c = D
    o = gb(0, 0, x | w | v | u | 0, o | 0) | 0
    o = fb(o | 0, D | 0, 63) | 0
    o = kb(o | 0, D | 0, 4) | 0
    o = hb(t | 0, c | 0, o | 0, D | 0) | 0
    c = D
    j = gb(0, 0, s | r | q | p | 0, j | 0) | 0
    j = fb(j | 0, D | 0, 63) | 0
    j = kb(j | 0, D | 0, 5) | 0
    j = hb(o | 0, c | 0, j | 0, D | 0) | 0
    c = D
    d = gb(0, 0, n | m | l | k | 0, d | 0) | 0
    d = fb(d | 0, D | 0, 63) | 0
    d = kb(d | 0, D | 0, 6) | 0
    d = hb(j | 0, c | 0, d | 0, D | 0) | 0
    c = D
    g = gb(268435456, 0, h | e | f | a | 0, g | 0) | 0
    a = D
    f = fb(g | 0, a | 0, 63) | 0
    e = D
    a = gb(0, 0, g | 0, a | 0) | 0
    a = fb(a | 0, D | 0, 63) | 0
    a = gb(f | 0, e | 0, a | 0, D | 0) | 0
    a = kb(a | 0, D | 0, 7) | 0
    a = hb(d | 0, c | 0, a | 0, D | 0) | 0
    a = jb(a | 0, D | 0, 8) | 0
    i = b
    return a | 0
  }

  function bb (a, b, c) {
    a = a | 0
    b = b | 0
    c = c | 0
    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var i = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0

    var v = 0

    var w = 0

    var x = 0

    var y = 0

    var z = 0

    var A = 0

    var B = 0

    var C = 0

    var D = 0

    var E = 0
    v = fa(a | 0, 4, 0, 0) | 0 | 0
    u = a + 4 | 0
    t = fa(u | 0, 4, 0, 0) | 0 | 0
    s = a + 8 | 0
    r = fa(s | 0, 4, 0, 0) | 0 | 0
    q = a + 12 | 0
    p = fa(q | 0, 4, 0, 0) | 0 | 0
    o = a + 16 | 0
    d = fa(o | 0, 4, 0, 0) | 0 | 0
    m = a + 20 | 0
    l = fa(m | 0, 4, 0, 0) | 0 | 0
    k = a + 24 | 0
    j = fa(k | 0, 4, 0, 0) | 0 | 0
    i = a + 28 | 0
    h = fa(i | 0, 4, 0, 0) | 0 | 0
    g = a + 32 | 0
    f = fa(g | 0, 4, 0, 0) | 0 | 0
    e = a + 36 | 0
    n = fa(e | 0, 4, 0, 0) | 0 | 0
    w = 0 - c | 0
    if ((c + -1 & ~c | c + -2 & w | 0) === -1) {
      E = ((fa(b + 4 | 0, 4, 0, 0) | 0) ^ t) & w
      D = ((fa(b + 8 | 0, 4, 0, 0) | 0) ^ r) & w
      C = ((fa(b + 12 | 0, 4, 0, 0) | 0) ^ p) & w
      B = ((fa(b + 16 | 0, 4, 0, 0) | 0) ^ d) & w
      A = ((fa(b + 20 | 0, 4, 0, 0) | 0) ^ l) & w
      z = ((fa(b + 24 | 0, 4, 0, 0) | 0) ^ j) & w
      y = ((fa(b + 28 | 0, 4, 0, 0) | 0) ^ h) & w
      x = ((fa(b + 32 | 0, 4, 0, 0) | 0) ^ f) & w
      c = ((fa(b + 36 | 0, 4, 0, 0) | 0) ^ n) & w
      ga(a | 0, ((fa(b | 0, 4, 0, 0) | 0) ^ v) & w ^ v | 0, 4, 0)
      ga(u | 0, E ^ t | 0, 4, 0)
      ga(s | 0, D ^ r | 0, 4, 0)
      ga(q | 0, C ^ p | 0, 4, 0)
      ga(o | 0, B ^ d | 0, 4, 0)
      ga(m | 0, A ^ l | 0, 4, 0)
      ga(k | 0, z ^ j | 0, 4, 0)
      ga(i | 0, y ^ h | 0, 4, 0)
      ga(g | 0, x ^ f | 0, 4, 0)
      ga(e | 0, c ^ n | 0, 4, 0)
    } else {
      na(168, 48, 177, 232)
    }
  }

  function cb (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0

    var p = 0

    var q = 0

    var r = 0

    var s = 0

    var t = 0

    var u = 0
    k = i
    i = i + 48 | 0
    c = k
    if ((b | 0) <= 0) {
      i = k
      return
    }
    e = a + 8 | 0
    n = a
    l = fa(n | 0, 4, 0, 0) | 0 | 0
    n = fa(n + 4 | 0, 4, 0, 0) | 0 | 0
    d = 0
    do {
      s = a + 40 | 0
      r = a + 80 | 0
      q = a + 120 | 0
      m = a + 160 | 0
      o = (fa(s + 4 | 0, 4, 0, 0) | 0) ^ n ^ (fa(r + 4 | 0, 4, 0, 0) | 0) ^ (fa(q + 4 | 0, 4, 0, 0) | 0) ^ (fa(m + 4 | 0, 4, 0, 0) | 0)
      g = c
      ga(g | 0, (fa(s | 0, 4, 0, 0) | 0) ^ l ^ (fa(r | 0, 4, 0, 0) | 0) ^ (fa(q | 0, 4, 0, 0) | 0) ^ (fa(m | 0, 4, 0, 0) | 0) | 0, 4, 0)
      ga(g + 4 | 0, o | 0, 4, 0)
      o = e
      g = a + 48 | 0
      m = a + 88 | 0
      q = a + 128 | 0
      r = a + 168 | 0
      s = (fa(g + 4 | 0, 4, 0, 0) | 0) ^ (fa(o + 4 | 0, 4, 0, 0) | 0) ^ (fa(m + 4 | 0, 4, 0, 0) | 0) ^ (fa(q + 4 | 0, 4, 0, 0) | 0) ^ (fa(r + 4 | 0, 4, 0, 0) | 0)
      f = c + 8 | 0
      h = f
      ga(h | 0, (fa(g | 0, 4, 0, 0) | 0) ^ (fa(o | 0, 4, 0, 0) | 0) ^ (fa(m | 0, 4, 0, 0) | 0) ^ (fa(q | 0, 4, 0, 0) | 0) ^ (fa(r | 0, 4, 0, 0) | 0) | 0, 4, 0)
      ga(h + 4 | 0, s | 0, 4, 0)
      s = a + 16 | 0
      h = a + 56 | 0
      r = a + 96 | 0
      q = a + 136 | 0
      m = a + 176 | 0
      o = (fa(h + 4 | 0, 4, 0, 0) | 0) ^ (fa(s + 4 | 0, 4, 0, 0) | 0) ^ (fa(r + 4 | 0, 4, 0, 0) | 0) ^ (fa(q + 4 | 0, 4, 0, 0) | 0) ^ (fa(m + 4 | 0, 4, 0, 0) | 0)
      g = c + 16 | 0
      j = g
      ga(j | 0, (fa(h | 0, 4, 0, 0) | 0) ^ (fa(s | 0, 4, 0, 0) | 0) ^ (fa(r | 0, 4, 0, 0) | 0) ^ (fa(q | 0, 4, 0, 0) | 0) ^ (fa(m | 0, 4, 0, 0) | 0) | 0, 4, 0)
      ga(j + 4 | 0, o | 0, 4, 0)
      o = a + 24 | 0
      j = a + 64 | 0
      m = a + 104 | 0
      q = a + 144 | 0
      r = a + 184 | 0
      s = (fa(j + 4 | 0, 4, 0, 0) | 0) ^ (fa(o + 4 | 0, 4, 0, 0) | 0) ^ (fa(m + 4 | 0, 4, 0, 0) | 0) ^ (fa(q + 4 | 0, 4, 0, 0) | 0) ^ (fa(r + 4 | 0, 4, 0, 0) | 0)
      h = c + 24 | 0
      t = h
      ga(t | 0, (fa(j | 0, 4, 0, 0) | 0) ^ (fa(o | 0, 4, 0, 0) | 0) ^ (fa(m | 0, 4, 0, 0) | 0) ^ (fa(q | 0, 4, 0, 0) | 0) ^ (fa(r | 0, 4, 0, 0) | 0) | 0, 4, 0)
      ga(t + 4 | 0, s | 0, 4, 0)
      s = a + 32 | 0
      t = a + 72 | 0
      r = a + 112 | 0
      q = a + 152 | 0
      m = a + 192 | 0
      o = (fa(t + 4 | 0, 4, 0, 0) | 0) ^ (fa(s + 4 | 0, 4, 0, 0) | 0) ^ (fa(r + 4 | 0, 4, 0, 0) | 0) ^ (fa(q + 4 | 0, 4, 0, 0) | 0) ^ (fa(m + 4 | 0, 4, 0, 0) | 0)
      j = c + 32 | 0
      p = j
      ga(p | 0, (fa(t | 0, 4, 0, 0) | 0) ^ (fa(s | 0, 4, 0, 0) | 0) ^ (fa(r | 0, 4, 0, 0) | 0) ^ (fa(q | 0, 4, 0, 0) | 0) ^ (fa(m | 0, 4, 0, 0) | 0) | 0, 4, 0)
      ga(p + 4 | 0, o | 0, 4, 0)
      o = 0
      while (1) {
        t = c + (((o + 4 | 0) % 5 | 0) << 3) | 0
        q = fa(t | 0, 4, 0, 0) | 0 | 0
        t = fa(t + 4 | 0, 4, 0, 0) | 0 | 0
        m = o + 1 | 0
        r = c + (((m | 0) === 5 ? 0 : m) << 3) | 0
        u = fa(r | 0, 4, 0, 0) | 0 | 0
        r = fa(r + 4 | 0, 4, 0, 0) | 0 | 0
        p = kb(u | 0, r | 0, 1) | 0
        s = D
        r = jb(u | 0, r | 0, 63) | 0
        q = (p | r) ^ q
        t = (s | D) ^ t
        s = a + (o << 3) | 0
        ga(s | 0, q ^ l | 0, 4, 0)
        ga(s + 4 | 0, t ^ n | 0, 4, 0)
        s = a + (o + 5 << 3) | 0
        r = s
        p = t ^ (fa(r + 4 | 0, 4, 0, 0) | 0)
        ga(s | 0, q ^ (fa(r | 0, 4, 0, 0) | 0) | 0, 4, 0)
        ga(s + 4 | 0, p | 0, 4, 0)
        p = a + (o + 10 << 3) | 0
        s = p
        r = t ^ (fa(s + 4 | 0, 4, 0, 0) | 0)
        ga(p | 0, q ^ (fa(s | 0, 4, 0, 0) | 0) | 0, 4, 0)
        ga(p + 4 | 0, r | 0, 4, 0)
        r = a + (o + 15 << 3) | 0
        p = r
        s = t ^ (fa(p + 4 | 0, 4, 0, 0) | 0)
        ga(r | 0, q ^ (fa(p | 0, 4, 0, 0) | 0) | 0, 4, 0)
        ga(r + 4 | 0, s | 0, 4, 0)
        s = a + (o + 20 << 3) | 0
        r = s
        t = t ^ (fa(r + 4 | 0, 4, 0, 0) | 0)
        ga(s | 0, q ^ (fa(r | 0, 4, 0, 0) | 0) | 0, 4, 0)
        ga(s + 4 | 0, t | 0, 4, 0)
        if ((m | 0) === 5) {
          break
        }
        n = a + (m << 3) | 0
        l = fa(n | 0, 4, 0, 0) | 0 | 0
        n = fa(n + 4 | 0, 4, 0, 0) | 0 | 0
        o = m
      }
      m = e
      n = fa(m | 0, 4, 0, 0) | 0 | 0
      m = fa(m + 4 | 0, 4, 0, 0) | 0 | 0
      l = 0
      do {
        t = a + ((fa(32568 + (l << 2) | 0, 4, 0, 0) | 0) << 3) | 0
        r = t
        p = n
        n = fa(r | 0, 4, 0, 0) | 0 | 0
        q = m
        m = fa(r + 4 | 0, 4, 0, 0) | 0 | 0
        r = fa(32472 + (l << 2) | 0, 4, 0, 0) | 0 | 0
        s = kb(p | 0, q | 0, r | 0) | 0
        u = D
        r = jb(p | 0, q | 0, 64 - r | 0) | 0
        ga(t | 0, r | s | 0, 4, 0)
        ga(t + 4 | 0, D | u | 0, 4, 0)
        l = l + 1 | 0
      } while ((l | 0) !== 24)
      o = c
      ga(o | 0, n | 0, 4, 0)
      ga(o + 4 | 0, m | 0, 4, 0)
      o = 0
      p = 0
      while (1) {
        m = c + 0 | 0
        n = a + (o * 5 << 3) + 0 | 0
        l = m + 40 | 0
        do {
          ga(m | 0, fa(n | 0, 4, 0, 0) | 0 | 0, 4, 0)
          m = m + 4 | 0
          n = n + 4 | 0
        } while ((m | 0) < (l | 0))
        n = f
        r = fa(n | 0, 4, 0, 0) | 0 | 0
        n = fa(n + 4 | 0, 4, 0, 0) | 0 | 0
        t = g
        s = fa(t | 0, 4, 0, 0) | 0 | 0
        t = fa(t + 4 | 0, 4, 0, 0) | 0 | 0
        q = a + (p << 3) | 0
        m = q
        u = (fa(m + 4 | 0, 4, 0, 0) | 0) ^ t & ~n
        ga(q | 0, (fa(m | 0, 4, 0, 0) | 0) ^ s & ~r | 0, 4, 0)
        ga(q + 4 | 0, u | 0, 4, 0)
        u = h
        q = fa(u | 0, 4, 0, 0) | 0 | 0
        u = fa(u + 4 | 0, 4, 0, 0) | 0 | 0
        m = a + (p + 1 << 3) | 0
        l = m
        t = (fa(l + 4 | 0, 4, 0, 0) | 0) ^ u & ~t
        ga(m | 0, (fa(l | 0, 4, 0, 0) | 0) ^ q & ~s | 0, 4, 0)
        ga(m + 4 | 0, t | 0, 4, 0)
        t = j
        m = fa(t | 0, 4, 0, 0) | 0 | 0
        t = fa(t + 4 | 0, 4, 0, 0) | 0 | 0
        s = a + (p + 2 << 3) | 0
        l = s
        u = (fa(l + 4 | 0, 4, 0, 0) | 0) ^ t & ~u
        ga(s | 0, (fa(l | 0, 4, 0, 0) | 0) ^ m & ~q | 0, 4, 0)
        ga(s + 4 | 0, u | 0, 4, 0)
        u = c
        s = fa(u | 0, 4, 0, 0) | 0 | 0
        u = fa(u + 4 | 0, 4, 0, 0) | 0 | 0
        q = a + (p + 3 << 3) | 0
        l = q
        t = (fa(l + 4 | 0, 4, 0, 0) | 0) ^ u & ~t
        ga(q | 0, (fa(l | 0, 4, 0, 0) | 0) ^ s & ~m | 0, 4, 0)
        ga(q + 4 | 0, t | 0, 4, 0)
        t = a + (p + 4 << 3) | 0
        q = t
        u = (fa(q + 4 | 0, 4, 0, 0) | 0) ^ n & ~u
        ga(t | 0, (fa(q | 0, 4, 0, 0) | 0) ^ r & ~s | 0, 4, 0)
        ga(t + 4 | 0, u | 0, 4, 0)
        o = o + 1 | 0
        if ((o | 0) === 5) {
          break
        } else {
          p = p + 5 | 0
        }
      }
      n = 32280 + (d << 3) | 0
      u = a
      l = (fa(u | 0, 4, 0, 0) | 0) ^ (fa(n | 0, 4, 0, 0) | 0)
      n = (fa(u + 4 | 0, 4, 0, 0) | 0) ^ (fa(n + 4 | 0, 4, 0, 0) | 0)
      u = a
      ga(u | 0, l | 0, 4, 0)
      ga(u + 4 | 0, n | 0, 4, 0)
      d = d + 1 | 0
    } while ((d | 0) !== (b | 0))
    i = k
  }

  function db (a, b, c, d) {
    a = a | 0
    b = b | 0
    c = c | 0
    d = d | 0
    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0
    e = i
    i = i + 352 | 0
    g = e
    f = e + 200 | 0
    if ((d | 0) === 200) {
      j = 136
    } else {
      j = 200 - (d << 1) | 0
    }
    h = (j | 0) / 8 | 0
    ib(g | 0, 0, 200) | 0
    a: do {
      if ((j | 0) <= (b | 0)) {
        if ((j | 0) <= 7) {
          while (1) {
            cb(g, 24)
            b = b - j | 0
            a = a + j | 0
            if ((b | 0) < (j | 0)) {
              break a
            }
          }
        }
        do {
          k = 0
          do {
            n = a + (k << 3) | 0
            m = g + (k << 3) | 0
            o = m
            l = (fa(o + 4 | 0, 4, 0, 0) | 0) ^ (fa(n + 4 | 0, 4, 0, 0) | 0)
            ga(m | 0, (fa(o | 0, 4, 0, 0) | 0) ^ (fa(n | 0, 4, 0, 0) | 0) | 0, 4, 0)
            ga(m + 4 | 0, l | 0, 4, 0)
            k = k + 1 | 0
          } while ((k | 0) < (h | 0))
          cb(g, 24)
          b = b - j | 0
          a = a + j | 0
        } while ((b | 0) >= (j | 0))
      }
    } while (0)
    mb(f | 0, a | 0, b | 0) | 0
    o = b + 1 | 0
    ga(f + b >> 0 | 0, 1 | 0, 1, 0)
    ib(f + o | 0, 0, j - o | 0) | 0
    o = f + (j + -1) | 0
    ga(o >> 0 | 0, fa(o >> 0 | 0, 1, 0, 1) | 0 | 0 | 128 | 0, 1, 0)
    if ((j | 0) <= 7) {
      cb(g, 24)
      mb(c | 0, g | 0, d | 0) | 0
      i = e
      return 0
    }
    j = 0
    do {
      m = f + (j << 3) | 0
      n = g + (j << 3) | 0
      l = n
      o = (fa(l + 4 | 0, 4, 0, 0) | 0) ^ (fa(m + 4 | 0, 4, 0, 0) | 0)
      ga(n | 0, (fa(l | 0, 4, 0, 0) | 0) ^ (fa(m | 0, 4, 0, 0) | 0) | 0, 4, 0)
      ga(n + 4 | 0, o | 0, 4, 0)
      j = j + 1 | 0
    } while ((j | 0) < (h | 0))
    cb(g, 24)
    mb(c | 0, g | 0, d | 0) | 0
    i = e
    return 0
  }

  function eb () {}

  function fb (a, b, c) {
    a = a | 0
    b = b | 0
    c = c | 0
    if ((c | 0) < 32) {
      D = b >> c
      return a >>> c | (b & (1 << c) - 1) << 32 - c
    }
    D = (b | 0) < 0 ? -1 : 0
    return b >> c - 32 | 0
  }

  function gb (a, b, c, d) {
    a = a | 0
    b = b | 0
    c = c | 0
    d = d | 0
    b = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0
    return (D = b, a - c >>> 0 | 0) | 0
  }

  function hb (a, b, c, d) {
    a = a | 0
    b = b | 0
    c = c | 0
    d = d | 0
    c = a + c >>> 0
    return (D = b + d + (c >>> 0 < a >>> 0 | 0) >>> 0, c | 0) | 0
  }

  function ib (a, b, c) {
    a = a | 0
    b = b | 0
    c = c | 0
    var d = 0

    var e = 0

    var f = 0

    var g = 0
    d = a + c | 0
    if ((c | 0) >= 20) {
      b = b & 255
      g = a & 3
      f = b | b << 8 | b << 16 | b << 24
      e = d & ~3
      if (g) {
        g = a + 4 - g | 0
        while ((a | 0) < (g | 0)) {
          ga(a | 0, b | 0, 1, 0) | 0
          a = a + 1 | 0
        }
      }
      while ((a | 0) < (e | 0)) {
        ga(a | 0, f | 0, 4, 0) | 0
        a = a + 4 | 0
      }
    }
    while ((a | 0) < (d | 0)) {
      ga(a | 0, b | 0, 1, 0) | 0
      a = a + 1 | 0
    }
    return a - c | 0
  }

  function jb (a, b, c) {
    a = a | 0
    b = b | 0
    c = c | 0
    if ((c | 0) < 32) {
      D = b >>> c
      return a >>> c | (b & (1 << c) - 1) << 32 - c
    }
    D = 0
    return b >>> c - 32 | 0
  }

  function kb (a, b, c) {
    a = a | 0
    b = b | 0
    c = c | 0
    if ((c | 0) < 32) {
      D = b << c | (a & (1 << c) - 1 << 32 - c) >>> 32 - c
      return a << c
    }
    D = a << c - 32
    return 0
  }

  function lb (a) {
    a = a | 0
    var b = 0
    b = a
    while (fa(b | 0, 1, 0, 0) | 0) {
      b = b + 1 | 0
    }
    return b - a | 0
  }

  function mb (a, b, c) {
    a = a | 0
    b = b | 0
    c = c | 0
    var d = 0
    if ((c | 0) >= 4096) return la(a | 0, b | 0, c | 0) | 0
    d = a | 0
    if ((a & 3) === (b & 3)) {
      while (a & 3) {
        if ((c | 0) === 0) return d | 0
        ga(a | 0, fa(b | 0, 1, 0, 0) | 0, 1, 0) | 0
        a = a + 1 | 0
        b = b + 1 | 0
        c = c - 1 | 0
      }
      while ((c | 0) >= 4) {
        ga(a | 0, fa(b | 0, 4, 0, 0) | 0, 4, 0) | 0
        a = a + 4 | 0
        b = b + 4 | 0
        c = c - 4 | 0
      }
    }
    while ((c | 0) > 0) {
      ga(a | 0, fa(b | 0, 1, 0, 0) | 0, 1, 0) | 0
      a = a + 1 | 0
      b = b + 1 | 0
      c = c - 1 | 0
    }
    return d | 0
  }

  function nb (a) {
    a = a | 0
    var b = 0
    b = fa(n + (a >>> 24) | 0, 1, 0, 0) | 0
    if ((b | 0) < 8) return b | 0
    b = fa(n + (a >> 16 & 255) | 0, 1, 0, 0) | 0
    if ((b | 0) < 8) return b + 8 | 0
    b = fa(n + (a >> 8 & 255) | 0, 1, 0, 0) | 0
    if ((b | 0) < 8) return b + 16 | 0
    return (fa(n + (a & 255) | 0, 1, 0, 0) | 0) + 24 | 0
  }

  function ob (a) {
    a = a | 0
    var b = 0
    b = fa(m + (a & 255) | 0, 1, 0, 0) | 0
    if ((b | 0) < 8) return b | 0
    b = fa(m + (a >> 8 & 255) | 0, 1, 0, 0) | 0
    if ((b | 0) < 8) return b + 8 | 0
    b = fa(m + (a >> 16 & 255) | 0, 1, 0, 0) | 0
    if ((b | 0) < 8) return b + 16 | 0
    return (fa(m + (a >>> 24) | 0, 1, 0, 0) | 0) + 24 | 0
  }

  function pb (a, b) {
    a = a | 0
    b = b | 0
    var c = 0

    var d = 0

    var e = 0

    var f = 0
    f = a & 65535
    d = b & 65535
    c = $(d, f) | 0
    e = a >>> 16
    d = (c >>> 16) + ($(d, e) | 0) | 0
    b = b >>> 16
    a = $(b, f) | 0
    return (D = (d >>> 16) + ($(b, e) | 0) + (((d & 65535) + a | 0) >>> 16) | 0, d + a << 16 | c & 65535 | 0) | 0
  }

  function qb (a, b, c, d) {
    a = a | 0
    b = b | 0
    c = c | 0
    d = d | 0
    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var i = 0

    var j = 0
    j = b >> 31 | ((b | 0) < 0 ? -1 : 0) << 1
    i = ((b | 0) < 0 ? -1 : 0) >> 31 | ((b | 0) < 0 ? -1 : 0) << 1
    f = d >> 31 | ((d | 0) < 0 ? -1 : 0) << 1
    e = ((d | 0) < 0 ? -1 : 0) >> 31 | ((d | 0) < 0 ? -1 : 0) << 1
    h = gb(j ^ a, i ^ b, j, i) | 0
    g = D
    b = f ^ j
    a = e ^ i
    a = gb((vb(h, g, gb(f ^ c, e ^ d, f, e) | 0, D, 0) | 0) ^ b, D ^ a, b, a) | 0
    return a | 0
  }

  function rb (a, b, c, d) {
    a = a | 0
    b = b | 0
    c = c | 0
    d = d | 0
    var e = 0

    var f = 0

    var g = 0

    var h = 0

    var j = 0

    var k = 0
    e = i
    i = i + 8 | 0
    h = e | 0
    g = b >> 31 | ((b | 0) < 0 ? -1 : 0) << 1
    f = ((b | 0) < 0 ? -1 : 0) >> 31 | ((b | 0) < 0 ? -1 : 0) << 1
    k = d >> 31 | ((d | 0) < 0 ? -1 : 0) << 1
    j = ((d | 0) < 0 ? -1 : 0) >> 31 | ((d | 0) < 0 ? -1 : 0) << 1
    b = gb(g ^ a, f ^ b, g, f) | 0
    a = D
    vb(b, a, gb(k ^ c, j ^ d, k, j) | 0, D, h) | 0
    a = gb((fa(h | 0, 4, 0, 0) | 0) ^ g, (fa(h + 4 | 0, 4, 0, 0) | 0) ^ f, g, f) | 0
    b = D
    i = e
    return (D = b, a) | 0
  }

  function sb (a, b, c, d) {
    a = a | 0
    b = b | 0
    c = c | 0
    d = d | 0
    var e = 0

    var f = 0
    e = a
    f = c
    a = pb(e, f) | 0
    c = D
    return (D = ($(b, f) | 0) + ($(d, e) | 0) + c | c & 0, a | 0 | 0) | 0
  }

  function tb (a, b, c, d) {
    a = a | 0
    b = b | 0
    c = c | 0
    d = d | 0
    a = vb(a, b, c, d, 0) | 0
    return a | 0
  }

  function ub (a, b, c, d) {
    a = a | 0
    b = b | 0
    c = c | 0
    d = d | 0
    var e = 0

    var f = 0
    f = i
    i = i + 8 | 0
    e = f | 0
    vb(a, b, c, d, e) | 0
    i = f
    return (D = fa(e + 4 | 0, 4, 0, 0) | 0 | 0, fa(e | 0, 4, 0, 0) | 0 | 0) | 0
  }

  function vb (a, b, c, d, e) {
    a = a | 0
    b = b | 0
    c = c | 0
    d = d | 0
    e = e | 0
    var f = 0

    var g = 0

    var h = 0

    var i = 0

    var j = 0

    var k = 0

    var l = 0

    var m = 0

    var n = 0

    var o = 0
    g = a
    i = b
    h = i
    k = c
    f = d
    j = f
    if ((h | 0) === 0) {
      f = (e | 0) !== 0
      if ((j | 0) === 0) {
        if (f) {
          ga(e | 0, (g >>> 0) % (k >>> 0) | 0, 4, 0)
          ga(e + 4 | 0, 0 | 0, 4, 0)
        }
        j = 0
        l = (g >>> 0) / (k >>> 0) >>> 0
        return (D = j, l) | 0
      } else {
        if (!f) {
          k = 0
          l = 0
          return (D = k, l) | 0
        }
        ga(e | 0, a | 0 | 0, 4, 0)
        ga(e + 4 | 0, b & 0 | 0, 4, 0)
        k = 0
        l = 0
        return (D = k, l) | 0
      }
    }
    l = (j | 0) === 0
    do {
      if ((k | 0) !== 0) {
        if (!l) {
          j = (nb(j | 0) | 0) - (nb(h | 0) | 0) | 0
          if (j >>> 0 <= 31) {
            l = j + 1 | 0
            k = 31 - j | 0
            a = j - 31 >> 31
            i = l
            b = g >>> (l >>> 0) & a | h << k
            a = h >>> (l >>> 0) & a
            j = 0
            k = g << k
            break
          }
          if ((e | 0) === 0) {
            k = 0
            l = 0
            return (D = k, l) | 0
          }
          ga(e | 0, a | 0 | 0, 4, 0)
          ga(e + 4 | 0, i | b & 0 | 0, 4, 0)
          k = 0
          l = 0
          return (D = k, l) | 0
        }
        j = k - 1 | 0
        if ((j & k | 0) !== 0) {
          k = (nb(k | 0) | 0) + 33 - (nb(h | 0) | 0) | 0
          o = 64 - k | 0
          l = 32 - k | 0
          m = l >> 31
          n = k - 32 | 0
          a = n >> 31
          i = k
          b = l - 1 >> 31 & h >>> (n >>> 0) | (h << l | g >>> (k >>> 0)) & a
          a = a & h >>> (k >>> 0)
          j = g << o & m
          k = (h << o | g >>> (n >>> 0)) & m | g << l & k - 33 >> 31
          break
        }
        if ((e | 0) !== 0) {
          ga(e | 0, j & g | 0, 4, 0)
          ga(e + 4 | 0, 0 | 0, 4, 0)
        }
        if ((k | 0) === 1) {
          n = i | b & 0
          o = a | 0 | 0
          return (D = n, o) | 0
        } else {
          o = ob(k | 0) | 0
          n = h >>> (o >>> 0) | 0
          o = h << 32 - o | g >>> (o >>> 0) | 0
          return (D = n, o) | 0
        }
      } else {
        if (l) {
          if ((e | 0) !== 0) {
            ga(e | 0, (h >>> 0) % (k >>> 0) | 0, 4, 0)
            ga(e + 4 | 0, 0 | 0, 4, 0)
          }
          n = 0
          o = (h >>> 0) / (k >>> 0) >>> 0
          return (D = n, o) | 0
        }
        if ((g | 0) === 0) {
          if ((e | 0) !== 0) {
            ga(e | 0, 0 | 0, 4, 0)
            ga(e + 4 | 0, (h >>> 0) % (j >>> 0) | 0, 4, 0)
          }
          n = 0
          o = (h >>> 0) / (j >>> 0) >>> 0
          return (D = n, o) | 0
        }
        k = j - 1 | 0
        if ((k & j | 0) === 0) {
          if ((e | 0) !== 0) {
            ga(e | 0, a | 0 | 0, 4, 0)
            ga(e + 4 | 0, k & h | b & 0 | 0, 4, 0)
          }
          n = 0
          o = h >>> ((ob(j | 0) | 0) >>> 0)
          return (D = n, o) | 0
        }
        j = (nb(j | 0) | 0) - (nb(h | 0) | 0) | 0
        if (j >>> 0 <= 30) {
          a = j + 1 | 0
          k = 31 - j | 0
          i = a
          b = h << k | g >>> (a >>> 0)
          a = h >>> (a >>> 0)
          j = 0
          k = g << k
          break
        }
        if ((e | 0) === 0) {
          n = 0
          o = 0
          return (D = n, o) | 0
        }
        ga(e | 0, a | 0 | 0, 4, 0)
        ga(e + 4 | 0, i | b & 0 | 0, 4, 0)
        n = 0
        o = 0
        return (D = n, o) | 0
      }
    } while (0)
    if ((i | 0) === 0) {
      f = k
      d = 0
      h = 0
    } else {
      g = c | 0 | 0
      f = f | d & 0
      d = hb(g, f, -1, -1) | 0
      c = D
      h = 0
      do {
        l = k
        k = j >>> 31 | k << 1
        j = h | j << 1
        l = b << 1 | l >>> 31 | 0
        m = b >>> 31 | a << 1 | 0
        gb(d, c, l, m) | 0
        o = D
        n = o >> 31 | ((o | 0) < 0 ? -1 : 0) << 1
        h = n & 1
        b = gb(l, m, n & g, (((o | 0) < 0 ? -1 : 0) >> 31 | ((o | 0) < 0 ? -1 : 0) << 1) & f) | 0
        a = D
        i = i - 1 | 0
      } while ((i | 0) !== 0)
      f = k
      d = 0
    }
    g = 0
    if ((e | 0) !== 0) {
      ga(e | 0, b | 0, 4, 0)
      ga(e + 4 | 0, a | 0, 4, 0)
    }
    n = (j | 0) >>> 31 | (f | g) << 1 | (g << 1 | j >>> 31) & 0 | d
    o = (j << 1 | 0 >>> 31) & -2 | h
    return (D = n, o) | 0
  }

  // EMSCRIPTEN_END_FUNCS
  return {
    _strlen: lb,
    _ge_mul8: Va,
    _keccak: db,
    _ge_scalarmult: Ta,
    _ge_fromfe_frombytes_vartime: Wa,
    _sc_mulsub: $a,
    _sc_reduce32: Ya,
    _bitshift64Lshr: jb,
    _bitshift64Shl: kb,
    _sc_add: Za,
    _bitshift64Ashr: fb,
    _memset: ib,
    _i64Add: hb,
    _memcpy: mb,
    _ge_double_scalarmult_base_vartime: Ca,
    _ge_p3_tobytes: Ma,
    _ge_double_scalarmult_precomp_vartime: Ua,
    _i64Subtract: gb,
    _ge_scalarmult_base: Pa,
    _ge_p1p1_to_p3: Ba,
    _ge_p1p1_to_p2: Ha,
    _ge_dsm_precomp: za,
    _ge_frombytes_vartime: Ia,
    _ge_tobytes: Ra,
    _sc_0: Xa,
    _sc_sub: _a,
    _sc_reduce: Sa,
    _ge_p3_to_cached: Aa,
    _sc_check: ab,
    _ge_add: xa,
    runPostSets: eb,
    stackAlloc: pa,
    stackSave: qa,
    stackRestore: ra,
    setThrew: sa,
    setTempRet0: va,
    getTempRet0: wa
  }
  // EMSCRIPTEN_END_ASM
})({
  'Math': Math,
  'Int8Array': Int8Array,
  'Int16Array': Int16Array,
  'Int32Array': Int32Array,
  'Uint8Array': Uint8Array,
  'Uint16Array': Uint16Array,
  'Uint32Array': Uint32Array,
  'Float32Array': Float32Array,
  'Float64Array': Float64Array
}, {
  'abort': abort,
  'assert': assert,
  'asmPrintInt': asmPrintInt,
  'asmPrintFloat': asmPrintFloat,
  'min': Math_min,
  'SAFE_HEAP_LOAD': SAFE_HEAP_LOAD,
  'SAFE_HEAP_STORE': SAFE_HEAP_STORE,
  'SAFE_FT_MASK': SAFE_FT_MASK,
  '_free': _free,
  '___setErrNo': ___setErrNo,
  '_malloc': _malloc,
  '_emscripten_memcpy_big': _emscripten_memcpy_big,
  '_fflush': _fflush,
  '___assert_fail': ___assert_fail,
  'STACKTOP': STACKTOP,
  'STACK_MAX': STACK_MAX,
  'tempDoublePtr': tempDoublePtr,
  'ABORT': ABORT,
  'cttz_i8': cttz_i8,
  'ctlz_i8': ctlz_i8,
  'NaN': NaN,
  'Infinity': Infinity
}, buffer)
var _strlen = Module['_strlen'] = asm['_strlen']
var _ge_mul8 = Module['_ge_mul8'] = asm['_ge_mul8']
var _keccak = Module['_keccak'] = asm['_keccak']
var _ge_scalarmult = Module['_ge_scalarmult'] = asm['_ge_scalarmult']
var _ge_fromfe_frombytes_vartime = Module['_ge_fromfe_frombytes_vartime'] = asm['_ge_fromfe_frombytes_vartime']
var _sc_mulsub = Module['_sc_mulsub'] = asm['_sc_mulsub']
var _sc_reduce32 = Module['_sc_reduce32'] = asm['_sc_reduce32']
var _bitshift64Lshr = Module['_bitshift64Lshr'] = asm['_bitshift64Lshr']
var _bitshift64Shl = Module['_bitshift64Shl'] = asm['_bitshift64Shl']
var _sc_add = Module['_sc_add'] = asm['_sc_add']
var _bitshift64Ashr = Module['_bitshift64Ashr'] = asm['_bitshift64Ashr']
var _memset = Module['_memset'] = asm['_memset']
var _i64Add = Module['_i64Add'] = asm['_i64Add']
var _memcpy = Module['_memcpy'] = asm['_memcpy']
var _ge_double_scalarmult_base_vartime = Module['_ge_double_scalarmult_base_vartime'] = asm['_ge_double_scalarmult_base_vartime']
var _ge_p3_tobytes = Module['_ge_p3_tobytes'] = asm['_ge_p3_tobytes']
var _ge_double_scalarmult_precomp_vartime = Module['_ge_double_scalarmult_precomp_vartime'] = asm['_ge_double_scalarmult_precomp_vartime']
var _i64Subtract = Module['_i64Subtract'] = asm['_i64Subtract']
var _ge_scalarmult_base = Module['_ge_scalarmult_base'] = asm['_ge_scalarmult_base']
var _ge_p1p1_to_p3 = Module['_ge_p1p1_to_p3'] = asm['_ge_p1p1_to_p3']
var _ge_p1p1_to_p2 = Module['_ge_p1p1_to_p2'] = asm['_ge_p1p1_to_p2']
var _ge_dsm_precomp = Module['_ge_dsm_precomp'] = asm['_ge_dsm_precomp']
var _ge_frombytes_vartime = Module['_ge_frombytes_vartime'] = asm['_ge_frombytes_vartime']
var _ge_tobytes = Module['_ge_tobytes'] = asm['_ge_tobytes']
var _sc_0 = Module['_sc_0'] = asm['_sc_0']
var _sc_sub = Module['_sc_sub'] = asm['_sc_sub']
var _sc_reduce = Module['_sc_reduce'] = asm['_sc_reduce']
var _ge_p3_to_cached = Module['_ge_p3_to_cached'] = asm['_ge_p3_to_cached']
var _sc_check = Module['_sc_check'] = asm['_sc_check']
var _ge_add = Module['_ge_add'] = asm['_ge_add']
var runPostSets = Module['runPostSets'] = asm['runPostSets']
Runtime.stackAlloc = asm['stackAlloc']
Runtime.stackSave = asm['stackSave']
Runtime.stackRestore = asm['stackRestore']
Runtime.setTempRet0 = asm['setTempRet0']
Runtime.getTempRet0 = asm['getTempRet0']
var i64Math = (function () {
  var goog = {
    math: {}
  }
  goog.math.Long = function (low, high) {
    this.low_ = low | 0
    this.high_ = high | 0
  }
  goog.math.Long.IntCache_ = {}
  goog.math.Long.fromInt = function (value) {
    if (value >= -128 && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value]
      if (cachedObj) {
        return cachedObj
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0)
    if (value >= -128 && value < 128) {
      goog.math.Long.IntCache_[value] = obj
    }
    return obj
  }
  goog.math.Long.fromNumber = function (value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate()
    } else {
      return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0)
    }
  }
  goog.math.Long.fromBits = function (lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits)
  }
  goog.math.Long.fromString = function (str, opt_radix) {
    if (str.length === 0) {
      throw Error('number format error: empty string')
    }
    var radix = opt_radix || 10
    if (radix < 2 || radix > 36) {
      throw Error('radix out of range: ' + radix)
    }
    if (str.charAt(0) === '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate()
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str)
    }
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8))
    var result = goog.math.Long.ZERO
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i)
      var value = parseInt(str.substring(i, i + size), radix)
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size))
        result = result.multiply(power).add(goog.math.Long.fromNumber(value))
      } else {
        result = result.multiply(radixToPower)
        result = result.add(goog.math.Long.fromNumber(value))
      }
    }
    return result
  }
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24
  goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_
  goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2
  goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_
  goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_
  goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2
  goog.math.Long.ZERO = goog.math.Long.fromInt(0)
  goog.math.Long.ONE = goog.math.Long.fromInt(1)
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1)
  goog.math.Long.MAX_VALUE = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0)
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 2147483648 | 0)
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24)
  goog.math.Long.prototype.toInt = function () {
    return this.low_
  }
  goog.math.Long.prototype.toNumber = function () {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned()
  }
  goog.math.Long.prototype.toString = function (opt_radix) {
    var radix = opt_radix || 10
    if (radix < 2 || radix > 36) {
      throw Error('radix out of range: ' + radix)
    }
    if (this.isZero()) {
      return '0'
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        var radixLong = goog.math.Long.fromNumber(radix)
        var div = this.div(radixLong)
        var rem = div.multiply(radixLong).subtract(this)
        return div.toString(radix) + rem.toInt().toString(radix)
      } else {
        return '-' + this.negate().toString(radix)
      }
    }
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6))
    var rem = this
    var result = ''
    while (true) {
      var remDiv = rem.div(radixToPower)
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt()
      var digits = intval.toString(radix)
      rem = remDiv
      if (rem.isZero()) {
        return digits + result
      } else {
        while (digits.length < 6) {
          digits = '0' + digits
        }
        result = '' + digits + result
      }
    }
  }
  goog.math.Long.prototype.getHighBits = function () {
    return this.high_
  }
  goog.math.Long.prototype.getLowBits = function () {
    return this.low_
  }
  goog.math.Long.prototype.getLowBitsUnsigned = function () {
    return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_
  }
  goog.math.Long.prototype.getNumBitsAbs = function () {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64
      } else {
        return this.negate().getNumBitsAbs()
      }
    } else {
      var val = this.high_ !== 0 ? this.high_ : this.low_
      for (var bit = 31; bit > 0; bit--) {
        if ((val & 1 << bit) !== 0) {
          break
        }
      }
      return this.high_ !== 0 ? bit + 33 : bit + 1
    }
  }
  goog.math.Long.prototype.isZero = function () {
    return this.high_ === 0 && this.low_ === 0
  }
  goog.math.Long.prototype.isNegative = function () {
    return this.high_ < 0
  }
  goog.math.Long.prototype.isOdd = function () {
    return (this.low_ & 1) === 1
  }
  goog.math.Long.prototype.equals = function (other) {
    return this.high_ === other.high_ && this.low_ === other.low_
  }
  goog.math.Long.prototype.notEquals = function (other) {
    return this.high_ !== other.high_ || this.low_ !== other.low_
  }
  goog.math.Long.prototype.lessThan = function (other) {
    return this.compare(other) < 0
  }
  goog.math.Long.prototype.lessThanOrEqual = function (other) {
    return this.compare(other) <= 0
  }
  goog.math.Long.prototype.greaterThan = function (other) {
    return this.compare(other) > 0
  }
  goog.math.Long.prototype.greaterThanOrEqual = function (other) {
    return this.compare(other) >= 0
  }
  goog.math.Long.prototype.compare = function (other) {
    if (this.equals(other)) {
      return 0
    }
    var thisNeg = this.isNegative()
    var otherNeg = other.isNegative()
    if (thisNeg && !otherNeg) {
      return -1
    }
    if (!thisNeg && otherNeg) {
      return 1
    }
    if (this.subtract(other).isNegative()) {
      return -1
    } else {
      return 1
    }
  }
  goog.math.Long.prototype.negate = function () {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE
    } else {
      return this.not().add(goog.math.Long.ONE)
    }
  }
  goog.math.Long.prototype.add = function (other) {
    var a48 = this.high_ >>> 16
    var a32 = this.high_ & 65535
    var a16 = this.low_ >>> 16
    var a00 = this.low_ & 65535
    var b48 = other.high_ >>> 16
    var b32 = other.high_ & 65535
    var b16 = other.low_ >>> 16
    var b00 = other.low_ & 65535
    var c48 = 0

    var c32 = 0

    var c16 = 0

    var c00 = 0
    c00 += a00 + b00
    c16 += c00 >>> 16
    c00 &= 65535
    c16 += a16 + b16
    c32 += c16 >>> 16
    c16 &= 65535
    c32 += a32 + b32
    c48 += c32 >>> 16
    c32 &= 65535
    c48 += a48 + b48
    c48 &= 65535
    return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32)
  }
  goog.math.Long.prototype.subtract = function (other) {
    return this.add(other.negate())
  }
  goog.math.Long.prototype.multiply = function (other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO
    } else if (other.isZero()) {
      return goog.math.Long.ZERO
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate())
      } else {
        return this.negate().multiply(other).negate()
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate()
    }
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) && other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber())
    }
    var a48 = this.high_ >>> 16
    var a32 = this.high_ & 65535
    var a16 = this.low_ >>> 16
    var a00 = this.low_ & 65535
    var b48 = other.high_ >>> 16
    var b32 = other.high_ & 65535
    var b16 = other.low_ >>> 16
    var b00 = other.low_ & 65535
    var c48 = 0

    var c32 = 0

    var c16 = 0

    var c00 = 0
    c00 += a00 * b00
    c16 += c00 >>> 16
    c00 &= 65535
    c16 += a16 * b00
    c32 += c16 >>> 16
    c16 &= 65535
    c16 += a00 * b16
    c32 += c16 >>> 16
    c16 &= 65535
    c32 += a32 * b00
    c48 += c32 >>> 16
    c32 &= 65535
    c32 += a16 * b16
    c48 += c32 >>> 16
    c32 &= 65535
    c32 += a00 * b32
    c48 += c32 >>> 16
    c32 &= 65535
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48
    c48 &= 65535
    return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32)
  }
  goog.math.Long.prototype.div = function (other) {
    if (other.isZero()) {
      throw Error('division by zero')
    } else if (this.isZero()) {
      return goog.math.Long.ZERO
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) || other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE
      } else {
        var halfThis = this.shiftRight(1)
        var approx = halfThis.div(other).shiftLeft(1)
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE
        } else {
          var rem = this.subtract(other.multiply(approx))
          var result = approx.add(rem.div(other))
          return result
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate())
      } else {
        return this.negate().div(other).negate()
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate()
    }
    var res = goog.math.Long.ZERO
    var rem = this
    while (rem.greaterThanOrEqual(other)) {
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()))
      var log2 = Math.ceil(Math.log(approx) / Math.LN2)
      var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48)
      var approxRes = goog.math.Long.fromNumber(approx)
      var approxRem = approxRes.multiply(other)
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta
        approxRes = goog.math.Long.fromNumber(approx)
        approxRem = approxRes.multiply(other)
      }
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE
      }
      res = res.add(approxRes)
      rem = rem.subtract(approxRem)
    }
    return res
  }
  goog.math.Long.prototype.modulo = function (other) {
    return this.subtract(this.div(other).multiply(other))
  }
  goog.math.Long.prototype.not = function () {
    return goog.math.Long.fromBits(~this.low_, ~this.high_)
  }
  goog.math.Long.prototype.and = function (other) {
    return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_)
  }
  goog.math.Long.prototype.or = function (other) {
    return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_)
  }
  goog.math.Long.prototype.xor = function (other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_)
  }
  goog.math.Long.prototype.shiftLeft = function (numBits) {
    numBits &= 63
    if (numBits === 0) {
      return this
    } else {
      var low = this.low_
      if (numBits < 32) {
        var high = this.high_
        return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits)
      } else {
        return goog.math.Long.fromBits(0, low << numBits - 32)
      }
    }
  }
  goog.math.Long.prototype.shiftRight = function (numBits) {
    numBits &= 63
    if (numBits === 0) {
      return this
    } else {
      var high = this.high_
      if (numBits < 32) {
        var low = this.low_
        return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits)
      } else {
        return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1)
      }
    }
  }
  goog.math.Long.prototype.shiftRightUnsigned = function (numBits) {
    numBits &= 63
    if (numBits === 0) {
      return this
    } else {
      var high = this.high_
      if (numBits < 32) {
        var low = this.low_
        return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits)
      } else if (numBits === 32) {
        return goog.math.Long.fromBits(high, 0)
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0)
      }
    }
  }
  var navigator = {
    appName: 'Modern Browser'
  }
  var dbits
  var canary = 0xdeadbeefcafe
  var j_lm = (canary & 16777215) === 15715070

  function BigInteger (a, b, c) {
    if (a !== null) {
      if (typeof a === 'number') this.fromNumber(a, b, c)
      else if (b === null && typeof a !== 'string') this.fromString(a, 256)
      else this.fromString(a, b)
    }
  }

  function nbi () {
    return new BigInteger(null)
  }

  function am1 (i, x, w, j, c, n) {
    while (--n >= 0) {
      var v = x * this[i++] + w[j] + c
      c = Math.floor(v / 67108864)
      w[j++] = v & 67108863
    }
    return c
  }

  function am2 (i, x, w, j, c, n) {
    var xl = x & 32767

    var xh = x >> 15
    while (--n >= 0) {
      var l = this[i] & 32767
      var h = this[i++] >> 15
      var m = xh * l + h * xl
      l = xl * l + ((m & 32767) << 15) + w[j] + (c & 1073741823)
      c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30)
      w[j++] = l & 1073741823
    }
    return c
  }

  function am3 (i, x, w, j, c, n) {
    var xl = x & 16383

    var xh = x >> 14
    while (--n >= 0) {
      var l = this[i] & 16383
      var h = this[i++] >> 14
      var m = xh * l + h * xl
      l = xl * l + ((m & 16383) << 14) + w[j] + c
      c = (l >> 28) + (m >> 14) + xh * h
      w[j++] = l & 268435455
    }
    return c
  }
  if (j_lm && navigator.appName === 'Microsoft Internet Explorer') {
    BigInteger.prototype.am = am2
    dbits = 30
  } else if (j_lm && navigator.appName !== 'Netscape') {
    BigInteger.prototype.am = am1
    dbits = 26
  } else {
    BigInteger.prototype.am = am3
    dbits = 28
  }
  BigInteger.prototype.DB = dbits
  BigInteger.prototype.DM = (1 << dbits) - 1
  BigInteger.prototype.DV = 1 << dbits
  var BI_FP = 52
  BigInteger.prototype.FV = Math.pow(2, BI_FP)
  BigInteger.prototype.F1 = BI_FP - dbits
  BigInteger.prototype.F2 = 2 * dbits - BI_FP
  var BI_RM = '0123456789abcdefghijklmnopqrstuvwxyz'
  var BI_RC = new Array()
  var rr, vv
  rr = '0'.charCodeAt(0)
  for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv
  rr = 'a'.charCodeAt(0)
  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv
  rr = 'A'.charCodeAt(0)
  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv

  function int2char (n) {
    return BI_RM.charAt(n)
  }

  function intAt (s, i) {
    var c = BI_RC[s.charCodeAt(i)]
    return c === null ? -1 : c
  }

  function bnpCopyTo (r) {
    for (var i = this.t - 1; i >= 0; --i) r[i] = this[i]
    r.t = this.t
    r.s = this.s
  }

  function bnpFromInt (x) {
    this.t = 1
    this.s = x < 0 ? -1 : 0
    if (x > 0) this[0] = x
    else if (x < -1) this[0] = x + DV
    else this.t = 0
  }

  function nbv (i) {
    var r = nbi()
    r.fromInt(i)
    return r
  }

  function bnpFromString (s, b) {
    var k
    if (b === 16) k = 4
    else if (b === 8) k = 3
    else if (b === 256) k = 8
    else if (b === 2) k = 1
    else if (b === 32) k = 5
    else if (b === 4) k = 2
    else {
      this.fromRadix(s, b)
      return
    }
    this.t = 0
    this.s = 0
    var i = s.length

    var mi = false

    var sh = 0
    while (--i >= 0) {
      var x = k === 8 ? s[i] & 255 : intAt(s, i)
      if (x < 0) {
        if (s.charAt(i) === '-') mi = true
        continue
      }
      mi = false
      if (sh === 0) this[this.t++] = x
      else if (sh + k > this.DB) {
        this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh
        this[this.t++] = x >> this.DB - sh
      } else this[this.t - 1] |= x << sh
      sh += k
      if (sh >= this.DB) sh -= this.DB
    }
    if (k === 8 && (s[0] & 128) !== 0) {
      this.s = -1
      if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh
    }
    this.clamp()
    if (mi) BigInteger.ZERO.subTo(this, this)
  }

  function bnpClamp () {
    var c = this.s & this.DM
    while (this.t > 0 && this[this.t - 1] === c) --this.t
  }

  function bnToString (b) {
    if (this.s < 0) return '-' + this.negate().toString(b)
    var k
    if (b === 16) k = 4
    else if (b === 8) k = 3
    else if (b === 2) k = 1
    else if (b === 32) k = 5
    else if (b === 4) k = 2
    else return this.toRadix(b)
    var km = (1 << k) - 1

    var d; var m = false

    var r = ''

    var i = this.t
    var p = this.DB - i * this.DB % k
    if (i-- > 0) {
      if (p < this.DB && (d = this[i] >> p) > 0) {
        m = true
        r = int2char(d)
      }
      while (i >= 0) {
        if (p < k) {
          d = (this[i] & (1 << p) - 1) << k - p
          d |= this[--i] >> (p += this.DB - k)
        } else {
          d = this[i] >> (p -= k) & km
          if (p <= 0) {
            p += this.DB
            --i
          }
        }
        if (d > 0) m = true
        if (m) r += int2char(d)
      }
    }
    return m ? r : '0'
  }

  function bnNegate () {
    var r = nbi()
    BigInteger.ZERO.subTo(this, r)
    return r
  }

  function bnAbs () {
    return this.s < 0 ? this.negate() : this
  }

  function bnCompareTo (a) {
    var r = this.s - a.s
    if (r !== 0) return r
    var i = this.t
    r = i - a.t
    if (r !== 0) return this.s < 0 ? -r : r
    while (--i >= 0) { if ((r = this[i] - a[i]) !== 0) return r }
    return 0
  }

  function nbits (x) {
    var r = 1

    var t
    if ((t = x >>> 16) !== 0) {
      x = t
      r += 16
    }
    if ((t = x >> 8) !== 0) {
      x = t
      r += 8
    }
    if ((t = x >> 4) !== 0) {
      x = t
      r += 4
    }
    if ((t = x >> 2) !== 0) {
      x = t
      r += 2
    }
    if ((t = x >> 1) !== 0) {
      x = t
      r += 1
    }
    return r
  }

  function bnBitLength () {
    if (this.t <= 0) return 0
    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM)
  }

  function bnpDLShiftTo (n, r) {
    var i
    for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i]
    for (i = n - 1; i >= 0; --i) r[i] = 0
    r.t = this.t + n
    r.s = this.s
  }

  function bnpDRShiftTo (n, r) {
    for (var i = n; i < this.t; ++i) r[i - n] = this[i]
    r.t = Math.max(this.t - n, 0)
    r.s = this.s
  }

  function bnpLShiftTo (n, r) {
    var bs = n % this.DB
    var cbs = this.DB - bs
    var bm = (1 << cbs) - 1
    var ds = Math.floor(n / this.DB)

    var c = this.s << bs & this.DM

    var i
    for (i = this.t - 1; i >= 0; --i) {
      r[i + ds + 1] = this[i] >> cbs | c
      c = (this[i] & bm) << bs
    }
    for (i = ds - 1; i >= 0; --i) r[i] = 0
    r[ds] = c
    r.t = this.t + ds + 1
    r.s = this.s
    r.clamp()
  }

  function bnpRShiftTo (n, r) {
    r.s = this.s
    var ds = Math.floor(n / this.DB)
    if (ds >= this.t) {
      r.t = 0
      return
    }
    var bs = n % this.DB
    var cbs = this.DB - bs
    var bm = (1 << bs) - 1
    r[0] = this[ds] >> bs
    for (var i = ds + 1; i < this.t; ++i) {
      r[i - ds - 1] |= (this[i] & bm) << cbs
      r[i - ds] = this[i] >> bs
    }
    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs
    r.t = this.t - ds
    r.clamp()
  }

  function bnpSubTo (a, r) {
    var i = 0

    var c = 0

    var m = Math.min(a.t, this.t)
    while (i < m) {
      c += this[i] - a[i]
      r[i++] = c & this.DM
      c >>= this.DB
    }
    if (a.t < this.t) {
      c -= a.s
      while (i < this.t) {
        c += this[i]
        r[i++] = c & this.DM
        c >>= this.DB
      }
      c += this.s
    } else {
      c += this.s
      while (i < a.t) {
        c -= a[i]
        r[i++] = c & this.DM
        c >>= this.DB
      }
      c -= a.s
    }
    r.s = c < 0 ? -1 : 0
    if (c < -1) r[i++] = this.DV + c
    else if (c > 0) r[i++] = c
    r.t = i
    r.clamp()
  }

  function bnpMultiplyTo (a, r) {
    var x = this.abs()

    var y = a.abs()
    var i = x.t
    r.t = i + y.t
    while (--i >= 0) r[i] = 0
    for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t)
    r.s = 0
    r.clamp()
    if (this.s !== a.s) BigInteger.ZERO.subTo(r, r)
  }

  function bnpSquareTo (r) {
    var x = this.abs()
    var i = r.t = 2 * x.t
    while (--i >= 0) r[i] = 0
    for (i = 0; i < x.t - 1; ++i) {
      var c = x.am(i, x[i], r, 2 * i, 0, 1)
      if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
        r[i + x.t] -= x.DV
        r[i + x.t + 1] = 1
      }
    }
    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1)
    r.s = 0
    r.clamp()
  }

  function bnpDivRemTo (m, q, r) {
    var pm = m.abs()
    if (pm.t <= 0) return
    var pt = this.abs()
    if (pt.t < pm.t) {
      if (q !== null) q.fromInt(0)
      if (r !== null) this.copyTo(r)
      return
    }
    if (r === null) r = nbi()
    var y = nbi()

    var ts = this.s

    var ms = m.s
    var nsh = this.DB - nbits(pm[pm.t - 1])
    if (nsh > 0) {
      pm.lShiftTo(nsh, y)
      pt.lShiftTo(nsh, r)
    } else {
      pm.copyTo(y)
      pt.copyTo(r)
    }
    var ys = y.t
    var y0 = y[ys - 1]
    if (y0 === 0) return
    var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0)
    var d1 = this.FV / yt

    var d2 = (1 << this.F1) / yt

    var e = 1 << this.F2
    var i = r.t

    var j = i - ys

    var t = q === null ? nbi() : q
    y.dlShiftTo(j, t)
    if (r.compareTo(t) >= 0) {
      r[r.t++] = 1
      r.subTo(t, r)
    }
    BigInteger.ONE.dlShiftTo(ys, t)
    t.subTo(y, y)
    while (y.t < ys) y[y.t++] = 0
    while (--j >= 0) {
      var qd = r[--i] === y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2)
      if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
        y.dlShiftTo(j, t)
        r.subTo(t, r)
        while (r[i] < --qd) r.subTo(t, r)
      }
    }
    if (q !== null) {
      r.drShiftTo(ys, q)
      if (ts !== ms) BigInteger.ZERO.subTo(q, q)
    }
    r.t = ys
    r.clamp()
    if (nsh > 0) r.rShiftTo(nsh, r)
    if (ts < 0) BigInteger.ZERO.subTo(r, r)
  }

  function bnMod (a) {
    var r = nbi()
    this.abs().divRemTo(a, null, r)
    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r)
    return r
  }

  function Classic (m) {
    this.m = m
  }

  function cConvert (x) {
    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m)
    else return x
  }

  function cRevert (x) {
    return x
  }

  function cReduce (x) {
    x.divRemTo(this.m, null, x)
  }

  function cMulTo (x, y, r) {
    x.multiplyTo(y, r)
    this.reduce(r)
  }

  function cSqrTo (x, r) {
    x.squareTo(r)
    this.reduce(r)
  }
  Classic.prototype.convert = cConvert
  Classic.prototype.revert = cRevert
  Classic.prototype.reduce = cReduce
  Classic.prototype.mulTo = cMulTo
  Classic.prototype.sqrTo = cSqrTo

  function bnpInvDigit () {
    if (this.t < 1) return 0
    var x = this[0]
    if ((x & 1) === 0) return 0
    var y = x & 3
    y = y * (2 - (x & 15) * y) & 15
    y = y * (2 - (x & 255) * y) & 255
    y = y * (2 - ((x & 65535) * y & 65535)) & 65535
    y = y * (2 - x * y % this.DV) % this.DV
    return y > 0 ? this.DV - y : -y
  }

  function Montgomery (m) {
    this.m = m
    this.mp = m.invDigit()
    this.mpl = this.mp & 32767
    this.mph = this.mp >> 15
    this.um = (1 << m.DB - 15) - 1
    this.mt2 = 2 * m.t
  }

  function montConvert (x) {
    var r = nbi()
    x.abs().dlShiftTo(this.m.t, r)
    r.divRemTo(this.m, null, r)
    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r)
    return r
  }

  function montRevert (x) {
    var r = nbi()
    x.copyTo(r)
    this.reduce(r)
    return r
  }

  function montReduce (x) {
    while (x.t <= this.mt2) x[x.t++] = 0
    for (var i = 0; i < this.m.t; ++i) {
      var j = x[i] & 32767
      var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM
      j = i + this.m.t
      x[j] += this.m.am(0, u0, x, i, 0, this.m.t)
      while (x[j] >= x.DV) {
        x[j] -= x.DV
        x[++j]++
      }
    }
    x.clamp()
    x.drShiftTo(this.m.t, x)
    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x)
  }

  function montSqrTo (x, r) {
    x.squareTo(r)
    this.reduce(r)
  }

  function montMulTo (x, y, r) {
    x.multiplyTo(y, r)
    this.reduce(r)
  }
  Montgomery.prototype.convert = montConvert
  Montgomery.prototype.revert = montRevert
  Montgomery.prototype.reduce = montReduce
  Montgomery.prototype.mulTo = montMulTo
  Montgomery.prototype.sqrTo = montSqrTo

  function bnpIsEven () {
    return (this.t > 0 ? this[0] & 1 : this.s) === 0
  }

  function bnpExp (e, z) {
    if (e > 4294967295 || e < 1) return BigInteger.ONE
    var r = nbi()

    var r2 = nbi()

    var g = z.convert(this)

    var i = nbits(e) - 1
    g.copyTo(r)
    while (--i >= 0) {
      z.sqrTo(r, r2)
      if ((e & 1 << i) > 0) z.mulTo(r2, g, r)
      else {
        var t = r
        r = r2
        r2 = t
      }
    }
    return z.revert(r)
  }

  function bnModPowInt (e, m) {
    var z
    if (e < 256 || m.isEven()) z = new Classic(m)
    else z = new Montgomery(m)
    return this.exp(e, z)
  }
  BigInteger.prototype.copyTo = bnpCopyTo
  BigInteger.prototype.fromInt = bnpFromInt
  BigInteger.prototype.fromString = bnpFromString
  BigInteger.prototype.clamp = bnpClamp
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo
  BigInteger.prototype.drShiftTo = bnpDRShiftTo
  BigInteger.prototype.lShiftTo = bnpLShiftTo
  BigInteger.prototype.rShiftTo = bnpRShiftTo
  BigInteger.prototype.subTo = bnpSubTo
  BigInteger.prototype.multiplyTo = bnpMultiplyTo
  BigInteger.prototype.squareTo = bnpSquareTo
  BigInteger.prototype.divRemTo = bnpDivRemTo
  BigInteger.prototype.invDigit = bnpInvDigit
  BigInteger.prototype.isEven = bnpIsEven
  BigInteger.prototype.exp = bnpExp
  BigInteger.prototype.toString = bnToString
  BigInteger.prototype.negate = bnNegate
  BigInteger.prototype.abs = bnAbs
  BigInteger.prototype.compareTo = bnCompareTo
  BigInteger.prototype.bitLength = bnBitLength
  BigInteger.prototype.mod = bnMod
  BigInteger.prototype.modPowInt = bnModPowInt
  BigInteger.ZERO = nbv(0)
  BigInteger.ONE = nbv(1)

  function bnpFromRadix (s, b) {
    this.fromInt(0)
    if (b === null) b = 10
    var cs = this.chunkSize(b)
    var d = Math.pow(b, cs)

    var mi = false

    var j = 0

    var w = 0
    for (var i = 0; i < s.length; ++i) {
      var x = intAt(s, i)
      if (x < 0) {
        if (s.charAt(i) === '-' && this.signum() === 0) mi = true
        continue
      }
      w = b * w + x
      if (++j >= cs) {
        this.dMultiply(d)
        this.dAddOffset(w, 0)
        j = 0
        w = 0
      }
    }
    if (j > 0) {
      this.dMultiply(Math.pow(b, j))
      this.dAddOffset(w, 0)
    }
    if (mi) BigInteger.ZERO.subTo(this, this)
  }

  function bnpChunkSize (r) {
    return Math.floor(Math.LN2 * this.DB / Math.log(r))
  }

  function bnSigNum () {
    if (this.s < 0) return -1
    else if (this.t <= 0 || this.t === 1 && this[0] <= 0) return 0
    else return 1
  }

  function bnpDMultiply (n) {
    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t)
    ++this.t
    this.clamp()
  }

  function bnpDAddOffset (n, w) {
    if (n === 0) return
    while (this.t <= w) this[this.t++] = 0
    this[w] += n
    while (this[w] >= this.DV) {
      this[w] -= this.DV
      if (++w >= this.t) this[this.t++] = 0
      ++this[w]
    }
  }

  function bnpToRadix (b) {
    if (b === null) b = 10
    if (this.signum() === 0 || b < 2 || b > 36) return '0'
    var cs = this.chunkSize(b)
    var a = Math.pow(b, cs)
    var d = nbv(a)

    var y = nbi()

    var z = nbi()

    var r = ''
    this.divRemTo(d, y, z)
    while (y.signum() > 0) {
      r = (a + z.intValue()).toString(b).substr(1) + r
      y.divRemTo(d, y, z)
    }
    return z.intValue().toString(b) + r
  }

  function bnIntValue () {
    if (this.s < 0) {
      if (this.t === 1) return this[0] - this.DV
      else if (this.t === 0) return -1
    } else if (this.t === 1) return this[0]
    else if (this.t === 0) return 0
    return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0]
  }

  function bnpAddTo (a, r) {
    var i = 0

    var c = 0

    var m = Math.min(a.t, this.t)
    while (i < m) {
      c += this[i] + a[i]
      r[i++] = c & this.DM
      c >>= this.DB
    }
    if (a.t < this.t) {
      c += a.s
      while (i < this.t) {
        c += this[i]
        r[i++] = c & this.DM
        c >>= this.DB
      }
      c += this.s
    } else {
      c += this.s
      while (i < a.t) {
        c += a[i]
        r[i++] = c & this.DM
        c >>= this.DB
      }
      c += a.s
    }
    r.s = c < 0 ? -1 : 0
    if (c > 0) r[i++] = c
    else if (c < -1) r[i++] = this.DV + c
    r.t = i
    r.clamp()
  }
  BigInteger.prototype.fromRadix = bnpFromRadix
  BigInteger.prototype.chunkSize = bnpChunkSize
  BigInteger.prototype.signum = bnSigNum
  BigInteger.prototype.dMultiply = bnpDMultiply
  BigInteger.prototype.dAddOffset = bnpDAddOffset
  BigInteger.prototype.toRadix = bnpToRadix
  BigInteger.prototype.intValue = bnIntValue
  BigInteger.prototype.addTo = bnpAddTo
  var Wrapper = {
    abs: function (l, h) {
      var x = new goog.math.Long(l, h)
      var ret
      if (x.isNegative()) {
        ret = x.negate()
      } else {
        ret = x
      }
      HEAP32[tempDoublePtr >> 2] = ret.low_
      HEAP32[tempDoublePtr + 4 >> 2] = ret.high_
    },
    ensureTemps: function () {
      if (Wrapper.ensuredTemps) return
      Wrapper.ensuredTemps = true
      Wrapper.two32 = new BigInteger()
      Wrapper.two32.fromString('4294967296', 10)
      Wrapper.two64 = new BigInteger()
      Wrapper.two64.fromString('18446744073709551616', 10)
      Wrapper.temp1 = new BigInteger()
      Wrapper.temp2 = new BigInteger()
    },
    lh2bignum: function (l, h) {
      var a = new BigInteger()
      a.fromString(h.toString(), 10)
      var b = new BigInteger()
      a.multiplyTo(Wrapper.two32, b)
      var c = new BigInteger()
      c.fromString(l.toString(), 10)
      var d = new BigInteger()
      c.addTo(b, d)
      return d
    },
    stringify: function (l, h, unsigned) {
      var ret = (new goog.math.Long(l, h)).toString()
      if (unsigned && ret[0] === '-') {
        Wrapper.ensureTemps()
        var bignum = new BigInteger()
        bignum.fromString(ret, 10)
        ret = new BigInteger()
        Wrapper.two64.addTo(bignum, ret)
        ret = ret.toString(10)
      }
      return ret
    },
    fromString: function (str, base, min, max, unsigned) {
      Wrapper.ensureTemps()
      var bignum = new BigInteger()
      bignum.fromString(str, base)
      var bigmin = new BigInteger()
      bigmin.fromString(min, 10)
      var bigmax = new BigInteger()
      bigmax.fromString(max, 10)
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger()
        bignum.addTo(Wrapper.two64, temp)
        bignum = temp
      }
      var error = false
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin
        error = true
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax
        error = true
      }
      var ret = goog.math.Long.fromString(bignum.toString())
      HEAP32[tempDoublePtr >> 2] = ret.low_
      HEAP32[tempDoublePtr + 4 >> 2] = ret.high_
      if (error) throw 'range error'
    }
  }
  return Wrapper
})()
if (memoryInitializer) {
  if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer
  }
  if ((ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) && !ENVIROMENT_IS_WEB) {
    var data = Module['readBinary'](memoryInitializer)
    HEAPU8.set(data, STATIC_BASE)
  } else {
    addRunDependency('memory initializer')
    Browser.asyncLoad(memoryInitializer, function (data) {
      HEAPU8.set(data, STATIC_BASE)
      removeRunDependency('memory initializer')
    }, function (data) {
      throw 'could not load memory initializer ' + memoryInitializer
    })
  }
}

function ExitStatus (status) {
  this.name = 'ExitStatus'
  this.message = 'Program terminated with exit(' + status + ')'
  this.status = status
}
ExitStatus.prototype = new Error()
ExitStatus.prototype.constructor = ExitStatus
var initialStackTop
var preloadStartTime = null
var calledMain = false
dependenciesFulfilled = function runCaller () {
  if (!Module['calledRun'] && shouldRunNow) run()
  if (!Module['calledRun']) dependenciesFulfilled = runCaller
}
Module['callMain'] = Module.callMain = function callMain (args) {
  assert(runDependencies === 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)')
  assert(__ATPRERUN__.length === 0, 'cannot call main when preRun functions remain to be called')
  args = args || []
  ensureInitRuntime()
  var argc = args.length + 1

  function pad () {
    for (var i = 0; i < 4 - 1; i++) {
      argv.push(0)
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL)]
  pad()
  for (var i = 0; i < argc - 1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL))
    pad()
  }
  argv.push(0)
  argv = allocate(argv, 'i32', ALLOC_NORMAL)
  initialStackTop = STACKTOP
  try {
    var ret = Module['_main'](argc, argv, 0)
    exit(ret)
  } catch (e) {
    if (e instanceof ExitStatus) {
      return
    } else if (e === 'SimulateInfiniteLoop') {
      Module['noExitRuntime'] = true
      return
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack])
      throw e
    }
  } finally {
    calledMain = true
  }
}

function run (args) {
  args = args || Module['arguments']
  if (preloadStartTime === null) preloadStartTime = Date.now()
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running')
    return
  }
  preRun()
  if (runDependencies > 0) return
  if (Module['calledRun']) return

  function doRun () {
    if (Module['calledRun']) return
    Module['calledRun'] = true
    if (ABORT) return
    ensureInitRuntime()
    preMain()
    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms')
    }
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args)
    }
    postRun()
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...')
    setTimeout(function () {
      setTimeout(function () {
        Module['setStatus']('')
      }, 1)
      doRun()
    }, 1)
  } else {
    doRun()
  }
}
Module['run'] = Module.run = run

function exit (status) {
  if (Module['noExitRuntime']) {
    return
  }
  ABORT = true
  EXITSTATUS = status
  STACKTOP = initialStackTop
  exitRuntime()
  if (ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WEB) {
    process['stdout']['once']('drain', function () {
      process['exit'](status)
    })
    console.log(' ')
    setTimeout(function () {
      process['exit'](status)
    }, 500)
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status)
  }
  throw new ExitStatus(status)
}
Module['exit'] = Module.exit = exit

function abort (text) {
  if (text) {
    Module.print(text)
    Module.printErr(text)
  }
  ABORT = true
  EXITSTATUS = 1
  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.'
  throw 'abort() at ' + stackTrace() + extra
}
Module['abort'] = Module.abort = abort
if (Module['preInit']) {
  if (typeof Module['preInit'] === 'function') Module['preInit'] = [Module['preInit']]
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()()
  }
}
var shouldRunNow = true
if (Module['noInitialRun']) {
  shouldRunNow = false
}
run()

module.exports = Module

}).call(this,require('_process'),require("buffer").Buffer,"/lib")
},{"_process":119,"buffer":48,"crypto":56,"fs":1,"path":112}],162:[function(require,module,exports){
// Copyright by Undiclosed Author(s) of Unknown Origin
// Copyright (c) 2018, The TurtleCoin Developers
//
// Please see the included LICENSE file for more information.

'use strict'

const crc = require('crc')

const GetRandomValues = require('get-random-values')

var defaultWordset = 'english'

function getChecksumIndex (words, prefixLength) {
  var trimmerWords = ''
  for (var i = 0; i < words.length; i++) {
    trimmerWords += words[i].slice(0, prefixLength)
  }
  var checksum = crc.crc32(trimmerWords)
  var index = checksum % words.length
  return index
}

function encode (str, wordsetName) {
  'use strict'
  wordsetName = wordsetName || defaultWordset
  var wordset = words[wordsetName]
  var out = []
  var n = wordset.words.length
  for (var j = 0; j < str.length; j += 8) {
    str = str.slice(0, j) + swapEndian4byte(str.slice(j, j + 8)) + str.slice(j + 8)
  }
  for (var i = 0; i < str.length; i += 8) {
    var x = parseInt(str.substr(i, 8), 16)
    var w1 = (x % n)
    var w2 = (Math.floor(x / n) + w1) % n
    var w3 = (Math.floor(Math.floor(x / n) / n) + w2) % n
    out = out.concat([wordset.words[w1], wordset.words[w2], wordset.words[w3]])
  }
  if (wordset.prefixLength > 0) {
    out.push(out[getChecksumIndex(out, wordset.prefixLength)])
  }
  return out.join(' ')
}

function swapEndian4byte (str) {
  'use strict'
  if (str.length !== 8) throw new Error('Invalid input length: ' + str.length)
  return str.slice(6, 8) + str.slice(4, 6) + str.slice(2, 4) + str.slice(0, 2)
}

function decode (str, wordsetName) {
  'use strict'
  wordsetName = wordsetName || defaultWordset
  var wordset = words[wordsetName]
  var out = ''
  var n = wordset.words.length
  var wlist = str.toLowerCase().split(' ')
  var checksumWord = ''
  if (wlist.length < 12) throw new Error("You've entered too few words, please try again")
  if ((wordset.prefixLength === 0 && (wlist.length % 3 !== 0)) ||
    (wordset.prefixLength > 0 && (wlist.length % 3 === 2))) throw new Error("You've entered too few words, please try again")
  if (wordset.prefixLength > 0 && (wlist.length % 3 === 0)) throw new Error('You seem to be missing the last word in your private key, please try again')
  if (wordset.prefixLength > 0) {
    // Pop checksum from mnemonic
    checksumWord = wlist.pop()
  }
  // Decode mnemonic
  for (var i = 0; i < wlist.length; i += 3) {
    var w1, w2, w3
    if (wordset.prefixLength === 0) {
      w1 = wordset.words.indexOf(wlist[i])
      w2 = wordset.words.indexOf(wlist[i + 1])
      w3 = wordset.words.indexOf(wlist[i + 2])
    } else {
      w1 = wordset.trunc_words.indexOf(wlist[i].slice(0, wordset.prefixLength))
      w2 = wordset.trunc_words.indexOf(wlist[i + 1].slice(0, wordset.prefixLength))
      w3 = wordset.trunc_words.indexOf(wlist[i + 2].slice(0, wordset.prefixLength))
    }
    if (w1 === -1 || w2 === -1 || w3 === -1) {
      throw new Error('invalid word in mnemonic')
    }
    var x = w1 + n * (((n - w1) + w2) % n) + n * n * (((n - w2) + w3) % n)
    if (x % n !== w1) throw new Error('Something went wrong when decoding your private key, please try again')
    out += swapEndian4byte(('0000000' + x.toString(16)).slice(-8))
  }
  // Verify checksum
  if (wordset.prefixLength > 0) {
    var index = getChecksumIndex(wlist, wordset.prefixLength)
    var expectedChecksumWord = wlist[index]
    if (expectedChecksumWord.slice(0, wordset.prefixLength) !== checksumWord.slice(0, wordset.prefixLength)) {
      throw new Error('Your private key could not be verified, please try again')
    }
  }
  return out
}

function random (bits) {
  'use strict'
  if (bits % 32 !== 0) throw new Error('Something weird went wrong: Invalid number of bits - ' + bits)
  var array = new Uint8Array(bits / 8)

  var i = 0

  function arrIsZero () {
    for (var j = 0; j < bits / 8; ++j) {
      if (array[j] !== 0) return false
    }
    return true
  }

  do {
    GetRandomValues(array)

    ++i
  } while (i < 5 && arrIsZero())
  if (arrIsZero()) {
    throw new Error('Something went wrong and we could not securely generate random data for your account')
  }
  // Convert to hex
  var out = ''
  for (var j = 0; j < bits / 8; ++j) {
    out += ('0000000' + array[j].toString(16)).slice(-8)
  }
  return out
}

var words = {
  'electrum': {
    prefixLength: 0,
    words: [
      'like', 'just', 'love', 'know', 'never', 'want', 'time', 'out', 'there',
      'make', 'look', 'eye', 'down', 'only', 'think', 'heart', 'back', 'then',
      'into', 'about', 'more', 'away', 'still', 'them', 'take', 'thing', 'even',
      'through', 'long', 'always', 'world', 'too', 'friend', 'tell', 'try',
      'hand', 'thought', 'over', 'here', 'other', 'need', 'smile', 'again',
      'much', 'cry', 'been', 'night', 'ever', 'little', 'said', 'end', 'some',
      'those', 'around', 'mind', 'people', 'girl', 'leave', 'dream', 'left',
      'turn', 'myself', 'give', 'nothing', 'really', 'off', 'before',
      'something', 'find', 'walk', 'wish', 'good', 'once', 'place', 'ask',
      'stop', 'keep', 'watch', 'seem', 'everything', 'wait', 'got', 'yet',
      'made', 'remember', 'start', 'alone', 'run', 'hope', 'maybe', 'believe',
      'body', 'hate', 'after', 'close', 'talk', 'stand', 'own', 'each', 'hurt',
      'help', 'home', 'god', 'soul', 'new', 'many', 'two', 'inside', 'should',
      'true', 'first', 'fear', 'mean', 'better', 'play', 'another', 'gone',
      'change', 'use', 'wonder', 'someone', 'hair', 'cold', 'open', 'best',
      'any', 'behind', 'happen', 'water', 'dark', 'laugh', 'stay', 'forever',
      'name', 'work', 'show', 'sky', 'break', 'came', 'deep', 'door', 'put',
      'black', 'together', 'upon', 'happy', 'such', 'great', 'white', 'matter',
      'fill', 'past', 'please', 'burn', 'cause', 'enough', 'touch', 'moment',
      'soon', 'voice', 'scream', 'anything', 'stare', 'sound', 'red', 'everyone',
      'hide', 'kiss', 'truth', 'death', 'beautiful', 'mine', 'blood', 'broken',
      'very', 'pass', 'next', 'forget', 'tree', 'wrong', 'air', 'mother',
      'understand', 'lip', 'hit', 'wall', 'memory', 'sleep', 'free', 'high',
      'realize', 'school', 'might', 'skin', 'sweet', 'perfect', 'blue', 'kill',
      'breath', 'dance', 'against', 'fly', 'between', 'grow', 'strong', 'under',
      'listen', 'bring', 'sometimes', 'speak', 'pull', 'person', 'become',
      'family', 'begin', 'ground', 'real', 'small', 'father', 'sure', 'feet',
      'rest', 'young', 'finally', 'land', 'across', 'today', 'different', 'guy',
      'line', 'fire', 'reason', 'reach', 'second', 'slowly', 'write', 'eat',
      'smell', 'mouth', 'step', 'learn', 'three', 'floor', 'promise', 'breathe',
      'darkness', 'push', 'earth', 'guess', 'save', 'song', 'above', 'along',
      'both', 'color', 'house', 'almost', 'sorry', 'anymore', 'brother', 'okay',
      'dear', 'game', 'fade', 'already', 'apart', 'warm', 'beauty', 'heard',
      'notice', 'question', 'shine', 'began', 'piece', 'whole', 'shadow',
      'secret', 'street', 'within', 'finger', 'point', 'morning', 'whisper',
      'child', 'moon', 'green', 'story', 'glass', 'kid', 'silence', 'since',
      'soft', 'yourself', 'empty', 'shall', 'angel', 'answer', 'baby', 'bright',
      'dad', 'path', 'worry', 'hour', 'drop', 'follow', 'power', 'war', 'half',
      'flow', 'heaven', 'act', 'chance', 'fact', 'least', 'tired', 'children',
      'near', 'quite', 'afraid', 'rise', 'sea', 'taste', 'window', 'cover',
      'nice', 'trust', 'lot', 'sad', 'cool', 'force', 'peace', 'return', 'blind',
      'easy', 'ready', 'roll', 'rose', 'drive', 'held', 'music', 'beneath',
      'hang', 'mom', 'paint', 'emotion', 'quiet', 'clear', 'cloud', 'few',
      'pretty', 'bird', 'outside', 'paper', 'picture', 'front', 'rock', 'simple',
      'anyone', 'meant', 'reality', 'road', 'sense', 'waste', 'bit', 'leaf',
      'thank', 'happiness', 'meet', 'men', 'smoke', 'truly', 'decide', 'self',
      'age', 'book', 'form', 'alive', 'carry', 'escape', 'damn', 'instead',
      'able', 'ice', 'minute', 'throw', 'catch', 'leg', 'ring', 'course',
      'goodbye', 'lead', 'poem', 'sick', 'corner', 'desire', 'known', 'problem',
      'remind', 'shoulder', 'suppose', 'toward', 'wave', 'drink', 'jump',
      'woman', 'pretend', 'sister', 'week', 'human', 'joy', 'crack', 'grey',
      'pray', 'surprise', 'dry', 'knee', 'less', 'search', 'bleed', 'caught',
      'clean', 'embrace', 'future', 'king', 'son', 'sorrow', 'chest', 'hug',
      'remain', 'sat', 'worth', 'blow', 'daddy', 'final', 'parent', 'tight',
      'also', 'create', 'lonely', 'safe', 'cross', 'dress', 'evil', 'silent',
      'bone', 'fate', 'perhaps', 'anger', 'class', 'scar', 'snow', 'tiny',
      'tonight', 'continue', 'control', 'dog', 'edge', 'mirror', 'month',
      'suddenly', 'comfort', 'given', 'loud', 'quickly', 'gaze', 'plan', 'rush',
      'stone', 'town', 'battle', 'ignore', 'spirit', 'stood', 'stupid', 'yours',
      'brown', 'build', 'dust', 'hey', 'kept', 'pay', 'phone', 'twist',
      'although', 'ball', 'beyond', 'hidden', 'nose', 'taken', 'fail', 'float',
      'pure', 'somehow', 'wash', 'wrap', 'angry', 'cheek', 'creature',
      'forgotten', 'heat', 'rip', 'single', 'space', 'special', 'weak',
      'whatever', 'yell', 'anyway', 'blame', 'job', 'choose', 'country', 'curse',
      'drift', 'echo', 'figure', 'grew', 'laughter', 'neck', 'suffer', 'worse',
      'yeah', 'disappear', 'foot', 'forward', 'knife', 'mess', 'somewhere',
      'stomach', 'storm', 'beg', 'idea', 'lift', 'offer', 'breeze', 'field',
      'five', 'often', 'simply', 'stuck', 'win', 'allow', 'confuse', 'enjoy',
      'except', 'flower', 'seek', 'strength', 'calm', 'grin', 'gun', 'heavy',
      'hill', 'large', 'ocean', 'shoe', 'sigh', 'straight', 'summer', 'tongue',
      'accept', 'crazy', 'everyday', 'exist', 'grass', 'mistake', 'sent', 'shut',
      'surround', 'table', 'ache', 'brain', 'destroy', 'heal', 'nature', 'shout',
      'sign', 'stain', 'choice', 'doubt', 'glance', 'glow', 'mountain', 'queen',
      'stranger', 'throat', 'tomorrow', 'city', 'either', 'fish', 'flame',
      'rather', 'shape', 'spin', 'spread', 'ash', 'distance', 'finish', 'image',
      'imagine', 'important', 'nobody', 'shatter', 'warmth', 'became', 'feed',
      'flesh', 'funny', 'lust', 'shirt', 'trouble', 'yellow', 'attention',
      'bare', 'bite', 'money', 'protect', 'amaze', 'appear', 'born', 'choke',
      'completely', 'daughter', 'fresh', 'friendship', 'gentle', 'probably',
      'six', 'deserve', 'expect', 'grab', 'middle', 'nightmare', 'river',
      'thousand', 'weight', 'worst', 'wound', 'barely', 'bottle', 'cream',
      'regret', 'relationship', 'stick', 'test', 'crush', 'endless', 'fault',
      'itself', 'rule', 'spill', 'art', 'circle', 'join', 'kick', 'mask',
      'master', 'passion', 'quick', 'raise', 'smooth', 'unless', 'wander',
      'actually', 'broke', 'chair', 'deal', 'favorite', 'gift', 'note', 'number',
      'sweat', 'box', 'chill', 'clothes', 'lady', 'mark', 'park', 'poor',
      'sadness', 'tie', 'animal', 'belong', 'brush', 'consume', 'dawn', 'forest',
      'innocent', 'pen', 'pride', 'stream', 'thick', 'clay', 'complete', 'count',
      'draw', 'faith', 'press', 'silver', 'struggle', 'surface', 'taught',
      'teach', 'wet', 'bless', 'chase', 'climb', 'enter', 'letter', 'melt',
      'metal', 'movie', 'stretch', 'swing', 'vision', 'wife', 'beside', 'crash',
      'forgot', 'guide', 'haunt', 'joke', 'knock', 'plant', 'pour', 'prove',
      'reveal', 'steal', 'stuff', 'trip', 'wood', 'wrist', 'bother', 'bottom',
      'crawl', 'crowd', 'fix', 'forgive', 'frown', 'grace', 'loose', 'lucky',
      'party', 'release', 'surely', 'survive', 'teacher', 'gently', 'grip',
      'speed', 'suicide', 'travel', 'treat', 'vein', 'written', 'cage', 'chain',
      'conversation', 'date', 'enemy', 'however', 'interest', 'million', 'page',
      'pink', 'proud', 'sway', 'themselves', 'winter', 'church', 'cruel', 'cup',
      'demon', 'experience', 'freedom', 'pair', 'pop', 'purpose', 'respect',
      'shoot', 'softly', 'state', 'strange', 'bar', 'birth', 'curl', 'dirt',
      'excuse', 'lord', 'lovely', 'monster', 'order', 'pack', 'pants', 'pool',
      'scene', 'seven', 'shame', 'slide', 'ugly', 'among', 'blade', 'blonde',
      'closet', 'creek', 'deny', 'drug', 'eternity', 'gain', 'grade', 'handle',
      'key', 'linger', 'pale', 'prepare', 'swallow', 'swim', 'tremble', 'wheel',
      'won', 'cast', 'cigarette', 'claim', 'college', 'direction', 'dirty',
      'gather', 'ghost', 'hundred', 'loss', 'lung', 'orange', 'present', 'swear',
      'swirl', 'twice', 'wild', 'bitter', 'blanket', 'doctor', 'everywhere',
      'flash', 'grown', 'knowledge', 'numb', 'pressure', 'radio', 'repeat',
      'ruin', 'spend', 'unknown', 'buy', 'clock', 'devil', 'early', 'false',
      'fantasy', 'pound', 'precious', 'refuse', 'sheet', 'teeth', 'welcome',
      'add', 'ahead', 'block', 'bury', 'caress', 'content', 'depth', 'despite',
      'distant', 'marry', 'purple', 'threw', 'whenever', 'bomb', 'dull',
      'easily', 'grasp', 'hospital', 'innocence', 'normal', 'receive', 'reply',
      'rhyme', 'shade', 'someday', 'sword', 'toe', 'visit', 'asleep', 'bought',
      'center', 'consider', 'flat', 'hero', 'history', 'ink', 'insane', 'muscle',
      'mystery', 'pocket', 'reflection', 'shove', 'silently', 'smart', 'soldier',
      'spot', 'stress', 'train', 'type', 'view', 'whether', 'bus', 'energy',
      'explain', 'holy', 'hunger', 'inch', 'magic', 'mix', 'noise', 'nowhere',
      'prayer', 'presence', 'shock', 'snap', 'spider', 'study', 'thunder',
      'trail', 'admit', 'agree', 'bag', 'bang', 'bound', 'butterfly', 'cute',
      'exactly', 'explode', 'familiar', 'fold', 'further', 'pierce', 'reflect',
      'scent', 'selfish', 'sharp', 'sink', 'spring', 'stumble', 'universe',
      'weep', 'women', 'wonderful', 'action', 'ancient', 'attempt', 'avoid',
      'birthday', 'branch', 'chocolate', 'core', 'depress', 'drunk',
      'especially', 'focus', 'fruit', 'honest', 'match', 'palm', 'perfectly',
      'pillow', 'pity', 'poison', 'roar', 'shift', 'slightly', 'thump', 'truck',
      'tune', 'twenty', 'unable', 'wipe', 'wrote', 'coat', 'constant', 'dinner',
      'drove', 'egg', 'eternal', 'flight', 'flood', 'frame', 'freak', 'gasp',
      'glad', 'hollow', 'motion', 'peer', 'plastic', 'root', 'screen', 'season',
      'sting', 'strike', 'team', 'unlike', 'victim', 'volume', 'warn', 'weird',
      'attack', 'await', 'awake', 'built', 'charm', 'crave', 'despair', 'fought',
      'grant', 'grief', 'horse', 'limit', 'message', 'ripple', 'sanity',
      'scatter', 'serve', 'split', 'string', 'trick', 'annoy', 'blur', 'boat',
      'brave', 'clearly', 'cling', 'connect', 'fist', 'forth', 'imagination',
      'iron', 'jock', 'judge', 'lesson', 'milk', 'misery', 'nail', 'naked',
      'ourselves', 'poet', 'possible', 'princess', 'sail', 'size', 'snake',
      'society', 'stroke', 'torture', 'toss', 'trace', 'wise', 'bloom', 'bullet',
      'cell', 'check', 'cost', 'darling', 'during', 'footstep', 'fragile',
      'hallway', 'hardly', 'horizon', 'invisible', 'journey', 'midnight', 'mud',
      'nod', 'pause', 'relax', 'shiver', 'sudden', 'value', 'youth', 'abuse',
      'admire', 'blink', 'breast', 'bruise', 'constantly', 'couple', 'creep',
      'curve', 'difference', 'dumb', 'emptiness', 'gotta', 'honor', 'plain',
      'planet', 'recall', 'rub', 'ship', 'slam', 'soar', 'somebody', 'tightly',
      'weather', 'adore', 'approach', 'bond', 'bread', 'burst', 'candle',
      'coffee', 'cousin', 'crime', 'desert', 'flutter', 'frozen', 'grand',
      'heel', 'hello', 'language', 'level', 'movement', 'pleasure', 'powerful',
      'random', 'rhythm', 'settle', 'silly', 'slap', 'sort', 'spoken', 'steel',
      'threaten', 'tumble', 'upset', 'aside', 'awkward', 'bee', 'blank', 'board',
      'button', 'card', 'carefully', 'complain', 'crap', 'deeply', 'discover',
      'drag', 'dread', 'effort', 'entire', 'fairy', 'giant', 'gotten', 'greet',
      'illusion', 'jeans', 'leap', 'liquid', 'march', 'mend', 'nervous', 'nine',
      'replace', 'rope', 'spine', 'stole', 'terror', 'accident', 'apple',
      'balance', 'boom', 'childhood', 'collect', 'demand', 'depression',
      'eventually', 'faint', 'glare', 'goal', 'group', 'honey', 'kitchen',
      'laid', 'limb', 'machine', 'mere', 'mold', 'murder', 'nerve', 'painful',
      'poetry', 'prince', 'rabbit', 'shelter', 'shore', 'shower', 'soothe',
      'stair', 'steady', 'sunlight', 'tangle', 'tease', 'treasure', 'uncle',
      'begun', 'bliss', 'canvas', 'cheer', 'claw', 'clutch', 'commit', 'crimson',
      'crystal', 'delight', 'doll', 'existence', 'express', 'fog', 'football',
      'gay', 'goose', 'guard', 'hatred', 'illuminate', 'mass', 'math', 'mourn',
      'rich', 'rough', 'skip', 'stir', 'student', 'style', 'support', 'thorn',
      'tough', 'yard', 'yearn', 'yesterday', 'advice', 'appreciate', 'autumn',
      'bank', 'beam', 'bowl', 'capture', 'carve', 'collapse', 'confusion',
      'creation', 'dove', 'feather', 'girlfriend', 'glory', 'government',
      'harsh', 'hop', 'inner', 'loser', 'moonlight', 'neighbor', 'neither',
      'peach', 'pig', 'praise', 'screw', 'shield', 'shimmer', 'sneak', 'stab',
      'subject', 'throughout', 'thrown', 'tower', 'twirl', 'wow', 'army',
      'arrive', 'bathroom', 'bump', 'cease', 'cookie', 'couch', 'courage', 'dim',
      'guilt', 'howl', 'hum', 'husband', 'insult', 'led', 'lunch', 'mock',
      'mostly', 'natural', 'nearly', 'needle', 'nerd', 'peaceful', 'perfection',
      'pile', 'price', 'remove', 'roam', 'sanctuary', 'serious', 'shiny',
      'shook', 'sob', 'stolen', 'tap', 'vain', 'void', 'warrior', 'wrinkle',
      'affection', 'apologize', 'blossom', 'bounce', 'bridge', 'cheap',
      'crumble', 'decision', 'descend', 'desperately', 'dig', 'dot', 'flip',
      'frighten', 'heartbeat', 'huge', 'lazy', 'lick', 'odd', 'opinion',
      'process', 'puzzle', 'quietly', 'retreat', 'score', 'sentence', 'separate',
      'situation', 'skill', 'soak', 'square', 'stray', 'taint', 'task', 'tide',
      'underneath', 'veil', 'whistle', 'anywhere', 'bedroom', 'bid', 'bloody',
      'burden', 'careful', 'compare', 'concern', 'curtain', 'decay', 'defeat',
      'describe', 'double', 'dreamer', 'driver', 'dwell', 'evening', 'flare',
      'flicker', 'grandma', 'guitar', 'harm', 'horrible', 'hungry', 'indeed',
      'lace', 'melody', 'monkey', 'nation', 'object', 'obviously', 'rainbow',
      'salt', 'scratch', 'shown', 'shy', 'stage', 'stun', 'third', 'tickle',
      'useless', 'weakness', 'worship', 'worthless', 'afternoon', 'beard',
      'boyfriend', 'bubble', 'busy', 'certain', 'chin', 'concrete', 'desk',
      'diamond', 'doom', 'drawn', 'due', 'felicity', 'freeze', 'frost', 'garden',
      'glide', 'harmony', 'hopefully', 'hunt', 'jealous', 'lightning', 'mama',
      'mercy', 'peel', 'physical', 'position', 'pulse', 'punch', 'quit', 'rant',
      'respond', 'salty', 'sane', 'satisfy', 'savior', 'sheep', 'slept',
      'social', 'sport', 'tuck', 'utter', 'valley', 'wolf', 'aim', 'alas',
      'alter', 'arrow', 'awaken', 'beaten', 'belief', 'brand', 'ceiling',
      'cheese', 'clue', 'confidence', 'connection', 'daily', 'disguise', 'eager',
      'erase', 'essence', 'everytime', 'expression', 'fan', 'flag', 'flirt',
      'foul', 'fur', 'giggle', 'glorious', 'ignorance', 'law', 'lifeless',
      'measure', 'mighty', 'muse', 'north', 'opposite', 'paradise', 'patience',
      'patient', 'pencil', 'petal', 'plate', 'ponder', 'possibly', 'practice',
      'slice', 'spell', 'stock', 'strife', 'strip', 'suffocate', 'suit',
      'tender', 'tool', 'trade', 'velvet', 'verse', 'waist', 'witch', 'aunt',
      'bench', 'bold', 'cap', 'certainly', 'click', 'companion', 'creator',
      'dart', 'delicate', 'determine', 'dish', 'dragon', 'drama', 'drum', 'dude',
      'everybody', 'feast', 'forehead', 'former', 'fright', 'fully', 'gas',
      'hook', 'hurl', 'invite', 'juice', 'manage', 'moral', 'possess', 'raw',
      'rebel', 'royal', 'scale', 'scary', 'several', 'slight', 'stubborn',
      'swell', 'talent', 'tea', 'terrible', 'thread', 'torment', 'trickle',
      'usually', 'vast', 'violence', 'weave', 'acid', 'agony', 'ashamed', 'awe',
      'belly', 'blend', 'blush', 'character', 'cheat', 'common', 'company',
      'coward', 'creak', 'danger', 'deadly', 'defense', 'define', 'depend',
      'desperate', 'destination', 'dew', 'duck', 'dusty', 'embarrass', 'engine',
      'example', 'explore', 'foe', 'freely', 'frustrate', 'generation', 'glove',
      'guilty', 'health', 'hurry', 'idiot', 'impossible', 'inhale', 'jaw',
      'kingdom', 'mention', 'mist', 'moan', 'mumble', 'mutter', 'observe', 'ode',
      'pathetic', 'pattern', 'pie', 'prefer', 'puff', 'rape', 'rare', 'revenge',
      'rude', 'scrape', 'spiral', 'squeeze', 'strain', 'sunset', 'suspend',
      'sympathy', 'thigh', 'throne', 'total', 'unseen', 'weapon', 'weary'
    ]
  },
  'english': {
    prefixLength: 3,
    words: [
      'abbey', 'abducts', 'ability', 'ablaze', 'abnormal', 'abort', 'abrasive', 'absorb',
      'abyss', 'academy', 'aces', 'aching', 'acidic', 'acoustic', 'acquire', 'across',
      'actress', 'acumen', 'adapt', 'addicted', 'adept', 'adhesive', 'adjust', 'adopt',
      'adrenalin', 'adult', 'adventure', 'aerial', 'afar', 'affair', 'afield', 'afloat',
      'afoot', 'afraid', 'after', 'against', 'agenda', 'aggravate', 'agile', 'aglow',
      'agnostic', 'agony', 'agreed', 'ahead', 'aided', 'ailments', 'aimless', 'airport',
      'aisle', 'ajar', 'akin', 'alarms', 'album', 'alchemy', 'alerts', 'algebra',
      'alkaline', 'alley', 'almost', 'aloof', 'alpine', 'already', 'also', 'altitude',
      'alumni', 'always', 'amaze', 'ambush', 'amended', 'amidst', 'ammo', 'amnesty',
      'among', 'amply', 'amused', 'anchor', 'android', 'anecdote', 'angled', 'ankle',
      'annoyed', 'answers', 'antics', 'anvil', 'anxiety', 'anybody', 'apart', 'apex',
      'aphid', 'aplomb', 'apology', 'apply', 'apricot', 'aptitude', 'aquarium', 'arbitrary',
      'archer', 'ardent', 'arena', 'argue', 'arises', 'army', 'around', 'arrow',
      'arsenic', 'artistic', 'ascend', 'ashtray', 'aside', 'asked', 'asleep', 'aspire',
      'assorted', 'asylum', 'athlete', 'atlas', 'atom', 'atrium', 'attire', 'auburn',
      'auctions', 'audio', 'august', 'aunt', 'austere', 'autumn', 'avatar', 'avidly',
      'avoid', 'awakened', 'awesome', 'awful', 'awkward', 'awning', 'awoken', 'axes',
      'axis', 'axle', 'aztec', 'azure', 'baby', 'bacon', 'badge', 'baffles',
      'bagpipe', 'bailed', 'bakery', 'balding', 'bamboo', 'banjo', 'baptism', 'basin',
      'batch', 'bawled', 'bays', 'because', 'beer', 'befit', 'begun', 'behind',
      'being', 'below', 'bemused', 'benches', 'berries', 'bested', 'betting', 'bevel',
      'beware', 'beyond', 'bias', 'bicycle', 'bids', 'bifocals', 'biggest', 'bikini',
      'bimonthly', 'binocular', 'biology', 'biplane', 'birth', 'biscuit', 'bite', 'biweekly',
      'blender', 'blip', 'bluntly', 'boat', 'bobsled', 'bodies', 'bogeys', 'boil',
      'boldly', 'bomb', 'border', 'boss', 'both', 'bounced', 'bovine', 'bowling',
      'boxes', 'boyfriend', 'broken', 'brunt', 'bubble', 'buckets', 'budget', 'buffet',
      'bugs', 'building', 'bulb', 'bumper', 'bunch', 'business', 'butter', 'buying',
      'buzzer', 'bygones', 'byline', 'bypass', 'cabin', 'cactus', 'cadets', 'cafe',
      'cage', 'cajun', 'cake', 'calamity', 'camp', 'candy', 'casket', 'catch',
      'cause', 'cavernous', 'cease', 'cedar', 'ceiling', 'cell', 'cement', 'cent',
      'certain', 'chlorine', 'chrome', 'cider', 'cigar', 'cinema', 'circle', 'cistern',
      'citadel', 'civilian', 'claim', 'click', 'clue', 'coal', 'cobra', 'cocoa',
      'code', 'coexist', 'coffee', 'cogs', 'cohesive', 'coils', 'colony', 'comb',
      'cool', 'copy', 'corrode', 'costume', 'cottage', 'cousin', 'cowl', 'criminal',
      'cube', 'cucumber', 'cuddled', 'cuffs', 'cuisine', 'cunning', 'cupcake', 'custom',
      'cycling', 'cylinder', 'cynical', 'dabbing', 'dads', 'daft', 'dagger', 'daily',
      'damp', 'dangerous', 'dapper', 'darted', 'dash', 'dating', 'dauntless', 'dawn',
      'daytime', 'dazed', 'debut', 'decay', 'dedicated', 'deepest', 'deftly', 'degrees',
      'dehydrate', 'deity', 'dejected', 'delayed', 'demonstrate', 'dented', 'deodorant', 'depth',
      'desk', 'devoid', 'dewdrop', 'dexterity', 'dialect', 'dice', 'diet', 'different',
      'digit', 'dilute', 'dime', 'dinner', 'diode', 'diplomat', 'directed', 'distance',
      'ditch', 'divers', 'dizzy', 'doctor', 'dodge', 'does', 'dogs', 'doing',
      'dolphin', 'domestic', 'donuts', 'doorway', 'dormant', 'dosage', 'dotted', 'double',
      'dove', 'down', 'dozen', 'dreams', 'drinks', 'drowning', 'drunk', 'drying',
      'dual', 'dubbed', 'duckling', 'dude', 'duets', 'duke', 'dullness', 'dummy',
      'dunes', 'duplex', 'duration', 'dusted', 'duties', 'dwarf', 'dwelt', 'dwindling',
      'dying', 'dynamite', 'dyslexic', 'each', 'eagle', 'earth', 'easy', 'eating',
      'eavesdrop', 'eccentric', 'echo', 'eclipse', 'economics', 'ecstatic', 'eden', 'edgy',
      'edited', 'educated', 'eels', 'efficient', 'eggs', 'egotistic', 'eight', 'either',
      'eject', 'elapse', 'elbow', 'eldest', 'eleven', 'elite', 'elope', 'else',
      'eluded', 'emails', 'ember', 'emerge', 'emit', 'emotion', 'empty', 'emulate',
      'energy', 'enforce', 'enhanced', 'enigma', 'enjoy', 'enlist', 'enmity', 'enough',
      'enraged', 'ensign', 'entrance', 'envy', 'epoxy', 'equip', 'erase', 'erected',
      'erosion', 'error', 'eskimos', 'espionage', 'essential', 'estate', 'etched', 'eternal',
      'ethics', 'etiquette', 'evaluate', 'evenings', 'evicted', 'evolved', 'examine', 'excess',
      'exhale', 'exit', 'exotic', 'exquisite', 'extra', 'exult', 'fabrics', 'factual',
      'fading', 'fainted', 'faked', 'fall', 'family', 'fancy', 'farming', 'fatal',
      'faulty', 'fawns', 'faxed', 'fazed', 'feast', 'february', 'federal', 'feel',
      'feline', 'females', 'fences', 'ferry', 'festival', 'fetches', 'fever', 'fewest',
      'fiat', 'fibula', 'fictional', 'fidget', 'fierce', 'fifteen', 'fight', 'films',
      'firm', 'fishing', 'fitting', 'five', 'fixate', 'fizzle', 'fleet', 'flippant',
      'flying', 'foamy', 'focus', 'foes', 'foggy', 'foiled', 'folding', 'fonts',
      'foolish', 'fossil', 'fountain', 'fowls', 'foxes', 'foyer', 'framed', 'friendly',
      'frown', 'fruit', 'frying', 'fudge', 'fuel', 'fugitive', 'fully', 'fuming',
      'fungal', 'furnished', 'fuselage', 'future', 'fuzzy', 'gables', 'gadget', 'gags',
      'gained', 'galaxy', 'gambit', 'gang', 'gasp', 'gather', 'gauze', 'gave',
      'gawk', 'gaze', 'gearbox', 'gecko', 'geek', 'gels', 'gemstone', 'general',
      'geometry', 'germs', 'gesture', 'getting', 'geyser', 'ghetto', 'ghost', 'giant',
      'giddy', 'gifts', 'gigantic', 'gills', 'gimmick', 'ginger', 'girth', 'giving',
      'glass', 'gleeful', 'glide', 'gnaw', 'gnome', 'goat', 'goblet', 'godfather',
      'goes', 'goggles', 'going', 'goldfish', 'gone', 'goodbye', 'gopher', 'gorilla',
      'gossip', 'gotten', 'gourmet', 'governing', 'gown', 'greater', 'grunt', 'guarded',
      'guest', 'guide', 'gulp', 'gumball', 'guru', 'gusts', 'gutter', 'guys',
      'gymnast', 'gypsy', 'gyrate', 'habitat', 'hacksaw', 'haggled', 'hairy', 'hamburger',
      'happens', 'hashing', 'hatchet', 'haunted', 'having', 'hawk', 'haystack', 'hazard',
      'hectare', 'hedgehog', 'heels', 'hefty', 'height', 'hemlock', 'hence', 'heron',
      'hesitate', 'hexagon', 'hickory', 'hiding', 'highway', 'hijack', 'hiker', 'hills',
      'himself', 'hinder', 'hippo', 'hire', 'history', 'hitched', 'hive', 'hoax',
      'hobby', 'hockey', 'hoisting', 'hold', 'honked', 'hookup', 'hope', 'hornet',
      'hospital', 'hotel', 'hounded', 'hover', 'howls', 'hubcaps', 'huddle', 'huge',
      'hull', 'humid', 'hunter', 'hurried', 'husband', 'huts', 'hybrid', 'hydrogen',
      'hyper', 'iceberg', 'icing', 'icon', 'identity', 'idiom', 'idled', 'idols',
      'igloo', 'ignore', 'iguana', 'illness', 'imagine', 'imbalance', 'imitate', 'impel',
      'inactive', 'inbound', 'incur', 'industrial', 'inexact', 'inflamed', 'ingested', 'initiate',
      'injury', 'inkling', 'inline', 'inmate', 'innocent', 'inorganic', 'input', 'inquest',
      'inroads', 'insult', 'intended', 'inundate', 'invoke', 'inwardly', 'ionic', 'irate',
      'iris', 'irony', 'irritate', 'island', 'isolated', 'issued', 'italics', 'itches',
      'items', 'itinerary', 'itself', 'ivory', 'jabbed', 'jackets', 'jaded', 'jagged',
      'jailed', 'jamming', 'january', 'jargon', 'jaunt', 'javelin', 'jaws', 'jazz',
      'jeans', 'jeers', 'jellyfish', 'jeopardy', 'jerseys', 'jester', 'jetting', 'jewels',
      'jigsaw', 'jingle', 'jittery', 'jive', 'jobs', 'jockey', 'jogger', 'joining',
      'joking', 'jolted', 'jostle', 'journal', 'joyous', 'jubilee', 'judge', 'juggled',
      'juicy', 'jukebox', 'july', 'jump', 'junk', 'jury', 'justice', 'juvenile',
      'kangaroo', 'karate', 'keep', 'kennel', 'kept', 'kernels', 'kettle', 'keyboard',
      'kickoff', 'kidneys', 'king', 'kiosk', 'kisses', 'kitchens', 'kiwi', 'knapsack',
      'knee', 'knife', 'knowledge', 'knuckle', 'koala', 'laboratory', 'ladder', 'lagoon',
      'lair', 'lakes', 'lamb', 'language', 'laptop', 'large', 'last', 'later',
      'launching', 'lava', 'lawsuit', 'layout', 'lazy', 'lectures', 'ledge', 'leech',
      'left', 'legion', 'leisure', 'lemon', 'lending', 'leopard', 'lesson', 'lettuce',
      'lexicon', 'liar', 'library', 'licks', 'lids', 'lied', 'lifestyle', 'light',
      'likewise', 'lilac', 'limits', 'linen', 'lion', 'lipstick', 'liquid', 'listen',
      'lively', 'loaded', 'lobster', 'locker', 'lodge', 'lofty', 'logic', 'loincloth',
      'long', 'looking', 'lopped', 'lordship', 'losing', 'lottery', 'loudly', 'love',
      'lower', 'loyal', 'lucky', 'luggage', 'lukewarm', 'lullaby', 'lumber', 'lunar',
      'lurk', 'lush', 'luxury', 'lymph', 'lynx', 'lyrics', 'macro', 'madness',
      'magically', 'mailed', 'major', 'makeup', 'malady', 'mammal', 'maps', 'masterful',
      'match', 'maul', 'maverick', 'maximum', 'mayor', 'maze', 'meant', 'mechanic',
      'medicate', 'meeting', 'megabyte', 'melting', 'memoir', 'menu', 'merger', 'mesh',
      'metro', 'mews', 'mice', 'midst', 'mighty', 'mime', 'mirror', 'misery',
      'mittens', 'mixture', 'moat', 'mobile', 'mocked', 'mohawk', 'moisture', 'molten',
      'moment', 'money', 'moon', 'mops', 'morsel', 'mostly', 'motherly', 'mouth',
      'movement', 'mowing', 'much', 'muddy', 'muffin', 'mugged', 'mullet', 'mumble',
      'mundane', 'muppet', 'mural', 'musical', 'muzzle', 'myriad', 'mystery', 'myth',
      'nabbing', 'nagged', 'nail', 'names', 'nanny', 'napkin', 'narrate', 'nasty',
      'natural', 'nautical', 'navy', 'nearby', 'necklace', 'needed', 'negative', 'neither',
      'neon', 'nephew', 'nerves', 'nestle', 'network', 'neutral', 'never', 'newt',
      'nexus', 'nibs', 'niche', 'niece', 'nifty', 'nightly', 'nimbly', 'nineteen',
      'nirvana', 'nitrogen', 'nobody', 'nocturnal', 'nodes', 'noises', 'nomad', 'noodles',
      'northern', 'nostril', 'noted', 'nouns', 'novelty', 'nowhere', 'nozzle', 'nuance',
      'nucleus', 'nudged', 'nugget', 'nuisance', 'null', 'number', 'nuns', 'nurse',
      'nutshell', 'nylon', 'oaks', 'oars', 'oasis', 'oatmeal', 'obedient', 'object',
      'obliged', 'obnoxious', 'observant', 'obtains', 'obvious', 'occur', 'ocean', 'october',
      'odds', 'odometer', 'offend', 'often', 'oilfield', 'ointment', 'okay', 'older',
      'olive', 'olympics', 'omega', 'omission', 'omnibus', 'onboard', 'oncoming', 'oneself',
      'ongoing', 'onion', 'online', 'onslaught', 'onto', 'onward', 'oozed', 'opacity',
      'opened', 'opposite', 'optical', 'opus', 'orange', 'orbit', 'orchid', 'orders',
      'organs', 'origin', 'ornament', 'orphans', 'oscar', 'ostrich', 'otherwise', 'otter',
      'ouch', 'ought', 'ounce', 'ourselves', 'oust', 'outbreak', 'oval', 'oven',
      'owed', 'owls', 'owner', 'oxidant', 'oxygen', 'oyster', 'ozone', 'pact',
      'paddles', 'pager', 'pairing', 'palace', 'pamphlet', 'pancakes', 'paper', 'paradise',
      'pastry', 'patio', 'pause', 'pavements', 'pawnshop', 'payment', 'peaches', 'pebbles',
      'peculiar', 'pedantic', 'peeled', 'pegs', 'pelican', 'pencil', 'people', 'pepper',
      'perfect', 'pests', 'petals', 'phase', 'pheasants', 'phone', 'phrases', 'physics',
      'piano', 'picked', 'pierce', 'pigment', 'piloted', 'pimple', 'pinched', 'pioneer',
      'pipeline', 'pirate', 'pistons', 'pitched', 'pivot', 'pixels', 'pizza', 'playful',
      'pledge', 'pliers', 'plotting', 'plus', 'plywood', 'poaching', 'pockets', 'podcast',
      'poetry', 'point', 'poker', 'polar', 'ponies', 'pool', 'popular', 'portents',
      'possible', 'potato', 'pouch', 'poverty', 'powder', 'pram', 'present', 'pride',
      'problems', 'pruned', 'prying', 'psychic', 'public', 'puck', 'puddle', 'puffin',
      'pulp', 'pumpkins', 'punch', 'puppy', 'purged', 'push', 'putty', 'puzzled',
      'pylons', 'pyramid', 'python', 'queen', 'quick', 'quote', 'rabbits', 'racetrack',
      'radar', 'rafts', 'rage', 'railway', 'raking', 'rally', 'ramped', 'randomly',
      'rapid', 'rarest', 'rash', 'rated', 'ravine', 'rays', 'razor', 'react',
      'rebel', 'recipe', 'reduce', 'reef', 'refer', 'regular', 'reheat', 'reinvest',
      'rejoices', 'rekindle', 'relic', 'remedy', 'renting', 'reorder', 'repent', 'request',
      'reruns', 'rest', 'return', 'reunion', 'revamp', 'rewind', 'rhino', 'rhythm',
      'ribbon', 'richly', 'ridges', 'rift', 'rigid', 'rims', 'ringing', 'riots',
      'ripped', 'rising', 'ritual', 'river', 'roared', 'robot', 'rockets', 'rodent',
      'rogue', 'roles', 'romance', 'roomy', 'roped', 'roster', 'rotate', 'rounded',
      'rover', 'rowboat', 'royal', 'ruby', 'rudely', 'ruffled', 'rugged', 'ruined',
      'ruling', 'rumble', 'runway', 'rural', 'rustled', 'ruthless', 'sabotage', 'sack',
      'sadness', 'safety', 'saga', 'sailor', 'sake', 'salads', 'sample', 'sanity',
      'sapling', 'sarcasm', 'sash', 'satin', 'saucepan', 'saved', 'sawmill', 'saxophone',
      'sayings', 'scamper', 'scenic', 'school', 'science', 'scoop', 'scrub', 'scuba',
      'seasons', 'second', 'sedan', 'seeded', 'segments', 'seismic', 'selfish', 'semifinal',
      'sensible', 'september', 'sequence', 'serving', 'session', 'setup', 'seventh', 'sewage',
      'shackles', 'shelter', 'shipped', 'shocking', 'shrugged', 'shuffled', 'shyness', 'siblings',
      'sickness', 'sidekick', 'sieve', 'sifting', 'sighting', 'silk', 'simplest', 'sincerely',
      'sipped', 'siren', 'situated', 'sixteen', 'sizes', 'skater', 'skew', 'skirting',
      'skulls', 'skydive', 'slackens', 'sleepless', 'slid', 'slower', 'slug', 'smash',
      'smelting', 'smidgen', 'smog', 'smuggled', 'snake', 'sneeze', 'sniff', 'snout',
      'snug', 'soapy', 'sober', 'soccer', 'soda', 'software', 'soggy', 'soil',
      'solved', 'somewhere', 'sonic', 'soothe', 'soprano', 'sorry', 'southern', 'sovereign',
      'sowed', 'soya', 'space', 'speedy', 'sphere', 'spiders', 'splendid', 'spout',
      'sprig', 'spud', 'spying', 'square', 'stacking', 'stellar', 'stick', 'stockpile',
      'strained', 'stunning', 'stylishly', 'subtly', 'succeed', 'suddenly', 'suede', 'suffice',
      'sugar', 'suitcase', 'sulking', 'summon', 'sunken', 'superior', 'surfer', 'sushi',
      'suture', 'swagger', 'swept', 'swiftly', 'sword', 'swung', 'syllabus', 'symptoms',
      'syndrome', 'syringe', 'system', 'taboo', 'tacit', 'tadpoles', 'tagged', 'tail',
      'taken', 'talent', 'tamper', 'tanks', 'tapestry', 'tarnished', 'tasked', 'tattoo',
      'taunts', 'tavern', 'tawny', 'taxi', 'teardrop', 'technical', 'tedious', 'teeming',
      'tell', 'template', 'tender', 'tepid', 'tequila', 'terminal', 'testing', 'tether',
      'textbook', 'thaw', 'theatrics', 'thirsty', 'thorn', 'threaten', 'thumbs', 'thwart',
      'ticket', 'tidy', 'tiers', 'tiger', 'tilt', 'timber', 'tinted', 'tipsy',
      'tirade', 'tissue', 'titans', 'toaster', 'tobacco', 'today', 'toenail', 'toffee',
      'together', 'toilet', 'token', 'tolerant', 'tomorrow', 'tonic', 'toolbox', 'topic',
      'torch', 'tossed', 'total', 'touchy', 'towel', 'toxic', 'toyed', 'trash',
      'trendy', 'tribal', 'trolling', 'truth', 'trying', 'tsunami', 'tubes', 'tucks',
      'tudor', 'tuesday', 'tufts', 'tugs', 'tuition', 'tulips', 'tumbling', 'tunnel',
      'turnip', 'tusks', 'tutor', 'tuxedo', 'twang', 'tweezers', 'twice', 'twofold',
      'tycoon', 'typist', 'tyrant', 'ugly', 'ulcers', 'ultimate', 'umbrella', 'umpire',
      'unafraid', 'unbending', 'uncle', 'under', 'uneven', 'unfit', 'ungainly', 'unhappy',
      'union', 'unjustly', 'unknown', 'unlikely', 'unmask', 'unnoticed', 'unopened', 'unplugs',
      'unquoted', 'unrest', 'unsafe', 'until', 'unusual', 'unveil', 'unwind', 'unzip',
      'upbeat', 'upcoming', 'update', 'upgrade', 'uphill', 'upkeep', 'upload', 'upon',
      'upper', 'upright', 'upstairs', 'uptight', 'upwards', 'urban', 'urchins', 'urgent',
      'usage', 'useful', 'usher', 'using', 'usual', 'utensils', 'utility', 'utmost',
      'utopia', 'uttered', 'vacation', 'vague', 'vain', 'value', 'vampire', 'vane',
      'vapidly', 'vary', 'vastness', 'vats', 'vaults', 'vector', 'veered', 'vegan',
      'vehicle', 'vein', 'velvet', 'venomous', 'verification', 'vessel', 'veteran', 'vexed',
      'vials', 'vibrate', 'victim', 'video', 'viewpoint', 'vigilant', 'viking', 'village',
      'vinegar', 'violin', 'vipers', 'virtual', 'visited', 'vitals', 'vivid', 'vixen',
      'vocal', 'vogue', 'voice', 'volcano', 'vortex', 'voted', 'voucher', 'vowels',
      'voyage', 'vulture', 'wade', 'waffle', 'wagtail', 'waist', 'waking', 'wallets',
      'wanted', 'warped', 'washing', 'water', 'waveform', 'waxing', 'wayside', 'weavers',
      'website', 'wedge', 'weekday', 'weird', 'welders', 'went', 'wept', 'were',
      'western', 'wetsuit', 'whale', 'when', 'whipped', 'whole', 'wickets', 'width',
      'wield', 'wife', 'wiggle', 'wildly', 'winter', 'wipeout', 'wiring', 'wise',
      'withdrawn', 'wives', 'wizard', 'wobbly', 'woes', 'woken', 'wolf', 'womanly',
      'wonders', 'woozy', 'worry', 'wounded', 'woven', 'wrap', 'wrist', 'wrong',
      'yacht', 'yahoo', 'yanks', 'yard', 'yawning', 'yearbook', 'yellow', 'yesterday',
      'yeti', 'yields', 'yodel', 'yoga', 'younger', 'yoyo', 'zapped', 'zeal',
      'zebra', 'zero', 'zesty', 'zigzags', 'zinger', 'zippers', 'zodiac', 'zombie',
      'zones', 'zoom'
    ]
  },
  'spanish': {
    prefixLength: 4,
    words: [
      'ábaco', 'abdomen', 'abeja', 'abierto', 'abogado', 'abono', 'aborto', 'abrazo',
      'abrir', 'abuelo', 'abuso', 'acabar', 'academia', 'acceso', 'acción', 'aceite',
      'acelga', 'acento', 'aceptar', 'ácido', 'aclarar', 'acné', 'acoger', 'acoso',
      'activo', 'acto', 'actriz', 'actuar', 'acudir', 'acuerdo', 'acusar', 'adicto',
      'admitir', 'adoptar', 'adorno', 'aduana', 'adulto', 'aéreo', 'afectar', 'afición',
      'afinar', 'afirmar', 'ágil', 'agitar', 'agonía', 'agosto', 'agotar', 'agregar',
      'agrio', 'agua', 'agudo', 'águila', 'aguja', 'ahogo', 'ahorro', 'aire',
      'aislar', 'ajedrez', 'ajeno', 'ajuste', 'alacrán', 'alambre', 'alarma', 'alba',
      'álbum', 'alcalde', 'aldea', 'alegre', 'alejar', 'alerta', 'aleta', 'alfiler',
      'alga', 'algodón', 'aliado', 'aliento', 'alivio', 'alma', 'almeja', 'almíbar',
      'altar', 'alteza', 'altivo', 'alto', 'altura', 'alumno', 'alzar', 'amable',
      'amante', 'amapola', 'amargo', 'amasar', 'ámbar', 'ámbito', 'ameno', 'amigo',
      'amistad', 'amor', 'amparo', 'amplio', 'ancho', 'anciano', 'ancla', 'andar',
      'andén', 'anemia', 'ángulo', 'anillo', 'ánimo', 'anís', 'anotar', 'antena',
      'antiguo', 'antojo', 'anual', 'anular', 'anuncio', 'añadir', 'añejo', 'año',
      'apagar', 'aparato', 'apetito', 'apio', 'aplicar', 'apodo', 'aporte', 'apoyo',
      'aprender', 'aprobar', 'apuesta', 'apuro', 'arado', 'araña', 'arar', 'árbitro',
      'árbol', 'arbusto', 'archivo', 'arco', 'arder', 'ardilla', 'arduo', 'área',
      'árido', 'aries', 'armonía', 'arnés', 'aroma', 'arpa', 'arpón', 'arreglo',
      'arroz', 'arruga', 'arte', 'artista', 'asa', 'asado', 'asalto', 'ascenso',
      'asegurar', 'aseo', 'asesor', 'asiento', 'asilo', 'asistir', 'asno', 'asombro',
      'áspero', 'astilla', 'astro', 'astuto', 'asumir', 'asunto', 'atajo', 'ataque',
      'atar', 'atento', 'ateo', 'ático', 'atleta', 'átomo', 'atraer', 'atroz',
      'atún', 'audaz', 'audio', 'auge', 'aula', 'aumento', 'ausente', 'autor',
      'aval', 'avance', 'avaro', 'ave', 'avellana', 'avena', 'avestruz', 'avión',
      'aviso', 'ayer', 'ayuda', 'ayuno', 'azafrán', 'azar', 'azote', 'azúcar',
      'azufre', 'azul', 'baba', 'babor', 'bache', 'bahía', 'baile', 'bajar',
      'balanza', 'balcón', 'balde', 'bambú', 'banco', 'banda', 'baño', 'barba',
      'barco', 'barniz', 'barro', 'báscula', 'bastón', 'basura', 'batalla', 'batería',
      'batir', 'batuta', 'baúl', 'bazar', 'bebé', 'bebida', 'bello', 'besar',
      'beso', 'bestia', 'bicho', 'bien', 'bingo', 'blanco', 'bloque', 'blusa',
      'boa', 'bobina', 'bobo', 'boca', 'bocina', 'boda', 'bodega', 'boina',
      'bola', 'bolero', 'bolsa', 'bomba', 'bondad', 'bonito', 'bono', 'bonsái',
      'borde', 'borrar', 'bosque', 'bote', 'botín', 'bóveda', 'bozal', 'bravo',
      'brazo', 'brecha', 'breve', 'brillo', 'brinco', 'brisa', 'broca', 'broma',
      'bronce', 'brote', 'bruja', 'brusco', 'bruto', 'buceo', 'bucle', 'bueno',
      'buey', 'bufanda', 'bufón', 'búho', 'buitre', 'bulto', 'burbuja', 'burla',
      'burro', 'buscar', 'butaca', 'buzón', 'caballo', 'cabeza', 'cabina', 'cabra',
      'cacao', 'cadáver', 'cadena', 'caer', 'café', 'caída', 'caimán', 'caja',
      'cajón', 'cal', 'calamar', 'calcio', 'caldo', 'calidad', 'calle', 'calma',
      'calor', 'calvo', 'cama', 'cambio', 'camello', 'camino', 'campo', 'cáncer',
      'candil', 'canela', 'canguro', 'canica', 'canto', 'caña', 'cañón', 'caoba',
      'caos', 'capaz', 'capitán', 'capote', 'captar', 'capucha', 'cara', 'carbón',
      'cárcel', 'careta', 'carga', 'cariño', 'carne', 'carpeta', 'carro', 'carta',
      'casa', 'casco', 'casero', 'caspa', 'castor', 'catorce', 'catre', 'caudal',
      'causa', 'cazo', 'cebolla', 'ceder', 'cedro', 'celda', 'célebre', 'celoso',
      'célula', 'cemento', 'ceniza', 'centro', 'cerca', 'cerdo', 'cereza', 'cero',
      'cerrar', 'certeza', 'césped', 'cetro', 'chacal', 'chaleco', 'champú', 'chancla',
      'chapa', 'charla', 'chico', 'chiste', 'chivo', 'choque', 'choza', 'chuleta',
      'chupar', 'ciclón', 'ciego', 'cielo', 'cien', 'cierto', 'cifra', 'cigarro',
      'cima', 'cinco', 'cine', 'cinta', 'ciprés', 'circo', 'ciruela', 'cisne',
      'cita', 'ciudad', 'clamor', 'clan', 'claro', 'clase', 'clave', 'cliente',
      'clima', 'clínica', 'cobre', 'cocción', 'cochino', 'cocina', 'coco', 'código',
      'codo', 'cofre', 'coger', 'cohete', 'cojín', 'cojo', 'cola', 'colcha',
      'colegio', 'colgar', 'colina', 'collar', 'colmo', 'columna', 'combate', 'comer',
      'comida', 'cómodo', 'compra', 'conde', 'conejo', 'conga', 'conocer', 'consejo',
      'contar', 'copa', 'copia', 'corazón', 'corbata', 'corcho', 'cordón', 'corona',
      'correr', 'coser', 'cosmos', 'costa', 'cráneo', 'cráter', 'crear', 'crecer',
      'creído', 'crema', 'cría', 'crimen', 'cripta', 'crisis', 'cromo', 'crónica',
      'croqueta', 'crudo', 'cruz', 'cuadro', 'cuarto', 'cuatro', 'cubo', 'cubrir',
      'cuchara', 'cuello', 'cuento', 'cuerda', 'cuesta', 'cueva', 'cuidar', 'culebra',
      'culpa', 'culto', 'cumbre', 'cumplir', 'cuna', 'cuneta', 'cuota', 'cupón',
      'cúpula', 'curar', 'curioso', 'curso', 'curva', 'cutis', 'dama', 'danza',
      'dar', 'dardo', 'dátil', 'deber', 'débil', 'década', 'decir', 'dedo',
      'defensa', 'definir', 'dejar', 'delfín', 'delgado', 'delito', 'demora', 'denso',
      'dental', 'deporte', 'derecho', 'derrota', 'desayuno', 'deseo', 'desfile', 'desnudo',
      'destino', 'desvío', 'detalle', 'detener', 'deuda', 'día', 'diablo', 'diadema',
      'diamante', 'diana', 'diario', 'dibujo', 'dictar', 'diente', 'dieta', 'diez',
      'difícil', 'digno', 'dilema', 'diluir', 'dinero', 'directo', 'dirigir', 'disco',
      'diseño', 'disfraz', 'diva', 'divino', 'doble', 'doce', 'dolor', 'domingo',
      'don', 'donar', 'dorado', 'dormir', 'dorso', 'dos', 'dosis', 'dragón',
      'droga', 'ducha', 'duda', 'duelo', 'dueño', 'dulce', 'dúo', 'duque',
      'durar', 'dureza', 'duro', 'ébano', 'ebrio', 'echar', 'eco', 'ecuador',
      'edad', 'edición', 'edificio', 'editor', 'educar', 'efecto', 'eficaz', 'eje',
      'ejemplo', 'elefante', 'elegir', 'elemento', 'elevar', 'elipse', 'élite', 'elixir',
      'elogio', 'eludir', 'embudo', 'emitir', 'emoción', 'empate', 'empeño', 'empleo',
      'empresa', 'enano', 'encargo', 'enchufe', 'encía', 'enemigo', 'enero', 'enfado',
      'enfermo', 'engaño', 'enigma', 'enlace', 'enorme', 'enredo', 'ensayo', 'enseñar',
      'entero', 'entrar', 'envase', 'envío', 'época', 'equipo', 'erizo', 'escala',
      'escena', 'escolar', 'escribir', 'escudo', 'esencia', 'esfera', 'esfuerzo', 'espada',
      'espejo', 'espía', 'esposa', 'espuma', 'esquí', 'estar', 'este', 'estilo',
      'estufa', 'etapa', 'eterno', 'ética', 'etnia', 'evadir', 'evaluar', 'evento',
      'evitar', 'exacto', 'examen', 'exceso', 'excusa', 'exento', 'exigir', 'exilio',
      'existir', 'éxito', 'experto', 'explicar', 'exponer', 'extremo', 'fábrica', 'fábula',
      'fachada', 'fácil', 'factor', 'faena', 'faja', 'falda', 'fallo', 'falso',
      'faltar', 'fama', 'familia', 'famoso', 'faraón', 'farmacia', 'farol', 'farsa',
      'fase', 'fatiga', 'fauna', 'favor', 'fax', 'febrero', 'fecha', 'feliz',
      'feo', 'feria', 'feroz', 'fértil', 'fervor', 'festín', 'fiable', 'fianza',
      'fiar', 'fibra', 'ficción', 'ficha', 'fideo', 'fiebre', 'fiel', 'fiera',
      'fiesta', 'figura', 'fijar', 'fijo', 'fila', 'filete', 'filial', 'filtro',
      'fin', 'finca', 'fingir', 'finito', 'firma', 'flaco', 'flauta', 'flecha',
      'flor', 'flota', 'fluir', 'flujo', 'flúor', 'fobia', 'foca', 'fogata',
      'fogón', 'folio', 'folleto', 'fondo', 'forma', 'forro', 'fortuna', 'forzar',
      'fosa', 'foto', 'fracaso', 'frágil', 'franja', 'frase', 'fraude', 'freír',
      'freno', 'fresa', 'frío', 'frito', 'fruta', 'fuego', 'fuente', 'fuerza',
      'fuga', 'fumar', 'función', 'funda', 'furgón', 'furia', 'fusil', 'fútbol',
      'futuro', 'gacela', 'gafas', 'gaita', 'gajo', 'gala', 'galería', 'gallo',
      'gamba', 'ganar', 'gancho', 'ganga', 'ganso', 'garaje', 'garza', 'gasolina',
      'gastar', 'gato', 'gavilán', 'gemelo', 'gemir', 'gen', 'género', 'genio',
      'gente', 'geranio', 'gerente', 'germen', 'gesto', 'gigante', 'gimnasio', 'girar',
      'giro', 'glaciar', 'globo', 'gloria', 'gol', 'golfo', 'goloso', 'golpe',
      'goma', 'gordo', 'gorila', 'gorra', 'gota', 'goteo', 'gozar', 'grada',
      'gráfico', 'grano', 'grasa', 'gratis', 'grave', 'grieta', 'grillo', 'gripe',
      'gris', 'grito', 'grosor', 'grúa', 'grueso', 'grumo', 'grupo', 'guante',
      'guapo', 'guardia', 'guerra', 'guía', 'guiño', 'guion', 'guiso', 'guitarra',
      'gusano', 'gustar', 'haber', 'hábil', 'hablar', 'hacer', 'hacha', 'hada',
      'hallar', 'hamaca', 'harina', 'haz', 'hazaña', 'hebilla', 'hebra', 'hecho',
      'helado', 'helio', 'hembra', 'herir', 'hermano', 'héroe', 'hervir', 'hielo',
      'hierro', 'hígado', 'higiene', 'hijo', 'himno', 'historia', 'hocico', 'hogar',
      'hoguera', 'hoja', 'hombre', 'hongo', 'honor', 'honra', 'hora', 'hormiga',
      'horno', 'hostil', 'hoyo', 'hueco', 'huelga', 'huerta', 'hueso', 'huevo',
      'huida', 'huir', 'humano', 'húmedo', 'humilde', 'humo', 'hundir', 'huracán',
      'hurto', 'icono', 'ideal', 'idioma', 'ídolo', 'iglesia', 'iglú', 'igual',
      'ilegal', 'ilusión', 'imagen', 'imán', 'imitar', 'impar', 'imperio', 'imponer',
      'impulso', 'incapaz', 'índice', 'inerte', 'infiel', 'informe', 'ingenio', 'inicio',
      'inmenso', 'inmune', 'innato', 'insecto', 'instante', 'interés', 'íntimo', 'intuir',
      'inútil', 'invierno', 'ira', 'iris', 'ironía', 'isla', 'islote', 'jabalí',
      'jabón', 'jamón', 'jarabe', 'jardín', 'jarra', 'jaula', 'jazmín', 'jefe',
      'jeringa', 'jinete', 'jornada', 'joroba', 'joven', 'joya', 'juerga', 'jueves',
      'juez', 'jugador', 'jugo', 'juguete', 'juicio', 'junco', 'jungla', 'junio',
      'juntar', 'júpiter', 'jurar', 'justo', 'juvenil', 'juzgar', 'kilo', 'koala',
      'labio', 'lacio', 'lacra', 'lado', 'ladrón', 'lagarto', 'lágrima', 'laguna',
      'laico', 'lamer', 'lámina', 'lámpara', 'lana', 'lancha', 'langosta', 'lanza',
      'lápiz', 'largo', 'larva', 'lástima', 'lata', 'látex', 'latir', 'laurel',
      'lavar', 'lazo', 'leal', 'lección', 'leche', 'lector', 'leer', 'legión',
      'legumbre', 'lejano', 'lengua', 'lento', 'leña', 'león', 'leopardo', 'lesión',
      'letal', 'letra', 'leve', 'leyenda', 'libertad', 'libro', 'licor', 'líder',
      'lidiar', 'lienzo', 'liga', 'ligero', 'lima', 'límite', 'limón', 'limpio',
      'lince', 'lindo', 'línea', 'lingote', 'lino', 'linterna', 'líquido', 'liso',
      'lista', 'litera', 'litio', 'litro', 'llaga', 'llama', 'llanto', 'llave',
      'llegar', 'llenar', 'llevar', 'llorar', 'llover', 'lluvia', 'lobo', 'loción',
      'loco', 'locura', 'lógica', 'logro', 'lombriz', 'lomo', 'lonja', 'lote',
      'lucha', 'lucir', 'lugar', 'lujo', 'luna', 'lunes', 'lupa', 'lustro',
      'luto', 'luz', 'maceta', 'macho', 'madera', 'madre', 'maduro', 'maestro',
      'mafia', 'magia', 'mago', 'maíz', 'maldad', 'maleta', 'malla', 'malo',
      'mamá', 'mambo', 'mamut', 'manco', 'mando', 'manejar', 'manga', 'maniquí',
      'manjar', 'mano', 'manso', 'manta', 'mañana', 'mapa', 'máquina', 'mar',
      'marco', 'marea', 'marfil', 'margen', 'marido', 'mármol', 'marrón', 'martes',
      'marzo', 'masa', 'máscara', 'masivo', 'matar', 'materia', 'matiz', 'matriz',
      'máximo', 'mayor', 'mazorca', 'mecha', 'medalla', 'medio', 'médula', 'mejilla',
      'mejor', 'melena', 'melón', 'memoria', 'menor', 'mensaje', 'mente', 'menú',
      'mercado', 'merengue', 'mérito', 'mes', 'mesón', 'meta', 'meter', 'método',
      'metro', 'mezcla', 'miedo', 'miel', 'miembro', 'miga', 'mil', 'milagro',
      'militar', 'millón', 'mimo', 'mina', 'minero', 'mínimo', 'minuto', 'miope',
      'mirar', 'misa', 'miseria', 'misil', 'mismo', 'mitad', 'mito', 'mochila',
      'moción', 'moda', 'modelo', 'moho', 'mojar', 'molde', 'moler', 'molino',
      'momento', 'momia', 'monarca', 'moneda', 'monja', 'monto', 'moño', 'morada',
      'morder', 'moreno', 'morir', 'morro', 'morsa', 'mortal', 'mosca', 'mostrar',
      'motivo', 'mover', 'móvil', 'mozo', 'mucho', 'mudar', 'mueble', 'muela',
      'muerte', 'muestra', 'mugre', 'mujer', 'mula', 'muleta', 'multa', 'mundo',
      'muñeca', 'mural', 'muro', 'músculo', 'museo', 'musgo', 'música', 'muslo',
      'nácar', 'nación', 'nadar', 'naipe', 'naranja', 'nariz', 'narrar', 'nasal',
      'natal', 'nativo', 'natural', 'náusea', 'naval', 'nave', 'navidad', 'necio',
      'néctar', 'negar', 'negocio', 'negro', 'neón', 'nervio', 'neto', 'neutro',
      'nevar', 'nevera', 'nicho', 'nido', 'niebla', 'nieto', 'niñez', 'niño',
      'nítido', 'nivel', 'nobleza', 'noche', 'nómina', 'noria', 'norma', 'norte',
      'nota', 'noticia', 'novato', 'novela', 'novio', 'nube', 'nuca', 'núcleo',
      'nudillo', 'nudo', 'nuera', 'nueve', 'nuez', 'nulo', 'número', 'nutria',
      'oasis', 'obeso', 'obispo', 'objeto', 'obra', 'obrero', 'observar', 'obtener',
      'obvio', 'oca', 'ocaso', 'océano', 'ochenta', 'ocho', 'ocio', 'ocre',
      'octavo', 'octubre', 'oculto', 'ocupar', 'ocurrir', 'odiar', 'odio', 'odisea',
      'oeste', 'ofensa', 'oferta', 'oficio', 'ofrecer', 'ogro', 'oído', 'oír',
      'ojo', 'ola', 'oleada', 'olfato', 'olivo', 'olla', 'olmo', 'olor',
      'olvido', 'ombligo', 'onda', 'onza', 'opaco', 'opción', 'ópera', 'opinar',
      'oponer', 'optar', 'óptica', 'opuesto', 'oración', 'orador', 'oral', 'órbita',
      'orca', 'orden', 'oreja', 'órgano', 'orgía', 'orgullo', 'oriente', 'origen',
      'orilla', 'oro', 'orquesta', 'oruga', 'osadía', 'oscuro', 'osezno', 'oso',
      'ostra', 'otoño', 'otro', 'oveja', 'óvulo', 'óxido', 'oxígeno', 'oyente',
      'ozono', 'pacto', 'padre', 'paella', 'página', 'pago', 'país', 'pájaro',
      'palabra', 'palco', 'paleta', 'pálido', 'palma', 'paloma', 'palpar', 'pan',
      'panal', 'pánico', 'pantera', 'pañuelo', 'papá', 'papel', 'papilla', 'paquete',
      'parar', 'parcela', 'pared', 'parir', 'paro', 'párpado', 'parque', 'párrafo',
      'parte', 'pasar', 'paseo', 'pasión', 'paso', 'pasta', 'pata', 'patio',
      'patria', 'pausa', 'pauta', 'pavo', 'payaso', 'peatón', 'pecado', 'pecera',
      'pecho', 'pedal', 'pedir', 'pegar', 'peine', 'pelar', 'peldaño', 'pelea',
      'peligro', 'pellejo', 'pelo', 'peluca', 'pena', 'pensar', 'peñón', 'peón',
      'peor', 'pepino', 'pequeño', 'pera', 'percha', 'perder', 'pereza', 'perfil',
      'perico', 'perla', 'permiso', 'perro', 'persona', 'pesa', 'pesca', 'pésimo',
      'pestaña', 'pétalo', 'petróleo', 'pez', 'pezuña', 'picar', 'pichón', 'pie',
      'piedra', 'pierna', 'pieza', 'pijama', 'pilar', 'piloto', 'pimienta', 'pino',
      'pintor', 'pinza', 'piña', 'piojo', 'pipa', 'pirata', 'pisar', 'piscina',
      'piso', 'pista', 'pitón', 'pizca', 'placa', 'plan', 'plata', 'playa',
      'plaza', 'pleito', 'pleno', 'plomo', 'pluma', 'plural', 'pobre', 'poco',
      'poder', 'podio', 'poema', 'poesía', 'poeta', 'polen', 'policía', 'pollo',
      'polvo', 'pomada', 'pomelo', 'pomo', 'pompa', 'poner', 'porción', 'portal',
      'posada', 'poseer', 'posible', 'poste', 'potencia', 'potro', 'pozo', 'prado',
      'precoz', 'pregunta', 'premio', 'prensa', 'preso', 'previo', 'primo', 'príncipe',
      'prisión', 'privar', 'proa', 'probar', 'proceso', 'producto', 'proeza', 'profesor',
      'programa', 'prole', 'promesa', 'pronto', 'propio', 'próximo', 'prueba', 'público',
      'puchero', 'pudor', 'pueblo', 'puerta', 'puesto', 'pulga', 'pulir', 'pulmón',
      'pulpo', 'pulso', 'puma', 'punto', 'puñal', 'puño', 'pupa', 'pupila',
      'puré', 'quedar', 'queja', 'quemar', 'querer', 'queso', 'quieto', 'química',
      'quince', 'quitar', 'rábano', 'rabia', 'rabo', 'ración', 'radical', 'raíz',
      'rama', 'rampa', 'rancho', 'rango', 'rapaz', 'rápido', 'rapto', 'rasgo',
      'raspa', 'rato', 'rayo', 'raza', 'razón', 'reacción', 'realidad', 'rebaño',
      'rebote', 'recaer', 'receta', 'rechazo', 'recoger', 'recreo', 'recto', 'recurso',
      'red', 'redondo', 'reducir', 'reflejo', 'reforma', 'refrán', 'refugio', 'regalo',
      'regir', 'regla', 'regreso', 'rehén', 'reino', 'reír', 'reja', 'relato',
      'relevo', 'relieve', 'relleno', 'reloj', 'remar', 'remedio', 'remo', 'rencor',
      'rendir', 'renta', 'reparto', 'repetir', 'reposo', 'reptil', 'res', 'rescate',
      'resina', 'respeto', 'resto', 'resumen', 'retiro', 'retorno', 'retrato', 'reunir',
      'revés', 'revista', 'rey', 'rezar', 'rico', 'riego', 'rienda', 'riesgo',
      'rifa', 'rígido', 'rigor', 'rincón', 'riñón', 'río', 'riqueza', 'risa',
      'ritmo', 'rito'
    ]
  },
  'portuguese': {
    prefixLength: 3,
    words: [
      'abaular', 'abdominal', 'abeto', 'abissinio', 'abjeto', 'ablucao', 'abnegar', 'abotoar',
      'abrutalhar', 'absurdo', 'abutre', 'acautelar', 'accessorios', 'acetona', 'achocolatado', 'acirrar',
      'acne', 'acovardar', 'acrostico', 'actinomicete', 'acustico', 'adaptavel', 'adeus', 'adivinho',
      'adjunto', 'admoestar', 'adnominal', 'adotivo', 'adquirir', 'adriatico', 'adsorcao', 'adutora',
      'advogar', 'aerossol', 'afazeres', 'afetuoso', 'afixo', 'afluir', 'afortunar', 'afrouxar',
      'aftosa', 'afunilar', 'agentes', 'agito', 'aglutinar', 'aiatola', 'aimore', 'aino',
      'aipo', 'airoso', 'ajeitar', 'ajoelhar', 'ajudante', 'ajuste', 'alazao', 'albumina',
      'alcunha', 'alegria', 'alexandre', 'alforriar', 'alguns', 'alhures', 'alivio', 'almoxarife',
      'alotropico', 'alpiste', 'alquimista', 'alsaciano', 'altura', 'aluviao', 'alvura', 'amazonico',
      'ambulatorio', 'ametodico', 'amizades', 'amniotico', 'amovivel', 'amurada', 'anatomico', 'ancorar',
      'anexo', 'anfora', 'aniversario', 'anjo', 'anotar', 'ansioso', 'anturio', 'anuviar',
      'anverso', 'anzol', 'aonde', 'apaziguar', 'apito', 'aplicavel', 'apoteotico', 'aprimorar',
      'aprumo', 'apto', 'apuros', 'aquoso', 'arauto', 'arbusto', 'arduo', 'aresta',
      'arfar', 'arguto', 'aritmetico', 'arlequim', 'armisticio', 'aromatizar', 'arpoar', 'arquivo',
      'arrumar', 'arsenio', 'arturiano', 'aruaque', 'arvores', 'asbesto', 'ascorbico', 'aspirina',
      'asqueroso', 'assustar', 'astuto', 'atazanar', 'ativo', 'atletismo', 'atmosferico', 'atormentar',
      'atroz', 'aturdir', 'audivel', 'auferir', 'augusto', 'aula', 'aumento', 'aurora',
      'autuar', 'avatar', 'avexar', 'avizinhar', 'avolumar', 'avulso', 'axiomatico', 'azerbaijano',
      'azimute', 'azoto', 'azulejo', 'bacteriologista', 'badulaque', 'baforada', 'baixote', 'bajular',
      'balzaquiana', 'bambuzal', 'banzo', 'baoba', 'baqueta', 'barulho', 'bastonete', 'batuta',
      'bauxita', 'bavaro', 'bazuca', 'bcrepuscular', 'beato', 'beduino', 'begonia', 'behaviorista',
      'beisebol', 'belzebu', 'bemol', 'benzido', 'beocio', 'bequer', 'berro', 'besuntar',
      'betume', 'bexiga', 'bezerro', 'biatlon', 'biboca', 'bicuspide', 'bidirecional', 'bienio',
      'bifurcar', 'bigorna', 'bijuteria', 'bimotor', 'binormal', 'bioxido', 'bipolarizacao', 'biquini',
      'birutice', 'bisturi', 'bituca', 'biunivoco', 'bivalve', 'bizarro', 'blasfemo', 'blenorreia',
      'blindar', 'bloqueio', 'blusao', 'boazuda', 'bofete', 'bojudo', 'bolso', 'bombordo',
      'bonzo', 'botina', 'boquiaberto', 'bostoniano', 'botulismo', 'bourbon', 'bovino', 'boximane',
      'bravura', 'brevidade', 'britar', 'broxar', 'bruno', 'bruxuleio', 'bubonico', 'bucolico',
      'buda', 'budista', 'bueiro', 'buffer', 'bugre', 'bujao', 'bumerangue', 'burundines',
      'busto', 'butique', 'buzios', 'caatinga', 'cabuqui', 'cacunda', 'cafuzo', 'cajueiro',
      'camurca', 'canudo', 'caquizeiro', 'carvoeiro', 'casulo', 'catuaba', 'cauterizar', 'cebolinha',
      'cedula', 'ceifeiro', 'celulose', 'cerzir', 'cesto', 'cetro', 'ceus', 'cevar',
      'chavena', 'cheroqui', 'chita', 'chovido', 'chuvoso', 'ciatico', 'cibernetico', 'cicuta',
      'cidreira', 'cientistas', 'cifrar', 'cigarro', 'cilio', 'cimo', 'cinzento', 'cioso',
      'cipriota', 'cirurgico', 'cisto', 'citrico', 'ciumento', 'civismo', 'clavicula', 'clero',
      'clitoris', 'cluster', 'coaxial', 'cobrir', 'cocota', 'codorniz', 'coexistir', 'cogumelo',
      'coito', 'colusao', 'compaixao', 'comutativo', 'contentamento', 'convulsivo', 'coordenativa', 'coquetel',
      'correto', 'corvo', 'costureiro', 'cotovia', 'covil', 'cozinheiro', 'cretino', 'cristo',
      'crivo', 'crotalo', 'cruzes', 'cubo', 'cucuia', 'cueiro', 'cuidar', 'cujo',
      'cultural', 'cunilingua', 'cupula', 'curvo', 'custoso', 'cutucar', 'czarismo', 'dablio',
      'dacota', 'dados', 'daguerreotipo', 'daiquiri', 'daltonismo', 'damista', 'dantesco', 'daquilo',
      'darwinista', 'dasein', 'dativo', 'deao', 'debutantes', 'decurso', 'deduzir', 'defunto',
      'degustar', 'dejeto', 'deltoide', 'demover', 'denunciar', 'deputado', 'deque', 'dervixe',
      'desvirtuar', 'deturpar', 'deuteronomio', 'devoto', 'dextrose', 'dezoito', 'diatribe', 'dicotomico',
      'didatico', 'dietista', 'difuso', 'digressao', 'diluvio', 'diminuto', 'dinheiro', 'dinossauro',
      'dioxido', 'diplomatico', 'dique', 'dirimivel', 'disturbio', 'diurno', 'divulgar', 'dizivel',
      'doar', 'dobro', 'docura', 'dodoi', 'doer', 'dogue', 'doloso', 'domo',
      'donzela', 'doping', 'dorsal', 'dossie', 'dote', 'doutro', 'doze', 'dravidico',
      'dreno', 'driver', 'dropes', 'druso', 'dubnio', 'ducto', 'dueto', 'dulija',
      'dundum', 'duodeno', 'duquesa', 'durou', 'duvidoso', 'duzia', 'ebano', 'ebrio',
      'eburneo', 'echarpe', 'eclusa', 'ecossistema', 'ectoplasma', 'ecumenismo', 'eczema', 'eden',
      'editorial', 'edredom', 'edulcorar', 'efetuar', 'efigie', 'efluvio', 'egiptologo', 'egresso',
      'egua', 'einsteiniano', 'eira', 'eivar', 'eixos', 'ejetar', 'elastomero', 'eldorado',
      'elixir', 'elmo', 'eloquente', 'elucidativo', 'emaranhar', 'embutir', 'emerito', 'emfa',
      'emitir', 'emotivo', 'empuxo', 'emulsao', 'enamorar', 'encurvar', 'enduro', 'enevoar',
      'enfurnar', 'enguico', 'enho', 'enigmista', 'enlutar', 'enormidade', 'enpreendimento', 'enquanto',
      'enriquecer', 'enrugar', 'entusiastico', 'enunciar', 'envolvimento', 'enxuto', 'enzimatico', 'eolico',
      'epiteto', 'epoxi', 'epura', 'equivoco', 'erario', 'erbio', 'ereto', 'erguido',
      'erisipela', 'ermo', 'erotizar', 'erros', 'erupcao', 'ervilha', 'esburacar', 'escutar',
      'esfuziante', 'esguio', 'esloveno', 'esmurrar', 'esoterismo', 'esperanca', 'espirito', 'espurio',
      'essencialmente', 'esturricar', 'esvoacar', 'etario', 'eterno', 'etiquetar', 'etnologo', 'etos',
      'etrusco', 'euclidiano', 'euforico', 'eugenico', 'eunuco', 'europio', 'eustaquio', 'eutanasia',
      'evasivo', 'eventualidade', 'evitavel', 'evoluir', 'exaustor', 'excursionista', 'exercito', 'exfoliado',
      'exito', 'exotico', 'expurgo', 'exsudar', 'extrusora', 'exumar', 'fabuloso', 'facultativo',
      'fado', 'fagulha', 'faixas', 'fajuto', 'faltoso', 'famoso', 'fanzine', 'fapesp',
      'faquir', 'fartura', 'fastio', 'faturista', 'fausto', 'favorito', 'faxineira', 'fazer',
      'fealdade', 'febril', 'fecundo', 'fedorento', 'feerico', 'feixe', 'felicidade', 'felipe',
      'feltro', 'femur', 'fenotipo', 'fervura', 'festivo', 'feto', 'feudo', 'fevereiro',
      'fezinha', 'fiasco', 'fibra', 'ficticio', 'fiduciario', 'fiesp', 'fifa', 'figurino',
      'fijiano', 'filtro', 'finura', 'fiorde', 'fiquei', 'firula', 'fissurar', 'fitoteca',
      'fivela', 'fixo', 'flavio', 'flexor', 'flibusteiro', 'flotilha', 'fluxograma', 'fobos',
      'foco', 'fofura', 'foguista', 'foie', 'foliculo', 'fominha', 'fonte', 'forum',
      'fosso', 'fotossintese', 'foxtrote', 'fraudulento', 'frevo', 'frivolo', 'frouxo', 'frutose',
      'fuba', 'fucsia', 'fugitivo', 'fuinha', 'fujao', 'fulustreco', 'fumo', 'funileiro',
      'furunculo', 'fustigar', 'futurologo', 'fuxico', 'fuzue', 'gabriel', 'gado', 'gaelico',
      'gafieira', 'gaguejo', 'gaivota', 'gajo', 'galvanoplastico', 'gamo', 'ganso', 'garrucha',
      'gastronomo', 'gatuno', 'gaussiano', 'gaviao', 'gaxeta', 'gazeteiro', 'gear', 'geiser',
      'geminiano', 'generoso', 'genuino', 'geossinclinal', 'gerundio', 'gestual', 'getulista', 'gibi',
      'gigolo', 'gilete', 'ginseng', 'giroscopio', 'glaucio', 'glacial', 'gleba', 'glifo',
      'glote', 'glutonia', 'gnostico', 'goela', 'gogo', 'goitaca', 'golpista', 'gomo',
      'gonzo', 'gorro', 'gostou', 'goticula', 'gourmet', 'governo', 'gozo', 'graxo',
      'grevista', 'grito', 'grotesco', 'gruta', 'guaxinim', 'gude', 'gueto', 'guizo',
      'guloso', 'gume', 'guru', 'gustativo', 'gustavo', 'gutural', 'habitue', 'haitiano',
      'halterofilista', 'hamburguer', 'hanseniase', 'happening', 'harpista', 'hastear', 'haveres', 'hebreu',
      'hectometro', 'hedonista', 'hegira', 'helena', 'helminto', 'hemorroidas', 'henrique', 'heptassilabo',
      'hertziano', 'hesitar', 'heterossexual', 'heuristico', 'hexagono', 'hiato', 'hibrido', 'hidrostatico',
      'hieroglifo', 'hifenizar', 'higienizar', 'hilario', 'himen', 'hino', 'hippie', 'hirsuto',
      'historiografia', 'hitlerista', 'hodometro', 'hoje', 'holograma', 'homus', 'honroso', 'hoquei',
      'horto', 'hostilizar', 'hotentote', 'huguenote', 'humilde', 'huno', 'hurra', 'hutu',
      'iaia', 'ialorixa', 'iambico', 'iansa', 'iaque', 'iara', 'iatista', 'iberico',
      'ibis', 'icar', 'iceberg', 'icosagono', 'idade', 'ideologo', 'idiotice', 'idoso',
      'iemenita', 'iene', 'igarape', 'iglu', 'ignorar', 'igreja', 'iguaria', 'iidiche',
      'ilativo', 'iletrado', 'ilharga', 'ilimitado', 'ilogismo', 'ilustrissimo', 'imaturo', 'imbuzeiro',
      'imerso', 'imitavel', 'imovel', 'imputar', 'imutavel', 'inaveriguavel', 'incutir', 'induzir',
      'inextricavel', 'infusao', 'ingua', 'inhame', 'iniquo', 'injusto', 'inning', 'inoxidavel',
      'inquisitorial', 'insustentavel', 'intumescimento', 'inutilizavel', 'invulneravel', 'inzoneiro', 'iodo', 'iogurte',
      'ioio', 'ionosfera', 'ioruba', 'iota', 'ipsilon', 'irascivel', 'iris', 'irlandes',
      'irmaos', 'iroques', 'irrupcao', 'isca', 'isento', 'islandes', 'isotopo', 'isqueiro',
      'israelita', 'isso', 'isto', 'iterbio', 'itinerario', 'itrio', 'iuane', 'iugoslavo',
      'jabuticabeira', 'jacutinga', 'jade', 'jagunco', 'jainista', 'jaleco', 'jambo', 'jantarada',
      'japones', 'jaqueta', 'jarro', 'jasmim', 'jato', 'jaula', 'javel', 'jazz',
      'jegue', 'jeitoso', 'jejum', 'jenipapo', 'jeova', 'jequitiba', 'jersei', 'jesus',
      'jetom', 'jiboia', 'jihad', 'jilo', 'jingle', 'jipe', 'jocoso', 'joelho',
      'joguete', 'joio', 'jojoba', 'jorro', 'jota', 'joule', 'joviano', 'jubiloso',
      'judoca', 'jugular', 'juizo', 'jujuba', 'juliano', 'jumento', 'junto', 'jururu',
      'justo', 'juta', 'juventude', 'labutar', 'laguna', 'laico', 'lajota', 'lanterninha',
      'lapso', 'laquear', 'lastro', 'lauto', 'lavrar', 'laxativo', 'lazer', 'leasing',
      'lebre', 'lecionar', 'ledo', 'leguminoso', 'leitura', 'lele', 'lemure', 'lento',
      'leonardo', 'leopardo', 'lepton', 'leque', 'leste', 'letreiro', 'leucocito', 'levitico',
      'lexicologo', 'lhama', 'lhufas', 'liame', 'licoroso', 'lidocaina', 'liliputiano', 'limusine',
      'linotipo', 'lipoproteina', 'liquidos', 'lirismo', 'lisura', 'liturgico', 'livros', 'lixo',
      'lobulo', 'locutor', 'lodo', 'logro', 'lojista', 'lombriga', 'lontra', 'loop',
      'loquaz', 'lorota', 'losango', 'lotus', 'louvor', 'luar', 'lubrificavel', 'lucros',
      'lugubre', 'luis', 'luminoso', 'luneta', 'lustroso', 'luto', 'luvas', 'luxuriante',
      'luzeiro', 'maduro', 'maestro', 'mafioso', 'magro', 'maiuscula', 'majoritario', 'malvisto',
      'mamute', 'manutencao', 'mapoteca', 'maquinista', 'marzipa', 'masturbar', 'matuto', 'mausoleu',
      'mavioso', 'maxixe', 'mazurca', 'meandro', 'mecha', 'medusa', 'mefistofelico', 'megera',
      'meirinho', 'melro', 'memorizar', 'menu', 'mequetrefe', 'mertiolate', 'mestria', 'metroviario',
      'mexilhao', 'mezanino', 'miau', 'microssegundo', 'midia', 'migratorio', 'mimosa', 'minuto',
      'miosotis', 'mirtilo', 'misturar', 'mitzvah', 'miudos', 'mixuruca', 'mnemonico', 'moagem',
      'mobilizar', 'modulo', 'moer', 'mofo', 'mogno', 'moita', 'molusco', 'monumento',
      'moqueca', 'morubixaba', 'mostruario', 'motriz', 'mouse', 'movivel', 'mozarela', 'muarra',
      'muculmano', 'mudo', 'mugir', 'muitos', 'mumunha', 'munir', 'muon', 'muquira',
      'murros', 'musselina', 'nacoes', 'nado', 'naftalina', 'nago', 'naipe', 'naja',
      'nalgum', 'namoro', 'nanquim', 'napolitano', 'naquilo', 'nascimento', 'nautilo', 'navios',
      'nazista', 'nebuloso', 'nectarina', 'nefrologo', 'negus', 'nelore', 'nenufar', 'nepotismo',
      'nervura', 'neste', 'netuno', 'neutron', 'nevoeiro', 'newtoniano', 'nexo', 'nhenhenhem',
      'nhoque', 'nigeriano', 'niilista', 'ninho', 'niobio', 'niponico', 'niquelar', 'nirvana',
      'nisto', 'nitroglicerina', 'nivoso', 'nobreza', 'nocivo', 'noel', 'nogueira', 'noivo',
      'nojo', 'nominativo', 'nonuplo', 'noruegues', 'nostalgico', 'noturno', 'nouveau', 'nuanca',
      'nublar', 'nucleotideo', 'nudista', 'nulo', 'numismatico', 'nunquinha', 'nupcias', 'nutritivo',
      'nuvens', 'oasis', 'obcecar', 'obeso', 'obituario', 'objetos', 'oblongo', 'obnoxio',
      'obrigatorio', 'obstruir', 'obtuso', 'obus', 'obvio', 'ocaso', 'occipital', 'oceanografo',
      'ocioso', 'oclusivo', 'ocorrer', 'ocre', 'octogono', 'odalisca', 'odisseia', 'odorifico',
      'oersted', 'oeste', 'ofertar', 'ofidio', 'oftalmologo', 'ogiva', 'ogum', 'oigale',
      'oitavo', 'oitocentos', 'ojeriza', 'olaria', 'oleoso', 'olfato', 'olhos', 'oliveira',
      'olmo', 'olor', 'olvidavel', 'ombudsman', 'omeleteira', 'omitir', 'omoplata', 'onanismo',
      'ondular', 'oneroso', 'onomatopeico', 'ontologico', 'onus', 'onze', 'opalescente', 'opcional',
      'operistico', 'opio', 'oposto', 'oprobrio', 'optometrista', 'opusculo', 'oratorio', 'orbital',
      'orcar', 'orfao', 'orixa', 'orla', 'ornitologo', 'orquidea', 'ortorrombico', 'orvalho',
      'osculo', 'osmotico', 'ossudo', 'ostrogodo', 'otario', 'otite', 'ouro', 'ousar',
      'outubro', 'ouvir', 'ovario', 'overnight', 'oviparo', 'ovni', 'ovoviviparo', 'ovulo',
      'oxala', 'oxente', 'oxiuro', 'oxossi', 'ozonizar', 'paciente', 'pactuar', 'padronizar',
      'paete', 'pagodeiro', 'paixao', 'pajem', 'paludismo', 'pampas', 'panturrilha', 'papudo',
      'paquistanes', 'pastoso', 'patua', 'paulo', 'pauzinhos', 'pavoroso', 'paxa', 'pazes',
      'peao', 'pecuniario', 'pedunculo', 'pegaso', 'peixinho', 'pejorativo', 'pelvis', 'penuria',
      'pequno', 'petunia', 'pezada', 'piauiense', 'pictorico', 'pierro', 'pigmeu', 'pijama',
      'pilulas', 'pimpolho', 'pintura', 'piorar', 'pipocar', 'piqueteiro', 'pirulito', 'pistoleiro',
      'pituitaria', 'pivotar', 'pixote', 'pizzaria', 'plistoceno', 'plotar', 'pluviometrico', 'pneumonico',
      'poco', 'podridao', 'poetisa', 'pogrom', 'pois', 'polvorosa', 'pomposo', 'ponderado',
      'pontudo', 'populoso', 'poquer', 'porvir', 'posudo', 'potro', 'pouso', 'povoar',
      'prazo', 'prezar', 'privilegios', 'proximo', 'prussiano', 'pseudopode', 'psoriase', 'pterossauros',
      'ptialina', 'ptolemaico', 'pudor', 'pueril', 'pufe', 'pugilista', 'puir', 'pujante',
      'pulverizar', 'pumba', 'punk', 'purulento', 'pustula', 'putsch', 'puxe', 'quatrocentos',
      'quetzal', 'quixotesco', 'quotizavel', 'rabujice', 'racista', 'radonio', 'rafia', 'ragu',
      'rajado', 'ralo', 'rampeiro', 'ranzinza', 'raptor', 'raquitismo', 'raro', 'rasurar',
      'ratoeira', 'ravioli', 'razoavel', 'reavivar', 'rebuscar', 'recusavel', 'reduzivel', 'reexposicao',
      'refutavel', 'regurgitar', 'reivindicavel', 'rejuvenescimento', 'relva', 'remuneravel', 'renunciar', 'reorientar',
      'repuxo', 'requisito', 'resumo', 'returno', 'reutilizar', 'revolvido', 'rezonear', 'riacho',
      'ribossomo', 'ricota', 'ridiculo', 'rifle', 'rigoroso', 'rijo', 'rimel', 'rins',
      'rios', 'riqueza', 'riquixa', 'rissole', 'ritualistico', 'rivalizar', 'rixa', 'robusto',
      'rococo', 'rodoviario', 'roer', 'rogo', 'rojao', 'rolo', 'rompimento', 'ronronar',
      'roqueiro', 'rorqual', 'rosto', 'rotundo', 'rouxinol', 'roxo', 'royal', 'ruas',
      'rucula', 'rudimentos', 'ruela', 'rufo', 'rugoso', 'ruivo', 'rule', 'rumoroso',
      'runico', 'ruptura', 'rural', 'rustico', 'rutilar', 'saariano', 'sabujo', 'sacudir',
      'sadomasoquista', 'safra', 'sagui', 'sais', 'samurai', 'santuario', 'sapo', 'saquear',
      'sartriano', 'saturno', 'saude', 'sauva', 'saveiro', 'saxofonista', 'sazonal', 'scherzo',
      'script', 'seara', 'seborreia', 'secura', 'seduzir', 'sefardim', 'seguro', 'seja',
      'selvas', 'sempre', 'senzala', 'sepultura', 'sequoia', 'sestercio', 'setuplo', 'seus',
      'seviciar', 'sezonismo', 'shalom', 'siames', 'sibilante', 'sicrano', 'sidra', 'sifilitico',
      'signos', 'silvo', 'simultaneo', 'sinusite', 'sionista', 'sirio', 'sisudo', 'situar',
      'sivan', 'slide', 'slogan', 'soar', 'sobrio', 'socratico', 'sodomizar', 'soerguer',
      'software', 'sogro', 'soja', 'solver', 'somente', 'sonso', 'sopro', 'soquete',
      'sorveteiro', 'sossego', 'soturno', 'sousafone', 'sovinice', 'sozinho', 'suavizar', 'subverter',
      'sucursal', 'sudoriparo', 'sufragio', 'sugestoes', 'suite', 'sujo', 'sultao', 'sumula',
      'suntuoso', 'suor', 'supurar', 'suruba', 'susto', 'suturar', 'suvenir', 'tabuleta',
      'taco', 'tadjique', 'tafeta', 'tagarelice', 'taitiano', 'talvez', 'tampouco', 'tanzaniano',
      'taoista', 'tapume', 'taquion', 'tarugo', 'tascar', 'tatuar', 'tautologico', 'tavola',
      'taxionomista', 'tchecoslovaco', 'teatrologo', 'tectonismo', 'tedioso', 'teflon', 'tegumento', 'teixo',
      'telurio', 'temporas', 'tenue', 'teosofico', 'tepido', 'tequila', 'terrorista', 'testosterona',
      'tetrico', 'teutonico', 'teve', 'texugo', 'tiara', 'tibia', 'tiete', 'tifoide',
      'tigresa', 'tijolo', 'tilintar', 'timpano', 'tintureiro', 'tiquete', 'tiroteio', 'tisico',
      'titulos', 'tive', 'toar', 'toboga', 'tofu', 'togoles', 'toicinho', 'tolueno',
      'tomografo', 'tontura', 'toponimo', 'toquio', 'torvelinho', 'tostar', 'toto', 'touro',
      'toxina', 'trazer', 'trezentos', 'trivialidade', 'trovoar', 'truta', 'tuaregue', 'tubular',
      'tucano', 'tudo', 'tufo', 'tuiste', 'tulipa', 'tumultuoso', 'tunisino', 'tupiniquim',
      'turvo', 'tutu', 'ucraniano', 'udenista', 'ufanista', 'ufologo', 'ugaritico', 'uiste',
      'uivo', 'ulceroso', 'ulema', 'ultravioleta', 'umbilical', 'umero', 'umido', 'umlaut',
      'unanimidade', 'unesco', 'ungulado', 'unheiro', 'univoco', 'untuoso', 'urano', 'urbano',
      'urdir', 'uretra', 'urgente', 'urinol', 'urna', 'urologo', 'urro', 'ursulina',
      'urtiga', 'urupe', 'usavel', 'usbeque', 'usei', 'usineiro', 'usurpar', 'utero',
      'utilizar', 'utopico', 'uvular', 'uxoricidio', 'vacuo', 'vadio', 'vaguear', 'vaivem',
      'valvula', 'vampiro', 'vantajoso', 'vaporoso', 'vaquinha', 'varziano', 'vasto', 'vaticinio',
      'vaudeville', 'vazio', 'veado', 'vedico', 'veemente', 'vegetativo', 'veio', 'veja',
      'veludo', 'venusiano', 'verdade', 'verve', 'vestuario', 'vetusto', 'vexatorio', 'vezes',
      'viavel', 'vibratorio', 'victor', 'vicunha', 'vidros', 'vietnamita', 'vigoroso', 'vilipendiar',
      'vime', 'vintem', 'violoncelo', 'viquingue', 'virus', 'visualizar', 'vituperio', 'viuvo',
      'vivo', 'vizir', 'voar', 'vociferar', 'vodu', 'vogar', 'voile', 'volver',
      'vomito', 'vontade', 'vortice', 'vosso', 'voto', 'vovozinha', 'voyeuse', 'vozes',
      'vulva', 'vupt', 'western', 'xadrez', 'xale', 'xampu', 'xango', 'xarope',
      'xaual', 'xavante', 'xaxim', 'xenonio', 'xepa', 'xerox', 'xicara', 'xifopago',
      'xiita', 'xilogravura', 'xinxim', 'xistoso', 'xixi', 'xodo', 'xogum', 'xucro',
      'zabumba', 'zagueiro', 'zambiano', 'zanzar', 'zarpar', 'zebu', 'zefiro', 'zeloso',
      'zenite', 'zumbi'
    ]
  },
  'japanese': {
    prefixLength: 4,
    words: [
      'あいこくしん', 'あいさつ', 'あいだ', 'あおぞら', 'あかちゃん', 'あきる', 'あけがた', 'あける',
      'あこがれる', 'あさい', 'あさひ', 'あしあと', 'あじわう', 'あずかる', 'あずき', 'あそぶ',
      'あたえる', 'あたためる', 'あたりまえ', 'あたる', 'あつい', 'あつかう', 'あっしゅく', 'あつまり',
      'あつめる', 'あてな', 'あてはまる', 'あひる', 'あぶら', 'あぶる', 'あふれる', 'あまい',
      'あまど', 'あまやかす', 'あまり', 'あみもの', 'あめりか', 'あやまる', 'あゆむ', 'あらいぐま',
      'あらし', 'あらすじ', 'あらためる', 'あらゆる', 'あらわす', 'ありがとう', 'あわせる', 'あわてる',
      'あんい', 'あんがい', 'あんこ', 'あんぜん', 'あんてい', 'あんない', 'あんまり', 'いいだす',
      'いおん', 'いがい', 'いがく', 'いきおい', 'いきなり', 'いきもの', 'いきる', 'いくじ',
      'いくぶん', 'いけばな', 'いけん', 'いこう', 'いこく', 'いこつ', 'いさましい', 'いさん',
      'いしき', 'いじゅう', 'いじょう', 'いじわる', 'いずみ', 'いずれ', 'いせい', 'いせえび',
      'いせかい', 'いせき', 'いぜん', 'いそうろう', 'いそがしい', 'いだい', 'いだく', 'いたずら',
      'いたみ', 'いたりあ', 'いちおう', 'いちじ', 'いちど', 'いちば', 'いちぶ', 'いちりゅう',
      'いつか', 'いっしゅん', 'いっせい', 'いっそう', 'いったん', 'いっち', 'いってい', 'いっぽう',
      'いてざ', 'いてん', 'いどう', 'いとこ', 'いない', 'いなか', 'いねむり', 'いのち',
      'いのる', 'いはつ', 'いばる', 'いはん', 'いびき', 'いひん', 'いふく', 'いへん',
      'いほう', 'いみん', 'いもうと', 'いもたれ', 'いもり', 'いやがる', 'いやす', 'いよかん',
      'いよく', 'いらい', 'いらすと', 'いりぐち', 'いりょう', 'いれい', 'いれもの', 'いれる',
      'いろえんぴつ', 'いわい', 'いわう', 'いわかん', 'いわば', 'いわゆる', 'いんげんまめ', 'いんさつ',
      'いんしょう', 'いんよう', 'うえき', 'うえる', 'うおざ', 'うがい', 'うかぶ', 'うかべる',
      'うきわ', 'うくらいな', 'うくれれ', 'うけたまわる', 'うけつけ', 'うけとる', 'うけもつ', 'うける',
      'うごかす', 'うごく', 'うこん', 'うさぎ', 'うしなう', 'うしろがみ', 'うすい', 'うすぎ',
      'うすぐらい', 'うすめる', 'うせつ', 'うちあわせ', 'うちがわ', 'うちき', 'うちゅう', 'うっかり',
      'うつくしい', 'うったえる', 'うつる', 'うどん', 'うなぎ', 'うなじ', 'うなずく', 'うなる',
      'うねる', 'うのう', 'うぶげ', 'うぶごえ', 'うまれる', 'うめる', 'うもう', 'うやまう',
      'うよく', 'うらがえす', 'うらぐち', 'うらない', 'うりあげ', 'うりきれ', 'うるさい', 'うれしい',
      'うれゆき', 'うれる', 'うろこ', 'うわき', 'うわさ', 'うんこう', 'うんちん', 'うんてん',
      'うんどう', 'えいえん', 'えいが', 'えいきょう', 'えいご', 'えいせい', 'えいぶん', 'えいよう',
      'えいわ', 'えおり', 'えがお', 'えがく', 'えきたい', 'えくせる', 'えしゃく', 'えすて',
      'えつらん', 'えのぐ', 'えほうまき', 'えほん', 'えまき', 'えもじ', 'えもの', 'えらい',
      'えらぶ', 'えりあ', 'えんえん', 'えんかい', 'えんぎ', 'えんげき', 'えんしゅう', 'えんぜつ',
      'えんそく', 'えんちょう', 'えんとつ', 'おいかける', 'おいこす', 'おいしい', 'おいつく', 'おうえん',
      'おうさま', 'おうじ', 'おうせつ', 'おうたい', 'おうふく', 'おうべい', 'おうよう', 'おえる',
      'おおい', 'おおう', 'おおどおり', 'おおや', 'おおよそ', 'おかえり', 'おかず', 'おがむ',
      'おかわり', 'おぎなう', 'おきる', 'おくさま', 'おくじょう', 'おくりがな', 'おくる', 'おくれる',
      'おこす', 'おこなう', 'おこる', 'おさえる', 'おさない', 'おさめる', 'おしいれ', 'おしえる',
      'おじぎ', 'おじさん', 'おしゃれ', 'おそらく', 'おそわる', 'おたがい', 'おたく', 'おだやか',
      'おちつく', 'おっと', 'おつり', 'おでかけ', 'おとしもの', 'おとなしい', 'おどり', 'おどろかす',
      'おばさん', 'おまいり', 'おめでとう', 'おもいで', 'おもう', 'おもたい', 'おもちゃ', 'おやつ',
      'おやゆび', 'およぼす', 'おらんだ', 'おろす', 'おんがく', 'おんけい', 'おんしゃ', 'おんせん',
      'おんだん', 'おんちゅう', 'おんどけい', 'かあつ', 'かいが', 'がいき', 'がいけん', 'がいこう',
      'かいさつ', 'かいしゃ', 'かいすいよく', 'かいぜん', 'かいぞうど', 'かいつう', 'かいてん', 'かいとう',
      'かいふく', 'がいへき', 'かいほう', 'かいよう', 'がいらい', 'かいわ', 'かえる', 'かおり',
      'かかえる', 'かがく', 'かがし', 'かがみ', 'かくご', 'かくとく', 'かざる', 'がぞう',
      'かたい', 'かたち', 'がちょう', 'がっきゅう', 'がっこう', 'がっさん', 'がっしょう', 'かなざわし',
      'かのう', 'がはく', 'かぶか', 'かほう', 'かほご', 'かまう', 'かまぼこ', 'かめれおん',
      'かゆい', 'かようび', 'からい', 'かるい', 'かろう', 'かわく', 'かわら', 'がんか',
      'かんけい', 'かんこう', 'かんしゃ', 'かんそう', 'かんたん', 'かんち', 'がんばる', 'きあい',
      'きあつ', 'きいろ', 'ぎいん', 'きうい', 'きうん', 'きえる', 'きおう', 'きおく',
      'きおち', 'きおん', 'きかい', 'きかく', 'きかんしゃ', 'ききて', 'きくばり', 'きくらげ',
      'きけんせい', 'きこう', 'きこえる', 'きこく', 'きさい', 'きさく', 'きさま', 'きさらぎ',
      'ぎじかがく', 'ぎしき', 'ぎじたいけん', 'ぎじにってい', 'ぎじゅつしゃ', 'きすう', 'きせい', 'きせき',
      'きせつ', 'きそう', 'きぞく', 'きぞん', 'きたえる', 'きちょう', 'きつえん', 'ぎっちり',
      'きつつき', 'きつね', 'きてい', 'きどう', 'きどく', 'きない', 'きなが', 'きなこ',
      'きぬごし', 'きねん', 'きのう', 'きのした', 'きはく', 'きびしい', 'きひん', 'きふく',
      'きぶん', 'きぼう', 'きほん', 'きまる', 'きみつ', 'きむずかしい', 'きめる', 'きもだめし',
      'きもち', 'きもの', 'きゃく', 'きやく', 'ぎゅうにく', 'きよう', 'きょうりゅう', 'きらい',
      'きらく', 'きりん', 'きれい', 'きれつ', 'きろく', 'ぎろん', 'きわめる', 'ぎんいろ',
      'きんかくじ', 'きんじょ', 'きんようび', 'ぐあい', 'くいず', 'くうかん', 'くうき', 'くうぐん',
      'くうこう', 'ぐうせい', 'くうそう', 'ぐうたら', 'くうふく', 'くうぼ', 'くかん', 'くきょう',
      'くげん', 'ぐこう', 'くさい', 'くさき', 'くさばな', 'くさる', 'くしゃみ', 'くしょう',
      'くすのき', 'くすりゆび', 'くせげ', 'くせん', 'ぐたいてき', 'くださる', 'くたびれる', 'くちこみ',
      'くちさき', 'くつした', 'ぐっすり', 'くつろぐ', 'くとうてん', 'くどく', 'くなん', 'くねくね',
      'くのう', 'くふう', 'くみあわせ', 'くみたてる', 'くめる', 'くやくしょ', 'くらす', 'くらべる',
      'くるま', 'くれる', 'くろう', 'くわしい', 'ぐんかん', 'ぐんしょく', 'ぐんたい', 'ぐんて',
      'けあな', 'けいかく', 'けいけん', 'けいこ', 'けいさつ', 'げいじゅつ', 'けいたい', 'げいのうじん',
      'けいれき', 'けいろ', 'けおとす', 'けおりもの', 'げきか', 'げきげん', 'げきだん', 'げきちん',
      'げきとつ', 'げきは', 'げきやく', 'げこう', 'げこくじょう', 'げざい', 'けさき', 'げざん',
      'けしき', 'けしごむ', 'けしょう', 'げすと', 'けたば', 'けちゃっぷ', 'けちらす', 'けつあつ',
      'けつい', 'けつえき', 'けっこん', 'けつじょ', 'けっせき', 'けってい', 'けつまつ', 'げつようび',
      'げつれい', 'けつろん', 'げどく', 'けとばす', 'けとる', 'けなげ', 'けなす', 'けなみ',
      'けぬき', 'げねつ', 'けねん', 'けはい', 'げひん', 'けぶかい', 'げぼく', 'けまり',
      'けみかる', 'けむし', 'けむり', 'けもの', 'けらい', 'けろけろ', 'けわしい', 'けんい',
      'けんえつ', 'けんお', 'けんか', 'げんき', 'けんげん', 'けんこう', 'けんさく', 'けんしゅう',
      'けんすう', 'げんそう', 'けんちく', 'けんてい', 'けんとう', 'けんない', 'けんにん', 'げんぶつ',
      'けんま', 'けんみん', 'けんめい', 'けんらん', 'けんり', 'こあくま', 'こいぬ', 'こいびと',
      'ごうい', 'こうえん', 'こうおん', 'こうかん', 'ごうきゅう', 'ごうけい', 'こうこう', 'こうさい',
      'こうじ', 'こうすい', 'ごうせい', 'こうそく', 'こうたい', 'こうちゃ', 'こうつう', 'こうてい',
      'こうどう', 'こうない', 'こうはい', 'ごうほう', 'ごうまん', 'こうもく', 'こうりつ', 'こえる',
      'こおり', 'ごかい', 'ごがつ', 'ごかん', 'こくご', 'こくさい', 'こくとう', 'こくない',
      'こくはく', 'こぐま', 'こけい', 'こける', 'ここのか', 'こころ', 'こさめ', 'こしつ',
      'こすう', 'こせい', 'こせき', 'こぜん', 'こそだて', 'こたい', 'こたえる', 'こたつ',
      'こちょう', 'こっか', 'こつこつ', 'こつばん', 'こつぶ', 'こてい', 'こてん', 'ことがら',
      'ことし', 'ことば', 'ことり', 'こなごな', 'こねこね', 'このまま', 'このみ', 'このよ',
      'ごはん', 'こひつじ', 'こふう', 'こふん', 'こぼれる', 'ごまあぶら', 'こまかい', 'ごますり',
      'こまつな', 'こまる', 'こむぎこ', 'こもじ', 'こもち', 'こもの', 'こもん', 'こやく',
      'こやま', 'こゆう', 'こゆび', 'こよい', 'こよう', 'こりる', 'これくしょん', 'ころっけ',
      'こわもて', 'こわれる', 'こんいん', 'こんかい', 'こんき', 'こんしゅう', 'こんすい', 'こんだて',
      'こんとん', 'こんなん', 'こんびに', 'こんぽん', 'こんまけ', 'こんや', 'こんれい', 'こんわく',
      'ざいえき', 'さいかい', 'さいきん', 'ざいげん', 'ざいこ', 'さいしょ', 'さいせい', 'ざいたく',
      'ざいちゅう', 'さいてき', 'ざいりょう', 'さうな', 'さかいし', 'さがす', 'さかな', 'さかみち',
      'さがる', 'さぎょう', 'さくし', 'さくひん', 'さくら', 'さこく', 'さこつ', 'さずかる',
      'ざせき', 'さたん', 'さつえい', 'ざつおん', 'ざっか', 'ざつがく', 'さっきょく', 'ざっし',
      'さつじん', 'ざっそう', 'さつたば', 'さつまいも', 'さてい', 'さといも', 'さとう', 'さとおや',
      'さとし', 'さとる', 'さのう', 'さばく', 'さびしい', 'さべつ', 'さほう', 'さほど',
      'さます', 'さみしい', 'さみだれ', 'さむけ', 'さめる', 'さやえんどう', 'さゆう', 'さよう',
      'さよく', 'さらだ', 'ざるそば', 'さわやか', 'さわる', 'さんいん', 'さんか', 'さんきゃく',
      'さんこう', 'さんさい', 'ざんしょ', 'さんすう', 'さんせい', 'さんそ', 'さんち', 'さんま',
      'さんみ', 'さんらん', 'しあい', 'しあげ', 'しあさって', 'しあわせ', 'しいく', 'しいん',
      'しうち', 'しえい', 'しおけ', 'しかい', 'しかく', 'じかん', 'しごと', 'しすう',
      'じだい', 'したうけ', 'したぎ', 'したて', 'したみ', 'しちょう', 'しちりん', 'しっかり',
      'しつじ', 'しつもん', 'してい', 'してき', 'してつ', 'じてん', 'じどう', 'しなぎれ',
      'しなもの', 'しなん', 'しねま', 'しねん', 'しのぐ', 'しのぶ', 'しはい', 'しばかり',
      'しはつ', 'しはらい', 'しはん', 'しひょう', 'しふく', 'じぶん', 'しへい', 'しほう',
      'しほん', 'しまう', 'しまる', 'しみん', 'しむける', 'じむしょ', 'しめい', 'しめる',
      'しもん', 'しゃいん', 'しゃうん', 'しゃおん', 'じゃがいも', 'しやくしょ', 'しゃくほう', 'しゃけん',
      'しゃこ', 'しゃざい', 'しゃしん', 'しゃせん', 'しゃそう', 'しゃたい', 'しゃちょう', 'しゃっきん',
      'じゃま', 'しゃりん', 'しゃれい', 'じゆう', 'じゅうしょ', 'しゅくはく', 'じゅしん', 'しゅっせき',
      'しゅみ', 'しゅらば', 'じゅんばん', 'しょうかい', 'しょくたく', 'しょっけん', 'しょどう', 'しょもつ',
      'しらせる', 'しらべる', 'しんか', 'しんこう', 'じんじゃ', 'しんせいじ', 'しんちく', 'しんりん',
      'すあげ', 'すあし', 'すあな', 'ずあん', 'すいえい', 'すいか', 'すいとう', 'ずいぶん',
      'すいようび', 'すうがく', 'すうじつ', 'すうせん', 'すおどり', 'すきま', 'すくう', 'すくない',
      'すける', 'すごい', 'すこし', 'ずさん', 'すずしい', 'すすむ', 'すすめる', 'すっかり',
      'ずっしり', 'ずっと', 'すてき', 'すてる', 'すねる', 'すのこ', 'すはだ', 'すばらしい',
      'ずひょう', 'ずぶぬれ', 'すぶり', 'すふれ', 'すべて', 'すべる', 'ずほう', 'すぼん',
      'すまい', 'すめし', 'すもう', 'すやき', 'すらすら', 'するめ', 'すれちがう', 'すろっと',
      'すわる', 'すんぜん', 'すんぽう', 'せあぶら', 'せいかつ', 'せいげん', 'せいじ', 'せいよう',
      'せおう', 'せかいかん', 'せきにん', 'せきむ', 'せきゆ', 'せきらんうん', 'せけん', 'せこう',
      'せすじ', 'せたい', 'せたけ', 'せっかく', 'せっきゃく', 'ぜっく', 'せっけん', 'せっこつ',
      'せっさたくま', 'せつぞく', 'せつだん', 'せつでん', 'せっぱん', 'せつび', 'せつぶん', 'せつめい',
      'せつりつ', 'せなか', 'せのび', 'せはば', 'せびろ', 'せぼね', 'せまい', 'せまる',
      'せめる', 'せもたれ', 'せりふ', 'ぜんあく', 'せんい', 'せんえい', 'せんか', 'せんきょ',
      'せんく', 'せんげん', 'ぜんご', 'せんさい', 'せんしゅ', 'せんすい', 'せんせい', 'せんぞ',
      'せんたく', 'せんちょう', 'せんてい', 'せんとう', 'せんぬき', 'せんねん', 'せんぱい', 'ぜんぶ',
      'ぜんぽう', 'せんむ', 'せんめんじょ', 'せんもん', 'せんやく', 'せんゆう', 'せんよう', 'ぜんら',
      'ぜんりゃく', 'せんれい', 'せんろ', 'そあく', 'そいとげる', 'そいね', 'そうがんきょう', 'そうき',
      'そうご', 'そうしん', 'そうだん', 'そうなん', 'そうび', 'そうめん', 'そうり', 'そえもの',
      'そえん', 'そがい', 'そげき', 'そこう', 'そこそこ', 'そざい', 'そしな', 'そせい',
      'そせん', 'そそぐ', 'そだてる', 'そつう', 'そつえん', 'そっかん', 'そつぎょう', 'そっけつ',
      'そっこう', 'そっせん', 'そっと', 'そとがわ', 'そとづら', 'そなえる', 'そなた', 'そふぼ',
      'そぼく', 'そぼろ', 'そまつ', 'そまる', 'そむく', 'そむりえ', 'そめる', 'そもそも',
      'そよかぜ', 'そらまめ', 'そろう', 'そんかい', 'そんけい', 'そんざい', 'そんしつ', 'そんぞく',
      'そんちょう', 'ぞんび', 'ぞんぶん', 'そんみん', 'たあい', 'たいいん', 'たいうん', 'たいえき',
      'たいおう', 'だいがく', 'たいき', 'たいぐう', 'たいけん', 'たいこ', 'たいざい', 'だいじょうぶ',
      'だいすき', 'たいせつ', 'たいそう', 'だいたい', 'たいちょう', 'たいてい', 'だいどころ', 'たいない',
      'たいねつ', 'たいのう', 'たいはん', 'だいひょう', 'たいふう', 'たいへん', 'たいほ', 'たいまつばな',
      'たいみんぐ', 'たいむ', 'たいめん', 'たいやき', 'たいよう', 'たいら', 'たいりょく', 'たいる',
      'たいわん', 'たうえ', 'たえる', 'たおす', 'たおる', 'たおれる', 'たかい', 'たかね',
      'たきび', 'たくさん', 'たこく', 'たこやき', 'たさい', 'たしざん', 'だじゃれ', 'たすける',
      'たずさわる', 'たそがれ', 'たたかう', 'たたく', 'ただしい', 'たたみ', 'たちばな', 'だっかい',
      'だっきゃく', 'だっこ', 'だっしゅつ', 'だったい', 'たてる', 'たとえる', 'たなばた', 'たにん',
      'たぬき', 'たのしみ', 'たはつ', 'たぶん', 'たべる', 'たぼう', 'たまご', 'たまる',
      'だむる', 'ためいき', 'ためす', 'ためる', 'たもつ', 'たやすい', 'たよる', 'たらす',
      'たりきほんがん', 'たりょう', 'たりる', 'たると', 'たれる', 'たれんと', 'たろっと', 'たわむれる',
      'だんあつ', 'たんい', 'たんおん', 'たんか', 'たんき', 'たんけん', 'たんご', 'たんさん',
      'たんじょうび', 'だんせい', 'たんそく', 'たんたい', 'だんち', 'たんてい', 'たんとう', 'だんな',
      'たんにん', 'だんねつ', 'たんのう', 'たんぴん', 'だんぼう', 'たんまつ', 'たんめい', 'だんれつ',
      'だんろ', 'だんわ', 'ちあい', 'ちあん', 'ちいき', 'ちいさい', 'ちえん', 'ちかい',
      'ちから', 'ちきゅう', 'ちきん', 'ちけいず', 'ちけん', 'ちこく', 'ちさい', 'ちしき',
      'ちしりょう', 'ちせい', 'ちそう', 'ちたい', 'ちたん', 'ちちおや', 'ちつじょ', 'ちてき',
      'ちてん', 'ちぬき', 'ちぬり', 'ちのう', 'ちひょう', 'ちへいせん', 'ちほう', 'ちまた',
      'ちみつ', 'ちみどろ', 'ちめいど', 'ちゃんこなべ', 'ちゅうい', 'ちゆりょく', 'ちょうし', 'ちょさくけん',
      'ちらし', 'ちらみ', 'ちりがみ', 'ちりょう', 'ちるど', 'ちわわ', 'ちんたい', 'ちんもく',
      'ついか', 'ついたち', 'つうか', 'つうじょう', 'つうはん', 'つうわ', 'つかう', 'つかれる',
      'つくね', 'つくる', 'つけね', 'つける', 'つごう', 'つたえる', 'つづく', 'つつじ',
      'つつむ', 'つとめる', 'つながる', 'つなみ', 'つねづね', 'つのる', 'つぶす', 'つまらない',
      'つまる', 'つみき', 'つめたい', 'つもり', 'つもる', 'つよい', 'つるぼ', 'つるみく',
      'つわもの', 'つわり', 'てあし', 'てあて', 'てあみ', 'ていおん', 'ていか', 'ていき',
      'ていけい', 'ていこく', 'ていさつ', 'ていし', 'ていせい', 'ていたい', 'ていど', 'ていねい',
      'ていひょう', 'ていへん', 'ていぼう', 'てうち', 'ておくれ', 'てきとう', 'てくび', 'でこぼこ',
      'てさぎょう', 'てさげ', 'てすり', 'てそう', 'てちがい', 'てちょう', 'てつがく', 'てつづき',
      'でっぱ', 'てつぼう', 'てつや', 'でぬかえ', 'てぬき', 'てぬぐい', 'てのひら', 'てはい',
      'てぶくろ', 'てふだ', 'てほどき', 'てほん', 'てまえ', 'てまきずし', 'てみじか', 'てみやげ',
      'てらす', 'てれび', 'てわけ', 'てわたし', 'でんあつ', 'てんいん', 'てんかい', 'てんき',
      'てんぐ', 'てんけん', 'てんごく', 'てんさい', 'てんし', 'てんすう', 'でんち', 'てんてき',
      'てんとう', 'てんない', 'てんぷら', 'てんぼうだい', 'てんめつ', 'てんらんかい', 'でんりょく', 'でんわ',
      'どあい', 'といれ', 'どうかん', 'とうきゅう', 'どうぐ', 'とうし', 'とうむぎ', 'とおい',
      'とおか', 'とおく', 'とおす', 'とおる', 'とかい', 'とかす', 'ときおり', 'ときどき',
      'とくい', 'とくしゅう', 'とくてん', 'とくに', 'とくべつ', 'とけい', 'とける', 'とこや',
      'とさか', 'としょかん', 'とそう', 'とたん', 'とちゅう', 'とっきゅう', 'とっくん', 'とつぜん',
      'とつにゅう', 'とどける', 'ととのえる', 'とない', 'となえる', 'となり', 'とのさま', 'とばす',
      'どぶがわ', 'とほう', 'とまる', 'とめる', 'ともだち', 'ともる', 'どようび', 'とらえる',
      'とんかつ', 'どんぶり', 'ないかく', 'ないこう', 'ないしょ', 'ないす', 'ないせん', 'ないそう',
      'なおす', 'ながい', 'なくす', 'なげる', 'なこうど', 'なさけ', 'なたでここ', 'なっとう',
      'なつやすみ', 'ななおし', 'なにごと', 'なにもの', 'なにわ', 'なのか', 'なふだ', 'なまいき',
      'なまえ', 'なまみ', 'なみだ', 'なめらか', 'なめる', 'なやむ', 'ならう', 'ならび',
      'ならぶ', 'なれる', 'なわとび', 'なわばり', 'にあう', 'にいがた', 'にうけ', 'におい',
      'にかい', 'にがて', 'にきび', 'にくしみ', 'にくまん', 'にげる', 'にさんかたんそ', 'にしき',
      'にせもの', 'にちじょう', 'にちようび', 'にっか', 'にっき', 'にっけい', 'にっこう', 'にっさん',
      'にっしょく', 'にっすう', 'にっせき', 'にってい', 'になう', 'にほん', 'にまめ', 'にもつ',
      'にやり', 'にゅういん', 'にりんしゃ', 'にわとり', 'にんい', 'にんか', 'にんき', 'にんげん',
      'にんしき', 'にんずう', 'にんそう', 'にんたい', 'にんち', 'にんてい', 'にんにく', 'にんぷ',
      'にんまり', 'にんむ', 'にんめい', 'にんよう', 'ぬいくぎ', 'ぬかす', 'ぬぐいとる', 'ぬぐう',
      'ぬくもり', 'ぬすむ', 'ぬまえび', 'ぬめり', 'ぬらす', 'ぬんちゃく', 'ねあげ', 'ねいき',
      'ねいる', 'ねいろ', 'ねぐせ', 'ねくたい', 'ねくら', 'ねこぜ', 'ねこむ', 'ねさげ',
      'ねすごす', 'ねそべる', 'ねだん', 'ねつい', 'ねっしん', 'ねつぞう', 'ねったいぎょ', 'ねぶそく',
      'ねふだ', 'ねぼう', 'ねほりはほり', 'ねまき', 'ねまわし', 'ねみみ', 'ねむい', 'ねむたい',
      'ねもと', 'ねらう', 'ねわざ', 'ねんいり', 'ねんおし', 'ねんかん', 'ねんきん', 'ねんぐ',
      'ねんざ', 'ねんし', 'ねんちゃく', 'ねんど', 'ねんぴ', 'ねんぶつ', 'ねんまつ', 'ねんりょう',
      'ねんれい', 'のいず', 'のおづま', 'のがす', 'のきなみ', 'のこぎり', 'のこす', 'のこる',
      'のせる', 'のぞく', 'のぞむ', 'のたまう', 'のちほど', 'のっく', 'のばす', 'のはら',
      'のべる', 'のぼる', 'のみもの', 'のやま', 'のらいぬ', 'のらねこ', 'のりもの', 'のりゆき',
      'のれん', 'のんき', 'ばあい', 'はあく', 'ばあさん', 'ばいか', 'ばいく', 'はいけん',
      'はいご', 'はいしん', 'はいすい', 'はいせん', 'はいそう', 'はいち', 'ばいばい', 'はいれつ',
      'はえる', 'はおる', 'はかい', 'ばかり', 'はかる', 'はくしゅ', 'はけん', 'はこぶ',
      'はさみ', 'はさん', 'はしご', 'ばしょ', 'はしる', 'はせる', 'ぱそこん', 'はそん',
      'はたん', 'はちみつ', 'はつおん', 'はっかく', 'はづき', 'はっきり', 'はっくつ', 'はっけん',
      'はっこう', 'はっさん', 'はっしん', 'はったつ', 'はっちゅう', 'はってん', 'はっぴょう', 'はっぽう',
      'はなす', 'はなび', 'はにかむ', 'はぶらし', 'はみがき', 'はむかう', 'はめつ', 'はやい',
      'はやし', 'はらう', 'はろうぃん', 'はわい', 'はんい', 'はんえい', 'はんおん', 'はんかく',
      'はんきょう', 'ばんぐみ', 'はんこ', 'はんしゃ', 'はんすう', 'はんだん', 'ぱんち', 'ぱんつ',
      'はんてい', 'はんとし', 'はんのう', 'はんぱ', 'はんぶん', 'はんぺん', 'はんぼうき', 'はんめい',
      'はんらん', 'はんろん', 'ひいき', 'ひうん', 'ひえる', 'ひかく', 'ひかり', 'ひかる',
      'ひかん', 'ひくい', 'ひけつ', 'ひこうき', 'ひこく', 'ひさい', 'ひさしぶり', 'ひさん',
      'びじゅつかん', 'ひしょ'
    ]
  }
};

(function () {
  'use strict'
  for (var i in words) {
    if (words.hasOwnProperty(i)) {
      if (words[i].prefixLength === 0) {
        continue
      }
      words[i].trunc_words = []
      for (var j = 0; j < words[i].words.length; ++j) {
        words[i].trunc_words.push(words[i].words[j].slice(0, words[i].prefixLength))
      }
    }
  }
})()

module.exports.encode = encode
module.exports.decode = decode
module.exports.random = random
module.exports.words = words

},{"crc":191,"get-random-values":193}],163:[function(require,module,exports){
// Implementation derived from TweetNaCl version 20140427.
// See for details: http://tweetNACL.cr.yp.to/
//
// Copyright (c) 2014, Dmitry Chestnykh and Devi Mandiri
// Copyright (c) 2017, luigi1111
// Copyright (c) 2018, The TurtleCoin Developers
//
// Please see the included LICENSE file for more information.

'use strict'

var gf = function (init) {
  var i; var r = new Float64Array(16)
  if (init) for (i = 0; i < init.length; i++) r[i] = init[i]
  return r
}

//  Pluggable, initialized in high-level API below.
var randombytes = function (/* x, n */) { throw new Error('no PRNG') }

var _0 = new Uint8Array(16)
var _9 = new Uint8Array(32); _9[0] = 9

var gf0 = gf()

var gf1 = gf([1])

var _121665 = gf([0xdb41, 1])

var D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203])

var D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406])

var X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169])

var Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666])

var I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83])

function vn (x, xi, y, yi, n) {
  var i; var d = 0
  for (i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i]
  return (1 & ((d - 1) >>> 8)) - 1
}

function crypto_verify_16 (x, xi, y, yi) {
  return vn(x, xi, y, yi, 16)
}

function crypto_verify_32 (x, xi, y, yi) {
  return vn(x, xi, y, yi, 32)
}

function set25519 (r, a) {
  var i
  for (i = 0; i < 16; i++) r[i] = a[i] | 0
}

function car25519 (o) {
  var i; var v; var c = 1
  for (i = 0; i < 16; i++) {
    v = o[i] + c + 65535
    c = Math.floor(v / 65536)
    o[i] = v - c * 65536
  }
  o[0] += c - 1 + 37 * (c - 1)
}

function sel25519 (p, q, b) {
  var t; var c = ~(b - 1)
  for (var i = 0; i < 16; i++) {
    t = c & (p[i] ^ q[i])
    p[i] ^= t
    q[i] ^= t
  }
}

function pack25519 (o, n) {
  var i, j, b
  var m = gf(); var t = gf()
  for (i = 0; i < 16; i++) t[i] = n[i]
  car25519(t)
  car25519(t)
  car25519(t)
  for (j = 0; j < 2; j++) {
    m[0] = t[0] - 0xffed
    for (i = 1; i < 15; i++) {
      m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1)
      m[i - 1] &= 0xffff
    }
    m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1)
    b = (m[15] >> 16) & 1
    m[14] &= 0xffff
    sel25519(t, m, 1 - b)
  }
  for (i = 0; i < 16; i++) {
    o[2 * i] = t[i] & 0xff
    o[2 * i + 1] = t[i] >> 8
  }
}

function neq25519 (a, b) {
  var c = new Uint8Array(32); var d = new Uint8Array(32)
  pack25519(c, a)
  pack25519(d, b)
  return crypto_verify_32(c, 0, d, 0)
}

function par25519 (a) {
  var d = new Uint8Array(32)
  pack25519(d, a)
  return d[0] & 1
}

function unpack25519 (o, n) {
  var i
  for (i = 0; i < 16; i++) o[i] = n[2 * i] + (n[2 * i + 1] << 8)
  o[15] &= 0x7fff
}

function A (o, a, b) {
  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i]
}

function Z (o, a, b) {
  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i]
}

function M (o, a, b) {
  var v; var c

  var t0 = 0; var t1 = 0; var t2 = 0; var t3 = 0; var t4 = 0; var t5 = 0; var t6 = 0; var t7 = 0

  var t8 = 0; var t9 = 0; var t10 = 0; var t11 = 0; var t12 = 0; var t13 = 0; var t14 = 0; var t15 = 0

  var t16 = 0; var t17 = 0; var t18 = 0; var t19 = 0; var t20 = 0; var t21 = 0; var t22 = 0; var t23 = 0

  var t24 = 0; var t25 = 0; var t26 = 0; var t27 = 0; var t28 = 0; var t29 = 0; var t30 = 0

  var b0 = b[0]; var b1 = b[1]; var b2 = b[2]; var b3 = b[3]; var b4 = b[4]; var b5 = b[5]

  var b6 = b[6]; var b7 = b[7]; var b8 = b[8]; var b9 = b[9]; var b10 = b[10]

  var b11 = b[11]; var b12 = b[12]; var b13 = b[13]; var b14 = b[14]; var b15 = b[15]

  v = a[0]
  t0 += v * b0; t1 += v * b1; t2 += v * b2; t3 += v * b3
  t4 += v * b4; t5 += v * b5; t6 += v * b6; t7 += v * b7
  t8 += v * b8; t9 += v * b9; t10 += v * b10; t11 += v * b11
  t12 += v * b12; t13 += v * b13; t14 += v * b14; t15 += v * b15
  v = a[1]
  t1 += v * b0; t2 += v * b1; t3 += v * b2; t4 += v * b3
  t5 += v * b4; t6 += v * b5; t7 += v * b6; t8 += v * b7
  t9 += v * b8; t10 += v * b9; t11 += v * b10; t12 += v * b11
  t13 += v * b12; t14 += v * b13; t15 += v * b14; t16 += v * b15
  v = a[2]
  t2 += v * b0; t3 += v * b1; t4 += v * b2; t5 += v * b3
  t6 += v * b4; t7 += v * b5; t8 += v * b6; t9 += v * b7
  t10 += v * b8; t11 += v * b9; t12 += v * b10; t13 += v * b11
  t14 += v * b12; t15 += v * b13; t16 += v * b14; t17 += v * b15
  v = a[3]
  t3 += v * b0; t4 += v * b1; t5 += v * b2; t6 += v * b3
  t7 += v * b4; t8 += v * b5; t9 += v * b6; t10 += v * b7
  t11 += v * b8; t12 += v * b9; t13 += v * b10; t14 += v * b11
  t15 += v * b12; t16 += v * b13; t17 += v * b14; t18 += v * b15
  v = a[4]
  t4 += v * b0; t5 += v * b1; t6 += v * b2; t7 += v * b3
  t8 += v * b4; t9 += v * b5; t10 += v * b6; t11 += v * b7
  t12 += v * b8; t13 += v * b9; t14 += v * b10; t15 += v * b11
  t16 += v * b12; t17 += v * b13; t18 += v * b14; t19 += v * b15
  v = a[5]
  t5 += v * b0; t6 += v * b1; t7 += v * b2; t8 += v * b3
  t9 += v * b4; t10 += v * b5; t11 += v * b6; t12 += v * b7
  t13 += v * b8; t14 += v * b9; t15 += v * b10; t16 += v * b11
  t17 += v * b12; t18 += v * b13; t19 += v * b14; t20 += v * b15
  v = a[6]
  t6 += v * b0; t7 += v * b1; t8 += v * b2; t9 += v * b3
  t10 += v * b4; t11 += v * b5; t12 += v * b6; t13 += v * b7
  t14 += v * b8; t15 += v * b9; t16 += v * b10; t17 += v * b11
  t18 += v * b12; t19 += v * b13; t20 += v * b14; t21 += v * b15
  v = a[7]
  t7 += v * b0; t8 += v * b1; t9 += v * b2; t10 += v * b3
  t11 += v * b4; t12 += v * b5; t13 += v * b6; t14 += v * b7
  t15 += v * b8; t16 += v * b9; t17 += v * b10; t18 += v * b11
  t19 += v * b12; t20 += v * b13; t21 += v * b14; t22 += v * b15
  v = a[8]
  t8 += v * b0; t9 += v * b1; t10 += v * b2; t11 += v * b3
  t12 += v * b4; t13 += v * b5; t14 += v * b6; t15 += v * b7
  t16 += v * b8; t17 += v * b9; t18 += v * b10; t19 += v * b11
  t20 += v * b12; t21 += v * b13; t22 += v * b14; t23 += v * b15
  v = a[9]
  t9 += v * b0; t10 += v * b1; t11 += v * b2; t12 += v * b3
  t13 += v * b4; t14 += v * b5; t15 += v * b6; t16 += v * b7
  t17 += v * b8; t18 += v * b9; t19 += v * b10; t20 += v * b11
  t21 += v * b12; t22 += v * b13; t23 += v * b14; t24 += v * b15
  v = a[10]
  t10 += v * b0; t11 += v * b1; t12 += v * b2; t13 += v * b3
  t14 += v * b4; t15 += v * b5; t16 += v * b6; t17 += v * b7
  t18 += v * b8; t19 += v * b9; t20 += v * b10; t21 += v * b11
  t22 += v * b12; t23 += v * b13; t24 += v * b14; t25 += v * b15
  v = a[11]
  t11 += v * b0; t12 += v * b1; t13 += v * b2; t14 += v * b3
  t15 += v * b4; t16 += v * b5; t17 += v * b6; t18 += v * b7
  t19 += v * b8; t20 += v * b9; t21 += v * b10; t22 += v * b11
  t23 += v * b12; t24 += v * b13; t25 += v * b14; t26 += v * b15
  v = a[12]
  t12 += v * b0; t13 += v * b1; t14 += v * b2; t15 += v * b3
  t16 += v * b4; t17 += v * b5; t18 += v * b6; t19 += v * b7
  t20 += v * b8; t21 += v * b9; t22 += v * b10; t23 += v * b11
  t24 += v * b12; t25 += v * b13; t26 += v * b14; t27 += v * b15
  v = a[13]
  t13 += v * b0; t14 += v * b1; t15 += v * b2; t16 += v * b3
  t17 += v * b4; t18 += v * b5; t19 += v * b6; t20 += v * b7
  t21 += v * b8; t22 += v * b9; t23 += v * b10; t24 += v * b11
  t25 += v * b12; t26 += v * b13; t27 += v * b14; t28 += v * b15
  v = a[14]
  t14 += v * b0; t15 += v * b1; t16 += v * b2; t17 += v * b3
  t18 += v * b4; t19 += v * b5; t20 += v * b6; t21 += v * b7
  t22 += v * b8; t23 += v * b9; t24 += v * b10; t25 += v * b11
  t26 += v * b12; t27 += v * b13; t28 += v * b14; t29 += v * b15
  v = a[15]
  t15 += v * b0; t16 += v * b1; t17 += v * b2; t18 += v * b3
  t19 += v * b4; t20 += v * b5; t21 += v * b6; t22 += v * b7
  t23 += v * b8; t24 += v * b9; t25 += v * b10; t26 += v * b11
  t27 += v * b12; t28 += v * b13; t29 += v * b14; t30 += v * b15

  t0 += 38 * t16; t1 += 38 * t17; t2 += 38 * t18; t3 += 38 * t19
  t4 += 38 * t20; t5 += 38 * t21; t6 += 38 * t22; t7 += 38 * t23
  t8 += 38 * t24; t9 += 38 * t25; t10 += 38 * t26; t11 += 38 * t27
  t12 += 38 * t28; t13 += 38 * t29; t14 += 38 * t30 // t15 left as is

  // first car
  c = 1
  v = t0 + c + 65535; c = Math.floor(v / 65536); t0 = v - c * 65536
  v = t1 + c + 65535; c = Math.floor(v / 65536); t1 = v - c * 65536
  v = t2 + c + 65535; c = Math.floor(v / 65536); t2 = v - c * 65536
  v = t3 + c + 65535; c = Math.floor(v / 65536); t3 = v - c * 65536
  v = t4 + c + 65535; c = Math.floor(v / 65536); t4 = v - c * 65536
  v = t5 + c + 65535; c = Math.floor(v / 65536); t5 = v - c * 65536
  v = t6 + c + 65535; c = Math.floor(v / 65536); t6 = v - c * 65536
  v = t7 + c + 65535; c = Math.floor(v / 65536); t7 = v - c * 65536
  v = t8 + c + 65535; c = Math.floor(v / 65536); t8 = v - c * 65536
  v = t9 + c + 65535; c = Math.floor(v / 65536); t9 = v - c * 65536
  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536
  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536
  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536
  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536
  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536
  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536
  t0 += c - 1 + 37 * (c - 1)

  // second car
  c = 1
  v = t0 + c + 65535; c = Math.floor(v / 65536); t0 = v - c * 65536
  v = t1 + c + 65535; c = Math.floor(v / 65536); t1 = v - c * 65536
  v = t2 + c + 65535; c = Math.floor(v / 65536); t2 = v - c * 65536
  v = t3 + c + 65535; c = Math.floor(v / 65536); t3 = v - c * 65536
  v = t4 + c + 65535; c = Math.floor(v / 65536); t4 = v - c * 65536
  v = t5 + c + 65535; c = Math.floor(v / 65536); t5 = v - c * 65536
  v = t6 + c + 65535; c = Math.floor(v / 65536); t6 = v - c * 65536
  v = t7 + c + 65535; c = Math.floor(v / 65536); t7 = v - c * 65536
  v = t8 + c + 65535; c = Math.floor(v / 65536); t8 = v - c * 65536
  v = t9 + c + 65535; c = Math.floor(v / 65536); t9 = v - c * 65536
  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536
  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536
  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536
  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536
  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536
  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536
  t0 += c - 1 + 37 * (c - 1)

  o[0] = t0
  o[1] = t1
  o[2] = t2
  o[3] = t3
  o[4] = t4
  o[5] = t5
  o[6] = t6
  o[7] = t7
  o[8] = t8
  o[9] = t9
  o[10] = t10
  o[11] = t11
  o[12] = t12
  o[13] = t13
  o[14] = t14
  o[15] = t15
}

function S (o, a) {
  M(o, a, a)
}

function inv25519 (o, i) {
  var c = gf()
  var a
  for (a = 0; a < 16; a++) c[a] = i[a]
  for (a = 253; a >= 0; a--) {
    S(c, c)
    if (a !== 2 && a !== 4) M(c, c, i)
  }
  for (a = 0; a < 16; a++) o[a] = c[a]
}

function pow2523 (o, i) {
  var c = gf()
  var a
  for (a = 0; a < 16; a++) c[a] = i[a]
  for (a = 250; a >= 0; a--) {
    S(c, c)
    if (a !== 1) M(c, c, i)
  }
  for (a = 0; a < 16; a++) o[a] = c[a]
}

function add (p, q) {
  var a = gf(); var b = gf(); var c = gf()

  var d = gf(); var e = gf(); var f = gf()

  var g = gf(); var h = gf(); var t = gf()

  Z(a, p[1], p[0])
  Z(t, q[1], q[0])
  M(a, a, t)
  A(b, p[0], p[1])
  A(t, q[0], q[1])
  M(b, b, t)
  M(c, p[3], q[3])
  M(c, c, D2)
  M(d, p[2], q[2])
  A(d, d, d)
  Z(e, b, a)
  Z(f, d, c)
  A(g, d, c)
  A(h, b, a)

  M(p[0], e, f)
  M(p[1], h, g)
  M(p[2], g, f)
  M(p[3], e, h)
}

function cswap (p, q, b) {
  var i
  for (i = 0; i < 4; i++) {
    sel25519(p[i], q[i], b)
  }
}

function pack (r, p) {
  var tx = gf(); var ty = gf(); var zi = gf()
  inv25519(zi, p[2])
  M(tx, p[0], zi)
  M(ty, p[1], zi)
  pack25519(r, ty)
  r[31] ^= par25519(tx) << 7
}

function scalarmult (p, q, s) {
  var b, i
  set25519(p[0], gf0)
  set25519(p[1], gf1)
  set25519(p[2], gf1)
  set25519(p[3], gf0)
  for (i = 255; i >= 0; --i) {
    b = (s[(i / 8) | 0] >> (i & 7)) & 1
    cswap(p, q, b)
    add(q, p)
    add(p, p)
    cswap(p, q, b)
  }
}

function scalarbase (p, s) {
  var q = [gf(), gf(), gf(), gf()]
  set25519(q[0], X)
  set25519(q[1], Y)
  set25519(q[2], gf1)
  M(q[3], X, Y)
  scalarmult(p, q, s)
}

// new functions for CN - scalar operations are handled externally
// this only handles curve operations, except for Hp()

// why do we negate points when unpacking them???
function ge_neg (pub) {
  pub[31] ^= 0x80
}

// res = s*G
function ge_scalarmult_base (s) {
  var p = [gf(), gf(), gf(), gf()]
  scalarbase(p, s)
  var pk = new Uint8Array(32)
  pack(pk, p)
  return pk
}

// res = s*P
function ge_scalarmult (P, s) {
  var p = [gf(), gf(), gf(), gf()]

  var upk = [gf(), gf(), gf(), gf()]

  var res = new Uint8Array(32)
  ge_neg(P)
  if (unpackneg(upk, P) !== 0) throw 'non-0 error on point decode'
  scalarmult(p, upk, s)
  pack(res, p)
  return res
}

// res = c*P + r*G
function ge_double_scalarmult_base_vartime (c, P, r) {
  var uP = [gf(), gf(), gf(), gf()]

  var cP = [gf(), gf(), gf(), gf()]

  var rG = [gf(), gf(), gf(), gf()]

  var res = new Uint8Array(32)
  ge_neg(P)
  if (unpackneg(uP, P) !== 0) throw 'non-0 error on point decode'
  scalarmult(cP, uP, c)
  scalarbase(rG, r)
  add(rG, cP)
  pack(res, rG)
  return res
}

// name changed to reflect not using precomp; res = r*Pb + c*I
function ge_double_scalarmult_postcomp_vartime (r, Pb, c, I) {
  var uPb = [gf(), gf(), gf(), gf()]

  var uI = [gf(), gf(), gf(), gf()]

  var cI = [gf(), gf(), gf(), gf()]

  var rPb = [gf(), gf(), gf(), gf()]

  var res = new Uint8Array(32)
  ge_neg(Pb)
  if (unpackneg(uPb, Pb) !== 0) throw 'non-0 error on point decode'
  scalarmult(rPb, uPb, r)
  ge_neg(I)
  if (unpackneg(uI, I) !== 0) throw 'non-0 error on point decode'
  scalarmult(cI, uI, c)
  add(rPb, cI)
  pack(res, rPb)
  return res
}

// res = P + Q
function ge_add (P, Q) {
  var uP = [gf(), gf(), gf(), gf()]

  var uQ = [gf(), gf(), gf(), gf()]

  var res = new Uint8Array(32)
  ge_neg(P)
  ge_neg(Q)
  if (unpackneg(uP, P) !== 0) throw 'non-0 error on point decode'
  if (unpackneg(uQ, Q) !== 0) throw 'non-0 error on point decode'
  add(uP, uQ)
  pack(res, uP)
  return res
}

var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10])

function modL (r, x) {
  var carry, i, j, k
  for (i = 63; i >= 32; --i) {
    carry = 0
    for (j = i - 32, k = i - 12; j < k; ++j) {
      x[j] += carry - 16 * x[i] * L[j - (i - 32)]
      carry = (x[j] + 128) >> 8
      x[j] -= carry * 256
    }
    x[j] += carry
    x[i] = 0
  }
  carry = 0
  for (j = 0; j < 32; j++) {
    x[j] += carry - (x[31] >> 4) * L[j]
    carry = x[j] >> 8
    x[j] &= 255
  }
  for (j = 0; j < 32; j++) x[j] -= carry * L[j]
  for (i = 0; i < 32; i++) {
    x[i + 1] += x[i] >> 8
    r[i] = x[i] & 255
  }
}

function reduce (r) {
  var x = new Float64Array(64); var i
  for (i = 0; i < 64; i++) x[i] = r[i]
  for (i = 0; i < 64; i++) r[i] = 0
  modL(r, x)
}

function unpackneg (r, p) {
  var t = gf(); var chk = gf(); var num = gf()

  var den = gf(); var den2 = gf(); var den4 = gf()

  var den6 = gf()

  set25519(r[2], gf1)
  unpack25519(r[1], p)
  S(num, r[1])
  M(den, num, D)
  Z(num, num, r[2])
  A(den, r[2], den)

  S(den2, den)
  S(den4, den2)
  M(den6, den4, den2)
  M(t, den6, num)
  M(t, t, den)

  pow2523(t, t)
  M(t, t, num)
  M(t, t, den)
  M(t, t, den)
  M(r[0], t, den)

  S(chk, r[0])
  M(chk, chk, den)
  if (neq25519(chk, num)) M(r[0], r[0], I)

  S(chk, r[0])
  M(chk, chk, den)
  if (neq25519(chk, num)) return -1

  if (par25519(r[0]) === (p[31] >> 7)) Z(r[0], gf0, r[0])

  M(r[3], r[0], r[1])
  return 0
}

const NACL = {}

NACL.ll = {
  geScalarmultBase: ge_scalarmult_base,
  ge_scalarmult_base: ge_scalarmult_base,
  
  geScalarmult: ge_scalarmult,
  ge_scalarmult: ge_scalarmult,
  
  geDoubleScalarmultBaseVartime: ge_double_scalarmult_base_vartime,
  ge_double_scalarmult_base_vartime: ge_double_scalarmult_base_vartime,
  
  geAdd: ge_add,
  ge_add: ge_add,

  geDoubleScalarmultPostcompVartime: ge_double_scalarmult_postcomp_vartime,
  ge_double_scalarmult_postcomp_vartime: ge_double_scalarmult_postcomp_vartime
}

/* High-level API */

function cleanup (arr) {
  for (var i = 0; i < arr.length; i++) arr[i] = 0
}

NACL.randomBytes = function (n) {
  var b = new Uint8Array(n)
  randombytes(b, n)
  return b
}

NACL.setPRNG = function (fn) {
  randombytes = fn
};

(function () {
// Initialize PRNG if environment provides CSPRNG.
// If not, methods calling randombytes will throw.
  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null
  if (crypto && crypto.getRandomValues) {
  // Browsers.
    var QUOTA = 65536
    NACL.setPRNG(function (x, n) {
      var i; var v = new Uint8Array(n)
      for (i = 0; i < n; i += QUOTA) {
        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)))
      }
      for (i = 0; i < n; i++) x[i] = v[i]
      cleanup(v)
    })
  } else if (typeof require !== 'undefined') {
  // Node.js.
    crypto = require('crypto')
    if (crypto && crypto.randomBytes) {
      NACL.setPRNG(function (x, n) {
        var i; var v = crypto.randomBytes(n)
        for (i = 0; i < n; i++) x[i] = v[i]
        cleanup(v)
      })
    }
  }
})()

module.exports = NACL

},{"crypto":56}],164:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__dirname){
var Module = typeof Module !== "undefined" ? Module : {};
var moduleOverrides = {};
var key;
for (key in Module) {
 if (Module.hasOwnProperty(key)) {
  moduleOverrides[key] = Module[key];
 }
}
Module["arguments"] = [];
Module["thisProgram"] = "./this.program";
Module["quit"] = (function(status, toThrow) {
 throw toThrow;
});
Module["preRun"] = [];
Module["postRun"] = [];
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
var ENVIRONMENT_IS_REACT_NATIVE = false;

ENVIRONMENT_IS_REACT_NATIVE = typeof global === 'object' && global.navigator && global.navigator.product && global.navigator.product === 'ReactNative';
ENVIRONMENT_IS_WEB = typeof window === 'object' && !ENVIRONMENT_IS_REACT_NATIVE;
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function' && !ENVIRONMENT_IS_REACT_NATIVE;
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_REACT_NATIVE;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_REACT_NATIVE;

var scriptDirectory = "";
function locateFile(path) {
 if (Module["locateFile"]) {
  return Module["locateFile"](path, scriptDirectory);
 } else {
  return scriptDirectory + path;
 }
}
if (ENVIRONMENT_IS_NODE) {
 scriptDirectory = __dirname + "/";
 var nodeFS;
 var nodePath;
 Module["read"] = function shell_read(filename, binary) {
  var ret;
  ret = tryParseAsDataURI(filename);
  if (!ret) {
   if (!nodeFS) nodeFS = require("fs");
   if (!nodePath) nodePath = require("path");
   filename = nodePath["normalize"](filename);
   ret = nodeFS["readFileSync"](filename);
  }
  return binary ? ret : ret.toString();
 };
 Module["readBinary"] = function readBinary(filename) {
  var ret = Module["read"](filename, true);
  if (!ret.buffer) {
   ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
 };
 if (process["argv"].length > 1) {
  Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/");
 }
 Module["arguments"] = process["argv"].slice(2);
 if (typeof module !== "undefined") {
  module["exports"] = Module;
 }
 process["on"]("uncaughtException", (function(ex) {
  if (!(ex instanceof ExitStatus)) {
   throw ex;
  }
 }));
 process["on"]("unhandledRejection", abort);
 Module["quit"] = (function(status) {
  process["exit"](status);
 });
 Module["inspect"] = (function() {
  return "[Emscripten Module object]";
 });
} else if (ENVIRONMENT_IS_SHELL || ENVIRONMENT_IS_REACT_NATIVE) {
 if (typeof read != "undefined") {
  Module["read"] = function shell_read(f) {
   var data = tryParseAsDataURI(f);
   if (data) {
    return intArrayToString(data);
   }
   return read(f);
  };
 }
 Module["readBinary"] = function readBinary(f) {
  var data;
  data = tryParseAsDataURI(f);
  if (data) {
   return data;
  }
  if (typeof readbuffer === "function") {
   return new Uint8Array(readbuffer(f));
  }
  data = read(f, "binary");
  assert(typeof data === "object");
  return data;
 };
 if (typeof scriptArgs != "undefined") {
  Module["arguments"] = scriptArgs;
 } else if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
 if (typeof quit === "function") {
  Module["quit"] = (function(status) {
   quit(status);
  });
 }
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
 if (ENVIRONMENT_IS_WORKER) {
  scriptDirectory = self.location.href;
 } else if (document.currentScript) {
  scriptDirectory = document.currentScript.src;
 }
 if (scriptDirectory.indexOf("blob:") !== 0) {
  scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
 } else {
  scriptDirectory = "";
 }
 Module["read"] = function shell_read(url) {
  try {
   var xhr = new XMLHttpRequest;
   xhr.open("GET", url, false);
   xhr.send(null);
   return xhr.responseText;
  } catch (err) {
   var data = tryParseAsDataURI(url);
   if (data) {
    return intArrayToString(data);
   }
   throw err;
  }
 };
 if (ENVIRONMENT_IS_WORKER) {
  Module["readBinary"] = function readBinary(url) {
   try {
    var xhr = new XMLHttpRequest;
    xhr.open("GET", url, false);
    xhr.responseType = "arraybuffer";
    xhr.send(null);
    return new Uint8Array(xhr.response);
   } catch (err) {
    var data = tryParseAsDataURI(url);
    if (data) {
     return data;
    }
    throw err;
   }
  };
 }
 Module["readAsync"] = function readAsync(url, onload, onerror) {
  var xhr = new XMLHttpRequest;
  xhr.open("GET", url, true);
  xhr.responseType = "arraybuffer";
  xhr.onload = function xhr_onload() {
   if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
    onload(xhr.response);
    return;
   }
   var data = tryParseAsDataURI(url);
   if (data) {
    onload(data.buffer);
    return;
   }
   onerror();
  };
  xhr.onerror = onerror;
  xhr.send(null);
 };
 Module["setWindowTitle"] = (function(title) {
  document.title = title;
 });
} else {}

/* Export the module so we can require/import it */
if (ENVIRONMENT_IS_REACT_NATIVE) {
  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }
}

var out = Module["print"] || (typeof console !== "undefined" ? console.log.bind(console) : typeof print !== "undefined" ? print : null);
var err = Module["printErr"] || (typeof printErr !== "undefined" ? printErr : typeof console !== "undefined" && console.warn.bind(console) || out);
for (key in moduleOverrides) {
 if (moduleOverrides.hasOwnProperty(key)) {
  Module[key] = moduleOverrides[key];
 }
}
moduleOverrides = undefined;
var STACK_ALIGN = 16;
function staticAlloc(size) {
 var ret = STATICTOP;
 STATICTOP = STATICTOP + size + 15 & -16;
 return ret;
}
function dynamicAlloc(size) {
 var ret = HEAP32[DYNAMICTOP_PTR >> 2];
 var end = ret + size + 15 & -16;
 HEAP32[DYNAMICTOP_PTR >> 2] = end;
 if (end >= TOTAL_MEMORY) {
  var success = enlargeMemory();
  if (!success) {
   HEAP32[DYNAMICTOP_PTR >> 2] = ret;
   return 0;
  }
 }
 return ret;
}
function alignMemory(size, factor) {
 if (!factor) factor = STACK_ALIGN;
 return Math.ceil(size / factor) * factor;
}
function getNativeTypeSize(type) {
 switch (type) {
 case "i1":
 case "i8":
  return 1;
 case "i16":
  return 2;
 case "i32":
  return 4;
 case "i64":
  return 8;
 case "float":
  return 4;
 case "double":
  return 8;
 default:
  {
   if (type[type.length - 1] === "*") {
    return 4;
   } else if (type[0] === "i") {
    var bits = parseInt(type.substr(1));
    assert(bits % 8 === 0);
    return bits / 8;
   } else {
    return 0;
   }
  }
 }
}
function warnOnce(text) {
 if (!warnOnce.shown) warnOnce.shown = {};
 if (!warnOnce.shown[text]) {
  warnOnce.shown[text] = 1;
  err(text);
 }
}
var jsCallStartIndex = 1;
var functionPointers = new Array(0);
var funcWrappers = {};
function dynCall(sig, ptr, args) {
 if (args && args.length) {
  return Module["dynCall_" + sig].apply(null, [ ptr ].concat(args));
 } else {
  return Module["dynCall_" + sig].call(null, ptr);
 }
}
var tempRet0 = 0;
var setTempRet0 = (function(value) {
 tempRet0 = value;
});
var getTempRet0 = (function() {
 return tempRet0;
});
var GLOBAL_BASE = 8;
var ABORT = false;
var EXITSTATUS = 0;
function assert(condition, text) {
 if (!condition) {
  abort("Assertion failed: " + text);
 }
}
function getCFunc(ident) {
 var func = Module["_" + ident];
 assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
 return func;
}
var JSfuncs = {
 "stackSave": (function() {
  stackSave();
 }),
 "stackRestore": (function() {
  stackRestore();
 }),
 "arrayToC": (function(arr) {
  var ret = stackAlloc(arr.length);
  writeArrayToMemory(arr, ret);
  return ret;
 }),
 "stringToC": (function(str) {
  var ret = 0;
  if (str !== null && str !== undefined && str !== 0) {
   var len = (str.length << 2) + 1;
   ret = stackAlloc(len);
   stringToUTF8(str, ret, len);
  }
  return ret;
 })
};
var toC = {
 "string": JSfuncs["stringToC"],
 "array": JSfuncs["arrayToC"]
};
function ccall(ident, returnType, argTypes, args, opts) {
 function convertReturnValue(ret) {
  if (returnType === "string") return Pointer_stringify(ret);
  if (returnType === "boolean") return Boolean(ret);
  return ret;
 }
 var func = getCFunc(ident);
 var cArgs = [];
 var stack = 0;
 if (args) {
  for (var i = 0; i < args.length; i++) {
   var converter = toC[argTypes[i]];
   if (converter) {
    if (stack === 0) stack = stackSave();
    cArgs[i] = converter(args[i]);
   } else {
    cArgs[i] = args[i];
   }
  }
 }
 var ret = func.apply(null, cArgs);
 ret = convertReturnValue(ret);
 if (stack !== 0) stackRestore(stack);
 return ret;
}
function setValue(ptr, value, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  HEAP8[ptr >> 0] = value;
  break;
 case "i8":
  HEAP8[ptr >> 0] = value;
  break;
 case "i16":
  HEAP16[ptr >> 1] = value;
  break;
 case "i32":
  HEAP32[ptr >> 2] = value;
  break;
 case "i64":
  tempI64 = [ value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0) ], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
  break;
 case "float":
  HEAPF32[ptr >> 2] = value;
  break;
 case "double":
  HEAPF64[ptr >> 3] = value;
  break;
 default:
  abort("invalid type for setValue: " + type);
 }
}
var ALLOC_STATIC = 2;
var ALLOC_NONE = 4;
function Pointer_stringify(ptr, length) {
 if (length === 0 || !ptr) return "";
 var hasUtf = 0;
 var t;
 var i = 0;
 while (1) {
  t = HEAPU8[ptr + i >> 0];
  hasUtf |= t;
  if (t == 0 && !length) break;
  i++;
  if (length && i == length) break;
 }
 if (!length) length = i;
 var ret = "";
 if (hasUtf < 128) {
  var MAX_CHUNK = 1024;
  var curr;
  while (length > 0) {
   curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
   ret = ret ? ret + curr : curr;
   ptr += MAX_CHUNK;
   length -= MAX_CHUNK;
  }
  return ret;
 }
 return UTF8ToString(ptr);
}
var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : undefined;
function UTF8ArrayToString(u8Array, idx) {
 var endPtr = idx;
 while (u8Array[endPtr]) ++endPtr;
 if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
  return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
 } else {
  var u0, u1, u2, u3, u4, u5;
  var str = "";
  while (1) {
   u0 = u8Array[idx++];
   if (!u0) return str;
   if (!(u0 & 128)) {
    str += String.fromCharCode(u0);
    continue;
   }
   u1 = u8Array[idx++] & 63;
   if ((u0 & 224) == 192) {
    str += String.fromCharCode((u0 & 31) << 6 | u1);
    continue;
   }
   u2 = u8Array[idx++] & 63;
   if ((u0 & 240) == 224) {
    u0 = (u0 & 15) << 12 | u1 << 6 | u2;
   } else {
    u3 = u8Array[idx++] & 63;
    if ((u0 & 248) == 240) {
     u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3;
    } else {
     u4 = u8Array[idx++] & 63;
     if ((u0 & 252) == 248) {
      u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4;
     } else {
      u5 = u8Array[idx++] & 63;
      u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5;
     }
    }
   }
   if (u0 < 65536) {
    str += String.fromCharCode(u0);
   } else {
    var ch = u0 - 65536;
    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
   }
  }
 }
}
function UTF8ToString(ptr) {
 return UTF8ArrayToString(HEAPU8, ptr);
}
function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
 if (!(maxBytesToWrite > 0)) return 0;
 var startIdx = outIdx;
 var endIdx = outIdx + maxBytesToWrite - 1;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) {
   var u1 = str.charCodeAt(++i);
   u = 65536 + ((u & 1023) << 10) | u1 & 1023;
  }
  if (u <= 127) {
   if (outIdx >= endIdx) break;
   outU8Array[outIdx++] = u;
  } else if (u <= 2047) {
   if (outIdx + 1 >= endIdx) break;
   outU8Array[outIdx++] = 192 | u >> 6;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 65535) {
   if (outIdx + 2 >= endIdx) break;
   outU8Array[outIdx++] = 224 | u >> 12;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 2097151) {
   if (outIdx + 3 >= endIdx) break;
   outU8Array[outIdx++] = 240 | u >> 18;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 67108863) {
   if (outIdx + 4 >= endIdx) break;
   outU8Array[outIdx++] = 248 | u >> 24;
   outU8Array[outIdx++] = 128 | u >> 18 & 63;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else {
   if (outIdx + 5 >= endIdx) break;
   outU8Array[outIdx++] = 252 | u >> 30;
   outU8Array[outIdx++] = 128 | u >> 24 & 63;
   outU8Array[outIdx++] = 128 | u >> 18 & 63;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  }
 }
 outU8Array[outIdx] = 0;
 return outIdx - startIdx;
}
function stringToUTF8(str, outPtr, maxBytesToWrite) {
 return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
function lengthBytesUTF8(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) {
   ++len;
  } else if (u <= 2047) {
   len += 2;
  } else if (u <= 65535) {
   len += 3;
  } else if (u <= 2097151) {
   len += 4;
  } else if (u <= 67108863) {
   len += 5;
  } else {
   len += 6;
  }
 }
 return len;
}
var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : undefined;
function demangle(func) {
 return func;
}
function demangleAll(text) {
 var regex = /__Z[\w\d_]+/g;
 return text.replace(regex, (function(x) {
  var y = demangle(x);
  return x === y ? x : y + " [" + x + "]";
 }));
}
function jsStackTrace() {
 var err = new Error;
 if (!err.stack) {
  try {
   throw new Error(0);
  } catch (e) {
   err = e;
  }
  if (!err.stack) {
   return "(no stack trace available)";
  }
 }
 return err.stack.toString();
}
function stackTrace() {
 var js = jsStackTrace();
 if (Module["extraStackTrace"]) js += "\n" + Module["extraStackTrace"]();
 return demangleAll(js);
}
var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
function updateGlobalBufferViews() {
 Module["HEAP8"] = HEAP8 = new Int8Array(buffer);
 Module["HEAP16"] = HEAP16 = new Int16Array(buffer);
 Module["HEAP32"] = HEAP32 = new Int32Array(buffer);
 Module["HEAPU8"] = HEAPU8 = new Uint8Array(buffer);
 Module["HEAPU16"] = HEAPU16 = new Uint16Array(buffer);
 Module["HEAPU32"] = HEAPU32 = new Uint32Array(buffer);
 Module["HEAPF32"] = HEAPF32 = new Float32Array(buffer);
 Module["HEAPF64"] = HEAPF64 = new Float64Array(buffer);
}
var STATIC_BASE, STATICTOP, staticSealed;
var STACK_BASE, STACKTOP, STACK_MAX;
var DYNAMIC_BASE, DYNAMICTOP_PTR;
STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
staticSealed = false;
function abortOnCannotGrowMemory() {
 abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value " + TOTAL_MEMORY + ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ");
}
function enlargeMemory() {
 abortOnCannotGrowMemory();
}
var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;
var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) err("TOTAL_MEMORY should be larger than TOTAL_STACK, was " + TOTAL_MEMORY + "! (TOTAL_STACK=" + TOTAL_STACK + ")");
if (Module["buffer"]) {
 buffer = Module["buffer"];
} else {
 {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
 }
 Module["buffer"] = buffer;
}
updateGlobalBufferViews();
function getTotalMemory() {
 return TOTAL_MEMORY;
}
function callRuntimeCallbacks(callbacks) {
 while (callbacks.length > 0) {
  var callback = callbacks.shift();
  if (typeof callback == "function") {
   callback();
   continue;
  }
  var func = callback.func;
  if (typeof func === "number") {
   if (callback.arg === undefined) {
    Module["dynCall_v"](func);
   } else {
    Module["dynCall_vi"](func, callback.arg);
   }
  } else {
   func(callback.arg === undefined ? null : callback.arg);
  }
 }
}
var __ATPRERUN__ = [];
var __ATINIT__ = [];
var __ATMAIN__ = [];
var __ATEXIT__ = [];
var __ATPOSTRUN__ = [];
var runtimeInitialized = false;
var runtimeExited = false;
function preRun() {
 if (Module["preRun"]) {
  if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
  while (Module["preRun"].length) {
   addOnPreRun(Module["preRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
 if (runtimeInitialized) return;
 runtimeInitialized = true;
 callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
 callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
 callRuntimeCallbacks(__ATEXIT__);
 runtimeExited = true;
}
function postRun() {
 if (Module["postRun"]) {
  if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
  while (Module["postRun"].length) {
   addOnPostRun(Module["postRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
 __ATPRERUN__.unshift(cb);
}
function addOnPostRun(cb) {
 __ATPOSTRUN__.unshift(cb);
}
function writeArrayToMemory(array, buffer) {
 HEAP8.set(array, buffer);
}
function writeAsciiToMemory(str, buffer, dontAddNull) {
 for (var i = 0; i < str.length; ++i) {
  HEAP8[buffer++ >> 0] = str.charCodeAt(i);
 }
 if (!dontAddNull) HEAP8[buffer >> 0] = 0;
}
if (!Math.imul || Math.imul(4294967295, 5) !== -5) Math.imul = function imul(a, b) {
 var ah = a >>> 16;
 var al = a & 65535;
 var bh = b >>> 16;
 var bl = b & 65535;
 return al * bl + (ah * bl + al * bh << 16) | 0;
};
if (!Math.clz32) Math.clz32 = (function(x) {
 var n = 32;
 var y = x >> 16;
 if (y) {
  n -= 16;
  x = y;
 }
 y = x >> 8;
 if (y) {
  n -= 8;
  x = y;
 }
 y = x >> 4;
 if (y) {
  n -= 4;
  x = y;
 }
 y = x >> 2;
 if (y) {
  n -= 2;
  x = y;
 }
 y = x >> 1;
 if (y) return n - 2;
 return n - x;
});
if (!Math.trunc) Math.trunc = (function(x) {
 return x < 0 ? Math.ceil(x) : Math.floor(x);
});
var Math_abs = Math.abs;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_min = Math.min;
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null;
function getUniqueRunDependency(id) {
 return id;
}
function addRunDependency(id) {
 runDependencies++;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
}
function removeRunDependency(id) {
 runDependencies--;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
 if (runDependencies == 0) {
  if (runDependencyWatcher !== null) {
   clearInterval(runDependencyWatcher);
   runDependencyWatcher = null;
  }
  if (dependenciesFulfilled) {
   var callback = dependenciesFulfilled;
   dependenciesFulfilled = null;
   callback();
  }
 }
}
Module["preloadedImages"] = {};
Module["preloadedAudios"] = {};
var memoryInitializer = null;
var dataURIPrefix = "data:application/octet-stream;base64,";
function isDataURI(filename) {
 return String.prototype.startsWith ? filename.startsWith(dataURIPrefix) : filename.indexOf(dataURIPrefix) === 0;
}
STATIC_BASE = GLOBAL_BASE;
STATICTOP = STATIC_BASE + 40672;
__ATINIT__.push({
 func: (function() {
  _init_random();
 })
}, {
 func: (function() {
  __GLOBAL__sub_I_crypto_cpp();
 })
}, {
 func: (function() {
  __GLOBAL__sub_I_turtlecoin_crypto_cpp();
 })
}, {
 func: (function() {
  __GLOBAL__sub_I_bind_cpp();
 })
});
memoryInitializer = "data:application/octet-stream;base64,";
var tempDoublePtr = STATICTOP;
STATICTOP += 16;
function ___assert_fail(condition, filename, line, func) {
 abort("Assertion failed: " + Pointer_stringify(condition) + ", at: " + [ filename ? Pointer_stringify(filename) : "unknown filename", line, func ? Pointer_stringify(func) : "unknown function" ]);
}
function ___cxa_allocate_exception(size) {
 return _malloc(size);
}
function __ZSt18uncaught_exceptionv() {
 return !!__ZSt18uncaught_exceptionv.uncaught_exception;
}
var EXCEPTIONS = {
 last: 0,
 caught: [],
 infos: {},
 deAdjust: (function(adjusted) {
  if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
  for (var key in EXCEPTIONS.infos) {
   var ptr = +key;
   var adj = EXCEPTIONS.infos[ptr].adjusted;
   var len = adj.length;
   for (var i = 0; i < len; i++) {
    if (adj[i] === adjusted) {
     return ptr;
    }
   }
  }
  return adjusted;
 }),
 addRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  info.refcount++;
 }),
 decRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  assert(info.refcount > 0);
  info.refcount--;
  if (info.refcount === 0 && !info.rethrown) {
   if (info.destructor) {
    Module["dynCall_vi"](info.destructor, ptr);
   }
   delete EXCEPTIONS.infos[ptr];
   ___cxa_free_exception(ptr);
  }
 }),
 clearRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  info.refcount = 0;
 })
};
function ___cxa_begin_catch(ptr) {
 var info = EXCEPTIONS.infos[ptr];
 if (info && !info.caught) {
  info.caught = true;
  __ZSt18uncaught_exceptionv.uncaught_exception--;
 }
 if (info) info.rethrown = false;
 EXCEPTIONS.caught.push(ptr);
 EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
 return ptr;
}
function ___resumeException(ptr) {
 if (!EXCEPTIONS.last) {
  EXCEPTIONS.last = ptr;
 }
 throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
}
function ___cxa_find_matching_catch() {
 var thrown = EXCEPTIONS.last;
 if (!thrown) {
  return (setTempRet0(0), 0) | 0;
 }
 var info = EXCEPTIONS.infos[thrown];
 var throwntype = info.type;
 if (!throwntype) {
  return (setTempRet0(0), thrown) | 0;
 }
 var typeArray = Array.prototype.slice.call(arguments);
 var pointer = Module["___cxa_is_pointer_type"](throwntype);
 if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
 HEAP32[___cxa_find_matching_catch.buffer >> 2] = thrown;
 thrown = ___cxa_find_matching_catch.buffer;
 for (var i = 0; i < typeArray.length; i++) {
  if (typeArray[i] && Module["___cxa_can_catch"](typeArray[i], throwntype, thrown)) {
   thrown = HEAP32[thrown >> 2];
   info.adjusted.push(thrown);
   return (setTempRet0(typeArray[i]), thrown) | 0;
  }
 }
 thrown = HEAP32[thrown >> 2];
 return (setTempRet0(throwntype), thrown) | 0;
}
function ___cxa_throw(ptr, type, destructor) {
 EXCEPTIONS.infos[ptr] = {
  ptr: ptr,
  adjusted: [ ptr ],
  type: type,
  destructor: destructor,
  refcount: 0,
  caught: false,
  rethrown: false
 };
 EXCEPTIONS.last = ptr;
 if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
  __ZSt18uncaught_exceptionv.uncaught_exception = 1;
 } else {
  __ZSt18uncaught_exceptionv.uncaught_exception++;
 }
 throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
}
function ___gxx_personality_v0() {}
function ___setErrNo(value) {
 if (Module["___errno_location"]) HEAP32[Module["___errno_location"]() >> 2] = value;
 return value;
}
var PATH = {
 splitPath: (function(filename) {
  var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  return splitPathRe.exec(filename).slice(1);
 }),
 normalizeArray: (function(parts, allowAboveRoot) {
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
   var last = parts[i];
   if (last === ".") {
    parts.splice(i, 1);
   } else if (last === "..") {
    parts.splice(i, 1);
    up++;
   } else if (up) {
    parts.splice(i, 1);
    up--;
   }
  }
  if (allowAboveRoot) {
   for (; up; up--) {
    parts.unshift("..");
   }
  }
  return parts;
 }),
 normalize: (function(path) {
  var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/";
  path = PATH.normalizeArray(path.split("/").filter((function(p) {
   return !!p;
  })), !isAbsolute).join("/");
  if (!path && !isAbsolute) {
   path = ".";
  }
  if (path && trailingSlash) {
   path += "/";
  }
  return (isAbsolute ? "/" : "") + path;
 }),
 dirname: (function(path) {
  var result = PATH.splitPath(path), root = result[0], dir = result[1];
  if (!root && !dir) {
   return ".";
  }
  if (dir) {
   dir = dir.substr(0, dir.length - 1);
  }
  return root + dir;
 }),
 basename: (function(path) {
  if (path === "/") return "/";
  var lastSlash = path.lastIndexOf("/");
  if (lastSlash === -1) return path;
  return path.substr(lastSlash + 1);
 }),
 extname: (function(path) {
  return PATH.splitPath(path)[3];
 }),
 join: (function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return PATH.normalize(paths.join("/"));
 }),
 join2: (function(l, r) {
  return PATH.normalize(l + "/" + r);
 }),
 resolve: (function() {
  var resolvedPath = "", resolvedAbsolute = false;
  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
   var path = i >= 0 ? arguments[i] : FS.cwd();
   if (typeof path !== "string") {
    throw new TypeError("Arguments to path.resolve must be strings");
   } else if (!path) {
    return "";
   }
   resolvedPath = path + "/" + resolvedPath;
   resolvedAbsolute = path.charAt(0) === "/";
  }
  resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter((function(p) {
   return !!p;
  })), !resolvedAbsolute).join("/");
  return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
 }),
 relative: (function(from, to) {
  from = PATH.resolve(from).substr(1);
  to = PATH.resolve(to).substr(1);
  function trim(arr) {
   var start = 0;
   for (; start < arr.length; start++) {
    if (arr[start] !== "") break;
   }
   var end = arr.length - 1;
   for (; end >= 0; end--) {
    if (arr[end] !== "") break;
   }
   if (start > end) return [];
   return arr.slice(start, end - start + 1);
  }
  var fromParts = trim(from.split("/"));
  var toParts = trim(to.split("/"));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
   if (fromParts[i] !== toParts[i]) {
    samePartsLength = i;
    break;
   }
  }
  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
   outputParts.push("..");
  }
  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join("/");
 })
};
var TTY = {
 ttys: [],
 init: (function() {}),
 shutdown: (function() {}),
 register: (function(dev, ops) {
  TTY.ttys[dev] = {
   input: [],
   output: [],
   ops: ops
  };
  FS.registerDevice(dev, TTY.stream_ops);
 }),
 stream_ops: {
  open: (function(stream) {
   var tty = TTY.ttys[stream.node.rdev];
   if (!tty) {
    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
   }
   stream.tty = tty;
   stream.seekable = false;
  }),
  close: (function(stream) {
   stream.tty.ops.flush(stream.tty);
  }),
  flush: (function(stream) {
   stream.tty.ops.flush(stream.tty);
  }),
  read: (function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.get_char) {
    throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
   }
   var bytesRead = 0;
   for (var i = 0; i < length; i++) {
    var result;
    try {
     result = stream.tty.ops.get_char(stream.tty);
    } catch (e) {
     throw new FS.ErrnoError(ERRNO_CODES.EIO);
    }
    if (result === undefined && bytesRead === 0) {
     throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
    }
    if (result === null || result === undefined) break;
    bytesRead++;
    buffer[offset + i] = result;
   }
   if (bytesRead) {
    stream.node.timestamp = Date.now();
   }
   return bytesRead;
  }),
  write: (function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.put_char) {
    throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
   }
   try {
    for (var i = 0; i < length; i++) {
     stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
    }
   } catch (e) {
    throw new FS.ErrnoError(ERRNO_CODES.EIO);
   }
   if (length) {
    stream.node.timestamp = Date.now();
   }
   return i;
  })
 },
 default_tty_ops: {
  get_char: (function(tty) {
   if (!tty.input.length) {
    var result = null;
    if (ENVIRONMENT_IS_NODE) {
     var BUFSIZE = 256;
     var buf = new Buffer(BUFSIZE);
     var bytesRead = 0;
     var isPosixPlatform = process.platform != "win32";
     var fd = process.stdin.fd;
     if (isPosixPlatform) {
      var usingDevice = false;
      try {
       fd = fs.openSync("/dev/stdin", "r");
       usingDevice = true;
      } catch (e) {}
     }
     try {
      bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
     } catch (e) {
      if (e.toString().indexOf("EOF") != -1) bytesRead = 0; else throw e;
     }
     if (usingDevice) {
      fs.closeSync(fd);
     }
     if (bytesRead > 0) {
      result = buf.slice(0, bytesRead).toString("utf-8");
     } else {
      result = null;
     }
    } else if (typeof window != "undefined" && typeof window.prompt == "function") {
     result = window.prompt("Input: ");
     if (result !== null) {
      result += "\n";
     }
    } else if (typeof readline == "function") {
     result = readline();
     if (result !== null) {
      result += "\n";
     }
    }
    if (!result) {
     return null;
    }
    tty.input = intArrayFromString(result, true);
   }
   return tty.input.shift();
  }),
  put_char: (function(tty, val) {
   if (val === null || val === 10) {
    out(UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   } else {
    if (val != 0) tty.output.push(val);
   }
  }),
  flush: (function(tty) {
   if (tty.output && tty.output.length > 0) {
    out(UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   }
  })
 },
 default_tty1_ops: {
  put_char: (function(tty, val) {
   if (val === null || val === 10) {
    err(UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   } else {
    if (val != 0) tty.output.push(val);
   }
  }),
  flush: (function(tty) {
   if (tty.output && tty.output.length > 0) {
    err(UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   }
  })
 }
};
var MEMFS = {
 ops_table: null,
 mount: (function(mount) {
  return MEMFS.createNode(null, "/", 16384 | 511, 0);
 }),
 createNode: (function(parent, name, mode, dev) {
  if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (!MEMFS.ops_table) {
   MEMFS.ops_table = {
    dir: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      lookup: MEMFS.node_ops.lookup,
      mknod: MEMFS.node_ops.mknod,
      rename: MEMFS.node_ops.rename,
      unlink: MEMFS.node_ops.unlink,
      rmdir: MEMFS.node_ops.rmdir,
      readdir: MEMFS.node_ops.readdir,
      symlink: MEMFS.node_ops.symlink
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek
     }
    },
    file: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek,
      read: MEMFS.stream_ops.read,
      write: MEMFS.stream_ops.write,
      allocate: MEMFS.stream_ops.allocate,
      mmap: MEMFS.stream_ops.mmap,
      msync: MEMFS.stream_ops.msync
     }
    },
    link: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      readlink: MEMFS.node_ops.readlink
     },
     stream: {}
    },
    chrdev: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: FS.chrdev_stream_ops
    }
   };
  }
  var node = FS.createNode(parent, name, mode, dev);
  if (FS.isDir(node.mode)) {
   node.node_ops = MEMFS.ops_table.dir.node;
   node.stream_ops = MEMFS.ops_table.dir.stream;
   node.contents = {};
  } else if (FS.isFile(node.mode)) {
   node.node_ops = MEMFS.ops_table.file.node;
   node.stream_ops = MEMFS.ops_table.file.stream;
   node.usedBytes = 0;
   node.contents = null;
  } else if (FS.isLink(node.mode)) {
   node.node_ops = MEMFS.ops_table.link.node;
   node.stream_ops = MEMFS.ops_table.link.stream;
  } else if (FS.isChrdev(node.mode)) {
   node.node_ops = MEMFS.ops_table.chrdev.node;
   node.stream_ops = MEMFS.ops_table.chrdev.stream;
  }
  node.timestamp = Date.now();
  if (parent) {
   parent.contents[name] = node;
  }
  return node;
 }),
 getFileDataAsRegularArray: (function(node) {
  if (node.contents && node.contents.subarray) {
   var arr = [];
   for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
   return arr;
  }
  return node.contents;
 }),
 getFileDataAsTypedArray: (function(node) {
  if (!node.contents) return new Uint8Array;
  if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
  return new Uint8Array(node.contents);
 }),
 expandFileStorage: (function(node, newCapacity) {
  if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
   node.contents = MEMFS.getFileDataAsRegularArray(node);
   node.usedBytes = node.contents.length;
  }
  if (!node.contents || node.contents.subarray) {
   var prevCapacity = node.contents ? node.contents.length : 0;
   if (prevCapacity >= newCapacity) return;
   var CAPACITY_DOUBLING_MAX = 1024 * 1024;
   newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) | 0);
   if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
   var oldContents = node.contents;
   node.contents = new Uint8Array(newCapacity);
   if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
   return;
  }
  if (!node.contents && newCapacity > 0) node.contents = [];
  while (node.contents.length < newCapacity) node.contents.push(0);
 }),
 resizeFileStorage: (function(node, newSize) {
  if (node.usedBytes == newSize) return;
  if (newSize == 0) {
   node.contents = null;
   node.usedBytes = 0;
   return;
  }
  if (!node.contents || node.contents.subarray) {
   var oldContents = node.contents;
   node.contents = new Uint8Array(new ArrayBuffer(newSize));
   if (oldContents) {
    node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
   }
   node.usedBytes = newSize;
   return;
  }
  if (!node.contents) node.contents = [];
  if (node.contents.length > newSize) node.contents.length = newSize; else while (node.contents.length < newSize) node.contents.push(0);
  node.usedBytes = newSize;
 }),
 node_ops: {
  getattr: (function(node) {
   var attr = {};
   attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
   attr.ino = node.id;
   attr.mode = node.mode;
   attr.nlink = 1;
   attr.uid = 0;
   attr.gid = 0;
   attr.rdev = node.rdev;
   if (FS.isDir(node.mode)) {
    attr.size = 4096;
   } else if (FS.isFile(node.mode)) {
    attr.size = node.usedBytes;
   } else if (FS.isLink(node.mode)) {
    attr.size = node.link.length;
   } else {
    attr.size = 0;
   }
   attr.atime = new Date(node.timestamp);
   attr.mtime = new Date(node.timestamp);
   attr.ctime = new Date(node.timestamp);
   attr.blksize = 4096;
   attr.blocks = Math.ceil(attr.size / attr.blksize);
   return attr;
  }),
  setattr: (function(node, attr) {
   if (attr.mode !== undefined) {
    node.mode = attr.mode;
   }
   if (attr.timestamp !== undefined) {
    node.timestamp = attr.timestamp;
   }
   if (attr.size !== undefined) {
    MEMFS.resizeFileStorage(node, attr.size);
   }
  }),
  lookup: (function(parent, name) {
   throw FS.genericErrors[ERRNO_CODES.ENOENT];
  }),
  mknod: (function(parent, name, mode, dev) {
   return MEMFS.createNode(parent, name, mode, dev);
  }),
  rename: (function(old_node, new_dir, new_name) {
   if (FS.isDir(old_node.mode)) {
    var new_node;
    try {
     new_node = FS.lookupNode(new_dir, new_name);
    } catch (e) {}
    if (new_node) {
     for (var i in new_node.contents) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
     }
    }
   }
   delete old_node.parent.contents[old_node.name];
   old_node.name = new_name;
   new_dir.contents[new_name] = old_node;
   old_node.parent = new_dir;
  }),
  unlink: (function(parent, name) {
   delete parent.contents[name];
  }),
  rmdir: (function(parent, name) {
   var node = FS.lookupNode(parent, name);
   for (var i in node.contents) {
    throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
   }
   delete parent.contents[name];
  }),
  readdir: (function(node) {
   var entries = [ ".", ".." ];
   for (var key in node.contents) {
    if (!node.contents.hasOwnProperty(key)) {
     continue;
    }
    entries.push(key);
   }
   return entries;
  }),
  symlink: (function(parent, newname, oldpath) {
   var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
   node.link = oldpath;
   return node;
  }),
  readlink: (function(node) {
   if (!FS.isLink(node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return node.link;
  })
 },
 stream_ops: {
  read: (function(stream, buffer, offset, length, position) {
   var contents = stream.node.contents;
   if (position >= stream.node.usedBytes) return 0;
   var size = Math.min(stream.node.usedBytes - position, length);
   assert(size >= 0);
   if (size > 8 && contents.subarray) {
    buffer.set(contents.subarray(position, position + size), offset);
   } else {
    for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
   }
   return size;
  }),
  write: (function(stream, buffer, offset, length, position, canOwn) {
   if (!length) return 0;
   var node = stream.node;
   node.timestamp = Date.now();
   if (buffer.subarray && (!node.contents || node.contents.subarray)) {
    if (canOwn) {
     node.contents = buffer.subarray(offset, offset + length);
     node.usedBytes = length;
     return length;
    } else if (node.usedBytes === 0 && position === 0) {
     node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
     node.usedBytes = length;
     return length;
    } else if (position + length <= node.usedBytes) {
     node.contents.set(buffer.subarray(offset, offset + length), position);
     return length;
    }
   }
   MEMFS.expandFileStorage(node, position + length);
   if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); else {
    for (var i = 0; i < length; i++) {
     node.contents[position + i] = buffer[offset + i];
    }
   }
   node.usedBytes = Math.max(node.usedBytes, position + length);
   return length;
  }),
  llseek: (function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     position += stream.node.usedBytes;
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return position;
  }),
  allocate: (function(stream, offset, length) {
   MEMFS.expandFileStorage(stream.node, offset + length);
   stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
  }),
  mmap: (function(stream, buffer, offset, length, position, prot, flags) {
   if (!FS.isFile(stream.node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
   }
   var ptr;
   var allocated;
   var contents = stream.node.contents;
   if (!(flags & 2) && (contents.buffer === buffer || contents.buffer === buffer.buffer)) {
    allocated = false;
    ptr = contents.byteOffset;
   } else {
    if (position > 0 || position + length < stream.node.usedBytes) {
     if (contents.subarray) {
      contents = contents.subarray(position, position + length);
     } else {
      contents = Array.prototype.slice.call(contents, position, position + length);
     }
    }
    allocated = true;
    ptr = _malloc(length);
    if (!ptr) {
     throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
    }
    buffer.set(contents, ptr);
   }
   return {
    ptr: ptr,
    allocated: allocated
   };
  }),
  msync: (function(stream, buffer, offset, length, mmapFlags) {
   if (!FS.isFile(stream.node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
   }
   if (mmapFlags & 2) {
    return 0;
   }
   var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
   return 0;
  })
 }
};
var IDBFS = {
 dbs: {},
 indexedDB: (function() {
  if (typeof indexedDB !== "undefined") return indexedDB;
  var ret = null;
  if (typeof window === "object") ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
  assert(ret, "IDBFS used, but indexedDB not supported");
  return ret;
 }),
 DB_VERSION: 21,
 DB_STORE_NAME: "FILE_DATA",
 mount: (function(mount) {
  return MEMFS.mount.apply(null, arguments);
 }),
 syncfs: (function(mount, populate, callback) {
  IDBFS.getLocalSet(mount, (function(err, local) {
   if (err) return callback(err);
   IDBFS.getRemoteSet(mount, (function(err, remote) {
    if (err) return callback(err);
    var src = populate ? remote : local;
    var dst = populate ? local : remote;
    IDBFS.reconcile(src, dst, callback);
   }));
  }));
 }),
 getDB: (function(name, callback) {
  var db = IDBFS.dbs[name];
  if (db) {
   return callback(null, db);
  }
  var req;
  try {
   req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
  } catch (e) {
   return callback(e);
  }
  if (!req) {
   return callback("Unable to connect to IndexedDB");
  }
  req.onupgradeneeded = (function(e) {
   var db = e.target.result;
   var transaction = e.target.transaction;
   var fileStore;
   if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
    fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
   } else {
    fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
   }
   if (!fileStore.indexNames.contains("timestamp")) {
    fileStore.createIndex("timestamp", "timestamp", {
     unique: false
    });
   }
  });
  req.onsuccess = (function() {
   db = req.result;
   IDBFS.dbs[name] = db;
   callback(null, db);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 getLocalSet: (function(mount, callback) {
  var entries = {};
  function isRealDir(p) {
   return p !== "." && p !== "..";
  }
  function toAbsolute(root) {
   return (function(p) {
    return PATH.join2(root, p);
   });
  }
  var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  while (check.length) {
   var path = check.pop();
   var stat;
   try {
    stat = FS.stat(path);
   } catch (e) {
    return callback(e);
   }
   if (FS.isDir(stat.mode)) {
    check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
   }
   entries[path] = {
    timestamp: stat.mtime
   };
  }
  return callback(null, {
   type: "local",
   entries: entries
  });
 }),
 getRemoteSet: (function(mount, callback) {
  var entries = {};
  IDBFS.getDB(mount.mountpoint, (function(err, db) {
   if (err) return callback(err);
   try {
    var transaction = db.transaction([ IDBFS.DB_STORE_NAME ], "readonly");
    transaction.onerror = (function(e) {
     callback(this.error);
     e.preventDefault();
    });
    var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
    var index = store.index("timestamp");
    index.openKeyCursor().onsuccess = (function(event) {
     var cursor = event.target.result;
     if (!cursor) {
      return callback(null, {
       type: "remote",
       db: db,
       entries: entries
      });
     }
     entries[cursor.primaryKey] = {
      timestamp: cursor.key
     };
     cursor.continue();
    });
   } catch (e) {
    return callback(e);
   }
  }));
 }),
 loadLocalEntry: (function(path, callback) {
  var stat, node;
  try {
   var lookup = FS.lookupPath(path);
   node = lookup.node;
   stat = FS.stat(path);
  } catch (e) {
   return callback(e);
  }
  if (FS.isDir(stat.mode)) {
   return callback(null, {
    timestamp: stat.mtime,
    mode: stat.mode
   });
  } else if (FS.isFile(stat.mode)) {
   node.contents = MEMFS.getFileDataAsTypedArray(node);
   return callback(null, {
    timestamp: stat.mtime,
    mode: stat.mode,
    contents: node.contents
   });
  } else {
   return callback(new Error("node type not supported"));
  }
 }),
 storeLocalEntry: (function(path, entry, callback) {
  try {
   if (FS.isDir(entry.mode)) {
    FS.mkdir(path, entry.mode);
   } else if (FS.isFile(entry.mode)) {
    FS.writeFile(path, entry.contents, {
     canOwn: true
    });
   } else {
    return callback(new Error("node type not supported"));
   }
   FS.chmod(path, entry.mode);
   FS.utime(path, entry.timestamp, entry.timestamp);
  } catch (e) {
   return callback(e);
  }
  callback(null);
 }),
 removeLocalEntry: (function(path, callback) {
  try {
   var lookup = FS.lookupPath(path);
   var stat = FS.stat(path);
   if (FS.isDir(stat.mode)) {
    FS.rmdir(path);
   } else if (FS.isFile(stat.mode)) {
    FS.unlink(path);
   }
  } catch (e) {
   return callback(e);
  }
  callback(null);
 }),
 loadRemoteEntry: (function(store, path, callback) {
  var req = store.get(path);
  req.onsuccess = (function(event) {
   callback(null, event.target.result);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 storeRemoteEntry: (function(store, path, entry, callback) {
  var req = store.put(entry, path);
  req.onsuccess = (function() {
   callback(null);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 removeRemoteEntry: (function(store, path, callback) {
  var req = store.delete(path);
  req.onsuccess = (function() {
   callback(null);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 reconcile: (function(src, dst, callback) {
  var total = 0;
  var create = [];
  Object.keys(src.entries).forEach((function(key) {
   var e = src.entries[key];
   var e2 = dst.entries[key];
   if (!e2 || e.timestamp > e2.timestamp) {
    create.push(key);
    total++;
   }
  }));
  var remove = [];
  Object.keys(dst.entries).forEach((function(key) {
   var e = dst.entries[key];
   var e2 = src.entries[key];
   if (!e2) {
    remove.push(key);
    total++;
   }
  }));
  if (!total) {
   return callback(null);
  }
  var completed = 0;
  var db = src.type === "remote" ? src.db : dst.db;
  var transaction = db.transaction([ IDBFS.DB_STORE_NAME ], "readwrite");
  var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  function done(err) {
   if (err) {
    if (!done.errored) {
     done.errored = true;
     return callback(err);
    }
    return;
   }
   if (++completed >= total) {
    return callback(null);
   }
  }
  transaction.onerror = (function(e) {
   done(this.error);
   e.preventDefault();
  });
  create.sort().forEach((function(path) {
   if (dst.type === "local") {
    IDBFS.loadRemoteEntry(store, path, (function(err, entry) {
     if (err) return done(err);
     IDBFS.storeLocalEntry(path, entry, done);
    }));
   } else {
    IDBFS.loadLocalEntry(path, (function(err, entry) {
     if (err) return done(err);
     IDBFS.storeRemoteEntry(store, path, entry, done);
    }));
   }
  }));
  remove.sort().reverse().forEach((function(path) {
   if (dst.type === "local") {
    IDBFS.removeLocalEntry(path, done);
   } else {
    IDBFS.removeRemoteEntry(store, path, done);
   }
  }));
 })
};
var NODEFS = {
 isWindows: false,
 staticInit: (function() {
  NODEFS.isWindows = !!process.platform.match(/^win/);
  var flags = process["binding"]("constants");
  if (flags["fs"]) {
   flags = flags["fs"];
  }
  NODEFS.flagsForNodeMap = {
   "1024": flags["O_APPEND"],
   "64": flags["O_CREAT"],
   "128": flags["O_EXCL"],
   "0": flags["O_RDONLY"],
   "2": flags["O_RDWR"],
   "4096": flags["O_SYNC"],
   "512": flags["O_TRUNC"],
   "1": flags["O_WRONLY"]
  };
 }),
 bufferFrom: (function(arrayBuffer) {
  return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
 }),
 mount: (function(mount) {
  assert(ENVIRONMENT_IS_NODE);
  return NODEFS.createNode(null, "/", NODEFS.getMode(mount.opts.root), 0);
 }),
 createNode: (function(parent, name, mode, dev) {
  if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var node = FS.createNode(parent, name, mode);
  node.node_ops = NODEFS.node_ops;
  node.stream_ops = NODEFS.stream_ops;
  return node;
 }),
 getMode: (function(path) {
  var stat;
  try {
   stat = fs.lstatSync(path);
   if (NODEFS.isWindows) {
    stat.mode = stat.mode | (stat.mode & 292) >> 2;
   }
  } catch (e) {
   if (!e.code) throw e;
   throw new FS.ErrnoError(ERRNO_CODES[e.code]);
  }
  return stat.mode;
 }),
 realPath: (function(node) {
  var parts = [];
  while (node.parent !== node) {
   parts.push(node.name);
   node = node.parent;
  }
  parts.push(node.mount.opts.root);
  parts.reverse();
  return PATH.join.apply(null, parts);
 }),
 flagsForNode: (function(flags) {
  flags &= ~2097152;
  flags &= ~2048;
  flags &= ~32768;
  flags &= ~524288;
  var newFlags = 0;
  for (var k in NODEFS.flagsForNodeMap) {
   if (flags & k) {
    newFlags |= NODEFS.flagsForNodeMap[k];
    flags ^= k;
   }
  }
  if (!flags) {
   return newFlags;
  } else {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
 }),
 node_ops: {
  getattr: (function(node) {
   var path = NODEFS.realPath(node);
   var stat;
   try {
    stat = fs.lstatSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   if (NODEFS.isWindows && !stat.blksize) {
    stat.blksize = 4096;
   }
   if (NODEFS.isWindows && !stat.blocks) {
    stat.blocks = (stat.size + stat.blksize - 1) / stat.blksize | 0;
   }
   return {
    dev: stat.dev,
    ino: stat.ino,
    mode: stat.mode,
    nlink: stat.nlink,
    uid: stat.uid,
    gid: stat.gid,
    rdev: stat.rdev,
    size: stat.size,
    atime: stat.atime,
    mtime: stat.mtime,
    ctime: stat.ctime,
    blksize: stat.blksize,
    blocks: stat.blocks
   };
  }),
  setattr: (function(node, attr) {
   var path = NODEFS.realPath(node);
   try {
    if (attr.mode !== undefined) {
     fs.chmodSync(path, attr.mode);
     node.mode = attr.mode;
    }
    if (attr.timestamp !== undefined) {
     var date = new Date(attr.timestamp);
     fs.utimesSync(path, date, date);
    }
    if (attr.size !== undefined) {
     fs.truncateSync(path, attr.size);
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  lookup: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   var mode = NODEFS.getMode(path);
   return NODEFS.createNode(parent, name, mode);
  }),
  mknod: (function(parent, name, mode, dev) {
   var node = NODEFS.createNode(parent, name, mode, dev);
   var path = NODEFS.realPath(node);
   try {
    if (FS.isDir(node.mode)) {
     fs.mkdirSync(path, node.mode);
    } else {
     fs.writeFileSync(path, "", {
      mode: node.mode
     });
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   return node;
  }),
  rename: (function(oldNode, newDir, newName) {
   var oldPath = NODEFS.realPath(oldNode);
   var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
   try {
    fs.renameSync(oldPath, newPath);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  unlink: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   try {
    fs.unlinkSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  rmdir: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   try {
    fs.rmdirSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  readdir: (function(node) {
   var path = NODEFS.realPath(node);
   try {
    return fs.readdirSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  symlink: (function(parent, newName, oldPath) {
   var newPath = PATH.join2(NODEFS.realPath(parent), newName);
   try {
    fs.symlinkSync(oldPath, newPath);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  readlink: (function(node) {
   var path = NODEFS.realPath(node);
   try {
    path = fs.readlinkSync(path);
    path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
    return path;
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  })
 },
 stream_ops: {
  open: (function(stream) {
   var path = NODEFS.realPath(stream.node);
   try {
    if (FS.isFile(stream.node.mode)) {
     stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  close: (function(stream) {
   try {
    if (FS.isFile(stream.node.mode) && stream.nfd) {
     fs.closeSync(stream.nfd);
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  read: (function(stream, buffer, offset, length, position) {
   if (length === 0) return 0;
   try {
    return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
   } catch (e) {
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  write: (function(stream, buffer, offset, length, position) {
   try {
    return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
   } catch (e) {
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  llseek: (function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     try {
      var stat = fs.fstatSync(stream.nfd);
      position += stat.size;
     } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
     }
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return position;
  })
 }
};
var WORKERFS = {
 DIR_MODE: 16895,
 FILE_MODE: 33279,
 reader: null,
 mount: (function(mount) {
  assert(ENVIRONMENT_IS_WORKER);
  if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync;
  var root = WORKERFS.createNode(null, "/", WORKERFS.DIR_MODE, 0);
  var createdParents = {};
  function ensureParent(path) {
   var parts = path.split("/");
   var parent = root;
   for (var i = 0; i < parts.length - 1; i++) {
    var curr = parts.slice(0, i + 1).join("/");
    if (!createdParents[curr]) {
     createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
    }
    parent = createdParents[curr];
   }
   return parent;
  }
  function base(path) {
   var parts = path.split("/");
   return parts[parts.length - 1];
  }
  Array.prototype.forEach.call(mount.opts["files"] || [], (function(file) {
   WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
  }));
  (mount.opts["blobs"] || []).forEach((function(obj) {
   WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
  }));
  (mount.opts["packages"] || []).forEach((function(pack) {
   pack["metadata"].files.forEach((function(file) {
    var name = file.filename.substr(1);
    WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack["blob"].slice(file.start, file.end));
   }));
  }));
  return root;
 }),
 createNode: (function(parent, name, mode, dev, contents, mtime) {
  var node = FS.createNode(parent, name, mode);
  node.mode = mode;
  node.node_ops = WORKERFS.node_ops;
  node.stream_ops = WORKERFS.stream_ops;
  node.timestamp = (mtime || new Date).getTime();
  assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
  if (mode === WORKERFS.FILE_MODE) {
   node.size = contents.size;
   node.contents = contents;
  } else {
   node.size = 4096;
   node.contents = {};
  }
  if (parent) {
   parent.contents[name] = node;
  }
  return node;
 }),
 node_ops: {
  getattr: (function(node) {
   return {
    dev: 1,
    ino: undefined,
    mode: node.mode,
    nlink: 1,
    uid: 0,
    gid: 0,
    rdev: undefined,
    size: node.size,
    atime: new Date(node.timestamp),
    mtime: new Date(node.timestamp),
    ctime: new Date(node.timestamp),
    blksize: 4096,
    blocks: Math.ceil(node.size / 4096)
   };
  }),
  setattr: (function(node, attr) {
   if (attr.mode !== undefined) {
    node.mode = attr.mode;
   }
   if (attr.timestamp !== undefined) {
    node.timestamp = attr.timestamp;
   }
  }),
  lookup: (function(parent, name) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }),
  mknod: (function(parent, name, mode, dev) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  rename: (function(oldNode, newDir, newName) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  unlink: (function(parent, name) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  rmdir: (function(parent, name) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  readdir: (function(node) {
   var entries = [ ".", ".." ];
   for (var key in node.contents) {
    if (!node.contents.hasOwnProperty(key)) {
     continue;
    }
    entries.push(key);
   }
   return entries;
  }),
  symlink: (function(parent, newName, oldPath) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  readlink: (function(node) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  })
 },
 stream_ops: {
  read: (function(stream, buffer, offset, length, position) {
   if (position >= stream.node.size) return 0;
   var chunk = stream.node.contents.slice(position, position + length);
   var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
   buffer.set(new Uint8Array(ab), offset);
   return chunk.size;
  }),
  write: (function(stream, buffer, offset, length, position) {
   throw new FS.ErrnoError(ERRNO_CODES.EIO);
  }),
  llseek: (function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     position += stream.node.size;
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return position;
  })
 }
};
STATICTOP += 16;
STATICTOP += 16;
STATICTOP += 16;
var FS = {
 root: null,
 mounts: [],
 devices: {},
 streams: [],
 nextInode: 1,
 nameTable: null,
 currentPath: "/",
 initialized: false,
 ignorePermissions: true,
 trackingDelegate: {},
 tracking: {
  openFlags: {
   READ: 1,
   WRITE: 2
  }
 },
 ErrnoError: null,
 genericErrors: {},
 filesystems: null,
 syncFSRequests: 0,
 handleFSError: (function(e) {
  if (!(e instanceof FS.ErrnoError)) throw e + " : " + stackTrace();
  return ___setErrNo(e.errno);
 }),
 lookupPath: (function(path, opts) {
  path = PATH.resolve(FS.cwd(), path);
  opts = opts || {};
  if (!path) return {
   path: "",
   node: null
  };
  var defaults = {
   follow_mount: true,
   recurse_count: 0
  };
  for (var key in defaults) {
   if (opts[key] === undefined) {
    opts[key] = defaults[key];
   }
  }
  if (opts.recurse_count > 8) {
   throw new FS.ErrnoError(40);
  }
  var parts = PATH.normalizeArray(path.split("/").filter((function(p) {
   return !!p;
  })), false);
  var current = FS.root;
  var current_path = "/";
  for (var i = 0; i < parts.length; i++) {
   var islast = i === parts.length - 1;
   if (islast && opts.parent) {
    break;
   }
   current = FS.lookupNode(current, parts[i]);
   current_path = PATH.join2(current_path, parts[i]);
   if (FS.isMountpoint(current)) {
    if (!islast || islast && opts.follow_mount) {
     current = current.mounted.root;
    }
   }
   if (!islast || opts.follow) {
    var count = 0;
    while (FS.isLink(current.mode)) {
     var link = FS.readlink(current_path);
     current_path = PATH.resolve(PATH.dirname(current_path), link);
     var lookup = FS.lookupPath(current_path, {
      recurse_count: opts.recurse_count
     });
     current = lookup.node;
     if (count++ > 40) {
      throw new FS.ErrnoError(40);
     }
    }
   }
  }
  return {
   path: current_path,
   node: current
  };
 }),
 getPath: (function(node) {
  var path;
  while (true) {
   if (FS.isRoot(node)) {
    var mount = node.mount.mountpoint;
    if (!path) return mount;
    return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
   }
   path = path ? node.name + "/" + path : node.name;
   node = node.parent;
  }
 }),
 hashName: (function(parentid, name) {
  var hash = 0;
  for (var i = 0; i < name.length; i++) {
   hash = (hash << 5) - hash + name.charCodeAt(i) | 0;
  }
  return (parentid + hash >>> 0) % FS.nameTable.length;
 }),
 hashAddNode: (function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  node.name_next = FS.nameTable[hash];
  FS.nameTable[hash] = node;
 }),
 hashRemoveNode: (function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  if (FS.nameTable[hash] === node) {
   FS.nameTable[hash] = node.name_next;
  } else {
   var current = FS.nameTable[hash];
   while (current) {
    if (current.name_next === node) {
     current.name_next = node.name_next;
     break;
    }
    current = current.name_next;
   }
  }
 }),
 lookupNode: (function(parent, name) {
  var err = FS.mayLookup(parent);
  if (err) {
   throw new FS.ErrnoError(err, parent);
  }
  var hash = FS.hashName(parent.id, name);
  for (var node = FS.nameTable[hash]; node; node = node.name_next) {
   var nodeName = node.name;
   if (node.parent.id === parent.id && nodeName === name) {
    return node;
   }
  }
  return FS.lookup(parent, name);
 }),
 createNode: (function(parent, name, mode, rdev) {
  if (!FS.FSNode) {
   FS.FSNode = (function(parent, name, mode, rdev) {
    if (!parent) {
     parent = this;
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
   });
   FS.FSNode.prototype = {};
   var readMode = 292 | 73;
   var writeMode = 146;
   Object.defineProperties(FS.FSNode.prototype, {
    read: {
     get: (function() {
      return (this.mode & readMode) === readMode;
     }),
     set: (function(val) {
      val ? this.mode |= readMode : this.mode &= ~readMode;
     })
    },
    write: {
     get: (function() {
      return (this.mode & writeMode) === writeMode;
     }),
     set: (function(val) {
      val ? this.mode |= writeMode : this.mode &= ~writeMode;
     })
    },
    isFolder: {
     get: (function() {
      return FS.isDir(this.mode);
     })
    },
    isDevice: {
     get: (function() {
      return FS.isChrdev(this.mode);
     })
    }
   });
  }
  var node = new FS.FSNode(parent, name, mode, rdev);
  FS.hashAddNode(node);
  return node;
 }),
 destroyNode: (function(node) {
  FS.hashRemoveNode(node);
 }),
 isRoot: (function(node) {
  return node === node.parent;
 }),
 isMountpoint: (function(node) {
  return !!node.mounted;
 }),
 isFile: (function(mode) {
  return (mode & 61440) === 32768;
 }),
 isDir: (function(mode) {
  return (mode & 61440) === 16384;
 }),
 isLink: (function(mode) {
  return (mode & 61440) === 40960;
 }),
 isChrdev: (function(mode) {
  return (mode & 61440) === 8192;
 }),
 isBlkdev: (function(mode) {
  return (mode & 61440) === 24576;
 }),
 isFIFO: (function(mode) {
  return (mode & 61440) === 4096;
 }),
 isSocket: (function(mode) {
  return (mode & 49152) === 49152;
 }),
 flagModes: {
  "r": 0,
  "rs": 1052672,
  "r+": 2,
  "w": 577,
  "wx": 705,
  "xw": 705,
  "w+": 578,
  "wx+": 706,
  "xw+": 706,
  "a": 1089,
  "ax": 1217,
  "xa": 1217,
  "a+": 1090,
  "ax+": 1218,
  "xa+": 1218
 },
 modeStringToFlags: (function(str) {
  var flags = FS.flagModes[str];
  if (typeof flags === "undefined") {
   throw new Error("Unknown file open mode: " + str);
  }
  return flags;
 }),
 flagsToPermissionString: (function(flag) {
  var perms = [ "r", "w", "rw" ][flag & 3];
  if (flag & 512) {
   perms += "w";
  }
  return perms;
 }),
 nodePermissions: (function(node, perms) {
  if (FS.ignorePermissions) {
   return 0;
  }
  if (perms.indexOf("r") !== -1 && !(node.mode & 292)) {
   return 13;
  } else if (perms.indexOf("w") !== -1 && !(node.mode & 146)) {
   return 13;
  } else if (perms.indexOf("x") !== -1 && !(node.mode & 73)) {
   return 13;
  }
  return 0;
 }),
 mayLookup: (function(dir) {
  var err = FS.nodePermissions(dir, "x");
  if (err) return err;
  if (!dir.node_ops.lookup) return 13;
  return 0;
 }),
 mayCreate: (function(dir, name) {
  try {
   var node = FS.lookupNode(dir, name);
   return 17;
  } catch (e) {}
  return FS.nodePermissions(dir, "wx");
 }),
 mayDelete: (function(dir, name, isdir) {
  var node;
  try {
   node = FS.lookupNode(dir, name);
  } catch (e) {
   return e.errno;
  }
  var err = FS.nodePermissions(dir, "wx");
  if (err) {
   return err;
  }
  if (isdir) {
   if (!FS.isDir(node.mode)) {
    return 20;
   }
   if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
    return 16;
   }
  } else {
   if (FS.isDir(node.mode)) {
    return 21;
   }
  }
  return 0;
 }),
 mayOpen: (function(node, flags) {
  if (!node) {
   return 2;
  }
  if (FS.isLink(node.mode)) {
   return 40;
  } else if (FS.isDir(node.mode)) {
   if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) {
    return 21;
   }
  }
  return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
 }),
 MAX_OPEN_FDS: 4096,
 nextfd: (function(fd_start, fd_end) {
  fd_start = fd_start || 0;
  fd_end = fd_end || FS.MAX_OPEN_FDS;
  for (var fd = fd_start; fd <= fd_end; fd++) {
   if (!FS.streams[fd]) {
    return fd;
   }
  }
  throw new FS.ErrnoError(24);
 }),
 getStream: (function(fd) {
  return FS.streams[fd];
 }),
 createStream: (function(stream, fd_start, fd_end) {
  if (!FS.FSStream) {
   FS.FSStream = (function() {});
   FS.FSStream.prototype = {};
   Object.defineProperties(FS.FSStream.prototype, {
    object: {
     get: (function() {
      return this.node;
     }),
     set: (function(val) {
      this.node = val;
     })
    },
    isRead: {
     get: (function() {
      return (this.flags & 2097155) !== 1;
     })
    },
    isWrite: {
     get: (function() {
      return (this.flags & 2097155) !== 0;
     })
    },
    isAppend: {
     get: (function() {
      return this.flags & 1024;
     })
    }
   });
  }
  var newStream = new FS.FSStream;
  for (var p in stream) {
   newStream[p] = stream[p];
  }
  stream = newStream;
  var fd = FS.nextfd(fd_start, fd_end);
  stream.fd = fd;
  FS.streams[fd] = stream;
  return stream;
 }),
 closeStream: (function(fd) {
  FS.streams[fd] = null;
 }),
 chrdev_stream_ops: {
  open: (function(stream) {
   var device = FS.getDevice(stream.node.rdev);
   stream.stream_ops = device.stream_ops;
   if (stream.stream_ops.open) {
    stream.stream_ops.open(stream);
   }
  }),
  llseek: (function() {
   throw new FS.ErrnoError(29);
  })
 },
 major: (function(dev) {
  return dev >> 8;
 }),
 minor: (function(dev) {
  return dev & 255;
 }),
 makedev: (function(ma, mi) {
  return ma << 8 | mi;
 }),
 registerDevice: (function(dev, ops) {
  FS.devices[dev] = {
   stream_ops: ops
  };
 }),
 getDevice: (function(dev) {
  return FS.devices[dev];
 }),
 getMounts: (function(mount) {
  var mounts = [];
  var check = [ mount ];
  while (check.length) {
   var m = check.pop();
   mounts.push(m);
   check.push.apply(check, m.mounts);
  }
  return mounts;
 }),
 syncfs: (function(populate, callback) {
  if (typeof populate === "function") {
   callback = populate;
   populate = false;
  }
  FS.syncFSRequests++;
  if (FS.syncFSRequests > 1) {
   console.log("warning: " + FS.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work");
  }
  var mounts = FS.getMounts(FS.root.mount);
  var completed = 0;
  function doCallback(err) {
   assert(FS.syncFSRequests > 0);
   FS.syncFSRequests--;
   return callback(err);
  }
  function done(err) {
   if (err) {
    if (!done.errored) {
     done.errored = true;
     return doCallback(err);
    }
    return;
   }
   if (++completed >= mounts.length) {
    doCallback(null);
   }
  }
  mounts.forEach((function(mount) {
   if (!mount.type.syncfs) {
    return done(null);
   }
   mount.type.syncfs(mount, populate, done);
  }));
 }),
 mount: (function(type, opts, mountpoint) {
  var root = mountpoint === "/";
  var pseudo = !mountpoint;
  var node;
  if (root && FS.root) {
   throw new FS.ErrnoError(16);
  } else if (!root && !pseudo) {
   var lookup = FS.lookupPath(mountpoint, {
    follow_mount: false
   });
   mountpoint = lookup.path;
   node = lookup.node;
   if (FS.isMountpoint(node)) {
    throw new FS.ErrnoError(16);
   }
   if (!FS.isDir(node.mode)) {
    throw new FS.ErrnoError(20);
   }
  }
  var mount = {
   type: type,
   opts: opts,
   mountpoint: mountpoint,
   mounts: []
  };
  var mountRoot = type.mount(mount);
  mountRoot.mount = mount;
  mount.root = mountRoot;
  if (root) {
   FS.root = mountRoot;
  } else if (node) {
   node.mounted = mount;
   if (node.mount) {
    node.mount.mounts.push(mount);
   }
  }
  return mountRoot;
 }),
 unmount: (function(mountpoint) {
  var lookup = FS.lookupPath(mountpoint, {
   follow_mount: false
  });
  if (!FS.isMountpoint(lookup.node)) {
   throw new FS.ErrnoError(22);
  }
  var node = lookup.node;
  var mount = node.mounted;
  var mounts = FS.getMounts(mount);
  Object.keys(FS.nameTable).forEach((function(hash) {
   var current = FS.nameTable[hash];
   while (current) {
    var next = current.name_next;
    if (mounts.indexOf(current.mount) !== -1) {
     FS.destroyNode(current);
    }
    current = next;
   }
  }));
  node.mounted = null;
  var idx = node.mount.mounts.indexOf(mount);
  assert(idx !== -1);
  node.mount.mounts.splice(idx, 1);
 }),
 lookup: (function(parent, name) {
  return parent.node_ops.lookup(parent, name);
 }),
 mknod: (function(path, mode, dev) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  if (!name || name === "." || name === "..") {
   throw new FS.ErrnoError(22);
  }
  var err = FS.mayCreate(parent, name);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.mknod) {
   throw new FS.ErrnoError(1);
  }
  return parent.node_ops.mknod(parent, name, mode, dev);
 }),
 create: (function(path, mode) {
  mode = mode !== undefined ? mode : 438;
  mode &= 4095;
  mode |= 32768;
  return FS.mknod(path, mode, 0);
 }),
 mkdir: (function(path, mode) {
  mode = mode !== undefined ? mode : 511;
  mode &= 511 | 512;
  mode |= 16384;
  return FS.mknod(path, mode, 0);
 }),
 mkdirTree: (function(path, mode) {
  var dirs = path.split("/");
  var d = "";
  for (var i = 0; i < dirs.length; ++i) {
   if (!dirs[i]) continue;
   d += "/" + dirs[i];
   try {
    FS.mkdir(d, mode);
   } catch (e) {
    if (e.errno != 17) throw e;
   }
  }
 }),
 mkdev: (function(path, mode, dev) {
  if (typeof dev === "undefined") {
   dev = mode;
   mode = 438;
  }
  mode |= 8192;
  return FS.mknod(path, mode, dev);
 }),
 symlink: (function(oldpath, newpath) {
  if (!PATH.resolve(oldpath)) {
   throw new FS.ErrnoError(2);
  }
  var lookup = FS.lookupPath(newpath, {
   parent: true
  });
  var parent = lookup.node;
  if (!parent) {
   throw new FS.ErrnoError(2);
  }
  var newname = PATH.basename(newpath);
  var err = FS.mayCreate(parent, newname);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.symlink) {
   throw new FS.ErrnoError(1);
  }
  return parent.node_ops.symlink(parent, newname, oldpath);
 }),
 rename: (function(old_path, new_path) {
  var old_dirname = PATH.dirname(old_path);
  var new_dirname = PATH.dirname(new_path);
  var old_name = PATH.basename(old_path);
  var new_name = PATH.basename(new_path);
  var lookup, old_dir, new_dir;
  try {
   lookup = FS.lookupPath(old_path, {
    parent: true
   });
   old_dir = lookup.node;
   lookup = FS.lookupPath(new_path, {
    parent: true
   });
   new_dir = lookup.node;
  } catch (e) {
   throw new FS.ErrnoError(16);
  }
  if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
  if (old_dir.mount !== new_dir.mount) {
   throw new FS.ErrnoError(18);
  }
  var old_node = FS.lookupNode(old_dir, old_name);
  var relative = PATH.relative(old_path, new_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(22);
  }
  relative = PATH.relative(new_path, old_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(39);
  }
  var new_node;
  try {
   new_node = FS.lookupNode(new_dir, new_name);
  } catch (e) {}
  if (old_node === new_node) {
   return;
  }
  var isdir = FS.isDir(old_node.mode);
  var err = FS.mayDelete(old_dir, old_name, isdir);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  err = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!old_dir.node_ops.rename) {
   throw new FS.ErrnoError(1);
  }
  if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
   throw new FS.ErrnoError(16);
  }
  if (new_dir !== old_dir) {
   err = FS.nodePermissions(old_dir, "w");
   if (err) {
    throw new FS.ErrnoError(err);
   }
  }
  try {
   if (FS.trackingDelegate["willMovePath"]) {
    FS.trackingDelegate["willMovePath"](old_path, new_path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
  }
  FS.hashRemoveNode(old_node);
  try {
   old_dir.node_ops.rename(old_node, new_dir, new_name);
  } catch (e) {
   throw e;
  } finally {
   FS.hashAddNode(old_node);
  }
  try {
   if (FS.trackingDelegate["onMovePath"]) FS.trackingDelegate["onMovePath"](old_path, new_path);
  } catch (e) {
   console.log("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
  }
 }),
 rmdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var err = FS.mayDelete(parent, name, true);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.rmdir) {
   throw new FS.ErrnoError(1);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(16);
  }
  try {
   if (FS.trackingDelegate["willDeletePath"]) {
    FS.trackingDelegate["willDeletePath"](path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
  }
  parent.node_ops.rmdir(parent, name);
  FS.destroyNode(node);
  try {
   if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
  } catch (e) {
   console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
  }
 }),
 readdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  if (!node.node_ops.readdir) {
   throw new FS.ErrnoError(20);
  }
  return node.node_ops.readdir(node);
 }),
 unlink: (function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var err = FS.mayDelete(parent, name, false);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.unlink) {
   throw new FS.ErrnoError(1);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(16);
  }
  try {
   if (FS.trackingDelegate["willDeletePath"]) {
    FS.trackingDelegate["willDeletePath"](path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
  }
  parent.node_ops.unlink(parent, name);
  FS.destroyNode(node);
  try {
   if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
  } catch (e) {
   console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
  }
 }),
 readlink: (function(path) {
  var lookup = FS.lookupPath(path);
  var link = lookup.node;
  if (!link) {
   throw new FS.ErrnoError(2);
  }
  if (!link.node_ops.readlink) {
   throw new FS.ErrnoError(22);
  }
  return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
 }),
 stat: (function(path, dontFollow) {
  var lookup = FS.lookupPath(path, {
   follow: !dontFollow
  });
  var node = lookup.node;
  if (!node) {
   throw new FS.ErrnoError(2);
  }
  if (!node.node_ops.getattr) {
   throw new FS.ErrnoError(1);
  }
  return node.node_ops.getattr(node);
 }),
 lstat: (function(path) {
  return FS.stat(path, true);
 }),
 chmod: (function(path, mode, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(1);
  }
  node.node_ops.setattr(node, {
   mode: mode & 4095 | node.mode & ~4095,
   timestamp: Date.now()
  });
 }),
 lchmod: (function(path, mode) {
  FS.chmod(path, mode, true);
 }),
 fchmod: (function(fd, mode) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(9);
  }
  FS.chmod(stream.node, mode);
 }),
 chown: (function(path, uid, gid, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(1);
  }
  node.node_ops.setattr(node, {
   timestamp: Date.now()
  });
 }),
 lchown: (function(path, uid, gid) {
  FS.chown(path, uid, gid, true);
 }),
 fchown: (function(fd, uid, gid) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(9);
  }
  FS.chown(stream.node, uid, gid);
 }),
 truncate: (function(path, len) {
  if (len < 0) {
   throw new FS.ErrnoError(22);
  }
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: true
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(1);
  }
  if (FS.isDir(node.mode)) {
   throw new FS.ErrnoError(21);
  }
  if (!FS.isFile(node.mode)) {
   throw new FS.ErrnoError(22);
  }
  var err = FS.nodePermissions(node, "w");
  if (err) {
   throw new FS.ErrnoError(err);
  }
  node.node_ops.setattr(node, {
   size: len,
   timestamp: Date.now()
  });
 }),
 ftruncate: (function(fd, len) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(9);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(22);
  }
  FS.truncate(stream.node, len);
 }),
 utime: (function(path, atime, mtime) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  node.node_ops.setattr(node, {
   timestamp: Math.max(atime, mtime)
  });
 }),
 open: (function(path, flags, mode, fd_start, fd_end) {
  if (path === "") {
   throw new FS.ErrnoError(2);
  }
  flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
  mode = typeof mode === "undefined" ? 438 : mode;
  if (flags & 64) {
   mode = mode & 4095 | 32768;
  } else {
   mode = 0;
  }
  var node;
  if (typeof path === "object") {
   node = path;
  } else {
   path = PATH.normalize(path);
   try {
    var lookup = FS.lookupPath(path, {
     follow: !(flags & 131072)
    });
    node = lookup.node;
   } catch (e) {}
  }
  var created = false;
  if (flags & 64) {
   if (node) {
    if (flags & 128) {
     throw new FS.ErrnoError(17);
    }
   } else {
    node = FS.mknod(path, mode, 0);
    created = true;
   }
  }
  if (!node) {
   throw new FS.ErrnoError(2);
  }
  if (FS.isChrdev(node.mode)) {
   flags &= ~512;
  }
  if (flags & 65536 && !FS.isDir(node.mode)) {
   throw new FS.ErrnoError(20);
  }
  if (!created) {
   var err = FS.mayOpen(node, flags);
   if (err) {
    throw new FS.ErrnoError(err);
   }
  }
  if (flags & 512) {
   FS.truncate(node, 0);
  }
  flags &= ~(128 | 512);
  var stream = FS.createStream({
   node: node,
   path: FS.getPath(node),
   flags: flags,
   seekable: true,
   position: 0,
   stream_ops: node.stream_ops,
   ungotten: [],
   error: false
  }, fd_start, fd_end);
  if (stream.stream_ops.open) {
   stream.stream_ops.open(stream);
  }
  if (Module["logReadFiles"] && !(flags & 1)) {
   if (!FS.readFiles) FS.readFiles = {};
   if (!(path in FS.readFiles)) {
    FS.readFiles[path] = 1;
    console.log("FS.trackingDelegate error on read file: " + path);
   }
  }
  try {
   if (FS.trackingDelegate["onOpenFile"]) {
    var trackingFlags = 0;
    if ((flags & 2097155) !== 1) {
     trackingFlags |= FS.tracking.openFlags.READ;
    }
    if ((flags & 2097155) !== 0) {
     trackingFlags |= FS.tracking.openFlags.WRITE;
    }
    FS.trackingDelegate["onOpenFile"](path, trackingFlags);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
  }
  return stream;
 }),
 close: (function(stream) {
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(9);
  }
  if (stream.getdents) stream.getdents = null;
  try {
   if (stream.stream_ops.close) {
    stream.stream_ops.close(stream);
   }
  } catch (e) {
   throw e;
  } finally {
   FS.closeStream(stream.fd);
  }
  stream.fd = null;
 }),
 isClosed: (function(stream) {
  return stream.fd === null;
 }),
 llseek: (function(stream, offset, whence) {
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(9);
  }
  if (!stream.seekable || !stream.stream_ops.llseek) {
   throw new FS.ErrnoError(29);
  }
  stream.position = stream.stream_ops.llseek(stream, offset, whence);
  stream.ungotten = [];
  return stream.position;
 }),
 read: (function(stream, buffer, offset, length, position) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(22);
  }
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(9);
  }
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(9);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(21);
  }
  if (!stream.stream_ops.read) {
   throw new FS.ErrnoError(22);
  }
  var seeking = typeof position !== "undefined";
  if (!seeking) {
   position = stream.position;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(29);
  }
  var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
  if (!seeking) stream.position += bytesRead;
  return bytesRead;
 }),
 write: (function(stream, buffer, offset, length, position, canOwn) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(22);
  }
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(9);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(9);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(21);
  }
  if (!stream.stream_ops.write) {
   throw new FS.ErrnoError(22);
  }
  if (stream.flags & 1024) {
   FS.llseek(stream, 0, 2);
  }
  var seeking = typeof position !== "undefined";
  if (!seeking) {
   position = stream.position;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(29);
  }
  var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
  if (!seeking) stream.position += bytesWritten;
  try {
   if (stream.path && FS.trackingDelegate["onWriteToFile"]) FS.trackingDelegate["onWriteToFile"](stream.path);
  } catch (e) {
   console.log("FS.trackingDelegate['onWriteToFile']('" + path + "') threw an exception: " + e.message);
  }
  return bytesWritten;
 }),
 allocate: (function(stream, offset, length) {
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(9);
  }
  if (offset < 0 || length <= 0) {
   throw new FS.ErrnoError(22);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(9);
  }
  if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(19);
  }
  if (!stream.stream_ops.allocate) {
   throw new FS.ErrnoError(95);
  }
  stream.stream_ops.allocate(stream, offset, length);
 }),
 mmap: (function(stream, buffer, offset, length, position, prot, flags) {
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(13);
  }
  if (!stream.stream_ops.mmap) {
   throw new FS.ErrnoError(19);
  }
  return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
 }),
 msync: (function(stream, buffer, offset, length, mmapFlags) {
  if (!stream || !stream.stream_ops.msync) {
   return 0;
  }
  return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
 }),
 munmap: (function(stream) {
  return 0;
 }),
 ioctl: (function(stream, cmd, arg) {
  if (!stream.stream_ops.ioctl) {
   throw new FS.ErrnoError(25);
  }
  return stream.stream_ops.ioctl(stream, cmd, arg);
 }),
 readFile: (function(path, opts) {
  opts = opts || {};
  opts.flags = opts.flags || "r";
  opts.encoding = opts.encoding || "binary";
  if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
   throw new Error('Invalid encoding type "' + opts.encoding + '"');
  }
  var ret;
  var stream = FS.open(path, opts.flags);
  var stat = FS.stat(path);
  var length = stat.size;
  var buf = new Uint8Array(length);
  FS.read(stream, buf, 0, length, 0);
  if (opts.encoding === "utf8") {
   ret = UTF8ArrayToString(buf, 0);
  } else if (opts.encoding === "binary") {
   ret = buf;
  }
  FS.close(stream);
  return ret;
 }),
 writeFile: (function(path, data, opts) {
  opts = opts || {};
  opts.flags = opts.flags || "w";
  var stream = FS.open(path, opts.flags, opts.mode);
  if (typeof data === "string") {
   var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
   var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
   FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
  } else if (ArrayBuffer.isView(data)) {
   FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
  } else {
   throw new Error("Unsupported data type");
  }
  FS.close(stream);
 }),
 cwd: (function() {
  return FS.currentPath;
 }),
 chdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  if (lookup.node === null) {
   throw new FS.ErrnoError(2);
  }
  if (!FS.isDir(lookup.node.mode)) {
   throw new FS.ErrnoError(20);
  }
  var err = FS.nodePermissions(lookup.node, "x");
  if (err) {
   throw new FS.ErrnoError(err);
  }
  FS.currentPath = lookup.path;
 }),
 createDefaultDirectories: (function() {
  FS.mkdir("/tmp");
  FS.mkdir("/home");
  FS.mkdir("/home/web_user");
 }),
 createDefaultDevices: (function() {
  FS.mkdir("/dev");
  FS.registerDevice(FS.makedev(1, 3), {
   read: (function() {
    return 0;
   }),
   write: (function(stream, buffer, offset, length, pos) {
    return length;
   })
  });
  FS.mkdev("/dev/null", FS.makedev(1, 3));
  TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
  TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
  FS.mkdev("/dev/tty", FS.makedev(5, 0));
  FS.mkdev("/dev/tty1", FS.makedev(6, 0));
  var random_device;
  if (typeof crypto !== "undefined") {
   var randomBuffer = new Uint8Array(1);
   random_device = (function() {
    crypto.getRandomValues(randomBuffer);
    return randomBuffer[0];
   });
  } else if (ENVIRONMENT_IS_NODE) {
   random_device = (function() {
    return require("crypto")["randomBytes"](1)[0];
   });
  } else {
   random_device = (function() {
    abort("random_device");
   });
  }
  FS.createDevice("/dev", "random", random_device);
  FS.createDevice("/dev", "urandom", random_device);
  FS.mkdir("/dev/shm");
  FS.mkdir("/dev/shm/tmp");
 }),
 createSpecialDirectories: (function() {
  FS.mkdir("/proc");
  FS.mkdir("/proc/self");
  FS.mkdir("/proc/self/fd");
  FS.mount({
   mount: (function() {
    var node = FS.createNode("/proc/self", "fd", 16384 | 511, 73);
    node.node_ops = {
     lookup: (function(parent, name) {
      var fd = +name;
      var stream = FS.getStream(fd);
      if (!stream) throw new FS.ErrnoError(9);
      var ret = {
       parent: null,
       mount: {
        mountpoint: "fake"
       },
       node_ops: {
        readlink: (function() {
         return stream.path;
        })
       }
      };
      ret.parent = ret;
      return ret;
     })
    };
    return node;
   })
  }, {}, "/proc/self/fd");
 }),
 createStandardStreams: (function() {
  if (Module["stdin"]) {
   FS.createDevice("/dev", "stdin", Module["stdin"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdin");
  }
  if (Module["stdout"]) {
   FS.createDevice("/dev", "stdout", null, Module["stdout"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdout");
  }
  if (Module["stderr"]) {
   FS.createDevice("/dev", "stderr", null, Module["stderr"]);
  } else {
   FS.symlink("/dev/tty1", "/dev/stderr");
  }
  var stdin = FS.open("/dev/stdin", "r");
  assert(stdin.fd === 0, "invalid handle for stdin (" + stdin.fd + ")");
  var stdout = FS.open("/dev/stdout", "w");
  assert(stdout.fd === 1, "invalid handle for stdout (" + stdout.fd + ")");
  var stderr = FS.open("/dev/stderr", "w");
  assert(stderr.fd === 2, "invalid handle for stderr (" + stderr.fd + ")");
 }),
 ensureErrnoError: (function() {
  if (FS.ErrnoError) return;
  FS.ErrnoError = function ErrnoError(errno, node) {
   this.node = node;
   this.setErrno = (function(errno) {
    this.errno = errno;
   });
   this.setErrno(errno);
   this.message = "FS error";
   if (this.stack) Object.defineProperty(this, "stack", {
    value: (new Error).stack,
    writable: true
   });
  };
  FS.ErrnoError.prototype = new Error;
  FS.ErrnoError.prototype.constructor = FS.ErrnoError;
  [ 2 ].forEach((function(code) {
   FS.genericErrors[code] = new FS.ErrnoError(code);
   FS.genericErrors[code].stack = "<generic error, no stack>";
  }));
 }),
 staticInit: (function() {
  FS.ensureErrnoError();
  FS.nameTable = new Array(4096);
  FS.mount(MEMFS, {}, "/");
  FS.createDefaultDirectories();
  FS.createDefaultDevices();
  FS.createSpecialDirectories();
  FS.filesystems = {
   "MEMFS": MEMFS,
   "IDBFS": IDBFS,
   "NODEFS": NODEFS,
   "WORKERFS": WORKERFS
  };
 }),
 init: (function(input, output, error) {
  assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
  FS.init.initialized = true;
  FS.ensureErrnoError();
  Module["stdin"] = input || Module["stdin"];
  Module["stdout"] = output || Module["stdout"];
  Module["stderr"] = error || Module["stderr"];
  FS.createStandardStreams();
 }),
 quit: (function() {
  FS.init.initialized = false;
  var fflush = Module["_fflush"];
  if (fflush) fflush(0);
  for (var i = 0; i < FS.streams.length; i++) {
   var stream = FS.streams[i];
   if (!stream) {
    continue;
   }
   FS.close(stream);
  }
 }),
 getMode: (function(canRead, canWrite) {
  var mode = 0;
  if (canRead) mode |= 292 | 73;
  if (canWrite) mode |= 146;
  return mode;
 }),
 joinPath: (function(parts, forceRelative) {
  var path = PATH.join.apply(null, parts);
  if (forceRelative && path[0] == "/") path = path.substr(1);
  return path;
 }),
 absolutePath: (function(relative, base) {
  return PATH.resolve(base, relative);
 }),
 standardizePath: (function(path) {
  return PATH.normalize(path);
 }),
 findObject: (function(path, dontResolveLastLink) {
  var ret = FS.analyzePath(path, dontResolveLastLink);
  if (ret.exists) {
   return ret.object;
  } else {
   ___setErrNo(ret.error);
   return null;
  }
 }),
 analyzePath: (function(path, dontResolveLastLink) {
  try {
   var lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   path = lookup.path;
  } catch (e) {}
  var ret = {
   isRoot: false,
   exists: false,
   error: 0,
   name: null,
   path: null,
   object: null,
   parentExists: false,
   parentPath: null,
   parentObject: null
  };
  try {
   var lookup = FS.lookupPath(path, {
    parent: true
   });
   ret.parentExists = true;
   ret.parentPath = lookup.path;
   ret.parentObject = lookup.node;
   ret.name = PATH.basename(path);
   lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   ret.exists = true;
   ret.path = lookup.path;
   ret.object = lookup.node;
   ret.name = lookup.node.name;
   ret.isRoot = lookup.path === "/";
  } catch (e) {
   ret.error = e.errno;
  }
  return ret;
 }),
 createFolder: (function(parent, name, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(canRead, canWrite);
  return FS.mkdir(path, mode);
 }),
 createPath: (function(parent, path, canRead, canWrite) {
  parent = typeof parent === "string" ? parent : FS.getPath(parent);
  var parts = path.split("/").reverse();
  while (parts.length) {
   var part = parts.pop();
   if (!part) continue;
   var current = PATH.join2(parent, part);
   try {
    FS.mkdir(current);
   } catch (e) {}
   parent = current;
  }
  return current;
 }),
 createFile: (function(parent, name, properties, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(canRead, canWrite);
  return FS.create(path, mode);
 }),
 createDataFile: (function(parent, name, data, canRead, canWrite, canOwn) {
  var path = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent;
  var mode = FS.getMode(canRead, canWrite);
  var node = FS.create(path, mode);
  if (data) {
   if (typeof data === "string") {
    var arr = new Array(data.length);
    for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
    data = arr;
   }
   FS.chmod(node, mode | 146);
   var stream = FS.open(node, "w");
   FS.write(stream, data, 0, data.length, 0, canOwn);
   FS.close(stream);
   FS.chmod(node, mode);
  }
  return node;
 }),
 createDevice: (function(parent, name, input, output) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(!!input, !!output);
  if (!FS.createDevice.major) FS.createDevice.major = 64;
  var dev = FS.makedev(FS.createDevice.major++, 0);
  FS.registerDevice(dev, {
   open: (function(stream) {
    stream.seekable = false;
   }),
   close: (function(stream) {
    if (output && output.buffer && output.buffer.length) {
     output(10);
    }
   }),
   read: (function(stream, buffer, offset, length, pos) {
    var bytesRead = 0;
    for (var i = 0; i < length; i++) {
     var result;
     try {
      result = input();
     } catch (e) {
      throw new FS.ErrnoError(5);
     }
     if (result === undefined && bytesRead === 0) {
      throw new FS.ErrnoError(11);
     }
     if (result === null || result === undefined) break;
     bytesRead++;
     buffer[offset + i] = result;
    }
    if (bytesRead) {
     stream.node.timestamp = Date.now();
    }
    return bytesRead;
   }),
   write: (function(stream, buffer, offset, length, pos) {
    for (var i = 0; i < length; i++) {
     try {
      output(buffer[offset + i]);
     } catch (e) {
      throw new FS.ErrnoError(5);
     }
    }
    if (length) {
     stream.node.timestamp = Date.now();
    }
    return i;
   })
  });
  return FS.mkdev(path, mode, dev);
 }),
 createLink: (function(parent, name, target, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  return FS.symlink(target, path);
 }),
 forceLoadFile: (function(obj) {
  if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
  var success = true;
  if (typeof XMLHttpRequest !== "undefined") {
   throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
  } else if (Module["read"]) {
   try {
    obj.contents = intArrayFromString(Module["read"](obj.url), true);
    obj.usedBytes = obj.contents.length;
   } catch (e) {
    success = false;
   }
  } else {
   throw new Error("Cannot load without read() or XMLHttpRequest.");
  }
  if (!success) ___setErrNo(5);
  return success;
 }),
 createLazyFile: (function(parent, name, url, canRead, canWrite) {
  function LazyUint8Array() {
   this.lengthKnown = false;
   this.chunks = [];
  }
  LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
   if (idx > this.length - 1 || idx < 0) {
    return undefined;
   }
   var chunkOffset = idx % this.chunkSize;
   var chunkNum = idx / this.chunkSize | 0;
   return this.getter(chunkNum)[chunkOffset];
  };
  LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
   this.getter = getter;
  };
  LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
   var xhr = new XMLHttpRequest;
   xhr.open("HEAD", url, false);
   xhr.send(null);
   if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
   var datalength = Number(xhr.getResponseHeader("Content-length"));
   var header;
   var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
   var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
   var chunkSize = 1024 * 1024;
   if (!hasByteServing) chunkSize = datalength;
   var doXHR = (function(from, to) {
    if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
    if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");
    var xhr = new XMLHttpRequest;
    xhr.open("GET", url, false);
    if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    if (typeof Uint8Array != "undefined") xhr.responseType = "arraybuffer";
    if (xhr.overrideMimeType) {
     xhr.overrideMimeType("text/plain; charset=x-user-defined");
    }
    xhr.send(null);
    if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
    if (xhr.response !== undefined) {
     return new Uint8Array(xhr.response || []);
    } else {
     return intArrayFromString(xhr.responseText || "", true);
    }
   });
   var lazyArray = this;
   lazyArray.setDataGetter((function(chunkNum) {
    var start = chunkNum * chunkSize;
    var end = (chunkNum + 1) * chunkSize - 1;
    end = Math.min(end, datalength - 1);
    if (typeof lazyArray.chunks[chunkNum] === "undefined") {
     lazyArray.chunks[chunkNum] = doXHR(start, end);
    }
    if (typeof lazyArray.chunks[chunkNum] === "undefined") throw new Error("doXHR failed!");
    return lazyArray.chunks[chunkNum];
   }));
   if (usesGzip || !datalength) {
    chunkSize = datalength = 1;
    datalength = this.getter(0).length;
    chunkSize = datalength;
    console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
   }
   this._length = datalength;
   this._chunkSize = chunkSize;
   this.lengthKnown = true;
  };
  if (typeof XMLHttpRequest !== "undefined") {
   if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
   var lazyArray = new LazyUint8Array;
   Object.defineProperties(lazyArray, {
    length: {
     get: (function() {
      if (!this.lengthKnown) {
       this.cacheLength();
      }
      return this._length;
     })
    },
    chunkSize: {
     get: (function() {
      if (!this.lengthKnown) {
       this.cacheLength();
      }
      return this._chunkSize;
     })
    }
   });
   var properties = {
    isDevice: false,
    contents: lazyArray
   };
  } else {
   var properties = {
    isDevice: false,
    url: url
   };
  }
  var node = FS.createFile(parent, name, properties, canRead, canWrite);
  if (properties.contents) {
   node.contents = properties.contents;
  } else if (properties.url) {
   node.contents = null;
   node.url = properties.url;
  }
  Object.defineProperties(node, {
   usedBytes: {
    get: (function() {
     return this.contents.length;
    })
   }
  });
  var stream_ops = {};
  var keys = Object.keys(node.stream_ops);
  keys.forEach((function(key) {
   var fn = node.stream_ops[key];
   stream_ops[key] = function forceLoadLazyFile() {
    if (!FS.forceLoadFile(node)) {
     throw new FS.ErrnoError(5);
    }
    return fn.apply(null, arguments);
   };
  }));
  stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
   if (!FS.forceLoadFile(node)) {
    throw new FS.ErrnoError(5);
   }
   var contents = stream.node.contents;
   if (position >= contents.length) return 0;
   var size = Math.min(contents.length - position, length);
   assert(size >= 0);
   if (contents.slice) {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents[position + i];
    }
   } else {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents.get(position + i);
    }
   }
   return size;
  };
  node.stream_ops = stream_ops;
  return node;
 }),
 createPreloadedFile: (function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
  Browser.init();
  var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
  var dep = getUniqueRunDependency("cp " + fullname);
  function processData(byteArray) {
   function finish(byteArray) {
    if (preFinish) preFinish();
    if (!dontCreateFile) {
     FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
    }
    if (onload) onload();
    removeRunDependency(dep);
   }
   var handled = false;
   Module["preloadPlugins"].forEach((function(plugin) {
    if (handled) return;
    if (plugin["canHandle"](fullname)) {
     plugin["handle"](byteArray, fullname, finish, (function() {
      if (onerror) onerror();
      removeRunDependency(dep);
     }));
     handled = true;
    }
   }));
   if (!handled) finish(byteArray);
  }
  addRunDependency(dep);
  if (typeof url == "string") {
   Browser.asyncLoad(url, (function(byteArray) {
    processData(byteArray);
   }), onerror);
  } else {
   processData(url);
  }
 }),
 indexedDB: (function() {
  return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
 }),
 DB_NAME: (function() {
  return "EM_FS_" + window.location.pathname;
 }),
 DB_VERSION: 20,
 DB_STORE_NAME: "FILE_DATA",
 saveFilesToDB: (function(paths, onload, onerror) {
  onload = onload || (function() {});
  onerror = onerror || (function() {});
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
   console.log("creating db");
   var db = openRequest.result;
   db.createObjectStore(FS.DB_STORE_NAME);
  };
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   var transaction = db.transaction([ FS.DB_STORE_NAME ], "readwrite");
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach((function(path) {
    var putRequest = files.put(FS.analyzePath(path).object.contents, path);
    putRequest.onsuccess = function putRequest_onsuccess() {
     ok++;
     if (ok + fail == total) finish();
    };
    putRequest.onerror = function putRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   }));
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 }),
 loadFilesFromDB: (function(paths, onload, onerror) {
  onload = onload || (function() {});
  onerror = onerror || (function() {});
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = onerror;
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   try {
    var transaction = db.transaction([ FS.DB_STORE_NAME ], "readonly");
   } catch (e) {
    onerror(e);
    return;
   }
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach((function(path) {
    var getRequest = files.get(path);
    getRequest.onsuccess = function getRequest_onsuccess() {
     if (FS.analyzePath(path).exists) {
      FS.unlink(path);
     }
     FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
     ok++;
     if (ok + fail == total) finish();
    };
    getRequest.onerror = function getRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   }));
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 })
};
var ERRNO_CODES = {
 EPERM: 1,
 ENOENT: 2,
 ESRCH: 3,
 EINTR: 4,
 EIO: 5,
 ENXIO: 6,
 E2BIG: 7,
 ENOEXEC: 8,
 EBADF: 9,
 ECHILD: 10,
 EAGAIN: 11,
 EWOULDBLOCK: 11,
 ENOMEM: 12,
 EACCES: 13,
 EFAULT: 14,
 ENOTBLK: 15,
 EBUSY: 16,
 EEXIST: 17,
 EXDEV: 18,
 ENODEV: 19,
 ENOTDIR: 20,
 EISDIR: 21,
 EINVAL: 22,
 ENFILE: 23,
 EMFILE: 24,
 ENOTTY: 25,
 ETXTBSY: 26,
 EFBIG: 27,
 ENOSPC: 28,
 ESPIPE: 29,
 EROFS: 30,
 EMLINK: 31,
 EPIPE: 32,
 EDOM: 33,
 ERANGE: 34,
 ENOMSG: 42,
 EIDRM: 43,
 ECHRNG: 44,
 EL2NSYNC: 45,
 EL3HLT: 46,
 EL3RST: 47,
 ELNRNG: 48,
 EUNATCH: 49,
 ENOCSI: 50,
 EL2HLT: 51,
 EDEADLK: 35,
 ENOLCK: 37,
 EBADE: 52,
 EBADR: 53,
 EXFULL: 54,
 ENOANO: 55,
 EBADRQC: 56,
 EBADSLT: 57,
 EDEADLOCK: 35,
 EBFONT: 59,
 ENOSTR: 60,
 ENODATA: 61,
 ETIME: 62,
 ENOSR: 63,
 ENONET: 64,
 ENOPKG: 65,
 EREMOTE: 66,
 ENOLINK: 67,
 EADV: 68,
 ESRMNT: 69,
 ECOMM: 70,
 EPROTO: 71,
 EMULTIHOP: 72,
 EDOTDOT: 73,
 EBADMSG: 74,
 ENOTUNIQ: 76,
 EBADFD: 77,
 EREMCHG: 78,
 ELIBACC: 79,
 ELIBBAD: 80,
 ELIBSCN: 81,
 ELIBMAX: 82,
 ELIBEXEC: 83,
 ENOSYS: 38,
 ENOTEMPTY: 39,
 ENAMETOOLONG: 36,
 ELOOP: 40,
 EOPNOTSUPP: 95,
 EPFNOSUPPORT: 96,
 ECONNRESET: 104,
 ENOBUFS: 105,
 EAFNOSUPPORT: 97,
 EPROTOTYPE: 91,
 ENOTSOCK: 88,
 ENOPROTOOPT: 92,
 ESHUTDOWN: 108,
 ECONNREFUSED: 111,
 EADDRINUSE: 98,
 ECONNABORTED: 103,
 ENETUNREACH: 101,
 ENETDOWN: 100,
 ETIMEDOUT: 110,
 EHOSTDOWN: 112,
 EHOSTUNREACH: 113,
 EINPROGRESS: 115,
 EALREADY: 114,
 EDESTADDRREQ: 89,
 EMSGSIZE: 90,
 EPROTONOSUPPORT: 93,
 ESOCKTNOSUPPORT: 94,
 EADDRNOTAVAIL: 99,
 ENETRESET: 102,
 EISCONN: 106,
 ENOTCONN: 107,
 ETOOMANYREFS: 109,
 EUSERS: 87,
 EDQUOT: 122,
 ESTALE: 116,
 ENOTSUP: 95,
 ENOMEDIUM: 123,
 EILSEQ: 84,
 EOVERFLOW: 75,
 ECANCELED: 125,
 ENOTRECOVERABLE: 131,
 EOWNERDEAD: 130,
 ESTRPIPE: 86
};
var SYSCALLS = {
 DEFAULT_POLLMASK: 5,
 mappings: {},
 umask: 511,
 calculateAt: (function(dirfd, path) {
  if (path[0] !== "/") {
   var dir;
   if (dirfd === -100) {
    dir = FS.cwd();
   } else {
    var dirstream = FS.getStream(dirfd);
    if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
    dir = dirstream.path;
   }
   path = PATH.join2(dir, path);
  }
  return path;
 }),
 doStat: (function(func, path, buf) {
  try {
   var stat = func(path);
  } catch (e) {
   if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
    return -ERRNO_CODES.ENOTDIR;
   }
   throw e;
  }
  HEAP32[buf >> 2] = stat.dev;
  HEAP32[buf + 4 >> 2] = 0;
  HEAP32[buf + 8 >> 2] = stat.ino;
  HEAP32[buf + 12 >> 2] = stat.mode;
  HEAP32[buf + 16 >> 2] = stat.nlink;
  HEAP32[buf + 20 >> 2] = stat.uid;
  HEAP32[buf + 24 >> 2] = stat.gid;
  HEAP32[buf + 28 >> 2] = stat.rdev;
  HEAP32[buf + 32 >> 2] = 0;
  HEAP32[buf + 36 >> 2] = stat.size;
  HEAP32[buf + 40 >> 2] = 4096;
  HEAP32[buf + 44 >> 2] = stat.blocks;
  HEAP32[buf + 48 >> 2] = stat.atime.getTime() / 1e3 | 0;
  HEAP32[buf + 52 >> 2] = 0;
  HEAP32[buf + 56 >> 2] = stat.mtime.getTime() / 1e3 | 0;
  HEAP32[buf + 60 >> 2] = 0;
  HEAP32[buf + 64 >> 2] = stat.ctime.getTime() / 1e3 | 0;
  HEAP32[buf + 68 >> 2] = 0;
  HEAP32[buf + 72 >> 2] = stat.ino;
  return 0;
 }),
 doMsync: (function(addr, stream, len, flags) {
  var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
  FS.msync(stream, buffer, 0, len, flags);
 }),
 doMkdir: (function(path, mode) {
  path = PATH.normalize(path);
  if (path[path.length - 1] === "/") path = path.substr(0, path.length - 1);
  FS.mkdir(path, mode, 0);
  return 0;
 }),
 doMknod: (function(path, mode, dev) {
  switch (mode & 61440) {
  case 32768:
  case 8192:
  case 24576:
  case 4096:
  case 49152:
   break;
  default:
   return -ERRNO_CODES.EINVAL;
  }
  FS.mknod(path, mode, dev);
  return 0;
 }),
 doReadlink: (function(path, buf, bufsize) {
  if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
  var ret = FS.readlink(path);
  var len = Math.min(bufsize, lengthBytesUTF8(ret));
  var endChar = HEAP8[buf + len];
  stringToUTF8(ret, buf, bufsize + 1);
  HEAP8[buf + len] = endChar;
  return len;
 }),
 doAccess: (function(path, amode) {
  if (amode & ~7) {
   return -ERRNO_CODES.EINVAL;
  }
  var node;
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  node = lookup.node;
  var perms = "";
  if (amode & 4) perms += "r";
  if (amode & 2) perms += "w";
  if (amode & 1) perms += "x";
  if (perms && FS.nodePermissions(node, perms)) {
   return -ERRNO_CODES.EACCES;
  }
  return 0;
 }),
 doDup: (function(path, flags, suggestFD) {
  var suggest = FS.getStream(suggestFD);
  if (suggest) FS.close(suggest);
  return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
 }),
 doReadv: (function(stream, iov, iovcnt, offset) {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
   var ptr = HEAP32[iov + i * 8 >> 2];
   var len = HEAP32[iov + (i * 8 + 4) >> 2];
   var curr = FS.read(stream, HEAP8, ptr, len, offset);
   if (curr < 0) return -1;
   ret += curr;
   if (curr < len) break;
  }
  return ret;
 }),
 doWritev: (function(stream, iov, iovcnt, offset) {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
   var ptr = HEAP32[iov + i * 8 >> 2];
   var len = HEAP32[iov + (i * 8 + 4) >> 2];
   var curr = FS.write(stream, HEAP8, ptr, len, offset);
   if (curr < 0) return -1;
   ret += curr;
  }
  return ret;
 }),
 varargs: 0,
 get: (function(varargs) {
  SYSCALLS.varargs += 4;
  var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
  return ret;
 }),
 getStr: (function() {
  var ret = Pointer_stringify(SYSCALLS.get());
  return ret;
 }),
 getStreamFromFD: (function() {
  var stream = FS.getStream(SYSCALLS.get());
  if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  return stream;
 }),
 getSocketFromFD: (function() {
  var socket = SOCKFS.getSocket(SYSCALLS.get());
  if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  return socket;
 }),
 getSocketAddress: (function(allowNull) {
  var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
  if (allowNull && addrp === 0) return null;
  var info = __read_sockaddr(addrp, addrlen);
  if (info.errno) throw new FS.ErrnoError(info.errno);
  info.addr = DNS.lookup_addr(info.addr) || info.addr;
  return info;
 }),
 get64: (function() {
  var low = SYSCALLS.get(), high = SYSCALLS.get();
  if (low >= 0) assert(high === 0); else assert(high === -1);
  return low;
 }),
 getZero: (function() {
  assert(SYSCALLS.get() === 0);
 })
};
function ___syscall140(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
  var offset = offset_low;
  FS.llseek(stream, offset, whence);
  HEAP32[result >> 2] = stream.position;
  if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function ___syscall146(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
  return SYSCALLS.doWritev(stream, iov, iovcnt);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function ___syscall221(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
  switch (cmd) {
  case 0:
   {
    var arg = SYSCALLS.get();
    if (arg < 0) {
     return -ERRNO_CODES.EINVAL;
    }
    var newStream;
    newStream = FS.open(stream.path, stream.flags, 0, arg);
    return newStream.fd;
   }
  case 1:
  case 2:
   return 0;
  case 3:
   return stream.flags;
  case 4:
   {
    var arg = SYSCALLS.get();
    stream.flags |= arg;
    return 0;
   }
  case 12:
  case 12:
   {
    var arg = SYSCALLS.get();
    var offset = 0;
    HEAP16[arg + offset >> 1] = 2;
    return 0;
   }
  case 13:
  case 14:
  case 13:
  case 14:
   return 0;
  case 16:
  case 8:
   return -ERRNO_CODES.EINVAL;
  case 9:
   ___setErrNo(ERRNO_CODES.EINVAL);
   return -1;
  default:
   {
    return -ERRNO_CODES.EINVAL;
   }
  }
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function ___syscall3(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
  return FS.read(stream, HEAP8, buf, count);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function ___syscall5(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get();
  var stream = FS.open(pathname, flags, mode);
  return stream.fd;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function ___syscall6(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD();
  FS.close(stream);
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
var structRegistrations = {};
function runDestructors(destructors) {
 while (destructors.length) {
  var ptr = destructors.pop();
  var del = destructors.pop();
  del(ptr);
 }
}
function simpleReadValueFromPointer(pointer) {
 return this["fromWireType"](HEAPU32[pointer >> 2]);
}
var awaitingDependencies = {};
var registeredTypes = {};
var typeDependencies = {};
var char_0 = 48;
var char_9 = 57;
function makeLegalFunctionName(name) {
 if (undefined === name) {
  return "_unknown";
 }
 name = name.replace(/[^a-zA-Z0-9_]/g, "$");
 var f = name.charCodeAt(0);
 if (f >= char_0 && f <= char_9) {
  return "_" + name;
 } else {
  return name;
 }
}
function createNamedFunction(name, body) {
 name = makeLegalFunctionName(name);
 return (new Function("body", "return function " + name + "() {\n" + '    "use strict";' + "    return body.apply(this, arguments);\n" + "};\n"))(body);
}
function extendError(baseErrorType, errorName) {
 var errorClass = createNamedFunction(errorName, (function(message) {
  this.name = errorName;
  this.message = message;
  var stack = (new Error(message)).stack;
  if (stack !== undefined) {
   this.stack = this.toString() + "\n" + stack.replace(/^Error(:[^\n]*)?\n/, "");
  }
 }));
 errorClass.prototype = Object.create(baseErrorType.prototype);
 errorClass.prototype.constructor = errorClass;
 errorClass.prototype.toString = (function() {
  if (this.message === undefined) {
   return this.name;
  } else {
   return this.name + ": " + this.message;
  }
 });
 return errorClass;
}
var InternalError = undefined;
function throwInternalError(message) {
 throw new InternalError(message);
}
function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
 myTypes.forEach((function(type) {
  typeDependencies[type] = dependentTypes;
 }));
 function onComplete(typeConverters) {
  var myTypeConverters = getTypeConverters(typeConverters);
  if (myTypeConverters.length !== myTypes.length) {
   throwInternalError("Mismatched type converter count");
  }
  for (var i = 0; i < myTypes.length; ++i) {
   registerType(myTypes[i], myTypeConverters[i]);
  }
 }
 var typeConverters = new Array(dependentTypes.length);
 var unregisteredTypes = [];
 var registered = 0;
 dependentTypes.forEach((function(dt, i) {
  if (registeredTypes.hasOwnProperty(dt)) {
   typeConverters[i] = registeredTypes[dt];
  } else {
   unregisteredTypes.push(dt);
   if (!awaitingDependencies.hasOwnProperty(dt)) {
    awaitingDependencies[dt] = [];
   }
   awaitingDependencies[dt].push((function() {
    typeConverters[i] = registeredTypes[dt];
    ++registered;
    if (registered === unregisteredTypes.length) {
     onComplete(typeConverters);
    }
   }));
  }
 }));
 if (0 === unregisteredTypes.length) {
  onComplete(typeConverters);
 }
}
function __embind_finalize_value_object(structType) {
 var reg = structRegistrations[structType];
 delete structRegistrations[structType];
 var rawConstructor = reg.rawConstructor;
 var rawDestructor = reg.rawDestructor;
 var fieldRecords = reg.fields;
 var fieldTypes = fieldRecords.map((function(field) {
  return field.getterReturnType;
 })).concat(fieldRecords.map((function(field) {
  return field.setterArgumentType;
 })));
 whenDependentTypesAreResolved([ structType ], fieldTypes, (function(fieldTypes) {
  var fields = {};
  fieldRecords.forEach((function(field, i) {
   var fieldName = field.fieldName;
   var getterReturnType = fieldTypes[i];
   var getter = field.getter;
   var getterContext = field.getterContext;
   var setterArgumentType = fieldTypes[i + fieldRecords.length];
   var setter = field.setter;
   var setterContext = field.setterContext;
   fields[fieldName] = {
    read: (function(ptr) {
     return getterReturnType["fromWireType"](getter(getterContext, ptr));
    }),
    write: (function(ptr, o) {
     var destructors = [];
     setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, o));
     runDestructors(destructors);
    })
   };
  }));
  return [ {
   name: reg.name,
   "fromWireType": (function(ptr) {
    var rv = {};
    for (var i in fields) {
     rv[i] = fields[i].read(ptr);
    }
    rawDestructor(ptr);
    return rv;
   }),
   "toWireType": (function(destructors, o) {
    for (var fieldName in fields) {
     if (!(fieldName in o)) {
      throw new TypeError("Missing field");
     }
    }
    var ptr = rawConstructor();
    for (fieldName in fields) {
     fields[fieldName].write(ptr, o[fieldName]);
    }
    if (destructors !== null) {
     destructors.push(rawDestructor, ptr);
    }
    return ptr;
   }),
   "argPackAdvance": 8,
   "readValueFromPointer": simpleReadValueFromPointer,
   destructorFunction: rawDestructor
  } ];
 }));
}
function getShiftFromSize(size) {
 switch (size) {
 case 1:
  return 0;
 case 2:
  return 1;
 case 4:
  return 2;
 case 8:
  return 3;
 default:
  throw new TypeError("Unknown type size: " + size);
 }
}
function embind_init_charCodes() {
 var codes = new Array(256);
 for (var i = 0; i < 256; ++i) {
  codes[i] = String.fromCharCode(i);
 }
 embind_charCodes = codes;
}
var embind_charCodes = undefined;
function readLatin1String(ptr) {
 var ret = "";
 var c = ptr;
 while (HEAPU8[c]) {
  ret += embind_charCodes[HEAPU8[c++]];
 }
 return ret;
}
var BindingError = undefined;
function throwBindingError(message) {
 throw new BindingError(message);
}
function registerType(rawType, registeredInstance, options) {
 options = options || {};
 if (!("argPackAdvance" in registeredInstance)) {
  throw new TypeError("registerType registeredInstance requires argPackAdvance");
 }
 var name = registeredInstance.name;
 if (!rawType) {
  throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
 }
 if (registeredTypes.hasOwnProperty(rawType)) {
  if (options.ignoreDuplicateRegistrations) {
   return;
  } else {
   throwBindingError("Cannot register type '" + name + "' twice");
  }
 }
 registeredTypes[rawType] = registeredInstance;
 delete typeDependencies[rawType];
 if (awaitingDependencies.hasOwnProperty(rawType)) {
  var callbacks = awaitingDependencies[rawType];
  delete awaitingDependencies[rawType];
  callbacks.forEach((function(cb) {
   cb();
  }));
 }
}
function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
 var shift = getShiftFromSize(size);
 name = readLatin1String(name);
 registerType(rawType, {
  name: name,
  "fromWireType": (function(wt) {
   return !!wt;
  }),
  "toWireType": (function(destructors, o) {
   return o ? trueValue : falseValue;
  }),
  "argPackAdvance": 8,
  "readValueFromPointer": (function(pointer) {
   var heap;
   if (size === 1) {
    heap = HEAP8;
   } else if (size === 2) {
    heap = HEAP16;
   } else if (size === 4) {
    heap = HEAP32;
   } else {
    throw new TypeError("Unknown boolean type size: " + name);
   }
   return this["fromWireType"](heap[pointer >> shift]);
  }),
  destructorFunction: null
 });
}
function ClassHandle_isAliasOf(other) {
 if (!(this instanceof ClassHandle)) {
  return false;
 }
 if (!(other instanceof ClassHandle)) {
  return false;
 }
 var leftClass = this.$$.ptrType.registeredClass;
 var left = this.$$.ptr;
 var rightClass = other.$$.ptrType.registeredClass;
 var right = other.$$.ptr;
 while (leftClass.baseClass) {
  left = leftClass.upcast(left);
  leftClass = leftClass.baseClass;
 }
 while (rightClass.baseClass) {
  right = rightClass.upcast(right);
  rightClass = rightClass.baseClass;
 }
 return leftClass === rightClass && left === right;
}
function shallowCopyInternalPointer(o) {
 return {
  count: o.count,
  deleteScheduled: o.deleteScheduled,
  preservePointerOnDelete: o.preservePointerOnDelete,
  ptr: o.ptr,
  ptrType: o.ptrType,
  smartPtr: o.smartPtr,
  smartPtrType: o.smartPtrType
 };
}
function throwInstanceAlreadyDeleted(obj) {
 function getInstanceTypeName(handle) {
  return handle.$$.ptrType.registeredClass.name;
 }
 throwBindingError(getInstanceTypeName(obj) + " instance already deleted");
}
function ClassHandle_clone() {
 if (!this.$$.ptr) {
  throwInstanceAlreadyDeleted(this);
 }
 if (this.$$.preservePointerOnDelete) {
  this.$$.count.value += 1;
  return this;
 } else {
  var clone = Object.create(Object.getPrototypeOf(this), {
   $$: {
    value: shallowCopyInternalPointer(this.$$)
   }
  });
  clone.$$.count.value += 1;
  clone.$$.deleteScheduled = false;
  return clone;
 }
}
function runDestructor(handle) {
 var $$ = handle.$$;
 if ($$.smartPtr) {
  $$.smartPtrType.rawDestructor($$.smartPtr);
 } else {
  $$.ptrType.registeredClass.rawDestructor($$.ptr);
 }
}
function ClassHandle_delete() {
 if (!this.$$.ptr) {
  throwInstanceAlreadyDeleted(this);
 }
 if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
  throwBindingError("Object already scheduled for deletion");
 }
 this.$$.count.value -= 1;
 var toDelete = 0 === this.$$.count.value;
 if (toDelete) {
  runDestructor(this);
 }
 if (!this.$$.preservePointerOnDelete) {
  this.$$.smartPtr = undefined;
  this.$$.ptr = undefined;
 }
}
function ClassHandle_isDeleted() {
 return !this.$$.ptr;
}
var delayFunction = undefined;
var deletionQueue = [];
function flushPendingDeletes() {
 while (deletionQueue.length) {
  var obj = deletionQueue.pop();
  obj.$$.deleteScheduled = false;
  obj["delete"]();
 }
}
function ClassHandle_deleteLater() {
 if (!this.$$.ptr) {
  throwInstanceAlreadyDeleted(this);
 }
 if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
  throwBindingError("Object already scheduled for deletion");
 }
 deletionQueue.push(this);
 if (deletionQueue.length === 1 && delayFunction) {
  delayFunction(flushPendingDeletes);
 }
 this.$$.deleteScheduled = true;
 return this;
}
function init_ClassHandle() {
 ClassHandle.prototype["isAliasOf"] = ClassHandle_isAliasOf;
 ClassHandle.prototype["clone"] = ClassHandle_clone;
 ClassHandle.prototype["delete"] = ClassHandle_delete;
 ClassHandle.prototype["isDeleted"] = ClassHandle_isDeleted;
 ClassHandle.prototype["deleteLater"] = ClassHandle_deleteLater;
}
function ClassHandle() {}
var registeredPointers = {};
function ensureOverloadTable(proto, methodName, humanName) {
 if (undefined === proto[methodName].overloadTable) {
  var prevFunc = proto[methodName];
  proto[methodName] = (function() {
   if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
    throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
   }
   return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
  });
  proto[methodName].overloadTable = [];
  proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
 }
}
function exposePublicSymbol(name, value, numArguments) {
 if (Module.hasOwnProperty(name)) {
  if (undefined === numArguments || undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments]) {
   throwBindingError("Cannot register public name '" + name + "' twice");
  }
  ensureOverloadTable(Module, name, name);
  if (Module.hasOwnProperty(numArguments)) {
   throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
  }
  Module[name].overloadTable[numArguments] = value;
 } else {
  Module[name] = value;
  if (undefined !== numArguments) {
   Module[name].numArguments = numArguments;
  }
 }
}
function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {
 this.name = name;
 this.constructor = constructor;
 this.instancePrototype = instancePrototype;
 this.rawDestructor = rawDestructor;
 this.baseClass = baseClass;
 this.getActualType = getActualType;
 this.upcast = upcast;
 this.downcast = downcast;
 this.pureVirtualFunctions = [];
}
function upcastPointer(ptr, ptrClass, desiredClass) {
 while (ptrClass !== desiredClass) {
  if (!ptrClass.upcast) {
   throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
  }
  ptr = ptrClass.upcast(ptr);
  ptrClass = ptrClass.baseClass;
 }
 return ptr;
}
function constNoSmartPtrRawPointerToWireType(destructors, handle) {
 if (handle === null) {
  if (this.isReference) {
   throwBindingError("null is not a valid " + this.name);
  }
  return 0;
 }
 if (!handle.$$) {
  throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
 }
 if (!handle.$$.ptr) {
  throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
 }
 var handleClass = handle.$$.ptrType.registeredClass;
 var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
 return ptr;
}
function genericPointerToWireType(destructors, handle) {
 var ptr;
 if (handle === null) {
  if (this.isReference) {
   throwBindingError("null is not a valid " + this.name);
  }
  if (this.isSmartPointer) {
   ptr = this.rawConstructor();
   if (destructors !== null) {
    destructors.push(this.rawDestructor, ptr);
   }
   return ptr;
  } else {
   return 0;
  }
 }
 if (!handle.$$) {
  throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
 }
 if (!handle.$$.ptr) {
  throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
 }
 if (!this.isConst && handle.$$.ptrType.isConst) {
  throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
 }
 var handleClass = handle.$$.ptrType.registeredClass;
 ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
 if (this.isSmartPointer) {
  if (undefined === handle.$$.smartPtr) {
   throwBindingError("Passing raw pointer to smart pointer is illegal");
  }
  switch (this.sharingPolicy) {
  case 0:
   if (handle.$$.smartPtrType === this) {
    ptr = handle.$$.smartPtr;
   } else {
    throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
   }
   break;
  case 1:
   ptr = handle.$$.smartPtr;
   break;
  case 2:
   if (handle.$$.smartPtrType === this) {
    ptr = handle.$$.smartPtr;
   } else {
    var clonedHandle = handle["clone"]();
    ptr = this.rawShare(ptr, __emval_register((function() {
     clonedHandle["delete"]();
    })));
    if (destructors !== null) {
     destructors.push(this.rawDestructor, ptr);
    }
   }
   break;
  default:
   throwBindingError("Unsupporting sharing policy");
  }
 }
 return ptr;
}
function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
 if (handle === null) {
  if (this.isReference) {
   throwBindingError("null is not a valid " + this.name);
  }
  return 0;
 }
 if (!handle.$$) {
  throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
 }
 if (!handle.$$.ptr) {
  throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
 }
 if (handle.$$.ptrType.isConst) {
  throwBindingError("Cannot convert argument of type " + handle.$$.ptrType.name + " to parameter type " + this.name);
 }
 var handleClass = handle.$$.ptrType.registeredClass;
 var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
 return ptr;
}
function RegisteredPointer_getPointee(ptr) {
 if (this.rawGetPointee) {
  ptr = this.rawGetPointee(ptr);
 }
 return ptr;
}
function RegisteredPointer_destructor(ptr) {
 if (this.rawDestructor) {
  this.rawDestructor(ptr);
 }
}
function RegisteredPointer_deleteObject(handle) {
 if (handle !== null) {
  handle["delete"]();
 }
}
function downcastPointer(ptr, ptrClass, desiredClass) {
 if (ptrClass === desiredClass) {
  return ptr;
 }
 if (undefined === desiredClass.baseClass) {
  return null;
 }
 var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
 if (rv === null) {
  return null;
 }
 return desiredClass.downcast(rv);
}
function getInheritedInstanceCount() {
 return Object.keys(registeredInstances).length;
}
function getLiveInheritedInstances() {
 var rv = [];
 for (var k in registeredInstances) {
  if (registeredInstances.hasOwnProperty(k)) {
   rv.push(registeredInstances[k]);
  }
 }
 return rv;
}
function setDelayFunction(fn) {
 delayFunction = fn;
 if (deletionQueue.length && delayFunction) {
  delayFunction(flushPendingDeletes);
 }
}
function init_embind() {
 Module["getInheritedInstanceCount"] = getInheritedInstanceCount;
 Module["getLiveInheritedInstances"] = getLiveInheritedInstances;
 Module["flushPendingDeletes"] = flushPendingDeletes;
 Module["setDelayFunction"] = setDelayFunction;
}
var registeredInstances = {};
function getBasestPointer(class_, ptr) {
 if (ptr === undefined) {
  throwBindingError("ptr should not be undefined");
 }
 while (class_.baseClass) {
  ptr = class_.upcast(ptr);
  class_ = class_.baseClass;
 }
 return ptr;
}
function getInheritedInstance(class_, ptr) {
 ptr = getBasestPointer(class_, ptr);
 return registeredInstances[ptr];
}
function makeClassHandle(prototype, record) {
 if (!record.ptrType || !record.ptr) {
  throwInternalError("makeClassHandle requires ptr and ptrType");
 }
 var hasSmartPtrType = !!record.smartPtrType;
 var hasSmartPtr = !!record.smartPtr;
 if (hasSmartPtrType !== hasSmartPtr) {
  throwInternalError("Both smartPtrType and smartPtr must be specified");
 }
 record.count = {
  value: 1
 };
 return Object.create(prototype, {
  $$: {
   value: record
  }
 });
}
function RegisteredPointer_fromWireType(ptr) {
 var rawPointer = this.getPointee(ptr);
 if (!rawPointer) {
  this.destructor(ptr);
  return null;
 }
 var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
 if (undefined !== registeredInstance) {
  if (0 === registeredInstance.$$.count.value) {
   registeredInstance.$$.ptr = rawPointer;
   registeredInstance.$$.smartPtr = ptr;
   return registeredInstance["clone"]();
  } else {
   var rv = registeredInstance["clone"]();
   this.destructor(ptr);
   return rv;
  }
 }
 function makeDefaultHandle() {
  if (this.isSmartPointer) {
   return makeClassHandle(this.registeredClass.instancePrototype, {
    ptrType: this.pointeeType,
    ptr: rawPointer,
    smartPtrType: this,
    smartPtr: ptr
   });
  } else {
   return makeClassHandle(this.registeredClass.instancePrototype, {
    ptrType: this,
    ptr: ptr
   });
  }
 }
 var actualType = this.registeredClass.getActualType(rawPointer);
 var registeredPointerRecord = registeredPointers[actualType];
 if (!registeredPointerRecord) {
  return makeDefaultHandle.call(this);
 }
 var toType;
 if (this.isConst) {
  toType = registeredPointerRecord.constPointerType;
 } else {
  toType = registeredPointerRecord.pointerType;
 }
 var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);
 if (dp === null) {
  return makeDefaultHandle.call(this);
 }
 if (this.isSmartPointer) {
  return makeClassHandle(toType.registeredClass.instancePrototype, {
   ptrType: toType,
   ptr: dp,
   smartPtrType: this,
   smartPtr: ptr
  });
 } else {
  return makeClassHandle(toType.registeredClass.instancePrototype, {
   ptrType: toType,
   ptr: dp
  });
 }
}
function init_RegisteredPointer() {
 RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
 RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
 RegisteredPointer.prototype["argPackAdvance"] = 8;
 RegisteredPointer.prototype["readValueFromPointer"] = simpleReadValueFromPointer;
 RegisteredPointer.prototype["deleteObject"] = RegisteredPointer_deleteObject;
 RegisteredPointer.prototype["fromWireType"] = RegisteredPointer_fromWireType;
}
function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {
 this.name = name;
 this.registeredClass = registeredClass;
 this.isReference = isReference;
 this.isConst = isConst;
 this.isSmartPointer = isSmartPointer;
 this.pointeeType = pointeeType;
 this.sharingPolicy = sharingPolicy;
 this.rawGetPointee = rawGetPointee;
 this.rawConstructor = rawConstructor;
 this.rawShare = rawShare;
 this.rawDestructor = rawDestructor;
 if (!isSmartPointer && registeredClass.baseClass === undefined) {
  if (isConst) {
   this["toWireType"] = constNoSmartPtrRawPointerToWireType;
   this.destructorFunction = null;
  } else {
   this["toWireType"] = nonConstNoSmartPtrRawPointerToWireType;
   this.destructorFunction = null;
  }
 } else {
  this["toWireType"] = genericPointerToWireType;
 }
}
function replacePublicSymbol(name, value, numArguments) {
 if (!Module.hasOwnProperty(name)) {
  throwInternalError("Replacing nonexistant public symbol");
 }
 if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
  Module[name].overloadTable[numArguments] = value;
 } else {
  Module[name] = value;
  Module[name].argCount = numArguments;
 }
}
function embind__requireFunction(signature, rawFunction) {
 signature = readLatin1String(signature);
 function makeDynCaller(dynCall) {
  var args = [];
  for (var i = 1; i < signature.length; ++i) {
   args.push("a" + i);
  }
  var name = "dynCall_" + signature + "_" + rawFunction;
  var body = "return function " + name + "(" + args.join(", ") + ") {\n";
  body += "    return dynCall(rawFunction" + (args.length ? ", " : "") + args.join(", ") + ");\n";
  body += "};\n";
  return (new Function("dynCall", "rawFunction", body))(dynCall, rawFunction);
 }
 var fp;
 if (Module["FUNCTION_TABLE_" + signature] !== undefined) {
  fp = Module["FUNCTION_TABLE_" + signature][rawFunction];
 } else if (typeof FUNCTION_TABLE !== "undefined") {
  fp = FUNCTION_TABLE[rawFunction];
 } else {
  var dc = Module["dynCall_" + signature];
  if (dc === undefined) {
   dc = Module["dynCall_" + signature.replace(/f/g, "d")];
   if (dc === undefined) {
    throwBindingError("No dynCall invoker for signature: " + signature);
   }
  }
  fp = makeDynCaller(dc);
 }
 if (typeof fp !== "function") {
  throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
 }
 return fp;
}
var UnboundTypeError = undefined;
function getTypeName(type) {
 var ptr = ___getTypeName(type);
 var rv = readLatin1String(ptr);
 _free(ptr);
 return rv;
}
function throwUnboundTypeError(message, types) {
 var unboundTypes = [];
 var seen = {};
 function visit(type) {
  if (seen[type]) {
   return;
  }
  if (registeredTypes[type]) {
   return;
  }
  if (typeDependencies[type]) {
   typeDependencies[type].forEach(visit);
   return;
  }
  unboundTypes.push(type);
  seen[type] = true;
 }
 types.forEach(visit);
 throw new UnboundTypeError(message + ": " + unboundTypes.map(getTypeName).join([ ", " ]));
}
function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {
 name = readLatin1String(name);
 getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
 if (upcast) {
  upcast = embind__requireFunction(upcastSignature, upcast);
 }
 if (downcast) {
  downcast = embind__requireFunction(downcastSignature, downcast);
 }
 rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
 var legalFunctionName = makeLegalFunctionName(name);
 exposePublicSymbol(legalFunctionName, (function() {
  throwUnboundTypeError("Cannot construct " + name + " due to unbound types", [ baseClassRawType ]);
 }));
 whenDependentTypesAreResolved([ rawType, rawPointerType, rawConstPointerType ], baseClassRawType ? [ baseClassRawType ] : [], (function(base) {
  base = base[0];
  var baseClass;
  var basePrototype;
  if (baseClassRawType) {
   baseClass = base.registeredClass;
   basePrototype = baseClass.instancePrototype;
  } else {
   basePrototype = ClassHandle.prototype;
  }
  var constructor = createNamedFunction(legalFunctionName, (function() {
   if (Object.getPrototypeOf(this) !== instancePrototype) {
    throw new BindingError("Use 'new' to construct " + name);
   }
   if (undefined === registeredClass.constructor_body) {
    throw new BindingError(name + " has no accessible constructor");
   }
   var body = registeredClass.constructor_body[arguments.length];
   if (undefined === body) {
    throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
   }
   return body.apply(this, arguments);
  }));
  var instancePrototype = Object.create(basePrototype, {
   constructor: {
    value: constructor
   }
  });
  constructor.prototype = instancePrototype;
  var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);
  var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);
  var pointerConverter = new RegisteredPointer(name + "*", registeredClass, false, false, false);
  var constPointerConverter = new RegisteredPointer(name + " const*", registeredClass, false, true, false);
  registeredPointers[rawType] = {
   pointerType: pointerConverter,
   constPointerType: constPointerConverter
  };
  replacePublicSymbol(legalFunctionName, constructor);
  return [ referenceConverter, pointerConverter, constPointerConverter ];
 }));
}
function heap32VectorToArray(count, firstElement) {
 var array = [];
 for (var i = 0; i < count; i++) {
  array.push(HEAP32[(firstElement >> 2) + i]);
 }
 return array;
}
function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {
 var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
 invoker = embind__requireFunction(invokerSignature, invoker);
 whenDependentTypesAreResolved([], [ rawClassType ], (function(classType) {
  classType = classType[0];
  var humanName = "constructor " + classType.name;
  if (undefined === classType.registeredClass.constructor_body) {
   classType.registeredClass.constructor_body = [];
  }
  if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
   throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount - 1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
  }
  classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
   throwUnboundTypeError("Cannot construct " + classType.name + " due to unbound types", rawArgTypes);
  };
  whenDependentTypesAreResolved([], rawArgTypes, (function(argTypes) {
   classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
    if (arguments.length !== argCount - 1) {
     throwBindingError(humanName + " called with " + arguments.length + " arguments, expected " + (argCount - 1));
    }
    var destructors = [];
    var args = new Array(argCount);
    args[0] = rawConstructor;
    for (var i = 1; i < argCount; ++i) {
     args[i] = argTypes[i]["toWireType"](destructors, arguments[i - 1]);
    }
    var ptr = invoker.apply(null, args);
    runDestructors(destructors);
    return argTypes[0]["fromWireType"](ptr);
   };
   return [];
  }));
  return [];
 }));
}
function new_(constructor, argumentList) {
 if (!(constructor instanceof Function)) {
  throw new TypeError("new_ called with constructor type " + typeof constructor + " which is not a function");
 }
 var dummy = createNamedFunction(constructor.name || "unknownFunctionName", (function() {}));
 dummy.prototype = constructor.prototype;
 var obj = new dummy;
 var r = constructor.apply(obj, argumentList);
 return r instanceof Object ? r : obj;
}
function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
 var argCount = argTypes.length;
 if (argCount < 2) {
  throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
 }
 var isClassMethodFunc = argTypes[1] !== null && classType !== null;
 var needsDestructorStack = false;
 for (var i = 1; i < argTypes.length; ++i) {
  if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {
   needsDestructorStack = true;
   break;
  }
 }
 var returns = argTypes[0].name !== "void";
 var argsList = "";
 var argsListWired = "";
 for (var i = 0; i < argCount - 2; ++i) {
  argsList += (i !== 0 ? ", " : "") + "arg" + i;
  argsListWired += (i !== 0 ? ", " : "") + "arg" + i + "Wired";
 }
 var invokerFnBody = "return function " + makeLegalFunctionName(humanName) + "(" + argsList + ") {\n" + "if (arguments.length !== " + (argCount - 2) + ") {\n" + "throwBindingError('function " + humanName + " called with ' + arguments.length + ' arguments, expected " + (argCount - 2) + " args!');\n" + "}\n";
 if (needsDestructorStack) {
  invokerFnBody += "var destructors = [];\n";
 }
 var dtorStack = needsDestructorStack ? "destructors" : "null";
 var args1 = [ "throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam" ];
 var args2 = [ throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1] ];
 if (isClassMethodFunc) {
  invokerFnBody += "var thisWired = classParam.toWireType(" + dtorStack + ", this);\n";
 }
 for (var i = 0; i < argCount - 2; ++i) {
  invokerFnBody += "var arg" + i + "Wired = argType" + i + ".toWireType(" + dtorStack + ", arg" + i + "); // " + argTypes[i + 2].name + "\n";
  args1.push("argType" + i);
  args2.push(argTypes[i + 2]);
 }
 if (isClassMethodFunc) {
  argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
 }
 invokerFnBody += (returns ? "var rv = " : "") + "invoker(fn" + (argsListWired.length > 0 ? ", " : "") + argsListWired + ");\n";
 if (needsDestructorStack) {
  invokerFnBody += "runDestructors(destructors);\n";
 } else {
  for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
   var paramName = i === 1 ? "thisWired" : "arg" + (i - 2) + "Wired";
   if (argTypes[i].destructorFunction !== null) {
    invokerFnBody += paramName + "_dtor(" + paramName + "); // " + argTypes[i].name + "\n";
    args1.push(paramName + "_dtor");
    args2.push(argTypes[i].destructorFunction);
   }
  }
 }
 if (returns) {
  invokerFnBody += "var ret = retType.fromWireType(rv);\n" + "return ret;\n";
 } else {}
 invokerFnBody += "}\n";
 args1.push(invokerFnBody);
 var invokerFunction = new_(Function, args1).apply(null, args2);
 return invokerFunction;
}
function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) {
 var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
 methodName = readLatin1String(methodName);
 rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
 whenDependentTypesAreResolved([], [ rawClassType ], (function(classType) {
  classType = classType[0];
  var humanName = classType.name + "." + methodName;
  if (isPureVirtual) {
   classType.registeredClass.pureVirtualFunctions.push(methodName);
  }
  function unboundTypesHandler() {
   throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes);
  }
  var proto = classType.registeredClass.instancePrototype;
  var method = proto[methodName];
  if (undefined === method || undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {
   unboundTypesHandler.argCount = argCount - 2;
   unboundTypesHandler.className = classType.name;
   proto[methodName] = unboundTypesHandler;
  } else {
   ensureOverloadTable(proto, methodName, humanName);
   proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
  }
  whenDependentTypesAreResolved([], rawArgTypes, (function(argTypes) {
   var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
   if (undefined === proto[methodName].overloadTable) {
    memberFunction.argCount = argCount - 2;
    proto[methodName] = memberFunction;
   } else {
    proto[methodName].overloadTable[argCount - 2] = memberFunction;
   }
   return [];
  }));
  return [];
 }));
}
var emval_free_list = [];
var emval_handle_array = [ {}, {
 value: undefined
}, {
 value: null
}, {
 value: true
}, {
 value: false
} ];
function __emval_decref(handle) {
 if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
  emval_handle_array[handle] = undefined;
  emval_free_list.push(handle);
 }
}
function count_emval_handles() {
 var count = 0;
 for (var i = 5; i < emval_handle_array.length; ++i) {
  if (emval_handle_array[i] !== undefined) {
   ++count;
  }
 }
 return count;
}
function get_first_emval() {
 for (var i = 5; i < emval_handle_array.length; ++i) {
  if (emval_handle_array[i] !== undefined) {
   return emval_handle_array[i];
  }
 }
 return null;
}
function init_emval() {
 Module["count_emval_handles"] = count_emval_handles;
 Module["get_first_emval"] = get_first_emval;
}
function __emval_register(value) {
 switch (value) {
 case undefined:
  {
   return 1;
  }
 case null:
  {
   return 2;
  }
 case true:
  {
   return 3;
  }
 case false:
  {
   return 4;
  }
 default:
  {
   var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
   emval_handle_array[handle] = {
    refcount: 1,
    value: value
   };
   return handle;
  }
 }
}
function __embind_register_emval(rawType, name) {
 name = readLatin1String(name);
 registerType(rawType, {
  name: name,
  "fromWireType": (function(handle) {
   var rv = emval_handle_array[handle].value;
   __emval_decref(handle);
   return rv;
  }),
  "toWireType": (function(destructors, value) {
   return __emval_register(value);
  }),
  "argPackAdvance": 8,
  "readValueFromPointer": simpleReadValueFromPointer,
  destructorFunction: null
 });
}
function _embind_repr(v) {
 if (v === null) {
  return "null";
 }
 var t = typeof v;
 if (t === "object" || t === "array" || t === "function") {
  return v.toString();
 } else {
  return "" + v;
 }
}
function floatReadValueFromPointer(name, shift) {
 switch (shift) {
 case 2:
  return (function(pointer) {
   return this["fromWireType"](HEAPF32[pointer >> 2]);
  });
 case 3:
  return (function(pointer) {
   return this["fromWireType"](HEAPF64[pointer >> 3]);
  });
 default:
  throw new TypeError("Unknown float type: " + name);
 }
}
function __embind_register_float(rawType, name, size) {
 var shift = getShiftFromSize(size);
 name = readLatin1String(name);
 registerType(rawType, {
  name: name,
  "fromWireType": (function(value) {
   return value;
  }),
  "toWireType": (function(destructors, value) {
   if (typeof value !== "number" && typeof value !== "boolean") {
    throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
   }
   return value;
  }),
  "argPackAdvance": 8,
  "readValueFromPointer": floatReadValueFromPointer(name, shift),
  destructorFunction: null
 });
}
function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
 var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
 name = readLatin1String(name);
 rawInvoker = embind__requireFunction(signature, rawInvoker);
 exposePublicSymbol(name, (function() {
  throwUnboundTypeError("Cannot call " + name + " due to unbound types", argTypes);
 }), argCount - 1);
 whenDependentTypesAreResolved([], argTypes, (function(argTypes) {
  var invokerArgsArray = [ argTypes[0], null ].concat(argTypes.slice(1));
  replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null, rawInvoker, fn), argCount - 1);
  return [];
 }));
}
function integerReadValueFromPointer(name, shift, signed) {
 switch (shift) {
 case 0:
  return signed ? function readS8FromPointer(pointer) {
   return HEAP8[pointer];
  } : function readU8FromPointer(pointer) {
   return HEAPU8[pointer];
  };
 case 1:
  return signed ? function readS16FromPointer(pointer) {
   return HEAP16[pointer >> 1];
  } : function readU16FromPointer(pointer) {
   return HEAPU16[pointer >> 1];
  };
 case 2:
  return signed ? function readS32FromPointer(pointer) {
   return HEAP32[pointer >> 2];
  } : function readU32FromPointer(pointer) {
   return HEAPU32[pointer >> 2];
  };
 default:
  throw new TypeError("Unknown integer type: " + name);
 }
}
function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
 name = readLatin1String(name);
 if (maxRange === -1) {
  maxRange = 4294967295;
 }
 var shift = getShiftFromSize(size);
 var fromWireType = (function(value) {
  return value;
 });
 if (minRange === 0) {
  var bitshift = 32 - 8 * size;
  fromWireType = (function(value) {
   return value << bitshift >>> bitshift;
  });
 }
 var isUnsignedType = name.indexOf("unsigned") != -1;
 registerType(primitiveType, {
  name: name,
  "fromWireType": fromWireType,
  "toWireType": (function(destructors, value) {
   if (typeof value !== "number" && typeof value !== "boolean") {
    throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
   }
   if (value < minRange || value > maxRange) {
    throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ", " + maxRange + "]!");
   }
   return isUnsignedType ? value >>> 0 : value | 0;
  }),
  "argPackAdvance": 8,
  "readValueFromPointer": integerReadValueFromPointer(name, shift, minRange !== 0),
  destructorFunction: null
 });
}
function __embind_register_memory_view(rawType, dataTypeIndex, name) {
 var typeMapping = [ Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array ];
 var TA = typeMapping[dataTypeIndex];
 function decodeMemoryView(handle) {
  handle = handle >> 2;
  var heap = HEAPU32;
  var size = heap[handle];
  var data = heap[handle + 1];
  return new TA(heap["buffer"], data, size);
 }
 name = readLatin1String(name);
 registerType(rawType, {
  name: name,
  "fromWireType": decodeMemoryView,
  "argPackAdvance": 8,
  "readValueFromPointer": decodeMemoryView
 }, {
  ignoreDuplicateRegistrations: true
 });
}
function __embind_register_std_string(rawType, name) {
 name = readLatin1String(name);
 var stdStringIsUTF8 = name === "std::string";
 registerType(rawType, {
  name: name,
  "fromWireType": (function(value) {
   var length = HEAPU32[value >> 2];
   var str;
   if (stdStringIsUTF8) {
    var endChar = HEAPU8[value + 4 + length];
    var endCharSwap = 0;
    if (endChar != 0) {
     endCharSwap = endChar;
     HEAPU8[value + 4 + length] = 0;
    }
    var decodeStartPtr = value + 4;
    for (var i = 0; i <= length; ++i) {
     var currentBytePtr = value + 4 + i;
     if (HEAPU8[currentBytePtr] == 0) {
      var stringSegment = UTF8ToString(decodeStartPtr);
      if (str === undefined) str = stringSegment; else {
       str += String.fromCharCode(0);
       str += stringSegment;
      }
      decodeStartPtr = currentBytePtr + 1;
     }
    }
    if (endCharSwap != 0) HEAPU8[value + 4 + length] = endCharSwap;
   } else {
    var a = new Array(length);
    for (var i = 0; i < length; ++i) {
     a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
    }
    str = a.join("");
   }
   _free(value);
   return str;
  }),
  "toWireType": (function(destructors, value) {
   if (value instanceof ArrayBuffer) {
    value = new Uint8Array(value);
   }
   var getLength;
   var valueIsOfTypeString = typeof value === "string";
   if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
    throwBindingError("Cannot pass non-string to std::string");
   }
   if (stdStringIsUTF8 && valueIsOfTypeString) {
    getLength = (function() {
     return lengthBytesUTF8(value);
    });
   } else {
    getLength = (function() {
     return value.length;
    });
   }
   var length = getLength();
   var ptr = _malloc(4 + length + 1);
   HEAPU32[ptr >> 2] = length;
   if (stdStringIsUTF8 && valueIsOfTypeString) {
    stringToUTF8(value, ptr + 4, length + 1);
   } else {
    if (valueIsOfTypeString) {
     for (var i = 0; i < length; ++i) {
      var charCode = value.charCodeAt(i);
      if (charCode > 255) {
       _free(ptr);
       throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
      }
      HEAPU8[ptr + 4 + i] = charCode;
     }
    } else {
     for (var i = 0; i < length; ++i) {
      HEAPU8[ptr + 4 + i] = value[i];
     }
    }
   }
   if (destructors !== null) {
    destructors.push(_free, ptr);
   }
   return ptr;
  }),
  "argPackAdvance": 8,
  "readValueFromPointer": simpleReadValueFromPointer,
  destructorFunction: (function(ptr) {
   _free(ptr);
  })
 });
}
function __embind_register_std_wstring(rawType, charSize, name) {
 name = readLatin1String(name);
 var getHeap, shift;
 if (charSize === 2) {
  getHeap = (function() {
   return HEAPU16;
  });
  shift = 1;
 } else if (charSize === 4) {
  getHeap = (function() {
   return HEAPU32;
  });
  shift = 2;
 }
 registerType(rawType, {
  name: name,
  "fromWireType": (function(value) {
   var HEAP = getHeap();
   var length = HEAPU32[value >> 2];
   var a = new Array(length);
   var start = value + 4 >> shift;
   for (var i = 0; i < length; ++i) {
    a[i] = String.fromCharCode(HEAP[start + i]);
   }
   _free(value);
   return a.join("");
  }),
  "toWireType": (function(destructors, value) {
   var HEAP = getHeap();
   var length = value.length;
   var ptr = _malloc(4 + length * charSize);
   HEAPU32[ptr >> 2] = length;
   var start = ptr + 4 >> shift;
   for (var i = 0; i < length; ++i) {
    HEAP[start + i] = value.charCodeAt(i);
   }
   if (destructors !== null) {
    destructors.push(_free, ptr);
   }
   return ptr;
  }),
  "argPackAdvance": 8,
  "readValueFromPointer": simpleReadValueFromPointer,
  destructorFunction: (function(ptr) {
   _free(ptr);
  })
 });
}
function __embind_register_value_object(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
 structRegistrations[rawType] = {
  name: readLatin1String(name),
  rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
  rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
  fields: []
 };
}
function __embind_register_value_object_field(structType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
 structRegistrations[structType].fields.push({
  fieldName: readLatin1String(fieldName),
  getterReturnType: getterReturnType,
  getter: embind__requireFunction(getterSignature, getter),
  getterContext: getterContext,
  setterArgumentType: setterArgumentType,
  setter: embind__requireFunction(setterSignature, setter),
  setterContext: setterContext
 });
}
function __embind_register_void(rawType, name) {
 name = readLatin1String(name);
 registerType(rawType, {
  isVoid: true,
  name: name,
  "argPackAdvance": 0,
  "fromWireType": (function() {
   return undefined;
  }),
  "toWireType": (function(destructors, o) {
   return undefined;
  })
 });
}
function __emval_incref(handle) {
 if (handle > 4) {
  emval_handle_array[handle].refcount += 1;
 }
}
function requireRegisteredType(rawType, humanName) {
 var impl = registeredTypes[rawType];
 if (undefined === impl) {
  throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
 }
 return impl;
}
function __emval_take_value(type, argv) {
 type = requireRegisteredType(type, "_emval_take_value");
 var v = type["readValueFromPointer"](argv);
 return __emval_register(v);
}
function _abort() {
 Module["abort"]();
}
function _emscripten_memcpy_big(dest, src, num) {
 HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
 return dest;
}
var PTHREAD_SPECIFIC = {};
function _pthread_getspecific(key) {
 return PTHREAD_SPECIFIC[key] || 0;
}
var PTHREAD_SPECIFIC_NEXT_KEY = 1;
function _pthread_key_create(key, destructor) {
 if (key == 0) {
  return ERRNO_CODES.EINVAL;
 }
 HEAP32[key >> 2] = PTHREAD_SPECIFIC_NEXT_KEY;
 PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
 PTHREAD_SPECIFIC_NEXT_KEY++;
 return 0;
}
function _pthread_once(ptr, func) {
 if (!_pthread_once.seen) _pthread_once.seen = {};
 if (ptr in _pthread_once.seen) return;
 Module["dynCall_v"](func);
 _pthread_once.seen[ptr] = 1;
}
function _pthread_setspecific(key, value) {
 if (!(key in PTHREAD_SPECIFIC)) {
  return ERRNO_CODES.EINVAL;
 }
 PTHREAD_SPECIFIC[key] = value;
 return 0;
}
FS.staticInit();
__ATINIT__.unshift((function() {
 if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
}));
__ATMAIN__.push((function() {
 FS.ignorePermissions = false;
}));
__ATEXIT__.push((function() {
 FS.quit();
}));
__ATINIT__.unshift((function() {
 TTY.init();
}));
__ATEXIT__.push((function() {
 TTY.shutdown();
}));
if (ENVIRONMENT_IS_NODE) {
 var fs = require("fs");
 var NODEJS_PATH = require("path");
 NODEFS.staticInit();
}
InternalError = Module["InternalError"] = extendError(Error, "InternalError");
embind_init_charCodes();
BindingError = Module["BindingError"] = extendError(Error, "BindingError");
init_ClassHandle();
init_RegisteredPointer();
init_embind();
UnboundTypeError = Module["UnboundTypeError"] = extendError(Error, "UnboundTypeError");
init_emval();
DYNAMICTOP_PTR = staticAlloc(4);
STACK_BASE = STACKTOP = alignMemory(STATICTOP);
STACK_MAX = STACK_BASE + TOTAL_STACK;
DYNAMIC_BASE = alignMemory(STACK_MAX);
HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
staticSealed = true;
var ASSERTIONS = false;
function intArrayFromString(stringy, dontAddNull, length) {
 var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
 var u8array = new Array(len);
 var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
 if (dontAddNull) u8array.length = numBytesWritten;
 return u8array;
}
function intArrayToString(array) {
 var ret = [];
 for (var i = 0; i < array.length; i++) {
  var chr = array[i];
  if (chr > 255) {
   if (ASSERTIONS) {
    assert(false, "Character code " + chr + " (" + String.fromCharCode(chr) + ")  at offset " + i + " not in 0x00-0xFF.");
   }
   chr &= 255;
  }
  ret.push(String.fromCharCode(chr));
 }
 return ret.join("");
}
var decodeBase64 = typeof atob === "function" ? atob : (function(input) {
 var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
 var output = "";
 var chr1, chr2, chr3;
 var enc1, enc2, enc3, enc4;
 var i = 0;
 input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
 do {
  enc1 = keyStr.indexOf(input.charAt(i++));
  enc2 = keyStr.indexOf(input.charAt(i++));
  enc3 = keyStr.indexOf(input.charAt(i++));
  enc4 = keyStr.indexOf(input.charAt(i++));
  chr1 = enc1 << 2 | enc2 >> 4;
  chr2 = (enc2 & 15) << 4 | enc3 >> 2;
  chr3 = (enc3 & 3) << 6 | enc4;
  output = output + String.fromCharCode(chr1);
  if (enc3 !== 64) {
   output = output + String.fromCharCode(chr2);
  }
  if (enc4 !== 64) {
   output = output + String.fromCharCode(chr3);
  }
 } while (i < input.length);
 return output;
});
function intArrayFromBase64(s) {
 if (typeof ENVIRONMENT_IS_NODE === "boolean" && ENVIRONMENT_IS_NODE) {
  var buf;
  try {
   buf = Buffer.from(s, "base64");
  } catch (_) {
   buf = new Buffer(s, "base64");
  }
  return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
 }
 try {
  var decoded = decodeBase64(s);
  var bytes = new Uint8Array(decoded.length);
  for (var i = 0; i < decoded.length; ++i) {
   bytes[i] = decoded.charCodeAt(i);
  }
  return bytes;
 } catch (_) {
  throw new Error("Converting base64 string to bytes failed.");
 }
}
function tryParseAsDataURI(filename) {
 if (!isDataURI(filename)) {
  return;
 }
 return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}
Module.asmGlobalArg = {
 "Math": Math,
 "Int8Array": Int8Array,
 "Int16Array": Int16Array,
 "Int32Array": Int32Array,
 "Uint8Array": Uint8Array,
 "Uint16Array": Uint16Array,
 "Uint32Array": Uint32Array,
 "Float32Array": Float32Array,
 "Float64Array": Float64Array,
 "NaN": NaN,
 "Infinity": Infinity
};
Module.asmLibraryArg = {
 "a": abort,
 "b": assert,
 "c": enlargeMemory,
 "d": getTotalMemory,
 "e": setTempRet0,
 "f": getTempRet0,
 "g": abortOnCannotGrowMemory,
 "h": ClassHandle,
 "i": ClassHandle_clone,
 "j": ClassHandle_delete,
 "k": ClassHandle_deleteLater,
 "l": ClassHandle_isAliasOf,
 "m": ClassHandle_isDeleted,
 "n": RegisteredClass,
 "o": RegisteredPointer,
 "p": RegisteredPointer_deleteObject,
 "q": RegisteredPointer_destructor,
 "r": RegisteredPointer_fromWireType,
 "s": RegisteredPointer_getPointee,
 "t": __ZSt18uncaught_exceptionv,
 "u": ___assert_fail,
 "v": ___cxa_allocate_exception,
 "w": ___cxa_begin_catch,
 "x": ___cxa_find_matching_catch,
 "y": ___cxa_throw,
 "z": ___gxx_personality_v0,
 "A": ___resumeException,
 "B": ___setErrNo,
 "C": ___syscall140,
 "D": ___syscall146,
 "E": ___syscall221,
 "F": ___syscall3,
 "G": ___syscall5,
 "H": ___syscall6,
 "I": __embind_finalize_value_object,
 "J": __embind_register_bool,
 "K": __embind_register_class,
 "L": __embind_register_class_constructor,
 "M": __embind_register_class_function,
 "N": __embind_register_emval,
 "O": __embind_register_float,
 "P": __embind_register_function,
 "Q": __embind_register_integer,
 "R": __embind_register_memory_view,
 "S": __embind_register_std_string,
 "T": __embind_register_std_wstring,
 "U": __embind_register_value_object,
 "V": __embind_register_value_object_field,
 "W": __embind_register_void,
 "X": __emval_decref,
 "Y": __emval_incref,
 "Z": __emval_register,
 "_": __emval_take_value,
 "$": _abort,
 "aa": _embind_repr,
 "ab": _emscripten_memcpy_big,
 "ac": _pthread_getspecific,
 "ad": _pthread_key_create,
 "ae": _pthread_once,
 "af": _pthread_setspecific,
 "ag": constNoSmartPtrRawPointerToWireType,
 "ah": count_emval_handles,
 "ai": craftInvokerFunction,
 "aj": createNamedFunction,
 "ak": downcastPointer,
 "al": embind__requireFunction,
 "am": embind_init_charCodes,
 "an": ensureOverloadTable,
 "ao": exposePublicSymbol,
 "ap": extendError,
 "aq": floatReadValueFromPointer,
 "ar": flushPendingDeletes,
 "as": genericPointerToWireType,
 "at": getBasestPointer,
 "au": getInheritedInstance,
 "av": getInheritedInstanceCount,
 "aw": getLiveInheritedInstances,
 "ax": getShiftFromSize,
 "ay": getTypeName,
 "az": get_first_emval,
 "aA": heap32VectorToArray,
 "aB": init_ClassHandle,
 "aC": init_RegisteredPointer,
 "aD": init_embind,
 "aE": init_emval,
 "aF": integerReadValueFromPointer,
 "aG": makeClassHandle,
 "aH": makeLegalFunctionName,
 "aI": new_,
 "aJ": nonConstNoSmartPtrRawPointerToWireType,
 "aK": readLatin1String,
 "aL": registerType,
 "aM": replacePublicSymbol,
 "aN": requireRegisteredType,
 "aO": runDestructor,
 "aP": runDestructors,
 "aQ": setDelayFunction,
 "aR": shallowCopyInternalPointer,
 "aS": simpleReadValueFromPointer,
 "aT": throwBindingError,
 "aU": throwInstanceAlreadyDeleted,
 "aV": throwInternalError,
 "aW": throwUnboundTypeError,
 "aX": upcastPointer,
 "aY": whenDependentTypesAreResolved,
 "aZ": DYNAMICTOP_PTR,
 "a_": tempDoublePtr,
 "a$": STACKTOP,
 "ba": STACK_MAX
};
// EMSCRIPTEN_START_ASM

var asm = (/** @suppress {uselessCode} */ function(global,env,buffer) {

 "use asm";
 var a = new global.Int8Array(buffer);
 var b = new global.Int16Array(buffer);
 var c = new global.Int32Array(buffer);
 var d = new global.Uint8Array(buffer);
 var e = new global.Uint16Array(buffer);
 var f = new global.Uint32Array(buffer);
 var g = new global.Float32Array(buffer);
 var h = new global.Float64Array(buffer);
 var i = env.aZ | 0;
 var j = env.a_ | 0;
 var k = env.a$ | 0;
 var l = env.ba | 0;
 var m = 0;
 var n = 0;
 var o = 0;
 var p = 0;
 var q = global.NaN, r = global.Infinity;
 var s = 0, t = 0, u = 0, v = 0, w = 0.0;
 var x = global.Math.floor;
 var y = global.Math.abs;
 var z = global.Math.sqrt;
 var A = global.Math.pow;
 var B = global.Math.cos;
 var C = global.Math.sin;
 var D = global.Math.tan;
 var E = global.Math.acos;
 var F = global.Math.asin;
 var G = global.Math.atan;
 var H = global.Math.atan2;
 var I = global.Math.exp;
 var J = global.Math.log;
 var K = global.Math.ceil;
 var L = global.Math.imul;
 var M = global.Math.min;
 var N = global.Math.max;
 var O = global.Math.clz32;
 var P = env.a;
 var Q = env.b;
 var R = env.c;
 var S = env.d;
 var T = env.e;
 var U = env.f;
 var V = env.g;
 var W = env.h;
 var X = env.i;
 var Y = env.j;
 var Z = env.k;
 var _ = env.l;
 var $ = env.m;
 var aa = env.n;
 var ba = env.o;
 var ca = env.p;
 var da = env.q;
 var ea = env.r;
 var fa = env.s;
 var ga = env.t;
 var ha = env.u;
 var ia = env.v;
 var ja = env.w;
 var ka = env.x;
 var la = env.y;
 var ma = env.z;
 var na = env.A;
 var oa = env.B;
 var pa = env.C;
 var qa = env.D;
 var ra = env.E;
 var sa = env.F;
 var ta = env.G;
 var ua = env.H;
 var va = env.I;
 var wa = env.J;
 var xa = env.K;
 var ya = env.L;
 var za = env.M;
 var Aa = env.N;
 var Ba = env.O;
 var Ca = env.P;
 var Da = env.Q;
 var Ea = env.R;
 var Fa = env.S;
 var Ga = env.T;
 var Ha = env.U;
 var Ia = env.V;
 var Ja = env.W;
 var Ka = env.X;
 var La = env.Y;
 var Ma = env.Z;
 var Na = env._;
 var Oa = env.$;
 var Pa = env.aa;
 var Qa = env.ab;
 var Ra = env.ac;
 var Sa = env.ad;
 var Ta = env.ae;
 var Ua = env.af;
 var Va = env.ag;
 var Wa = env.ah;
 var Xa = env.ai;
 var Ya = env.aj;
 var Za = env.ak;
 var _a = env.al;
 var $a = env.am;
 var ab = env.an;
 var bb = env.ao;
 var cb = env.ap;
 var db = env.aq;
 var eb = env.ar;
 var fb = env.as;
 var gb = env.at;
 var hb = env.au;
 var ib = env.av;
 var jb = env.aw;
 var kb = env.ax;
 var lb = env.ay;
 var mb = env.az;
 var nb = env.aA;
 var ob = env.aB;
 var pb = env.aC;
 var qb = env.aD;
 var rb = env.aE;
 var sb = env.aF;
 var tb = env.aG;
 var ub = env.aH;
 var vb = env.aI;
 var wb = env.aJ;
 var xb = env.aK;
 var yb = env.aL;
 var zb = env.aM;
 var Ab = env.aN;
 var Bb = env.aO;
 var Cb = env.aP;
 var Db = env.aQ;
 var Eb = env.aR;
 var Fb = env.aS;
 var Gb = env.aT;
 var Hb = env.aU;
 var Ib = env.aV;
 var Jb = env.aW;
 var Kb = env.aX;
 var Lb = env.aY;
 var Mb = 0.0;
 
// EMSCRIPTEN_START_FUNCS
function Ic(b, c, e, f) {
 b = b | 0;
 c = c | 0;
 e = e | 0;
 f = f | 0;
 var g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0, ia = 0, ja = 0, ka = 0, la = 0, ma = 0, na = 0, oa = 0, pa = 0, qa = 0, ra = 0, sa = 0, ta = 0, ua = 0, va = 0, wa = 0, xa = 0, ya = 0, za = 0, Aa = 0, Ba = 0, Ca = 0, Da = 0, Ea = 0, Fa = 0, Ga = 0, Ha = 0, Ia = 0, Ja = 0, Ka = 0, La = 0, Ma = 0, Na = 0, Oa = 0, Pa = 0, Qa = 0, Ra = 0, Sa = 0, Ta = 0, Ua = 0, Va = 0, Wa = 0, Xa = 0, Ya = 0, Za = 0, _a = 0, $a = 0, ab = 0, bb = 0, cb = 0, db = 0, eb = 0, fb = 0, gb = 0, hb = 0, ib = 0, jb = 0, kb = 0, lb = 0, mb = 0, nb = 0, ob = 0, pb = 0, qb = 0, rb = 0, sb = 0, tb = 0, ub = 0, vb = 0, wb = 0, xb = 0, yb = 0, zb = 0, Ab = 0, Bb = 0, Cb = 0, Db = 0, Eb = 0, Fb = 0, Gb = 0, Hb = 0, Ib = 0, Jb = 0, Kb = 0, Lb = 0, Mb = 0, Nb = 0, Ob = 0, Pb = 0, Qb = 0, Rb = 0, Sb = 0, Tb = 0, Ub = 0;
 fb = a[c + 2 >> 0] | 0;
 _ = d[c >> 0] | 0;
 ob = gg(d[c + 1 >> 0] | 0 | 0, 0, 8) | 0;
 aa = U() | 0;
 fb = fb & 255;
 q = gg(fb | 0, 0, 16) | 0;
 U() | 0;
 q = ob | _ | q & 2031616;
 _ = gg(d[c + 3 >> 0] | 0 | 0, 0, 8) | 0;
 ob = U() | 0;
 $a = gg(d[c + 4 >> 0] | 0 | 0, 0, 16) | 0;
 ob = ob | (U() | 0);
 E = d[c + 5 >> 0] | 0;
 ra = gg(E | 0, 0, 24) | 0;
 ob = fg(_ | fb | $a | ra | 0, ob | (U() | 0) | 0, 5) | 0;
 U() | 0;
 ob = ob & 2097151;
 ra = a[c + 7 >> 0] | 0;
 $a = gg(d[c + 6 >> 0] | 0 | 0, 0, 8) | 0;
 fb = U() | 0;
 ra = ra & 255;
 _ = gg(ra | 0, 0, 16) | 0;
 fb = fg($a | E | _ | 0, fb | (U() | 0) | 0, 2) | 0;
 U() | 0;
 fb = fb & 2097151;
 _ = gg(d[c + 8 >> 0] | 0 | 0, 0, 8) | 0;
 E = U() | 0;
 $a = gg(d[c + 9 >> 0] | 0 | 0, 0, 16) | 0;
 E = E | (U() | 0);
 lb = d[c + 10 >> 0] | 0;
 cb = gg(lb | 0, 0, 24) | 0;
 E = fg(_ | ra | $a | cb | 0, E | (U() | 0) | 0, 7) | 0;
 U() | 0;
 E = E & 2097151;
 cb = gg(d[c + 11 >> 0] | 0 | 0, 0, 8) | 0;
 $a = U() | 0;
 ra = gg(d[c + 12 >> 0] | 0 | 0, 0, 16) | 0;
 $a = $a | (U() | 0);
 _ = d[c + 13 >> 0] | 0;
 ub = gg(_ | 0, 0, 24) | 0;
 $a = fg(cb | lb | ra | ub | 0, $a | (U() | 0) | 0, 4) | 0;
 U() | 0;
 $a = $a & 2097151;
 ub = a[c + 15 >> 0] | 0;
 ra = gg(d[c + 14 >> 0] | 0 | 0, 0, 8) | 0;
 lb = U() | 0;
 ub = ub & 255;
 cb = gg(ub | 0, 0, 16) | 0;
 lb = fg(ra | _ | cb | 0, lb | (U() | 0) | 0, 1) | 0;
 U() | 0;
 lb = lb & 2097151;
 cb = gg(d[c + 16 >> 0] | 0 | 0, 0, 8) | 0;
 _ = U() | 0;
 ra = gg(d[c + 17 >> 0] | 0 | 0, 0, 16) | 0;
 _ = _ | (U() | 0);
 Ha = d[c + 18 >> 0] | 0;
 o = gg(Ha | 0, 0, 24) | 0;
 _ = fg(cb | ub | ra | o | 0, _ | (U() | 0) | 0, 6) | 0;
 U() | 0;
 _ = _ & 2097151;
 o = a[c + 20 >> 0] | 0;
 ra = gg(d[c + 19 >> 0] | 0 | 0, 0, 8) | 0;
 ub = U() | 0;
 o = gg(o & 255 | 0, 0, 16) | 0;
 ub = fg(ra | Ha | o | 0, ub | (U() | 0) | 0, 3) | 0;
 o = U() | 0;
 Ha = a[c + 23 >> 0] | 0;
 ra = d[c + 21 >> 0] | 0;
 cb = gg(d[c + 22 >> 0] | 0 | 0, 0, 8) | 0;
 w = U() | 0;
 Ha = Ha & 255;
 t = gg(Ha | 0, 0, 16) | 0;
 U() | 0;
 t = cb | ra | t & 2031616;
 ra = gg(d[c + 24 >> 0] | 0 | 0, 0, 8) | 0;
 cb = U() | 0;
 k = gg(d[c + 25 >> 0] | 0 | 0, 0, 16) | 0;
 cb = cb | (U() | 0);
 x = d[c + 26 >> 0] | 0;
 ca = gg(x | 0, 0, 24) | 0;
 cb = fg(ra | Ha | k | ca | 0, cb | (U() | 0) | 0, 5) | 0;
 U() | 0;
 cb = cb & 2097151;
 ca = a[c + 28 >> 0] | 0;
 k = gg(d[c + 27 >> 0] | 0 | 0, 0, 8) | 0;
 Ha = U() | 0;
 ca = ca & 255;
 ra = gg(ca | 0, 0, 16) | 0;
 Ha = fg(k | x | ra | 0, Ha | (U() | 0) | 0, 2) | 0;
 U() | 0;
 Ha = Ha & 2097151;
 ra = gg(d[c + 29 >> 0] | 0 | 0, 0, 8) | 0;
 x = U() | 0;
 k = gg(d[c + 30 >> 0] | 0 | 0, 0, 16) | 0;
 x = x | (U() | 0);
 vb = gg(d[c + 31 >> 0] | 0 | 0, 0, 24) | 0;
 x = fg(ra | ca | k | vb | 0, x | (U() | 0) | 0, 7) | 0;
 vb = U() | 0;
 k = a[e + 2 >> 0] | 0;
 ca = d[e >> 0] | 0;
 ra = gg(d[e + 1 >> 0] | 0 | 0, 0, 8) | 0;
 sb = U() | 0;
 k = k & 255;
 tb = gg(k | 0, 0, 16) | 0;
 U() | 0;
 tb = ra | ca | tb & 2031616;
 ca = gg(d[e + 3 >> 0] | 0 | 0, 0, 8) | 0;
 ra = U() | 0;
 ha = gg(d[e + 4 >> 0] | 0 | 0, 0, 16) | 0;
 ra = ra | (U() | 0);
 n = d[e + 5 >> 0] | 0;
 Pb = gg(n | 0, 0, 24) | 0;
 ra = fg(ca | k | ha | Pb | 0, ra | (U() | 0) | 0, 5) | 0;
 U() | 0;
 ra = ra & 2097151;
 Pb = a[e + 7 >> 0] | 0;
 ha = gg(d[e + 6 >> 0] | 0 | 0, 0, 8) | 0;
 k = U() | 0;
 Pb = Pb & 255;
 ca = gg(Pb | 0, 0, 16) | 0;
 k = fg(ha | n | ca | 0, k | (U() | 0) | 0, 2) | 0;
 U() | 0;
 k = k & 2097151;
 ca = gg(d[e + 8 >> 0] | 0 | 0, 0, 8) | 0;
 n = U() | 0;
 ha = gg(d[e + 9 >> 0] | 0 | 0, 0, 16) | 0;
 n = n | (U() | 0);
 v = d[e + 10 >> 0] | 0;
 Z = gg(v | 0, 0, 24) | 0;
 n = fg(ca | Pb | ha | Z | 0, n | (U() | 0) | 0, 7) | 0;
 U() | 0;
 n = n & 2097151;
 Z = gg(d[e + 11 >> 0] | 0 | 0, 0, 8) | 0;
 ha = U() | 0;
 Pb = gg(d[e + 12 >> 0] | 0 | 0, 0, 16) | 0;
 ha = ha | (U() | 0);
 ca = d[e + 13 >> 0] | 0;
 O = gg(ca | 0, 0, 24) | 0;
 ha = fg(Z | v | Pb | O | 0, ha | (U() | 0) | 0, 4) | 0;
 U() | 0;
 ha = ha & 2097151;
 O = a[e + 15 >> 0] | 0;
 Pb = gg(d[e + 14 >> 0] | 0 | 0, 0, 8) | 0;
 v = U() | 0;
 O = O & 255;
 Z = gg(O | 0, 0, 16) | 0;
 v = fg(Pb | ca | Z | 0, v | (U() | 0) | 0, 1) | 0;
 U() | 0;
 v = v & 2097151;
 Z = gg(d[e + 16 >> 0] | 0 | 0, 0, 8) | 0;
 ca = U() | 0;
 Pb = gg(d[e + 17 >> 0] | 0 | 0, 0, 16) | 0;
 ca = ca | (U() | 0);
 ya = d[e + 18 >> 0] | 0;
 P = gg(ya | 0, 0, 24) | 0;
 ca = fg(Z | O | Pb | P | 0, ca | (U() | 0) | 0, 6) | 0;
 U() | 0;
 ca = ca & 2097151;
 P = a[e + 20 >> 0] | 0;
 Pb = gg(d[e + 19 >> 0] | 0 | 0, 0, 8) | 0;
 O = U() | 0;
 P = gg(P & 255 | 0, 0, 16) | 0;
 O = fg(Pb | ya | P | 0, O | (U() | 0) | 0, 3) | 0;
 P = U() | 0;
 ya = a[e + 23 >> 0] | 0;
 Pb = d[e + 21 >> 0] | 0;
 Z = gg(d[e + 22 >> 0] | 0 | 0, 0, 8) | 0;
 G = U() | 0;
 ya = ya & 255;
 H = gg(ya | 0, 0, 16) | 0;
 U() | 0;
 H = Z | Pb | H & 2031616;
 Pb = gg(d[e + 24 >> 0] | 0 | 0, 0, 8) | 0;
 Z = U() | 0;
 Ea = gg(d[e + 25 >> 0] | 0 | 0, 0, 16) | 0;
 Z = Z | (U() | 0);
 za = d[e + 26 >> 0] | 0;
 ma = gg(za | 0, 0, 24) | 0;
 Z = fg(Pb | ya | Ea | ma | 0, Z | (U() | 0) | 0, 5) | 0;
 U() | 0;
 Z = Z & 2097151;
 ma = a[e + 28 >> 0] | 0;
 Ea = gg(d[e + 27 >> 0] | 0 | 0, 0, 8) | 0;
 ya = U() | 0;
 ma = ma & 255;
 Pb = gg(ma | 0, 0, 16) | 0;
 ya = fg(Ea | za | Pb | 0, ya | (U() | 0) | 0, 2) | 0;
 U() | 0;
 ya = ya & 2097151;
 Pb = gg(d[e + 29 >> 0] | 0 | 0, 0, 8) | 0;
 za = U() | 0;
 Ea = gg(d[e + 30 >> 0] | 0 | 0, 0, 16) | 0;
 za = za | (U() | 0);
 Ga = gg(d[e + 31 >> 0] | 0 | 0, 0, 24) | 0;
 za = fg(Pb | ma | Ea | Ga | 0, za | (U() | 0) | 0, 7) | 0;
 Ga = U() | 0;
 Ea = a[f + 2 >> 0] | 0;
 ma = d[f >> 0] | 0;
 Pb = gg(d[f + 1 >> 0] | 0 | 0, 0, 8) | 0;
 Da = U() | 0;
 Ea = Ea & 255;
 ta = gg(Ea | 0, 0, 16) | 0;
 U() | 0;
 Ta = gg(d[f + 3 >> 0] | 0 | 0, 0, 8) | 0;
 Nb = U() | 0;
 Aa = gg(d[f + 4 >> 0] | 0 | 0, 0, 16) | 0;
 Nb = Nb | (U() | 0);
 va = d[f + 5 >> 0] | 0;
 La = gg(va | 0, 0, 24) | 0;
 Nb = fg(Ta | Ea | Aa | La | 0, Nb | (U() | 0) | 0, 5) | 0;
 U() | 0;
 La = a[f + 7 >> 0] | 0;
 Aa = gg(d[f + 6 >> 0] | 0 | 0, 0, 8) | 0;
 Ea = U() | 0;
 La = La & 255;
 Ta = gg(La | 0, 0, 16) | 0;
 Ea = fg(Aa | va | Ta | 0, Ea | (U() | 0) | 0, 2) | 0;
 U() | 0;
 Ta = gg(d[f + 8 >> 0] | 0 | 0, 0, 8) | 0;
 va = U() | 0;
 Aa = gg(d[f + 9 >> 0] | 0 | 0, 0, 16) | 0;
 va = va | (U() | 0);
 Ia = d[f + 10 >> 0] | 0;
 u = gg(Ia | 0, 0, 24) | 0;
 va = fg(Ta | La | Aa | u | 0, va | (U() | 0) | 0, 7) | 0;
 U() | 0;
 u = gg(d[f + 11 >> 0] | 0 | 0, 0, 8) | 0;
 Aa = U() | 0;
 La = gg(d[f + 12 >> 0] | 0 | 0, 0, 16) | 0;
 Aa = Aa | (U() | 0);
 Ta = d[f + 13 >> 0] | 0;
 la = gg(Ta | 0, 0, 24) | 0;
 Aa = fg(u | Ia | La | la | 0, Aa | (U() | 0) | 0, 4) | 0;
 U() | 0;
 la = a[f + 15 >> 0] | 0;
 La = gg(d[f + 14 >> 0] | 0 | 0, 0, 8) | 0;
 Ia = U() | 0;
 la = la & 255;
 u = gg(la | 0, 0, 16) | 0;
 Ia = fg(La | Ta | u | 0, Ia | (U() | 0) | 0, 1) | 0;
 U() | 0;
 u = gg(d[f + 16 >> 0] | 0 | 0, 0, 8) | 0;
 Ta = U() | 0;
 La = gg(d[f + 17 >> 0] | 0 | 0, 0, 16) | 0;
 Ta = Ta | (U() | 0);
 r = d[f + 18 >> 0] | 0;
 ka = gg(r | 0, 0, 24) | 0;
 Ta = fg(u | la | La | ka | 0, Ta | (U() | 0) | 0, 6) | 0;
 U() | 0;
 ka = a[f + 20 >> 0] | 0;
 La = gg(d[f + 19 >> 0] | 0 | 0, 0, 8) | 0;
 la = U() | 0;
 ka = gg(ka & 255 | 0, 0, 16) | 0;
 la = fg(La | r | ka | 0, la | (U() | 0) | 0, 3) | 0;
 ka = U() | 0;
 r = a[f + 23 >> 0] | 0;
 La = d[f + 21 >> 0] | 0;
 u = gg(d[f + 22 >> 0] | 0 | 0, 0, 8) | 0;
 Va = U() | 0;
 r = r & 255;
 rb = gg(r | 0, 0, 16) | 0;
 U() | 0;
 Mb = gg(d[f + 24 >> 0] | 0 | 0, 0, 8) | 0;
 Na = U() | 0;
 Ca = gg(d[f + 25 >> 0] | 0 | 0, 0, 16) | 0;
 Na = Na | (U() | 0);
 db = d[f + 26 >> 0] | 0;
 Ob = gg(db | 0, 0, 24) | 0;
 Na = fg(Mb | r | Ca | Ob | 0, Na | (U() | 0) | 0, 5) | 0;
 U() | 0;
 Ob = a[f + 28 >> 0] | 0;
 Ca = gg(d[f + 27 >> 0] | 0 | 0, 0, 8) | 0;
 r = U() | 0;
 Ob = Ob & 255;
 Mb = gg(Ob | 0, 0, 16) | 0;
 r = fg(Ca | db | Mb | 0, r | (U() | 0) | 0, 2) | 0;
 U() | 0;
 Mb = gg(d[f + 29 >> 0] | 0 | 0, 0, 8) | 0;
 db = U() | 0;
 Ca = gg(d[f + 30 >> 0] | 0 | 0, 0, 16) | 0;
 db = db | (U() | 0);
 jb = gg(d[f + 31 >> 0] | 0 | 0, 0, 24) | 0;
 db = fg(Mb | Ob | Ca | jb | 0, db | (U() | 0) | 0, 7) | 0;
 jb = U() | 0;
 Ca = _f(tb | 0, sb | 0, q | 0, aa | 0) | 0;
 Ca = ag(Pb | ma | ta & 2031616 | 0, Da | 0, Ca | 0, U() | 0) | 0;
 Da = U() | 0;
 ta = _f(tb | 0, sb | 0, ob | 0, 0) | 0;
 ma = U() | 0;
 Pb = _f(ra | 0, 0, q | 0, aa | 0) | 0;
 Ob = U() | 0;
 Mb = _f(tb | 0, sb | 0, fb | 0, 0) | 0;
 Jb = U() | 0;
 Ib = _f(ra | 0, 0, ob | 0, 0) | 0;
 Lb = U() | 0;
 Kb = _f(k | 0, 0, q | 0, aa | 0) | 0;
 Fa = U() | 0;
 Jb = $f(Ib | 0, Lb | 0, Mb | 0, Jb | 0) | 0;
 Fa = $f(Jb | 0, U() | 0, Kb | 0, Fa | 0) | 0;
 Fa = ag(Ea & 2097151 | 0, 0, Fa | 0, U() | 0) | 0;
 Ea = U() | 0;
 Kb = _f(tb | 0, sb | 0, E | 0, 0) | 0;
 Jb = U() | 0;
 Mb = _f(ra | 0, 0, fb | 0, 0) | 0;
 Lb = U() | 0;
 Ib = _f(k | 0, 0, ob | 0, 0) | 0;
 Ja = U() | 0;
 ea = _f(n | 0, 0, q | 0, aa | 0) | 0;
 fa = U() | 0;
 Bb = _f(tb | 0, sb | 0, $a | 0, 0) | 0;
 Cb = U() | 0;
 zb = _f(ra | 0, 0, E | 0, 0) | 0;
 Ab = U() | 0;
 Db = _f(k | 0, 0, fb | 0, 0) | 0;
 Gb = U() | 0;
 Hb = _f(n | 0, 0, ob | 0, 0) | 0;
 Eb = U() | 0;
 Fb = _f(ha | 0, 0, q | 0, aa | 0) | 0;
 Ba = U() | 0;
 Cb = $f(zb | 0, Ab | 0, Bb | 0, Cb | 0) | 0;
 Gb = $f(Cb | 0, U() | 0, Db | 0, Gb | 0) | 0;
 Eb = $f(Gb | 0, U() | 0, Hb | 0, Eb | 0) | 0;
 Ba = $f(Eb | 0, U() | 0, Fb | 0, Ba | 0) | 0;
 Ba = ag(Aa & 2097151 | 0, 0, Ba | 0, U() | 0) | 0;
 Aa = U() | 0;
 Fb = _f(tb | 0, sb | 0, lb | 0, 0) | 0;
 Eb = U() | 0;
 Hb = _f(ra | 0, 0, $a | 0, 0) | 0;
 Gb = U() | 0;
 Db = _f(k | 0, 0, E | 0, 0) | 0;
 Cb = U() | 0;
 Bb = _f(n | 0, 0, fb | 0, 0) | 0;
 Ab = U() | 0;
 zb = _f(ha | 0, 0, ob | 0, 0) | 0;
 ua = U() | 0;
 ja = _f(v | 0, 0, q | 0, aa | 0) | 0;
 ia = U() | 0;
 hb = _f(tb | 0, sb | 0, _ | 0, 0) | 0;
 gb = U() | 0;
 Ra = _f(ra | 0, 0, lb | 0, 0) | 0;
 Qa = U() | 0;
 c = _f(k | 0, 0, $a | 0, 0) | 0;
 f = U() | 0;
 Xa = _f(n | 0, 0, E | 0, 0) | 0;
 Wa = U() | 0;
 sa = _f(ha | 0, 0, fb | 0, 0) | 0;
 xb = U() | 0;
 yb = _f(v | 0, 0, ob | 0, 0) | 0;
 na = U() | 0;
 wb = _f(ca | 0, 0, q | 0, aa | 0) | 0;
 Sa = U() | 0;
 gb = $f(Ra | 0, Qa | 0, hb | 0, gb | 0) | 0;
 f = $f(gb | 0, U() | 0, c | 0, f | 0) | 0;
 Wa = $f(f | 0, U() | 0, Xa | 0, Wa | 0) | 0;
 xb = $f(Wa | 0, U() | 0, sa | 0, xb | 0) | 0;
 na = $f(xb | 0, U() | 0, yb | 0, na | 0) | 0;
 Sa = $f(na | 0, U() | 0, wb | 0, Sa | 0) | 0;
 Sa = ag(Ta & 2097151 | 0, 0, Sa | 0, U() | 0) | 0;
 Ta = U() | 0;
 wb = _f(tb | 0, sb | 0, ub | 0, o | 0) | 0;
 na = U() | 0;
 yb = _f(ra | 0, 0, _ | 0, 0) | 0;
 xb = U() | 0;
 sa = _f(k | 0, 0, lb | 0, 0) | 0;
 Wa = U() | 0;
 Xa = _f(n | 0, 0, $a | 0, 0) | 0;
 f = U() | 0;
 c = _f(ha | 0, 0, E | 0, 0) | 0;
 gb = U() | 0;
 hb = _f(v | 0, 0, fb | 0, 0) | 0;
 Qa = U() | 0;
 Ra = _f(ca | 0, 0, ob | 0, 0) | 0;
 j = U() | 0;
 B = _f(O | 0, P | 0, q | 0, aa | 0) | 0;
 S = U() | 0;
 eb = _f(tb | 0, sb | 0, t | 0, w | 0) | 0;
 mb = U() | 0;
 g = _f(ra | 0, 0, ub | 0, o | 0) | 0;
 z = U() | 0;
 nb = _f(k | 0, 0, _ | 0, 0) | 0;
 C = U() | 0;
 Pa = _f(n | 0, 0, lb | 0, 0) | 0;
 X = U() | 0;
 W = _f(ha | 0, 0, $a | 0, 0) | 0;
 Ya = U() | 0;
 Za = _f(v | 0, 0, E | 0, 0) | 0;
 M = U() | 0;
 L = _f(ca | 0, 0, fb | 0, 0) | 0;
 bb = U() | 0;
 ab = _f(O | 0, P | 0, ob | 0, 0) | 0;
 Ka = U() | 0;
 qb = _f(H | 0, G | 0, q | 0, aa | 0) | 0;
 Ua = U() | 0;
 mb = $f(g | 0, z | 0, eb | 0, mb | 0) | 0;
 C = $f(mb | 0, U() | 0, nb | 0, C | 0) | 0;
 X = $f(C | 0, U() | 0, Pa | 0, X | 0) | 0;
 Ya = $f(X | 0, U() | 0, W | 0, Ya | 0) | 0;
 M = $f(Ya | 0, U() | 0, Za | 0, M | 0) | 0;
 bb = $f(M | 0, U() | 0, L | 0, bb | 0) | 0;
 Ka = $f(bb | 0, U() | 0, ab | 0, Ka | 0) | 0;
 Ua = $f(Ka | 0, U() | 0, qb | 0, Ua | 0) | 0;
 Ua = ag(u | La | rb & 2031616 | 0, Va | 0, Ua | 0, U() | 0) | 0;
 Va = U() | 0;
 rb = _f(tb | 0, sb | 0, cb | 0, 0) | 0;
 La = U() | 0;
 u = _f(ra | 0, 0, t | 0, w | 0) | 0;
 qb = U() | 0;
 Ka = _f(k | 0, 0, ub | 0, o | 0) | 0;
 ab = U() | 0;
 bb = _f(n | 0, 0, _ | 0, 0) | 0;
 L = U() | 0;
 M = _f(ha | 0, 0, lb | 0, 0) | 0;
 Za = U() | 0;
 Ya = _f(v | 0, 0, $a | 0, 0) | 0;
 W = U() | 0;
 X = _f(ca | 0, 0, E | 0, 0) | 0;
 Pa = U() | 0;
 C = _f(O | 0, P | 0, fb | 0, 0) | 0;
 nb = U() | 0;
 mb = _f(H | 0, G | 0, ob | 0, 0) | 0;
 eb = U() | 0;
 z = _f(Z | 0, 0, q | 0, aa | 0) | 0;
 g = U() | 0;
 s = _f(tb | 0, sb | 0, Ha | 0, 0) | 0;
 $ = U() | 0;
 pb = _f(ra | 0, 0, cb | 0, 0) | 0;
 h = U() | 0;
 I = _f(k | 0, 0, t | 0, w | 0) | 0;
 ba = U() | 0;
 D = _f(n | 0, 0, ub | 0, o | 0) | 0;
 A = U() | 0;
 ib = _f(ha | 0, 0, _ | 0, 0) | 0;
 Y = U() | 0;
 kb = _f(v | 0, 0, lb | 0, 0) | 0;
 e = U() | 0;
 F = _f(ca | 0, 0, $a | 0, 0) | 0;
 i = U() | 0;
 ga = _f(O | 0, P | 0, E | 0, 0) | 0;
 _a = U() | 0;
 Ma = _f(H | 0, G | 0, fb | 0, 0) | 0;
 Oa = U() | 0;
 da = _f(Z | 0, 0, ob | 0, 0) | 0;
 N = U() | 0;
 y = _f(ya | 0, 0, q | 0, aa | 0) | 0;
 m = U() | 0;
 $ = $f(pb | 0, h | 0, s | 0, $ | 0) | 0;
 ba = $f($ | 0, U() | 0, I | 0, ba | 0) | 0;
 A = $f(ba | 0, U() | 0, D | 0, A | 0) | 0;
 Y = $f(A | 0, U() | 0, ib | 0, Y | 0) | 0;
 e = $f(Y | 0, U() | 0, kb | 0, e | 0) | 0;
 i = $f(e | 0, U() | 0, F | 0, i | 0) | 0;
 _a = $f(i | 0, U() | 0, ga | 0, _a | 0) | 0;
 Oa = $f(_a | 0, U() | 0, Ma | 0, Oa | 0) | 0;
 N = $f(Oa | 0, U() | 0, da | 0, N | 0) | 0;
 m = $f(N | 0, U() | 0, y | 0, m | 0) | 0;
 m = ag(r & 2097151 | 0, 0, m | 0, U() | 0) | 0;
 r = U() | 0;
 sb = _f(tb | 0, sb | 0, x | 0, vb | 0) | 0;
 tb = U() | 0;
 y = _f(ra | 0, 0, Ha | 0, 0) | 0;
 N = U() | 0;
 da = _f(k | 0, 0, cb | 0, 0) | 0;
 Oa = U() | 0;
 Ma = _f(n | 0, 0, t | 0, w | 0) | 0;
 _a = U() | 0;
 ga = _f(ha | 0, 0, ub | 0, o | 0) | 0;
 i = U() | 0;
 F = _f(v | 0, 0, _ | 0, 0) | 0;
 e = U() | 0;
 kb = _f(ca | 0, 0, lb | 0, 0) | 0;
 Y = U() | 0;
 ib = _f(O | 0, P | 0, $a | 0, 0) | 0;
 A = U() | 0;
 D = _f(H | 0, G | 0, E | 0, 0) | 0;
 ba = U() | 0;
 I = _f(Z | 0, 0, fb | 0, 0) | 0;
 $ = U() | 0;
 s = _f(ya | 0, 0, ob | 0, 0) | 0;
 h = U() | 0;
 aa = _f(za | 0, Ga | 0, q | 0, aa | 0) | 0;
 q = U() | 0;
 ob = _f(za | 0, Ga | 0, ob | 0, 0) | 0;
 pb = U() | 0;
 J = _f(ya | 0, 0, fb | 0, 0) | 0;
 K = U() | 0;
 Q = _f(Z | 0, 0, E | 0, 0) | 0;
 R = U() | 0;
 pa = _f(H | 0, G | 0, $a | 0, 0) | 0;
 oa = U() | 0;
 p = _f(O | 0, P | 0, lb | 0, 0) | 0;
 l = U() | 0;
 T = _f(ca | 0, 0, _ | 0, 0) | 0;
 qa = U() | 0;
 V = _f(v | 0, 0, ub | 0, o | 0) | 0;
 xa = U() | 0;
 Qb = _f(ha | 0, 0, t | 0, w | 0) | 0;
 wa = U() | 0;
 Rb = _f(n | 0, 0, cb | 0, 0) | 0;
 Sb = U() | 0;
 Ub = _f(k | 0, 0, Ha | 0, 0) | 0;
 Tb = U() | 0;
 ra = _f(ra | 0, 0, x | 0, vb | 0) | 0;
 ra = $f(Ub | 0, Tb | 0, ra | 0, U() | 0) | 0;
 Sb = $f(ra | 0, U() | 0, Rb | 0, Sb | 0) | 0;
 wa = $f(Sb | 0, U() | 0, Qb | 0, wa | 0) | 0;
 xa = $f(wa | 0, U() | 0, V | 0, xa | 0) | 0;
 qa = $f(xa | 0, U() | 0, T | 0, qa | 0) | 0;
 l = $f(qa | 0, U() | 0, p | 0, l | 0) | 0;
 oa = $f(l | 0, U() | 0, pa | 0, oa | 0) | 0;
 R = $f(oa | 0, U() | 0, Q | 0, R | 0) | 0;
 K = $f(R | 0, U() | 0, J | 0, K | 0) | 0;
 pb = $f(K | 0, U() | 0, ob | 0, pb | 0) | 0;
 ob = U() | 0;
 K = _f(za | 0, Ga | 0, E | 0, 0) | 0;
 J = U() | 0;
 R = _f(ya | 0, 0, $a | 0, 0) | 0;
 Q = U() | 0;
 oa = _f(Z | 0, 0, lb | 0, 0) | 0;
 pa = U() | 0;
 l = _f(H | 0, G | 0, _ | 0, 0) | 0;
 p = U() | 0;
 qa = _f(O | 0, P | 0, ub | 0, o | 0) | 0;
 T = U() | 0;
 xa = _f(ca | 0, 0, t | 0, w | 0) | 0;
 V = U() | 0;
 wa = _f(v | 0, 0, cb | 0, 0) | 0;
 Qb = U() | 0;
 Sb = _f(ha | 0, 0, Ha | 0, 0) | 0;
 Rb = U() | 0;
 ra = _f(n | 0, 0, x | 0, vb | 0) | 0;
 ra = $f(Sb | 0, Rb | 0, ra | 0, U() | 0) | 0;
 Qb = $f(ra | 0, U() | 0, wa | 0, Qb | 0) | 0;
 V = $f(Qb | 0, U() | 0, xa | 0, V | 0) | 0;
 T = $f(V | 0, U() | 0, qa | 0, T | 0) | 0;
 p = $f(T | 0, U() | 0, l | 0, p | 0) | 0;
 pa = $f(p | 0, U() | 0, oa | 0, pa | 0) | 0;
 Q = $f(pa | 0, U() | 0, R | 0, Q | 0) | 0;
 J = $f(Q | 0, U() | 0, K | 0, J | 0) | 0;
 K = U() | 0;
 Q = _f(za | 0, Ga | 0, lb | 0, 0) | 0;
 R = U() | 0;
 pa = _f(ya | 0, 0, _ | 0, 0) | 0;
 oa = U() | 0;
 p = _f(Z | 0, 0, ub | 0, o | 0) | 0;
 l = U() | 0;
 T = _f(H | 0, G | 0, t | 0, w | 0) | 0;
 qa = U() | 0;
 V = _f(O | 0, P | 0, cb | 0, 0) | 0;
 xa = U() | 0;
 Qb = _f(ca | 0, 0, Ha | 0, 0) | 0;
 wa = U() | 0;
 ra = _f(v | 0, 0, x | 0, vb | 0) | 0;
 ra = $f(Qb | 0, wa | 0, ra | 0, U() | 0) | 0;
 xa = $f(ra | 0, U() | 0, V | 0, xa | 0) | 0;
 qa = $f(xa | 0, U() | 0, T | 0, qa | 0) | 0;
 l = $f(qa | 0, U() | 0, p | 0, l | 0) | 0;
 oa = $f(l | 0, U() | 0, pa | 0, oa | 0) | 0;
 R = $f(oa | 0, U() | 0, Q | 0, R | 0) | 0;
 Q = U() | 0;
 oa = _f(za | 0, Ga | 0, ub | 0, o | 0) | 0;
 pa = U() | 0;
 l = _f(ya | 0, 0, t | 0, w | 0) | 0;
 p = U() | 0;
 qa = _f(Z | 0, 0, cb | 0, 0) | 0;
 T = U() | 0;
 xa = _f(H | 0, G | 0, Ha | 0, 0) | 0;
 V = U() | 0;
 ra = _f(O | 0, P | 0, x | 0, vb | 0) | 0;
 ra = $f(xa | 0, V | 0, ra | 0, U() | 0) | 0;
 T = $f(ra | 0, U() | 0, qa | 0, T | 0) | 0;
 p = $f(T | 0, U() | 0, l | 0, p | 0) | 0;
 pa = $f(p | 0, U() | 0, oa | 0, pa | 0) | 0;
 oa = U() | 0;
 p = _f(za | 0, Ga | 0, cb | 0, 0) | 0;
 l = U() | 0;
 T = _f(ya | 0, 0, Ha | 0, 0) | 0;
 qa = U() | 0;
 ra = _f(Z | 0, 0, x | 0, vb | 0) | 0;
 ra = $f(T | 0, qa | 0, ra | 0, U() | 0) | 0;
 l = $f(ra | 0, U() | 0, p | 0, l | 0) | 0;
 p = U() | 0;
 ra = ag(0, 0, x | 0, vb | 0) | 0;
 ra = _f(za | 0, Ga | 0, ra | 0, U() | 0) | 0;
 qa = U() | 0;
 T = $f(Ca | 0, Da | 0, 1048576, 0) | 0;
 V = U() | 0;
 xa = eg(T | 0, V | 0, 21) | 0;
 wa = U() | 0;
 ma = $f(Pb | 0, Ob | 0, ta | 0, ma | 0) | 0;
 ta = U() | 0;
 wa = $f(Nb & 2097151 | 0, 0, xa | 0, wa | 0) | 0;
 ta = ag(wa | 0, U() | 0, ma | 0, ta | 0) | 0;
 ma = U() | 0;
 V = ag(Ca | 0, Da | 0, T & -2097152 | 0, V | 0) | 0;
 T = U() | 0;
 Da = $f(Fa | 0, Ea | 0, 1048576, 0) | 0;
 Ca = U() | 0;
 wa = eg(Da | 0, Ca | 0, 21) | 0;
 xa = U() | 0;
 Jb = $f(Mb | 0, Lb | 0, Kb | 0, Jb | 0) | 0;
 Ja = $f(Jb | 0, U() | 0, Ib | 0, Ja | 0) | 0;
 fa = $f(Ja | 0, U() | 0, ea | 0, fa | 0) | 0;
 ea = U() | 0;
 xa = $f(va & 2097151 | 0, 0, wa | 0, xa | 0) | 0;
 ea = ag(xa | 0, U() | 0, fa | 0, ea | 0) | 0;
 fa = U() | 0;
 xa = $f(Ba | 0, Aa | 0, 1048576, 0) | 0;
 wa = U() | 0;
 va = eg(xa | 0, wa | 0, 21) | 0;
 Ja = U() | 0;
 Eb = $f(Hb | 0, Gb | 0, Fb | 0, Eb | 0) | 0;
 Cb = $f(Eb | 0, U() | 0, Db | 0, Cb | 0) | 0;
 Ab = $f(Cb | 0, U() | 0, Bb | 0, Ab | 0) | 0;
 ua = $f(Ab | 0, U() | 0, zb | 0, ua | 0) | 0;
 ia = $f(ua | 0, U() | 0, ja | 0, ia | 0) | 0;
 ja = U() | 0;
 Ia = $f(va | 0, Ja | 0, Ia & 2097151 | 0, 0) | 0;
 ja = ag(Ia | 0, U() | 0, ia | 0, ja | 0) | 0;
 ia = U() | 0;
 Ia = $f(Sa | 0, Ta | 0, 1048576, 0) | 0;
 Ja = U() | 0;
 va = eg(Ia | 0, Ja | 0, 21) | 0;
 ua = U() | 0;
 na = $f(yb | 0, xb | 0, wb | 0, na | 0) | 0;
 Wa = $f(na | 0, U() | 0, sa | 0, Wa | 0) | 0;
 f = $f(Wa | 0, U() | 0, Xa | 0, f | 0) | 0;
 gb = $f(f | 0, U() | 0, c | 0, gb | 0) | 0;
 Qa = $f(gb | 0, U() | 0, hb | 0, Qa | 0) | 0;
 j = $f(Qa | 0, U() | 0, Ra | 0, j | 0) | 0;
 S = $f(j | 0, U() | 0, B | 0, S | 0) | 0;
 B = U() | 0;
 ka = $f(va | 0, ua | 0, la | 0, ka | 0) | 0;
 B = ag(ka | 0, U() | 0, S | 0, B | 0) | 0;
 S = U() | 0;
 ka = $f(Ua | 0, Va | 0, 1048576, 0) | 0;
 la = U() | 0;
 ua = eg(ka | 0, la | 0, 21) | 0;
 va = U() | 0;
 La = $f(u | 0, qb | 0, rb | 0, La | 0) | 0;
 ab = $f(La | 0, U() | 0, Ka | 0, ab | 0) | 0;
 L = $f(ab | 0, U() | 0, bb | 0, L | 0) | 0;
 Za = $f(L | 0, U() | 0, M | 0, Za | 0) | 0;
 W = $f(Za | 0, U() | 0, Ya | 0, W | 0) | 0;
 Pa = $f(W | 0, U() | 0, X | 0, Pa | 0) | 0;
 nb = $f(Pa | 0, U() | 0, C | 0, nb | 0) | 0;
 eb = $f(nb | 0, U() | 0, mb | 0, eb | 0) | 0;
 g = $f(eb | 0, U() | 0, z | 0, g | 0) | 0;
 z = U() | 0;
 va = $f(Na & 2097151 | 0, 0, ua | 0, va | 0) | 0;
 z = ag(va | 0, U() | 0, g | 0, z | 0) | 0;
 g = U() | 0;
 va = $f(m | 0, r | 0, 1048576, 0) | 0;
 ua = U() | 0;
 Na = eg(va | 0, ua | 0, 21) | 0;
 eb = U() | 0;
 tb = $f(y | 0, N | 0, sb | 0, tb | 0) | 0;
 Oa = $f(tb | 0, U() | 0, da | 0, Oa | 0) | 0;
 _a = $f(Oa | 0, U() | 0, Ma | 0, _a | 0) | 0;
 i = $f(_a | 0, U() | 0, ga | 0, i | 0) | 0;
 e = $f(i | 0, U() | 0, F | 0, e | 0) | 0;
 Y = $f(e | 0, U() | 0, kb | 0, Y | 0) | 0;
 A = $f(Y | 0, U() | 0, ib | 0, A | 0) | 0;
 ba = $f(A | 0, U() | 0, D | 0, ba | 0) | 0;
 $ = $f(ba | 0, U() | 0, I | 0, $ | 0) | 0;
 h = $f($ | 0, U() | 0, s | 0, h | 0) | 0;
 q = $f(h | 0, U() | 0, aa | 0, q | 0) | 0;
 aa = U() | 0;
 jb = $f(Na | 0, eb | 0, db | 0, jb | 0) | 0;
 aa = ag(jb | 0, U() | 0, q | 0, aa | 0) | 0;
 q = U() | 0;
 jb = ag(1048576, 0, pb | 0, ob | 0) | 0;
 db = U() | 0;
 eb = eg(jb | 0, db | 0, 21) | 0;
 Na = U() | 0;
 k = _f(k | 0, 0, x | 0, vb | 0) | 0;
 h = U() | 0;
 n = _f(n | 0, 0, Ha | 0, 0) | 0;
 s = U() | 0;
 $ = _f(ha | 0, 0, cb | 0, 0) | 0;
 I = U() | 0;
 ba = _f(v | 0, 0, t | 0, w | 0) | 0;
 D = U() | 0;
 A = _f(ca | 0, 0, ub | 0, o | 0) | 0;
 ib = U() | 0;
 Y = _f(O | 0, P | 0, _ | 0, 0) | 0;
 kb = U() | 0;
 e = _f(H | 0, G | 0, lb | 0, 0) | 0;
 F = U() | 0;
 i = _f(Z | 0, 0, $a | 0, 0) | 0;
 ga = U() | 0;
 E = _f(ya | 0, 0, E | 0, 0) | 0;
 _a = U() | 0;
 fb = _f(za | 0, Ga | 0, fb | 0, 0) | 0;
 Ma = U() | 0;
 h = $f(n | 0, s | 0, k | 0, h | 0) | 0;
 I = $f(h | 0, U() | 0, $ | 0, I | 0) | 0;
 D = $f(I | 0, U() | 0, ba | 0, D | 0) | 0;
 ib = $f(D | 0, U() | 0, A | 0, ib | 0) | 0;
 kb = $f(ib | 0, U() | 0, Y | 0, kb | 0) | 0;
 F = $f(kb | 0, U() | 0, e | 0, F | 0) | 0;
 ga = $f(F | 0, U() | 0, i | 0, ga | 0) | 0;
 _a = $f(ga | 0, U() | 0, E | 0, _a | 0) | 0;
 Ma = $f(_a | 0, U() | 0, fb | 0, Ma | 0) | 0;
 Ma = ag(eb | 0, Na | 0, Ma | 0, U() | 0) | 0;
 Na = U() | 0;
 eb = ag(1048576, 0, J | 0, K | 0) | 0;
 fb = U() | 0;
 _a = eg(eb | 0, fb | 0, 21) | 0;
 E = U() | 0;
 ha = _f(ha | 0, 0, x | 0, vb | 0) | 0;
 ga = U() | 0;
 v = _f(v | 0, 0, Ha | 0, 0) | 0;
 i = U() | 0;
 F = _f(ca | 0, 0, cb | 0, 0) | 0;
 e = U() | 0;
 kb = _f(O | 0, P | 0, t | 0, w | 0) | 0;
 Y = U() | 0;
 ib = _f(H | 0, G | 0, ub | 0, o | 0) | 0;
 A = U() | 0;
 D = _f(Z | 0, 0, _ | 0, 0) | 0;
 ba = U() | 0;
 lb = _f(ya | 0, 0, lb | 0, 0) | 0;
 I = U() | 0;
 $a = _f(za | 0, Ga | 0, $a | 0, 0) | 0;
 $ = U() | 0;
 ga = $f(v | 0, i | 0, ha | 0, ga | 0) | 0;
 e = $f(ga | 0, U() | 0, F | 0, e | 0) | 0;
 Y = $f(e | 0, U() | 0, kb | 0, Y | 0) | 0;
 A = $f(Y | 0, U() | 0, ib | 0, A | 0) | 0;
 ba = $f(A | 0, U() | 0, D | 0, ba | 0) | 0;
 I = $f(ba | 0, U() | 0, lb | 0, I | 0) | 0;
 $ = $f(I | 0, U() | 0, $a | 0, $ | 0) | 0;
 $ = ag(_a | 0, E | 0, $ | 0, U() | 0) | 0;
 E = U() | 0;
 _a = ag(1048576, 0, R | 0, Q | 0) | 0;
 $a = U() | 0;
 I = eg(_a | 0, $a | 0, 21) | 0;
 lb = U() | 0;
 ca = _f(ca | 0, 0, x | 0, vb | 0) | 0;
 ba = U() | 0;
 P = _f(O | 0, P | 0, Ha | 0, 0) | 0;
 O = U() | 0;
 D = _f(H | 0, G | 0, cb | 0, 0) | 0;
 A = U() | 0;
 ib = _f(Z | 0, 0, t | 0, w | 0) | 0;
 Y = U() | 0;
 o = _f(ya | 0, 0, ub | 0, o | 0) | 0;
 ub = U() | 0;
 _ = _f(za | 0, Ga | 0, _ | 0, 0) | 0;
 kb = U() | 0;
 ba = $f(P | 0, O | 0, ca | 0, ba | 0) | 0;
 A = $f(ba | 0, U() | 0, D | 0, A | 0) | 0;
 Y = $f(A | 0, U() | 0, ib | 0, Y | 0) | 0;
 ub = $f(Y | 0, U() | 0, o | 0, ub | 0) | 0;
 kb = $f(ub | 0, U() | 0, _ | 0, kb | 0) | 0;
 kb = ag(I | 0, lb | 0, kb | 0, U() | 0) | 0;
 lb = U() | 0;
 I = ag(1048576, 0, pa | 0, oa | 0) | 0;
 _ = U() | 0;
 ub = eg(I | 0, _ | 0, 21) | 0;
 o = U() | 0;
 G = _f(H | 0, G | 0, x | 0, vb | 0) | 0;
 H = U() | 0;
 Z = _f(Z | 0, 0, Ha | 0, 0) | 0;
 Y = U() | 0;
 cb = _f(ya | 0, 0, cb | 0, 0) | 0;
 ib = U() | 0;
 w = _f(za | 0, Ga | 0, t | 0, w | 0) | 0;
 t = U() | 0;
 H = $f(Z | 0, Y | 0, G | 0, H | 0) | 0;
 ib = $f(H | 0, U() | 0, cb | 0, ib | 0) | 0;
 t = $f(ib | 0, U() | 0, w | 0, t | 0) | 0;
 t = ag(ub | 0, o | 0, t | 0, U() | 0) | 0;
 o = U() | 0;
 oa = $f(I & -2097152 | 0, _ | 0, pa | 0, oa | 0) | 0;
 pa = U() | 0;
 _ = ag(1048576, 0, l | 0, p | 0) | 0;
 I = U() | 0;
 ub = eg(_ | 0, I | 0, 21) | 0;
 w = U() | 0;
 vb = _f(ya | 0, 0, x | 0, vb | 0) | 0;
 x = U() | 0;
 Ha = _f(za | 0, Ga | 0, Ha | 0, 0) | 0;
 x = $f(Ha | 0, U() | 0, vb | 0, x | 0) | 0;
 x = ag(ub | 0, w | 0, x | 0, U() | 0) | 0;
 w = U() | 0;
 p = $f(_ & -2097152 | 0, I | 0, l | 0, p | 0) | 0;
 l = U() | 0;
 I = $f(ra | 0, qa | 0, 1048576, 0) | 0;
 _ = U() | 0;
 ub = eg(I | 0, _ | 0, 21) | 0;
 vb = U() | 0;
 _ = ag(ra | 0, qa | 0, I & -2097152 | 0, _ | 0) | 0;
 I = U() | 0;
 qa = $f(ta | 0, ma | 0, 1048576, 0) | 0;
 ra = U() | 0;
 Ha = eg(qa | 0, ra | 0, 21) | 0;
 Ga = U() | 0;
 ra = ag(ta | 0, ma | 0, qa & -2097152 | 0, ra | 0) | 0;
 qa = U() | 0;
 ma = $f(ea | 0, fa | 0, 1048576, 0) | 0;
 ta = U() | 0;
 za = eg(ma | 0, ta | 0, 21) | 0;
 ya = U() | 0;
 ta = ag(ea | 0, fa | 0, ma & -2097152 | 0, ta | 0) | 0;
 ma = U() | 0;
 fa = $f(ja | 0, ia | 0, 1048576, 0) | 0;
 ea = U() | 0;
 ib = eg(fa | 0, ea | 0, 21) | 0;
 cb = U() | 0;
 H = $f(B | 0, S | 0, 1048576, 0) | 0;
 G = U() | 0;
 Y = eg(H | 0, G | 0, 21) | 0;
 Z = U() | 0;
 A = $f(z | 0, g | 0, 1048576, 0) | 0;
 D = U() | 0;
 ba = eg(A | 0, D | 0, 21) | 0;
 ca = U() | 0;
 O = $f(aa | 0, q | 0, 1048576, 0) | 0;
 P = U() | 0;
 e = eg(O | 0, P | 0, 21) | 0;
 F = U() | 0;
 ga = $f(Ma | 0, Na | 0, 1048576, 0) | 0;
 ha = U() | 0;
 i = eg(ga | 0, ha | 0, 21) | 0;
 v = U() | 0;
 h = $f($ | 0, E | 0, 1048576, 0) | 0;
 k = U() | 0;
 s = eg(h | 0, k | 0, 21) | 0;
 n = U() | 0;
 Oa = $f(kb | 0, lb | 0, 1048576, 0) | 0;
 da = U() | 0;
 tb = eg(Oa | 0, da | 0, 21) | 0;
 pa = ag(tb | 0, U() | 0, oa | 0, pa | 0) | 0;
 oa = U() | 0;
 da = ag(kb | 0, lb | 0, Oa & -2097152 | 0, da | 0) | 0;
 Oa = U() | 0;
 lb = $f(t | 0, o | 0, 1048576, 0) | 0;
 kb = U() | 0;
 tb = eg(lb | 0, kb | 0, 21) | 0;
 l = ag(tb | 0, U() | 0, p | 0, l | 0) | 0;
 p = U() | 0;
 kb = ag(t | 0, o | 0, lb & -2097152 | 0, kb | 0) | 0;
 lb = U() | 0;
 o = $f(x | 0, w | 0, 1048576, 0) | 0;
 t = U() | 0;
 tb = eg(o | 0, t | 0, 21) | 0;
 I = $f(tb | 0, U() | 0, _ | 0, I | 0) | 0;
 _ = U() | 0;
 t = ag(x | 0, w | 0, o & -2097152 | 0, t | 0) | 0;
 o = U() | 0;
 w = _f(ub | 0, vb | 0, 666643, 0) | 0;
 x = U() | 0;
 tb = _f(ub | 0, vb | 0, 470296, 0) | 0;
 sb = U() | 0;
 N = _f(ub | 0, vb | 0, 654183, 0) | 0;
 y = U() | 0;
 mb = _f(ub | 0, vb | 0, -997805, -1) | 0;
 nb = U() | 0;
 C = _f(ub | 0, vb | 0, 136657, 0) | 0;
 Pa = U() | 0;
 vb = _f(ub | 0, vb | 0, -683901, -1) | 0;
 Q = ag(vb | 0, U() | 0, R | 0, Q | 0) | 0;
 $a = ag(Q | 0, U() | 0, _a & -2097152 | 0, $a | 0) | 0;
 n = $f($a | 0, U() | 0, s | 0, n | 0) | 0;
 s = U() | 0;
 $a = _f(I | 0, _ | 0, 666643, 0) | 0;
 _a = U() | 0;
 Q = _f(I | 0, _ | 0, 470296, 0) | 0;
 R = U() | 0;
 vb = _f(I | 0, _ | 0, 654183, 0) | 0;
 ub = U() | 0;
 X = _f(I | 0, _ | 0, -997805, -1) | 0;
 W = U() | 0;
 Ya = _f(I | 0, _ | 0, 136657, 0) | 0;
 Za = U() | 0;
 _ = _f(I | 0, _ | 0, -683901, -1) | 0;
 I = U() | 0;
 M = _f(t | 0, o | 0, 666643, 0) | 0;
 L = U() | 0;
 bb = _f(t | 0, o | 0, 470296, 0) | 0;
 ab = U() | 0;
 Ka = _f(t | 0, o | 0, 654183, 0) | 0;
 La = U() | 0;
 rb = _f(t | 0, o | 0, -997805, -1) | 0;
 qb = U() | 0;
 u = _f(t | 0, o | 0, 136657, 0) | 0;
 j = U() | 0;
 o = _f(t | 0, o | 0, -683901, -1) | 0;
 t = U() | 0;
 K = ag(mb | 0, nb | 0, J | 0, K | 0) | 0;
 Za = $f(K | 0, U() | 0, Ya | 0, Za | 0) | 0;
 t = $f(Za | 0, U() | 0, o | 0, t | 0) | 0;
 fb = ag(t | 0, U() | 0, eb & -2097152 | 0, fb | 0) | 0;
 v = $f(fb | 0, U() | 0, i | 0, v | 0) | 0;
 i = U() | 0;
 fb = _f(l | 0, p | 0, 666643, 0) | 0;
 eb = U() | 0;
 t = _f(l | 0, p | 0, 470296, 0) | 0;
 o = U() | 0;
 Za = _f(l | 0, p | 0, 654183, 0) | 0;
 Ya = U() | 0;
 K = _f(l | 0, p | 0, -997805, -1) | 0;
 J = U() | 0;
 nb = _f(l | 0, p | 0, 136657, 0) | 0;
 mb = U() | 0;
 p = _f(l | 0, p | 0, -683901, -1) | 0;
 l = U() | 0;
 Ra = _f(kb | 0, lb | 0, 666643, 0) | 0;
 Qa = U() | 0;
 hb = _f(kb | 0, lb | 0, 470296, 0) | 0;
 gb = U() | 0;
 c = _f(kb | 0, lb | 0, 654183, 0) | 0;
 f = U() | 0;
 Xa = _f(kb | 0, lb | 0, -997805, -1) | 0;
 Wa = U() | 0;
 sa = _f(kb | 0, lb | 0, 136657, 0) | 0;
 na = U() | 0;
 lb = _f(kb | 0, lb | 0, -683901, -1) | 0;
 kb = U() | 0;
 sb = $f(vb | 0, ub | 0, tb | 0, sb | 0) | 0;
 qb = $f(sb | 0, U() | 0, rb | 0, qb | 0) | 0;
 ob = ag(qb | 0, U() | 0, pb | 0, ob | 0) | 0;
 mb = $f(ob | 0, U() | 0, nb | 0, mb | 0) | 0;
 kb = $f(mb | 0, U() | 0, lb | 0, kb | 0) | 0;
 db = ag(kb | 0, U() | 0, jb & -2097152 | 0, db | 0) | 0;
 F = $f(db | 0, U() | 0, e | 0, F | 0) | 0;
 e = U() | 0;
 db = _f(pa | 0, oa | 0, 666643, 0) | 0;
 db = $f(ib | 0, cb | 0, db | 0, U() | 0) | 0;
 Ta = $f(db | 0, U() | 0, Sa | 0, Ta | 0) | 0;
 Ja = ag(Ta | 0, U() | 0, Ia & -2097152 | 0, Ja | 0) | 0;
 Ia = U() | 0;
 Ta = _f(pa | 0, oa | 0, 470296, 0) | 0;
 Sa = U() | 0;
 db = _f(pa | 0, oa | 0, 654183, 0) | 0;
 cb = U() | 0;
 eb = $f(hb | 0, gb | 0, fb | 0, eb | 0) | 0;
 cb = $f(eb | 0, U() | 0, db | 0, cb | 0) | 0;
 Va = $f(cb | 0, U() | 0, Ua | 0, Va | 0) | 0;
 Z = $f(Va | 0, U() | 0, Y | 0, Z | 0) | 0;
 la = ag(Z | 0, U() | 0, ka & -2097152 | 0, la | 0) | 0;
 ka = U() | 0;
 Z = _f(pa | 0, oa | 0, -997805, -1) | 0;
 Y = U() | 0;
 Va = _f(pa | 0, oa | 0, 136657, 0) | 0;
 Ua = U() | 0;
 _a = $f(bb | 0, ab | 0, $a | 0, _a | 0) | 0;
 Ya = $f(_a | 0, U() | 0, Za | 0, Ya | 0) | 0;
 Wa = $f(Ya | 0, U() | 0, Xa | 0, Wa | 0) | 0;
 Ua = $f(Wa | 0, U() | 0, Va | 0, Ua | 0) | 0;
 r = $f(Ua | 0, U() | 0, m | 0, r | 0) | 0;
 ca = $f(r | 0, U() | 0, ba | 0, ca | 0) | 0;
 ua = ag(ca | 0, U() | 0, va & -2097152 | 0, ua | 0) | 0;
 va = U() | 0;
 oa = _f(pa | 0, oa | 0, -683901, -1) | 0;
 pa = U() | 0;
 ca = $f(Ja | 0, Ia | 0, 1048576, 0) | 0;
 ba = U() | 0;
 r = eg(ca | 0, ba | 0, 21) | 0;
 m = U() | 0;
 Qa = $f(Ta | 0, Sa | 0, Ra | 0, Qa | 0) | 0;
 S = $f(Qa | 0, U() | 0, B | 0, S | 0) | 0;
 G = ag(S | 0, U() | 0, H & -2097152 | 0, G | 0) | 0;
 m = $f(G | 0, U() | 0, r | 0, m | 0) | 0;
 r = U() | 0;
 G = $f(la | 0, ka | 0, 1048576, 0) | 0;
 H = U() | 0;
 S = eg(G | 0, H | 0, 21) | 0;
 B = U() | 0;
 L = $f(t | 0, o | 0, M | 0, L | 0) | 0;
 f = $f(L | 0, U() | 0, c | 0, f | 0) | 0;
 Y = $f(f | 0, U() | 0, Z | 0, Y | 0) | 0;
 g = $f(Y | 0, U() | 0, z | 0, g | 0) | 0;
 D = ag(g | 0, U() | 0, A & -2097152 | 0, D | 0) | 0;
 B = $f(D | 0, U() | 0, S | 0, B | 0) | 0;
 S = U() | 0;
 D = $f(ua | 0, va | 0, 1048576, 0) | 0;
 A = U() | 0;
 g = eg(D | 0, A | 0, 21) | 0;
 z = U() | 0;
 x = $f(Q | 0, R | 0, w | 0, x | 0) | 0;
 La = $f(x | 0, U() | 0, Ka | 0, La | 0) | 0;
 J = $f(La | 0, U() | 0, K | 0, J | 0) | 0;
 na = $f(J | 0, U() | 0, sa | 0, na | 0) | 0;
 pa = $f(na | 0, U() | 0, oa | 0, pa | 0) | 0;
 q = $f(pa | 0, U() | 0, aa | 0, q | 0) | 0;
 P = ag(q | 0, U() | 0, O & -2097152 | 0, P | 0) | 0;
 z = $f(P | 0, U() | 0, g | 0, z | 0) | 0;
 g = U() | 0;
 P = $f(F | 0, e | 0, 1048576, 0) | 0;
 O = U() | 0;
 q = eg(P | 0, O | 0, 21) | 0;
 aa = U() | 0;
 y = $f(X | 0, W | 0, N | 0, y | 0) | 0;
 j = $f(y | 0, U() | 0, u | 0, j | 0) | 0;
 l = $f(j | 0, U() | 0, p | 0, l | 0) | 0;
 Na = $f(l | 0, U() | 0, Ma | 0, Na | 0) | 0;
 ha = ag(Na | 0, U() | 0, ga & -2097152 | 0, ha | 0) | 0;
 aa = $f(ha | 0, U() | 0, q | 0, aa | 0) | 0;
 q = U() | 0;
 O = ag(F | 0, e | 0, P & -2097152 | 0, O | 0) | 0;
 P = U() | 0;
 e = $f(v | 0, i | 0, 1048576, 0) | 0;
 F = U() | 0;
 ha = eg(e | 0, F | 0, 21) | 0;
 ga = U() | 0;
 Pa = $f(_ | 0, I | 0, C | 0, Pa | 0) | 0;
 E = $f(Pa | 0, U() | 0, $ | 0, E | 0) | 0;
 k = ag(E | 0, U() | 0, h & -2097152 | 0, k | 0) | 0;
 ga = $f(k | 0, U() | 0, ha | 0, ga | 0) | 0;
 ha = U() | 0;
 F = ag(v | 0, i | 0, e & -2097152 | 0, F | 0) | 0;
 e = U() | 0;
 i = $f(n | 0, s | 0, 1048576, 0) | 0;
 v = U() | 0;
 k = eg(i | 0, v | 0, 21) | 0;
 Oa = $f(k | 0, U() | 0, da | 0, Oa | 0) | 0;
 da = U() | 0;
 v = ag(n | 0, s | 0, i & -2097152 | 0, v | 0) | 0;
 i = U() | 0;
 s = $f(m | 0, r | 0, 1048576, 0) | 0;
 n = U() | 0;
 k = eg(s | 0, n | 0, 21) | 0;
 h = U() | 0;
 E = $f(B | 0, S | 0, 1048576, 0) | 0;
 $ = U() | 0;
 Pa = eg(E | 0, $ | 0, 21) | 0;
 C = U() | 0;
 I = $f(z | 0, g | 0, 1048576, 0) | 0;
 _ = U() | 0;
 Na = eg(I | 0, _ | 0, 21) | 0;
 P = $f(Na | 0, U() | 0, O | 0, P | 0) | 0;
 O = U() | 0;
 _ = ag(z | 0, g | 0, I & -2097152 | 0, _ | 0) | 0;
 I = U() | 0;
 g = $f(aa | 0, q | 0, 1048576, 0) | 0;
 z = U() | 0;
 Na = eg(g | 0, z | 0, 21) | 0;
 e = $f(Na | 0, U() | 0, F | 0, e | 0) | 0;
 F = U() | 0;
 z = ag(aa | 0, q | 0, g & -2097152 | 0, z | 0) | 0;
 g = U() | 0;
 q = $f(ga | 0, ha | 0, 1048576, 0) | 0;
 aa = U() | 0;
 Na = eg(q | 0, aa | 0, 21) | 0;
 i = $f(Na | 0, U() | 0, v | 0, i | 0) | 0;
 v = U() | 0;
 aa = ag(ga | 0, ha | 0, q & -2097152 | 0, aa | 0) | 0;
 q = U() | 0;
 ha = _f(Oa | 0, da | 0, 666643, 0) | 0;
 ga = U() | 0;
 Na = _f(Oa | 0, da | 0, 470296, 0) | 0;
 Ma = U() | 0;
 l = _f(Oa | 0, da | 0, 654183, 0) | 0;
 p = U() | 0;
 j = _f(Oa | 0, da | 0, -997805, -1) | 0;
 u = U() | 0;
 y = _f(Oa | 0, da | 0, 136657, 0) | 0;
 N = U() | 0;
 da = _f(Oa | 0, da | 0, -683901, -1) | 0;
 da = $f(Pa | 0, C | 0, da | 0, U() | 0) | 0;
 va = $f(da | 0, U() | 0, ua | 0, va | 0) | 0;
 A = ag(va | 0, U() | 0, D & -2097152 | 0, A | 0) | 0;
 D = U() | 0;
 va = _f(i | 0, v | 0, 666643, 0) | 0;
 ua = U() | 0;
 da = _f(i | 0, v | 0, 470296, 0) | 0;
 C = U() | 0;
 Pa = _f(i | 0, v | 0, 654183, 0) | 0;
 Oa = U() | 0;
 W = _f(i | 0, v | 0, -997805, -1) | 0;
 X = U() | 0;
 pa = _f(i | 0, v | 0, 136657, 0) | 0;
 oa = U() | 0;
 v = _f(i | 0, v | 0, -683901, -1) | 0;
 i = U() | 0;
 na = _f(aa | 0, q | 0, 666643, 0) | 0;
 na = $f(ta | 0, ma | 0, na | 0, U() | 0) | 0;
 ma = U() | 0;
 ta = _f(aa | 0, q | 0, 470296, 0) | 0;
 sa = U() | 0;
 J = _f(aa | 0, q | 0, 654183, 0) | 0;
 K = U() | 0;
 La = _f(aa | 0, q | 0, -997805, -1) | 0;
 Ka = U() | 0;
 x = _f(aa | 0, q | 0, 136657, 0) | 0;
 w = U() | 0;
 q = _f(aa | 0, q | 0, -683901, -1) | 0;
 aa = U() | 0;
 u = $f(pa | 0, oa | 0, j | 0, u | 0) | 0;
 aa = $f(u | 0, U() | 0, q | 0, aa | 0) | 0;
 h = $f(aa | 0, U() | 0, k | 0, h | 0) | 0;
 ka = $f(h | 0, U() | 0, la | 0, ka | 0) | 0;
 H = ag(ka | 0, U() | 0, G & -2097152 | 0, H | 0) | 0;
 G = U() | 0;
 ka = _f(e | 0, F | 0, 666643, 0) | 0;
 la = U() | 0;
 h = _f(e | 0, F | 0, 470296, 0) | 0;
 k = U() | 0;
 aa = _f(e | 0, F | 0, 654183, 0) | 0;
 q = U() | 0;
 u = _f(e | 0, F | 0, -997805, -1) | 0;
 j = U() | 0;
 oa = _f(e | 0, F | 0, 136657, 0) | 0;
 pa = U() | 0;
 F = _f(e | 0, F | 0, -683901, -1) | 0;
 e = U() | 0;
 R = _f(z | 0, g | 0, 666643, 0) | 0;
 Q = U() | 0;
 Y = _f(z | 0, g | 0, 470296, 0) | 0;
 Z = U() | 0;
 f = _f(z | 0, g | 0, 654183, 0) | 0;
 c = U() | 0;
 L = _f(z | 0, g | 0, -997805, -1) | 0;
 M = U() | 0;
 o = _f(z | 0, g | 0, 136657, 0) | 0;
 t = U() | 0;
 g = _f(z | 0, g | 0, -683901, -1) | 0;
 z = U() | 0;
 Ma = $f(Pa | 0, Oa | 0, Na | 0, Ma | 0) | 0;
 Ka = $f(Ma | 0, U() | 0, La | 0, Ka | 0) | 0;
 Ia = $f(Ka | 0, U() | 0, Ja | 0, Ia | 0) | 0;
 ba = ag(Ia | 0, U() | 0, ca & -2097152 | 0, ba | 0) | 0;
 pa = $f(ba | 0, U() | 0, oa | 0, pa | 0) | 0;
 z = $f(pa | 0, U() | 0, g | 0, z | 0) | 0;
 g = U() | 0;
 pa = _f(P | 0, O | 0, 666643, 0) | 0;
 T = $f(pa | 0, U() | 0, V | 0, T | 0) | 0;
 V = U() | 0;
 pa = _f(P | 0, O | 0, 470296, 0) | 0;
 oa = U() | 0;
 ba = _f(P | 0, O | 0, 654183, 0) | 0;
 ca = U() | 0;
 Ea = $f(Ha | 0, Ga | 0, Fa | 0, Ea | 0) | 0;
 Ca = ag(Ea | 0, U() | 0, Da & -2097152 | 0, Ca | 0) | 0;
 ca = $f(Ca | 0, U() | 0, ba | 0, ca | 0) | 0;
 la = $f(ca | 0, U() | 0, ka | 0, la | 0) | 0;
 Z = $f(la | 0, U() | 0, Y | 0, Z | 0) | 0;
 Y = U() | 0;
 la = _f(P | 0, O | 0, -997805, -1) | 0;
 ka = U() | 0;
 ca = _f(P | 0, O | 0, 136657, 0) | 0;
 ba = U() | 0;
 ya = $f(Ba | 0, Aa | 0, za | 0, ya | 0) | 0;
 wa = ag(ya | 0, U() | 0, xa & -2097152 | 0, wa | 0) | 0;
 ua = $f(wa | 0, U() | 0, va | 0, ua | 0) | 0;
 sa = $f(ua | 0, U() | 0, ta | 0, sa | 0) | 0;
 ba = $f(sa | 0, U() | 0, ca | 0, ba | 0) | 0;
 q = $f(ba | 0, U() | 0, aa | 0, q | 0) | 0;
 M = $f(q | 0, U() | 0, L | 0, M | 0) | 0;
 L = U() | 0;
 O = _f(P | 0, O | 0, -683901, -1) | 0;
 P = U() | 0;
 q = $f(T | 0, V | 0, 1048576, 0) | 0;
 aa = U() | 0;
 ba = eg(q | 0, aa | 0, 21) | 0;
 ca = U() | 0;
 oa = $f(ra | 0, qa | 0, pa | 0, oa | 0) | 0;
 Q = $f(oa | 0, U() | 0, R | 0, Q | 0) | 0;
 ca = $f(Q | 0, U() | 0, ba | 0, ca | 0) | 0;
 ba = U() | 0;
 aa = ag(T | 0, V | 0, q & -2097152 | 0, aa | 0) | 0;
 q = U() | 0;
 V = $f(Z | 0, Y | 0, 1048576, 0) | 0;
 T = U() | 0;
 Q = eg(V | 0, T | 0, 21) | 0;
 R = U() | 0;
 ka = $f(na | 0, ma | 0, la | 0, ka | 0) | 0;
 k = $f(ka | 0, U() | 0, h | 0, k | 0) | 0;
 c = $f(k | 0, U() | 0, f | 0, c | 0) | 0;
 R = $f(c | 0, U() | 0, Q | 0, R | 0) | 0;
 Q = U() | 0;
 c = $f(M | 0, L | 0, 1048576, 0) | 0;
 f = U() | 0;
 k = eg(c | 0, f | 0, 21) | 0;
 h = U() | 0;
 ga = $f(ja | 0, ia | 0, ha | 0, ga | 0) | 0;
 ea = ag(ga | 0, U() | 0, fa & -2097152 | 0, ea | 0) | 0;
 C = $f(ea | 0, U() | 0, da | 0, C | 0) | 0;
 K = $f(C | 0, U() | 0, J | 0, K | 0) | 0;
 P = $f(K | 0, U() | 0, O | 0, P | 0) | 0;
 j = $f(P | 0, U() | 0, u | 0, j | 0) | 0;
 t = $f(j | 0, U() | 0, o | 0, t | 0) | 0;
 h = $f(t | 0, U() | 0, k | 0, h | 0) | 0;
 k = U() | 0;
 t = $f(z | 0, g | 0, 1048576, 0) | 0;
 o = U() | 0;
 j = eg(t | 0, o | 0, 21) | 0;
 u = U() | 0;
 p = $f(W | 0, X | 0, l | 0, p | 0) | 0;
 w = $f(p | 0, U() | 0, x | 0, w | 0) | 0;
 r = $f(w | 0, U() | 0, m | 0, r | 0) | 0;
 n = ag(r | 0, U() | 0, s & -2097152 | 0, n | 0) | 0;
 e = $f(n | 0, U() | 0, F | 0, e | 0) | 0;
 u = $f(e | 0, U() | 0, j | 0, u | 0) | 0;
 j = U() | 0;
 o = ag(z | 0, g | 0, t & -2097152 | 0, o | 0) | 0;
 t = U() | 0;
 g = $f(H | 0, G | 0, 1048576, 0) | 0;
 z = U() | 0;
 e = eg(g | 0, z | 0, 21) | 0;
 F = U() | 0;
 N = $f(v | 0, i | 0, y | 0, N | 0) | 0;
 S = $f(N | 0, U() | 0, B | 0, S | 0) | 0;
 $ = ag(S | 0, U() | 0, E & -2097152 | 0, $ | 0) | 0;
 F = $f($ | 0, U() | 0, e | 0, F | 0) | 0;
 e = U() | 0;
 z = ag(H | 0, G | 0, g & -2097152 | 0, z | 0) | 0;
 g = U() | 0;
 G = $f(A | 0, D | 0, 1048576, 0) | 0;
 H = U() | 0;
 $ = eg(G | 0, H | 0, 21) | 0;
 $ = $f(_ | 0, I | 0, $ | 0, U() | 0) | 0;
 I = U() | 0;
 _ = $f(ca | 0, ba | 0, 1048576, 0) | 0;
 E = U() | 0;
 S = eg(_ | 0, E | 0, 21) | 0;
 B = U() | 0;
 N = $f(R | 0, Q | 0, 1048576, 0) | 0;
 y = U() | 0;
 i = eg(N | 0, y | 0, 21) | 0;
 v = U() | 0;
 n = $f(h | 0, k | 0, 1048576, 0) | 0;
 s = U() | 0;
 r = eg(n | 0, s | 0, 21) | 0;
 r = $f(o | 0, t | 0, r | 0, U() | 0) | 0;
 t = U() | 0;
 o = $f(u | 0, j | 0, 1048576, 0) | 0;
 m = U() | 0;
 w = eg(o | 0, m | 0, 21) | 0;
 w = $f(z | 0, g | 0, w | 0, U() | 0) | 0;
 g = U() | 0;
 m = ag(u | 0, j | 0, o & -2097152 | 0, m | 0) | 0;
 o = U() | 0;
 j = $f(F | 0, e | 0, 1048576, 0) | 0;
 u = U() | 0;
 z = eg(j | 0, u | 0, 21) | 0;
 x = U() | 0;
 u = ag(F | 0, e | 0, j & -2097152 | 0, u | 0) | 0;
 j = U() | 0;
 e = $f($ | 0, I | 0, 1048576, 0) | 0;
 F = U() | 0;
 p = eg(e | 0, F | 0, 21) | 0;
 l = U() | 0;
 F = ag($ | 0, I | 0, e & -2097152 | 0, F | 0) | 0;
 e = U() | 0;
 I = _f(p | 0, l | 0, 666643, 0) | 0;
 I = $f(aa | 0, q | 0, I | 0, U() | 0) | 0;
 q = U() | 0;
 aa = _f(p | 0, l | 0, 470296, 0) | 0;
 $ = U() | 0;
 X = _f(p | 0, l | 0, 654183, 0) | 0;
 W = U() | 0;
 P = _f(p | 0, l | 0, -997805, -1) | 0;
 O = U() | 0;
 K = _f(p | 0, l | 0, 136657, 0) | 0;
 J = U() | 0;
 l = _f(p | 0, l | 0, -683901, -1) | 0;
 p = U() | 0;
 q = eg(I | 0, q | 0, 21) | 0;
 C = U() | 0;
 $ = $f(ca | 0, ba | 0, aa | 0, $ | 0) | 0;
 E = ag($ | 0, U() | 0, _ & -2097152 | 0, E | 0) | 0;
 C = $f(E | 0, U() | 0, q | 0, C | 0) | 0;
 q = eg(C | 0, U() | 0, 21) | 0;
 E = U() | 0;
 W = $f(Z | 0, Y | 0, X | 0, W | 0) | 0;
 T = ag(W | 0, U() | 0, V & -2097152 | 0, T | 0) | 0;
 B = $f(T | 0, U() | 0, S | 0, B | 0) | 0;
 E = $f(B | 0, U() | 0, q | 0, E | 0) | 0;
 q = eg(E | 0, U() | 0, 21) | 0;
 B = U() | 0;
 O = $f(R | 0, Q | 0, P | 0, O | 0) | 0;
 y = ag(O | 0, U() | 0, N & -2097152 | 0, y | 0) | 0;
 B = $f(y | 0, U() | 0, q | 0, B | 0) | 0;
 q = eg(B | 0, U() | 0, 21) | 0;
 y = U() | 0;
 J = $f(M | 0, L | 0, K | 0, J | 0) | 0;
 f = ag(J | 0, U() | 0, c & -2097152 | 0, f | 0) | 0;
 v = $f(f | 0, U() | 0, i | 0, v | 0) | 0;
 y = $f(v | 0, U() | 0, q | 0, y | 0) | 0;
 q = eg(y | 0, U() | 0, 21) | 0;
 v = U() | 0;
 p = $f(h | 0, k | 0, l | 0, p | 0) | 0;
 s = ag(p | 0, U() | 0, n & -2097152 | 0, s | 0) | 0;
 v = $f(s | 0, U() | 0, q | 0, v | 0) | 0;
 q = eg(v | 0, U() | 0, 21) | 0;
 q = $f(r | 0, t | 0, q | 0, U() | 0) | 0;
 t = eg(q | 0, U() | 0, 21) | 0;
 o = $f(t | 0, U() | 0, m | 0, o | 0) | 0;
 m = eg(o | 0, U() | 0, 21) | 0;
 m = $f(w | 0, g | 0, m | 0, U() | 0) | 0;
 g = eg(m | 0, U() | 0, 21) | 0;
 j = $f(g | 0, U() | 0, u | 0, j | 0) | 0;
 u = eg(j | 0, U() | 0, 21) | 0;
 g = U() | 0;
 D = $f(z | 0, x | 0, A | 0, D | 0) | 0;
 H = ag(D | 0, U() | 0, G & -2097152 | 0, H | 0) | 0;
 g = $f(H | 0, U() | 0, u | 0, g | 0) | 0;
 u = eg(g | 0, U() | 0, 21) | 0;
 e = $f(u | 0, U() | 0, F | 0, e | 0) | 0;
 F = eg(e | 0, U() | 0, 21) | 0;
 u = U() | 0;
 H = _f(F | 0, u | 0, 666643, 0) | 0;
 I = $f(H | 0, U() | 0, I & 2097151 | 0, 0) | 0;
 H = U() | 0;
 G = _f(F | 0, u | 0, 470296, 0) | 0;
 C = $f(G | 0, U() | 0, C & 2097151 | 0, 0) | 0;
 G = U() | 0;
 D = _f(F | 0, u | 0, 654183, 0) | 0;
 E = $f(D | 0, U() | 0, E & 2097151 | 0, 0) | 0;
 D = U() | 0;
 A = _f(F | 0, u | 0, -997805, -1) | 0;
 B = $f(A | 0, U() | 0, B & 2097151 | 0, 0) | 0;
 A = U() | 0;
 x = _f(F | 0, u | 0, 136657, 0) | 0;
 y = $f(x | 0, U() | 0, y & 2097151 | 0, 0) | 0;
 x = U() | 0;
 u = _f(F | 0, u | 0, -683901, -1) | 0;
 v = $f(u | 0, U() | 0, v & 2097151 | 0, 0) | 0;
 u = U() | 0;
 F = eg(I | 0, H | 0, 21) | 0;
 F = $f(C | 0, G | 0, F | 0, U() | 0) | 0;
 G = U() | 0;
 C = eg(F | 0, G | 0, 21) | 0;
 C = $f(E | 0, D | 0, C | 0, U() | 0) | 0;
 D = U() | 0;
 E = F & 2097151;
 z = eg(C | 0, D | 0, 21) | 0;
 z = $f(B | 0, A | 0, z | 0, U() | 0) | 0;
 A = U() | 0;
 B = C & 2097151;
 w = eg(z | 0, A | 0, 21) | 0;
 w = $f(y | 0, x | 0, w | 0, U() | 0) | 0;
 x = U() | 0;
 y = z & 2097151;
 t = eg(w | 0, x | 0, 21) | 0;
 t = $f(v | 0, u | 0, t | 0, U() | 0) | 0;
 u = U() | 0;
 v = w & 2097151;
 r = eg(t | 0, u | 0, 21) | 0;
 q = $f(r | 0, U() | 0, q & 2097151 | 0, 0) | 0;
 r = U() | 0;
 s = t & 2097151;
 n = eg(q | 0, r | 0, 21) | 0;
 o = $f(n | 0, U() | 0, o & 2097151 | 0, 0) | 0;
 n = U() | 0;
 p = q & 2097151;
 l = eg(o | 0, n | 0, 21) | 0;
 m = $f(l | 0, U() | 0, m & 2097151 | 0, 0) | 0;
 l = U() | 0;
 k = eg(m | 0, l | 0, 21) | 0;
 j = $f(k | 0, U() | 0, j & 2097151 | 0, 0) | 0;
 k = U() | 0;
 h = eg(j | 0, k | 0, 21) | 0;
 g = $f(h | 0, U() | 0, g & 2097151 | 0, 0) | 0;
 h = U() | 0;
 i = j & 2097151;
 f = eg(g | 0, h | 0, 21) | 0;
 e = $f(f | 0, U() | 0, e & 2097151 | 0, 0) | 0;
 f = U() | 0;
 c = g & 2097151;
 a[b >> 0] = I;
 J = fg(I | 0, H | 0, 8) | 0;
 U() | 0;
 a[b + 1 >> 0] = J;
 H = fg(I | 0, H | 0, 16) | 0;
 U() | 0;
 I = gg(E | 0, 0, 5) | 0;
 U() | 0;
 a[b + 2 >> 0] = I | H & 31;
 H = fg(F | 0, G | 0, 3) | 0;
 U() | 0;
 a[b + 3 >> 0] = H;
 G = fg(F | 0, G | 0, 11) | 0;
 U() | 0;
 a[b + 4 >> 0] = G;
 E = fg(E | 0, 0, 19) | 0;
 G = U() | 0;
 F = gg(B | 0, 0, 2) | 0;
 U() | 0 | G;
 a[b + 5 >> 0] = F | E;
 D = fg(C | 0, D | 0, 6) | 0;
 U() | 0;
 a[b + 6 >> 0] = D;
 B = fg(B | 0, 0, 14) | 0;
 D = U() | 0;
 C = gg(y | 0, 0, 7) | 0;
 U() | 0 | D;
 a[b + 7 >> 0] = C | B;
 B = fg(z | 0, A | 0, 1) | 0;
 U() | 0;
 a[b + 8 >> 0] = B;
 A = fg(z | 0, A | 0, 9) | 0;
 U() | 0;
 a[b + 9 >> 0] = A;
 y = fg(y | 0, 0, 17) | 0;
 A = U() | 0;
 z = gg(v | 0, 0, 4) | 0;
 U() | 0 | A;
 a[b + 10 >> 0] = z | y;
 y = fg(w | 0, x | 0, 4) | 0;
 U() | 0;
 a[b + 11 >> 0] = y;
 x = fg(w | 0, x | 0, 12) | 0;
 U() | 0;
 a[b + 12 >> 0] = x;
 v = fg(v | 0, 0, 20) | 0;
 x = U() | 0;
 w = gg(s | 0, 0, 1) | 0;
 U() | 0 | x;
 a[b + 13 >> 0] = w | v;
 u = fg(t | 0, u | 0, 7) | 0;
 U() | 0;
 a[b + 14 >> 0] = u;
 s = fg(s | 0, 0, 15) | 0;
 u = U() | 0;
 t = gg(p | 0, 0, 6) | 0;
 U() | 0 | u;
 a[b + 15 >> 0] = t | s;
 s = fg(q | 0, r | 0, 2) | 0;
 U() | 0;
 a[b + 16 >> 0] = s;
 r = fg(q | 0, r | 0, 10) | 0;
 U() | 0;
 a[b + 17 >> 0] = r;
 p = fg(p | 0, 0, 18) | 0;
 r = U() | 0;
 q = gg(o | 0, n | 0, 3) | 0;
 U() | 0 | r;
 a[b + 18 >> 0] = q | p;
 p = fg(o | 0, n | 0, 5) | 0;
 U() | 0;
 a[b + 19 >> 0] = p;
 n = fg(o | 0, n | 0, 13) | 0;
 U() | 0;
 a[b + 20 >> 0] = n;
 a[b + 21 >> 0] = m;
 n = fg(m | 0, l | 0, 8) | 0;
 U() | 0;
 a[b + 22 >> 0] = n;
 l = fg(m | 0, l | 0, 16) | 0;
 U() | 0;
 m = gg(i | 0, 0, 5) | 0;
 U() | 0;
 a[b + 23 >> 0] = m | l & 31;
 l = fg(j | 0, k | 0, 3) | 0;
 U() | 0;
 a[b + 24 >> 0] = l;
 k = fg(j | 0, k | 0, 11) | 0;
 U() | 0;
 a[b + 25 >> 0] = k;
 i = fg(i | 0, 0, 19) | 0;
 k = U() | 0;
 j = gg(c | 0, 0, 2) | 0;
 U() | 0 | k;
 a[b + 26 >> 0] = j | i;
 h = fg(g | 0, h | 0, 6) | 0;
 U() | 0;
 a[b + 27 >> 0] = h;
 c = fg(c | 0, 0, 14) | 0;
 h = U() | 0;
 g = gg(e | 0, f | 0, 7) | 0;
 U() | 0 | h;
 a[b + 28 >> 0] = g | c;
 c = fg(e | 0, f | 0, 1) | 0;
 U() | 0;
 a[b + 29 >> 0] = c;
 c = fg(e | 0, f | 0, 9) | 0;
 U() | 0;
 a[b + 30 >> 0] = c;
 f = eg(e | 0, f | 0, 17) | 0;
 U() | 0;
 a[b + 31 >> 0] = f;
 return;
}

function Ac(b, e, f) {
 b = b | 0;
 e = e | 0;
 f = f | 0;
 var g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, U = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ia = 0, ja = 0, ka = 0, la = 0, ma = 0, na = 0, oa = 0, pa = 0, qa = 0, ra = 0, sa = 0, ta = 0, ua = 0, va = 0, wa = 0, xa = 0, ya = 0, za = 0, Aa = 0, Ba = 0, Ca = 0, Da = 0, Ea = 0, Fa = 0, Ga = 0, Ha = 0, Ia = 0, Ja = 0, Ka = 0, La = 0, Ma = 0, Na = 0, Oa = 0, Pa = 0, Qa = 0, Ra = 0, Sa = 0, Ta = 0, Ua = 0, Va = 0, Wa = 0, Xa = 0, Ya = 0, Za = 0, _a = 0, $a = 0, ab = 0, bb = 0, cb = 0, db = 0, eb = 0, fb = 0, gb = 0, hb = 0, ib = 0, jb = 0, kb = 0, lb = 0, mb = 0, nb = 0, ob = 0, pb = 0, qb = 0, rb = 0, sb = 0, tb = 0, ub = 0, vb = 0, wb = 0, xb = 0, yb = 0, zb = 0, Ab = 0, Bb = 0, Cb = 0, Db = 0, Eb = 0, Fb = 0, Gb = 0, Hb = 0, Ib = 0, Jb = 0, Kb = 0, Lb = 0, Mb = 0, Nb = 0, Ob = 0, Pb = 0, Qb = 0, Rb = 0, Sb = 0, Tb = 0, Ub = 0, Vb = 0, Wb = 0, Xb = 0, Yb = 0, Zb = 0, _b = 0, $b = 0, ac = 0, bc = 0, cc = 0, fc = 0, ic = 0, jc = 0, kc = 0, lc = 0, mc = 0, nc = 0, oc = 0, pc = 0, qc = 0, rc = 0, sc = 0, tc = 0, uc = 0, vc = 0, wc = 0, xc = 0, yc = 0, zc = 0, Ac = 0, Bc = 0, Cc = 0, Dc = 0, Ec = 0, Fc = 0, Gc = 0, Hc = 0, Ic = 0, Jc = 0, Kc = 0, Lc = 0, Mc = 0, Nc = 0, Oc = 0, Pc = 0, Qc = 0, Rc = 0, Sc = 0, Tc = 0, Uc = 0, Vc = 0, Wc = 0, Xc = 0, Yc = 0, Zc = 0, _c = 0, $c = 0, ad = 0, bd = 0, cd = 0, dd = 0, ed = 0, fd = 0, gd = 0, hd = 0, id = 0, jd = 0, kd = 0, ld = 0, md = 0, nd = 0, od = 0, pd = 0, qd = 0, rd = 0, sd = 0, td = 0, ud = 0, vd = 0, wd = 0, xd = 0, yd = 0, zd = 0, Ad = 0, Bd = 0, Cd = 0, Dd = 0, Ed = 0, Fd = 0, Gd = 0, Hd = 0, Id = 0, Jd = 0, Kd = 0, Ld = 0, Md = 0, Nd = 0, Od = 0, Pd = 0, Qd = 0, Rd = 0, Sd = 0, Td = 0, Ud = 0, Vd = 0, Wd = 0, Xd = 0, Yd = 0, Zd = 0, _d = 0, $d = 0, ae = 0, be = 0, ce = 0, de = 0, ee = 0, fe = 0, ge = 0, he = 0, ie = 0, je = 0, ke = 0, le = 0, me = 0, ne = 0, oe = 0, pe = 0, qe = 0, re = 0, se = 0, te = 0, ue = 0, ve = 0, we = 0, xe = 0, ye = 0, ze = 0, Ae = 0, Be = 0, Ce = 0, De = 0, Ee = 0, Fe = 0, Ge = 0, He = 0, Ie = 0, Je = 0, Ke = 0, Le = 0, Me = 0, Ne = 0, Oe = 0, Pe = 0, Qe = 0, Re = 0, Se = 0, Te = 0, Ue = 0, Ve = 0, We = 0, Xe = 0, Ye = 0, Ze = 0, _e = 0, $e = 0, af = 0, bf = 0, cf = 0, df = 0, ef = 0, ff = 0, gf = 0, hf = 0, jf = 0, kf = 0, lf = 0, mf = 0, nf = 0, of = 0, pf = 0, qf = 0, rf = 0, sf = 0, tf = 0, uf = 0, vf = 0, wf = 0, xf = 0, yf = 0, zf = 0, Af = 0, Bf = 0, Cf = 0, Df = 0, Ef = 0, Ff = 0, Gf = 0, Hf = 0, If = 0, Jf = 0, Kf = 0, Lf = 0, Mf = 0, Nf = 0, Of = 0, Pf = 0, Qf = 0, Rf = 0, Sf = 0, Tf = 0, Uf = 0, Vf = 0, Wf = 0, Xf = 0, Yf = 0, Zf = 0, _f = 0, $f = 0, ag = 0, bg = 0, cg = 0, dg = 0, eg = 0, fg = 0, gg = 0, hg = 0, ig = 0, jg = 0, kg = 0, lg = 0, mg = 0, ng = 0, og = 0, pg = 0, qg = 0, rg = 0, sg = 0, tg = 0, ug = 0, vg = 0, wg = 0, xg = 0, yg = 0, zg = 0, Ag = 0, Bg = 0, Cg = 0, Dg = 0, Eg = 0, Fg = 0, Gg = 0, Hg = 0, Ig = 0, Jg = 0, Kg = 0, Lg = 0, Mg = 0, Ng = 0, Og = 0, Pg = 0, Qg = 0, Rg = 0, Sg = 0, Tg = 0, Ug = 0, Vg = 0, Wg = 0, Xg = 0, Yg = 0, Zg = 0, _g = 0, $g = 0, ah = 0, bh = 0, ch = 0, dh = 0, eh = 0, fh = 0, gh = 0, hh = 0, ih = 0, jh = 0, kh = 0, lh = 0, mh = 0, nh = 0, oh = 0, ph = 0;
 ph = k;
 k = k + 1824 | 0;
 kh = ph + 1280 | 0;
 lh = ph;
 mh = ph + 1664 | 0;
 nh = ph + 1504 | 0;
 oh = ph + 1344 | 0;
 g = 0;
 h = 0;
 do {
  gh = g + (d[e + h >> 0] | 0) | 0;
  ih = gh + 8 | 0;
  hh = ih >> 4;
  jh = h << 1;
  a[kh + jh >> 0] = gh - (ih & 240);
  ih = hh + 8 | 0;
  g = ih >> 4;
  a[kh + (jh | 1) >> 0] = hh - (ih & 240);
  h = h + 1 | 0;
 } while ((h | 0) != 31);
 fh = g + (d[e + 31 >> 0] | 0) | 0;
 eh = fh + 8 | 0;
 a[kh + 62 >> 0] = fh - (eh & 240);
 a[kh + 63 >> 0] = eh >>> 4;
 gc(lh, f);
 eh = mh + 120 | 0;
 fh = nh + 40 | 0;
 gh = mh + 40 | 0;
 hh = mh + 80 | 0;
 ih = nh + 80 | 0;
 jh = nh + 120 | 0;
 dc(mh, f, lh);
 ec(nh, mh, eh);
 ec(fh, gh, hh);
 ec(ih, hh, eh);
 ec(jh, mh, gh);
 h = lh + 160 | 0;
 gc(h, nh);
 dc(mh, f, h);
 ec(nh, mh, eh);
 ec(fh, gh, hh);
 ec(ih, hh, eh);
 ec(jh, mh, gh);
 h = lh + 320 | 0;
 gc(h, nh);
 dc(mh, f, h);
 ec(nh, mh, eh);
 ec(fh, gh, hh);
 ec(ih, hh, eh);
 ec(jh, mh, gh);
 h = lh + 480 | 0;
 gc(h, nh);
 dc(mh, f, h);
 ec(nh, mh, eh);
 ec(fh, gh, hh);
 ec(ih, hh, eh);
 ec(jh, mh, gh);
 h = lh + 640 | 0;
 gc(h, nh);
 dc(mh, f, h);
 ec(nh, mh, eh);
 ec(fh, gh, hh);
 ec(ih, hh, eh);
 ec(jh, mh, gh);
 h = lh + 800 | 0;
 gc(h, nh);
 dc(mh, f, h);
 ec(nh, mh, eh);
 ec(fh, gh, hh);
 ec(ih, hh, eh);
 ec(jh, mh, gh);
 h = lh + 960 | 0;
 gc(h, nh);
 dc(mh, f, h);
 ec(nh, mh, eh);
 ec(fh, gh, hh);
 ec(ih, hh, eh);
 ec(jh, mh, gh);
 gc(lh + 1120 | 0, nh);
 h = b;
 e = h + 40 | 0;
 do {
  c[h >> 2] = 0;
  h = h + 4 | 0;
 } while ((h | 0) < (e | 0));
 mg = b + 40 | 0;
 c[mg >> 2] = 1;
 h = b + 44 | 0;
 e = h + 36 | 0;
 do {
  c[h >> 2] = 0;
  h = h + 4 | 0;
 } while ((h | 0) < (e | 0));
 ng = b + 80 | 0;
 c[ng >> 2] = 1;
 h = b + 84 | 0;
 e = h + 36 | 0;
 do {
  c[h >> 2] = 0;
  h = h + 4 | 0;
 } while ((h | 0) < (e | 0));
 og = oh + 4 | 0;
 pg = oh + 40 | 0;
 qg = oh + 44 | 0;
 rg = oh + 80 | 0;
 sg = oh + 84 | 0;
 tg = oh + 8 | 0;
 ug = oh + 12 | 0;
 vg = oh + 16 | 0;
 wg = oh + 20 | 0;
 xg = oh + 24 | 0;
 yg = oh + 28 | 0;
 zg = oh + 32 | 0;
 Ag = oh + 36 | 0;
 Bg = lh + 36 | 0;
 Cg = lh + 32 | 0;
 Dg = lh + 28 | 0;
 Eg = lh + 24 | 0;
 Fg = lh + 20 | 0;
 Gg = lh + 16 | 0;
 Hg = lh + 12 | 0;
 Ig = lh + 8 | 0;
 Jg = lh + 4 | 0;
 Kg = lh + 40 | 0;
 Lg = oh + 48 | 0;
 Mg = oh + 52 | 0;
 Ng = oh + 56 | 0;
 Og = oh + 60 | 0;
 Pg = oh + 64 | 0;
 Qg = oh + 68 | 0;
 Rg = oh + 72 | 0;
 Sg = oh + 76 | 0;
 Tg = lh + 76 | 0;
 Ug = lh + 72 | 0;
 Vg = lh + 68 | 0;
 Wg = lh + 64 | 0;
 Xg = lh + 60 | 0;
 Yg = lh + 56 | 0;
 Zg = lh + 52 | 0;
 _g = lh + 48 | 0;
 $g = lh + 44 | 0;
 ah = lh + 80 | 0;
 bh = oh + 88 | 0;
 ch = oh + 92 | 0;
 dh = oh + 96 | 0;
 pa = oh + 100 | 0;
 qa = oh + 104 | 0;
 ra = oh + 108 | 0;
 sa = oh + 112 | 0;
 ta = oh + 116 | 0;
 ua = lh + 116 | 0;
 va = lh + 112 | 0;
 wa = lh + 108 | 0;
 xa = lh + 104 | 0;
 ya = lh + 100 | 0;
 za = lh + 96 | 0;
 Aa = lh + 92 | 0;
 Ba = lh + 88 | 0;
 Ca = lh + 84 | 0;
 Da = oh + 120 | 0;
 Ea = lh + 120 | 0;
 Fa = oh + 124 | 0;
 Ga = oh + 128 | 0;
 Ha = oh + 132 | 0;
 Ia = oh + 136 | 0;
 Ja = oh + 140 | 0;
 Ka = oh + 144 | 0;
 La = oh + 148 | 0;
 Ma = oh + 152 | 0;
 Na = oh + 156 | 0;
 Oa = lh + 156 | 0;
 Pa = lh + 152 | 0;
 Qa = lh + 148 | 0;
 Ra = lh + 144 | 0;
 Sa = lh + 140 | 0;
 Ta = lh + 136 | 0;
 Ua = lh + 132 | 0;
 Va = lh + 128 | 0;
 Wa = lh + 124 | 0;
 Xa = lh + 160 | 0;
 Ya = lh + 196 | 0;
 Za = lh + 192 | 0;
 _a = lh + 188 | 0;
 $a = lh + 184 | 0;
 ab = lh + 180 | 0;
 bb = lh + 176 | 0;
 cb = lh + 172 | 0;
 db = lh + 168 | 0;
 eb = lh + 164 | 0;
 fb = lh + 200 | 0;
 gb = lh + 236 | 0;
 hb = lh + 232 | 0;
 ib = lh + 228 | 0;
 jb = lh + 224 | 0;
 kb = lh + 220 | 0;
 lb = lh + 216 | 0;
 mb = lh + 212 | 0;
 nb = lh + 208 | 0;
 ob = lh + 204 | 0;
 pb = lh + 240 | 0;
 qb = lh + 276 | 0;
 rb = lh + 272 | 0;
 sb = lh + 268 | 0;
 tb = lh + 264 | 0;
 ub = lh + 260 | 0;
 vb = lh + 256 | 0;
 wb = lh + 252 | 0;
 xb = lh + 248 | 0;
 yb = lh + 244 | 0;
 zb = lh + 280 | 0;
 Ab = lh + 316 | 0;
 Bb = lh + 312 | 0;
 Cb = lh + 308 | 0;
 Db = lh + 304 | 0;
 Eb = lh + 300 | 0;
 Fb = lh + 296 | 0;
 Gb = lh + 292 | 0;
 Hb = lh + 288 | 0;
 Ib = lh + 284 | 0;
 Jb = lh + 320 | 0;
 Kb = lh + 356 | 0;
 Lb = lh + 352 | 0;
 Mb = lh + 348 | 0;
 Nb = lh + 344 | 0;
 Ob = lh + 340 | 0;
 Pb = lh + 336 | 0;
 Qb = lh + 332 | 0;
 Rb = lh + 328 | 0;
 Sb = lh + 324 | 0;
 Tb = lh + 360 | 0;
 Ub = lh + 396 | 0;
 Vb = lh + 392 | 0;
 Wb = lh + 388 | 0;
 Xb = lh + 384 | 0;
 Yb = lh + 380 | 0;
 Zb = lh + 376 | 0;
 _b = lh + 372 | 0;
 $b = lh + 368 | 0;
 ac = lh + 364 | 0;
 bc = lh + 400 | 0;
 cc = lh + 436 | 0;
 fc = lh + 432 | 0;
 ic = lh + 428 | 0;
 jc = lh + 424 | 0;
 kc = lh + 420 | 0;
 lc = lh + 416 | 0;
 mc = lh + 412 | 0;
 nc = lh + 408 | 0;
 oc = lh + 404 | 0;
 pc = lh + 440 | 0;
 qc = lh + 476 | 0;
 rc = lh + 472 | 0;
 sc = lh + 468 | 0;
 tc = lh + 464 | 0;
 uc = lh + 460 | 0;
 vc = lh + 456 | 0;
 wc = lh + 452 | 0;
 xc = lh + 448 | 0;
 yc = lh + 444 | 0;
 zc = lh + 480 | 0;
 Ac = lh + 516 | 0;
 Bc = lh + 512 | 0;
 Cc = lh + 508 | 0;
 Dc = lh + 504 | 0;
 Ec = lh + 500 | 0;
 Fc = lh + 496 | 0;
 Gc = lh + 492 | 0;
 Hc = lh + 488 | 0;
 Ic = lh + 484 | 0;
 Jc = lh + 520 | 0;
 Kc = lh + 556 | 0;
 Lc = lh + 552 | 0;
 Mc = lh + 548 | 0;
 Nc = lh + 544 | 0;
 Oc = lh + 540 | 0;
 Pc = lh + 536 | 0;
 Qc = lh + 532 | 0;
 Rc = lh + 528 | 0;
 Sc = lh + 524 | 0;
 Tc = lh + 560 | 0;
 Uc = lh + 596 | 0;
 Vc = lh + 592 | 0;
 Wc = lh + 588 | 0;
 Xc = lh + 584 | 0;
 Yc = lh + 580 | 0;
 Zc = lh + 576 | 0;
 _c = lh + 572 | 0;
 $c = lh + 568 | 0;
 ad = lh + 564 | 0;
 bd = lh + 600 | 0;
 cd = lh + 636 | 0;
 dd = lh + 632 | 0;
 ed = lh + 628 | 0;
 fd = lh + 624 | 0;
 gd = lh + 620 | 0;
 hd = lh + 616 | 0;
 id = lh + 612 | 0;
 jd = lh + 608 | 0;
 kd = lh + 604 | 0;
 ld = lh + 640 | 0;
 md = lh + 676 | 0;
 nd = lh + 672 | 0;
 od = lh + 668 | 0;
 pd = lh + 664 | 0;
 qd = lh + 660 | 0;
 rd = lh + 656 | 0;
 sd = lh + 652 | 0;
 td = lh + 648 | 0;
 ud = lh + 644 | 0;
 vd = lh + 680 | 0;
 wd = lh + 716 | 0;
 xd = lh + 712 | 0;
 yd = lh + 708 | 0;
 zd = lh + 704 | 0;
 Ad = lh + 700 | 0;
 Bd = lh + 696 | 0;
 Cd = lh + 692 | 0;
 Dd = lh + 688 | 0;
 Ed = lh + 684 | 0;
 Fd = lh + 720 | 0;
 Gd = lh + 756 | 0;
 Hd = lh + 752 | 0;
 Id = lh + 748 | 0;
 Jd = lh + 744 | 0;
 Kd = lh + 740 | 0;
 Ld = lh + 736 | 0;
 Md = lh + 732 | 0;
 Nd = lh + 728 | 0;
 Od = lh + 724 | 0;
 Pd = lh + 760 | 0;
 Qd = lh + 796 | 0;
 Rd = lh + 792 | 0;
 Sd = lh + 788 | 0;
 Td = lh + 784 | 0;
 Ud = lh + 780 | 0;
 Vd = lh + 776 | 0;
 Wd = lh + 772 | 0;
 Xd = lh + 768 | 0;
 Yd = lh + 764 | 0;
 Zd = lh + 800 | 0;
 _d = lh + 836 | 0;
 $d = lh + 832 | 0;
 ae = lh + 828 | 0;
 be = lh + 824 | 0;
 ce = lh + 820 | 0;
 de = lh + 816 | 0;
 ee = lh + 812 | 0;
 fe = lh + 808 | 0;
 ge = lh + 804 | 0;
 he = lh + 840 | 0;
 ie = lh + 876 | 0;
 je = lh + 872 | 0;
 ke = lh + 868 | 0;
 le = lh + 864 | 0;
 me = lh + 860 | 0;
 ne = lh + 856 | 0;
 oe = lh + 852 | 0;
 pe = lh + 848 | 0;
 qe = lh + 844 | 0;
 re = lh + 880 | 0;
 se = lh + 916 | 0;
 te = lh + 912 | 0;
 ue = lh + 908 | 0;
 ve = lh + 904 | 0;
 we = lh + 900 | 0;
 xe = lh + 896 | 0;
 ye = lh + 892 | 0;
 ze = lh + 888 | 0;
 Ae = lh + 884 | 0;
 Be = lh + 920 | 0;
 Ce = lh + 956 | 0;
 De = lh + 952 | 0;
 Ee = lh + 948 | 0;
 Fe = lh + 944 | 0;
 Ge = lh + 940 | 0;
 He = lh + 936 | 0;
 Ie = lh + 932 | 0;
 Je = lh + 928 | 0;
 Ke = lh + 924 | 0;
 Le = lh + 960 | 0;
 Me = lh + 996 | 0;
 Ne = lh + 992 | 0;
 Oe = lh + 988 | 0;
 Pe = lh + 984 | 0;
 Qe = lh + 980 | 0;
 Re = lh + 976 | 0;
 Se = lh + 972 | 0;
 Te = lh + 968 | 0;
 Ue = lh + 964 | 0;
 Ve = lh + 1e3 | 0;
 We = lh + 1036 | 0;
 Xe = lh + 1032 | 0;
 Ye = lh + 1028 | 0;
 Ze = lh + 1024 | 0;
 _e = lh + 1020 | 0;
 $e = lh + 1016 | 0;
 af = lh + 1012 | 0;
 bf = lh + 1008 | 0;
 cf = lh + 1004 | 0;
 df = lh + 1040 | 0;
 ef = lh + 1076 | 0;
 ff = lh + 1072 | 0;
 gf = lh + 1068 | 0;
 hf = lh + 1064 | 0;
 jf = lh + 1060 | 0;
 kf = lh + 1056 | 0;
 lf = lh + 1052 | 0;
 mf = lh + 1048 | 0;
 nf = lh + 1044 | 0;
 of = lh + 1080 | 0;
 pf = lh + 1116 | 0;
 qf = lh + 1112 | 0;
 rf = lh + 1108 | 0;
 sf = lh + 1104 | 0;
 tf = lh + 1100 | 0;
 uf = lh + 1096 | 0;
 vf = lh + 1092 | 0;
 wf = lh + 1088 | 0;
 xf = lh + 1084 | 0;
 yf = lh + 1120 | 0;
 zf = lh + 1156 | 0;
 Af = lh + 1152 | 0;
 Bf = lh + 1148 | 0;
 Cf = lh + 1144 | 0;
 Df = lh + 1140 | 0;
 Ef = lh + 1136 | 0;
 Ff = lh + 1132 | 0;
 Gf = lh + 1128 | 0;
 Hf = lh + 1124 | 0;
 If = lh + 1160 | 0;
 Jf = lh + 1196 | 0;
 Kf = lh + 1192 | 0;
 Lf = lh + 1188 | 0;
 Mf = lh + 1184 | 0;
 Nf = lh + 1180 | 0;
 Of = lh + 1176 | 0;
 Pf = lh + 1172 | 0;
 Qf = lh + 1168 | 0;
 Rf = lh + 1164 | 0;
 Sf = lh + 1200 | 0;
 Tf = lh + 1236 | 0;
 Uf = lh + 1232 | 0;
 Vf = lh + 1228 | 0;
 Wf = lh + 1224 | 0;
 Xf = lh + 1220 | 0;
 Yf = lh + 1216 | 0;
 Zf = lh + 1212 | 0;
 _f = lh + 1208 | 0;
 $f = lh + 1204 | 0;
 ag = lh + 1240 | 0;
 bg = lh + 1276 | 0;
 cg = lh + 1272 | 0;
 dg = lh + 1268 | 0;
 eg = lh + 1264 | 0;
 fg = lh + 1260 | 0;
 gg = lh + 1256 | 0;
 hg = lh + 1252 | 0;
 ig = lh + 1248 | 0;
 jg = lh + 1244 | 0;
 oa = 63;
 while (1) {
  kg = a[kh + oa >> 0] | 0;
  g = kg << 24 >> 24;
  kg = (kg & 255) >>> 7 & 255;
  lg = 0 - kg | 0;
  g = g - ((lg & g) << 1) | 0;
  hc(mh, b);
  ec(b, mh, eh);
  ec(mg, gh, hh);
  ec(ng, hh, eh);
  hc(mh, b);
  ec(b, mh, eh);
  ec(mg, gh, hh);
  ec(ng, hh, eh);
  hc(mh, b);
  ec(b, mh, eh);
  ec(mg, gh, hh);
  ec(ng, hh, eh);
  hc(mh, b);
  ec(nh, mh, eh);
  ec(fh, gh, hh);
  ec(ih, hh, eh);
  ec(jh, mh, gh);
  c[oh >> 2] = 1;
  h = og;
  e = h + 36 | 0;
  do {
   c[h >> 2] = 0;
   h = h + 4 | 0;
  } while ((h | 0) < (e | 0));
  c[pg >> 2] = 1;
  h = qg;
  e = h + 36 | 0;
  do {
   c[h >> 2] = 0;
   h = h + 4 | 0;
  } while ((h | 0) < (e | 0));
  c[rg >> 2] = 1;
  h = sg;
  e = h + 76 | 0;
  do {
   c[h >> 2] = 0;
   h = h + 4 | 0;
  } while ((h | 0) < (e | 0));
  na = g & 255;
  g = (na ^ 1) + -1 | 0;
  ma = g >>> 31;
  g = g >> 31;
  if ((ma + -1 & ~ma | (ma | -2) & g | 0) != -1) {
   g = 5;
   break;
  }
  e = c[Jg >> 2] & g;
  f = c[Ig >> 2] & g;
  i = c[Hg >> 2] & g;
  j = c[Gg >> 2] & g;
  l = c[Fg >> 2] & g;
  m = c[Eg >> 2] & g;
  n = c[Dg >> 2] & g;
  o = c[Cg >> 2] & g;
  p = c[Bg >> 2] & g;
  h = (c[lh >> 2] ^ 1) & g ^ 1;
  c[oh >> 2] = h;
  c[og >> 2] = e;
  c[tg >> 2] = f;
  c[ug >> 2] = i;
  c[vg >> 2] = j;
  c[wg >> 2] = l;
  c[xg >> 2] = m;
  c[yg >> 2] = n;
  c[zg >> 2] = o;
  c[Ag >> 2] = p;
  r = c[$g >> 2] & g;
  s = c[_g >> 2] & g;
  t = c[Zg >> 2] & g;
  u = c[Yg >> 2] & g;
  v = c[Xg >> 2] & g;
  w = c[Wg >> 2] & g;
  x = c[Vg >> 2] & g;
  y = c[Ug >> 2] & g;
  z = c[Tg >> 2] & g;
  q = (c[Kg >> 2] ^ 1) & g ^ 1;
  c[pg >> 2] = q;
  c[qg >> 2] = r;
  c[Lg >> 2] = s;
  c[Mg >> 2] = t;
  c[Ng >> 2] = u;
  c[Og >> 2] = v;
  c[Pg >> 2] = w;
  c[Qg >> 2] = x;
  c[Rg >> 2] = y;
  c[Sg >> 2] = z;
  B = c[Ca >> 2] & g;
  C = c[Ba >> 2] & g;
  D = c[Aa >> 2] & g;
  E = c[za >> 2] & g;
  F = c[ya >> 2] & g;
  G = c[xa >> 2] & g;
  H = c[wa >> 2] & g;
  I = c[va >> 2] & g;
  J = c[ua >> 2] & g;
  A = (c[ah >> 2] ^ 1) & g ^ 1;
  c[rg >> 2] = A;
  c[sg >> 2] = B;
  c[bh >> 2] = C;
  c[ch >> 2] = D;
  c[dh >> 2] = E;
  c[pa >> 2] = F;
  c[qa >> 2] = G;
  c[ra >> 2] = H;
  c[sa >> 2] = I;
  c[ta >> 2] = J;
  K = c[Ea >> 2] & g;
  L = c[Wa >> 2] & g;
  M = c[Va >> 2] & g;
  N = c[Ua >> 2] & g;
  O = c[Ta >> 2] & g;
  P = c[Sa >> 2] & g;
  Q = c[Ra >> 2] & g;
  R = c[Qa >> 2] & g;
  S = c[Pa >> 2] & g;
  T = c[Oa >> 2] & g;
  c[Da >> 2] = K;
  c[Fa >> 2] = L;
  c[Ga >> 2] = M;
  c[Ha >> 2] = N;
  c[Ia >> 2] = O;
  c[Ja >> 2] = P;
  c[Ka >> 2] = Q;
  c[La >> 2] = R;
  c[Ma >> 2] = S;
  c[Na >> 2] = T;
  g = (na ^ 2) + -1 | 0;
  ma = g >>> 31;
  g = g >> 31;
  if ((ma + -1 & ~ma | (ma | -2) & g | 0) != -1) {
   g = 7;
   break;
  }
  V = (c[eb >> 2] ^ e) & g;
  W = (c[db >> 2] ^ f) & g;
  X = (c[cb >> 2] ^ i) & g;
  Y = (c[bb >> 2] ^ j) & g;
  Z = (c[ab >> 2] ^ l) & g;
  _ = (c[$a >> 2] ^ m) & g;
  $ = (c[_a >> 2] ^ n) & g;
  aa = (c[Za >> 2] ^ o) & g;
  ba = (c[Ya >> 2] ^ p) & g;
  U = (c[Xa >> 2] ^ h) & g ^ h;
  c[oh >> 2] = U;
  V = V ^ e;
  c[og >> 2] = V;
  W = W ^ f;
  c[tg >> 2] = W;
  X = X ^ i;
  c[ug >> 2] = X;
  Y = Y ^ j;
  c[vg >> 2] = Y;
  Z = Z ^ l;
  c[wg >> 2] = Z;
  _ = _ ^ m;
  c[xg >> 2] = _;
  $ = $ ^ n;
  c[yg >> 2] = $;
  aa = aa ^ o;
  c[zg >> 2] = aa;
  ba = ba ^ p;
  c[Ag >> 2] = ba;
  e = (c[ob >> 2] ^ r) & g;
  f = (c[nb >> 2] ^ s) & g;
  i = (c[mb >> 2] ^ t) & g;
  j = (c[lb >> 2] ^ u) & g;
  l = (c[kb >> 2] ^ v) & g;
  m = (c[jb >> 2] ^ w) & g;
  n = (c[ib >> 2] ^ x) & g;
  o = (c[hb >> 2] ^ y) & g;
  p = (c[gb >> 2] ^ z) & g;
  q = (c[fb >> 2] ^ q) & g ^ q;
  c[pg >> 2] = q;
  r = e ^ r;
  c[qg >> 2] = r;
  s = f ^ s;
  c[Lg >> 2] = s;
  t = i ^ t;
  c[Mg >> 2] = t;
  u = j ^ u;
  c[Ng >> 2] = u;
  v = l ^ v;
  c[Og >> 2] = v;
  w = m ^ w;
  c[Pg >> 2] = w;
  x = n ^ x;
  c[Qg >> 2] = x;
  y = o ^ y;
  c[Rg >> 2] = y;
  z = p ^ z;
  c[Sg >> 2] = z;
  p = (c[yb >> 2] ^ B) & g;
  o = (c[xb >> 2] ^ C) & g;
  n = (c[wb >> 2] ^ D) & g;
  m = (c[vb >> 2] ^ E) & g;
  l = (c[ub >> 2] ^ F) & g;
  j = (c[tb >> 2] ^ G) & g;
  i = (c[sb >> 2] ^ H) & g;
  f = (c[rb >> 2] ^ I) & g;
  e = (c[qb >> 2] ^ J) & g;
  A = (c[pb >> 2] ^ A) & g ^ A;
  c[rg >> 2] = A;
  B = p ^ B;
  c[sg >> 2] = B;
  C = o ^ C;
  c[bh >> 2] = C;
  D = n ^ D;
  c[ch >> 2] = D;
  E = m ^ E;
  c[dh >> 2] = E;
  F = l ^ F;
  c[pa >> 2] = F;
  G = j ^ G;
  c[qa >> 2] = G;
  H = i ^ H;
  c[ra >> 2] = H;
  I = f ^ I;
  c[sa >> 2] = I;
  J = e ^ J;
  c[ta >> 2] = J;
  e = (c[Ib >> 2] ^ L) & g;
  f = (c[Hb >> 2] ^ M) & g;
  i = (c[Gb >> 2] ^ N) & g;
  j = (c[Fb >> 2] ^ O) & g;
  l = (c[Eb >> 2] ^ P) & g;
  m = (c[Db >> 2] ^ Q) & g;
  n = (c[Cb >> 2] ^ R) & g;
  o = (c[Bb >> 2] ^ S) & g;
  p = (c[Ab >> 2] ^ T) & g;
  h = (c[zb >> 2] ^ K) & g ^ K;
  c[Da >> 2] = h;
  e = e ^ L;
  c[Fa >> 2] = e;
  f = f ^ M;
  c[Ga >> 2] = f;
  i = i ^ N;
  c[Ha >> 2] = i;
  j = j ^ O;
  c[Ia >> 2] = j;
  l = l ^ P;
  c[Ja >> 2] = l;
  m = m ^ Q;
  c[Ka >> 2] = m;
  n = n ^ R;
  c[La >> 2] = n;
  o = o ^ S;
  c[Ma >> 2] = o;
  p = p ^ T;
  c[Na >> 2] = p;
  g = (na ^ 3) + -1 | 0;
  ma = g >>> 31;
  g = g >> 31;
  if ((ma + -1 & ~ma | (ma | -2) & g | 0) != -1) {
   g = 9;
   break;
  }
  L = (c[Sb >> 2] ^ V) & g;
  M = (c[Rb >> 2] ^ W) & g;
  N = (c[Qb >> 2] ^ X) & g;
  O = (c[Pb >> 2] ^ Y) & g;
  P = (c[Ob >> 2] ^ Z) & g;
  Q = (c[Nb >> 2] ^ _) & g;
  R = (c[Mb >> 2] ^ $) & g;
  S = (c[Lb >> 2] ^ aa) & g;
  T = (c[Kb >> 2] ^ ba) & g;
  K = (c[Jb >> 2] ^ U) & g ^ U;
  c[oh >> 2] = K;
  L = L ^ V;
  c[og >> 2] = L;
  M = M ^ W;
  c[tg >> 2] = M;
  N = N ^ X;
  c[ug >> 2] = N;
  O = O ^ Y;
  c[vg >> 2] = O;
  P = P ^ Z;
  c[wg >> 2] = P;
  Q = Q ^ _;
  c[xg >> 2] = Q;
  R = R ^ $;
  c[yg >> 2] = R;
  S = S ^ aa;
  c[zg >> 2] = S;
  T = T ^ ba;
  c[Ag >> 2] = T;
  da = (c[ac >> 2] ^ r) & g;
  ea = (c[$b >> 2] ^ s) & g;
  fa = (c[_b >> 2] ^ t) & g;
  ga = (c[Zb >> 2] ^ u) & g;
  ia = (c[Yb >> 2] ^ v) & g;
  ja = (c[Xb >> 2] ^ w) & g;
  ka = (c[Wb >> 2] ^ x) & g;
  la = (c[Vb >> 2] ^ y) & g;
  ma = (c[Ub >> 2] ^ z) & g;
  q = (c[Tb >> 2] ^ q) & g ^ q;
  c[pg >> 2] = q;
  r = da ^ r;
  c[qg >> 2] = r;
  s = ea ^ s;
  c[Lg >> 2] = s;
  t = fa ^ t;
  c[Mg >> 2] = t;
  u = ga ^ u;
  c[Ng >> 2] = u;
  v = ia ^ v;
  c[Og >> 2] = v;
  w = ja ^ w;
  c[Pg >> 2] = w;
  x = ka ^ x;
  c[Qg >> 2] = x;
  y = la ^ y;
  c[Rg >> 2] = y;
  z = ma ^ z;
  c[Sg >> 2] = z;
  ma = (c[oc >> 2] ^ B) & g;
  la = (c[nc >> 2] ^ C) & g;
  ka = (c[mc >> 2] ^ D) & g;
  ja = (c[lc >> 2] ^ E) & g;
  ia = (c[kc >> 2] ^ F) & g;
  ga = (c[jc >> 2] ^ G) & g;
  fa = (c[ic >> 2] ^ H) & g;
  ea = (c[fc >> 2] ^ I) & g;
  da = (c[cc >> 2] ^ J) & g;
  A = (c[bc >> 2] ^ A) & g ^ A;
  c[rg >> 2] = A;
  B = ma ^ B;
  c[sg >> 2] = B;
  C = la ^ C;
  c[bh >> 2] = C;
  D = ka ^ D;
  c[ch >> 2] = D;
  E = ja ^ E;
  c[dh >> 2] = E;
  F = ia ^ F;
  c[pa >> 2] = F;
  G = ga ^ G;
  c[qa >> 2] = G;
  H = fa ^ H;
  c[ra >> 2] = H;
  I = ea ^ I;
  c[sa >> 2] = I;
  J = da ^ J;
  c[ta >> 2] = J;
  da = (c[yc >> 2] ^ e) & g;
  ea = (c[xc >> 2] ^ f) & g;
  fa = (c[wc >> 2] ^ i) & g;
  ga = (c[vc >> 2] ^ j) & g;
  ia = (c[uc >> 2] ^ l) & g;
  ja = (c[tc >> 2] ^ m) & g;
  ka = (c[sc >> 2] ^ n) & g;
  la = (c[rc >> 2] ^ o) & g;
  ma = (c[qc >> 2] ^ p) & g;
  h = (c[pc >> 2] ^ h) & g ^ h;
  c[Da >> 2] = h;
  e = da ^ e;
  c[Fa >> 2] = e;
  f = ea ^ f;
  c[Ga >> 2] = f;
  i = fa ^ i;
  c[Ha >> 2] = i;
  j = ga ^ j;
  c[Ia >> 2] = j;
  l = ia ^ l;
  c[Ja >> 2] = l;
  m = ja ^ m;
  c[Ka >> 2] = m;
  n = ka ^ n;
  c[La >> 2] = n;
  o = la ^ o;
  c[Ma >> 2] = o;
  p = ma ^ p;
  c[Na >> 2] = p;
  g = (na ^ 4) + -1 | 0;
  ma = g >>> 31;
  g = g >> 31;
  if ((ma + -1 & ~ma | (ma | -2) & g | 0) != -1) {
   g = 11;
   break;
  }
  ba = (c[Ic >> 2] ^ L) & g;
  aa = (c[Hc >> 2] ^ M) & g;
  $ = (c[Gc >> 2] ^ N) & g;
  _ = (c[Fc >> 2] ^ O) & g;
  Z = (c[Ec >> 2] ^ P) & g;
  Y = (c[Dc >> 2] ^ Q) & g;
  X = (c[Cc >> 2] ^ R) & g;
  W = (c[Bc >> 2] ^ S) & g;
  V = (c[Ac >> 2] ^ T) & g;
  K = (c[zc >> 2] ^ K) & g ^ K;
  c[oh >> 2] = K;
  L = ba ^ L;
  c[og >> 2] = L;
  M = aa ^ M;
  c[tg >> 2] = M;
  N = $ ^ N;
  c[ug >> 2] = N;
  O = _ ^ O;
  c[vg >> 2] = O;
  P = Z ^ P;
  c[wg >> 2] = P;
  Q = Y ^ Q;
  c[xg >> 2] = Q;
  R = X ^ R;
  c[yg >> 2] = R;
  S = W ^ S;
  c[zg >> 2] = S;
  T = V ^ T;
  c[Ag >> 2] = T;
  V = (c[Sc >> 2] ^ r) & g;
  W = (c[Rc >> 2] ^ s) & g;
  X = (c[Qc >> 2] ^ t) & g;
  Y = (c[Pc >> 2] ^ u) & g;
  Z = (c[Oc >> 2] ^ v) & g;
  _ = (c[Nc >> 2] ^ w) & g;
  $ = (c[Mc >> 2] ^ x) & g;
  aa = (c[Lc >> 2] ^ y) & g;
  ba = (c[Kc >> 2] ^ z) & g;
  U = (c[Jc >> 2] ^ q) & g ^ q;
  c[pg >> 2] = U;
  V = V ^ r;
  c[qg >> 2] = V;
  W = W ^ s;
  c[Lg >> 2] = W;
  X = X ^ t;
  c[Mg >> 2] = X;
  Y = Y ^ u;
  c[Ng >> 2] = Y;
  Z = Z ^ v;
  c[Og >> 2] = Z;
  _ = _ ^ w;
  c[Pg >> 2] = _;
  $ = $ ^ x;
  c[Qg >> 2] = $;
  aa = aa ^ y;
  c[Rg >> 2] = aa;
  ba = ba ^ z;
  c[Sg >> 2] = ba;
  da = (c[ad >> 2] ^ B) & g;
  ea = (c[$c >> 2] ^ C) & g;
  fa = (c[_c >> 2] ^ D) & g;
  ga = (c[Zc >> 2] ^ E) & g;
  ia = (c[Yc >> 2] ^ F) & g;
  ja = (c[Xc >> 2] ^ G) & g;
  ka = (c[Wc >> 2] ^ H) & g;
  la = (c[Vc >> 2] ^ I) & g;
  ma = (c[Uc >> 2] ^ J) & g;
  ca = (c[Tc >> 2] ^ A) & g ^ A;
  c[rg >> 2] = ca;
  da = da ^ B;
  c[sg >> 2] = da;
  ea = ea ^ C;
  c[bh >> 2] = ea;
  fa = fa ^ D;
  c[ch >> 2] = fa;
  ga = ga ^ E;
  c[dh >> 2] = ga;
  ia = ia ^ F;
  c[pa >> 2] = ia;
  ja = ja ^ G;
  c[qa >> 2] = ja;
  ka = ka ^ H;
  c[ra >> 2] = ka;
  la = la ^ I;
  c[sa >> 2] = la;
  ma = ma ^ J;
  c[ta >> 2] = ma;
  B = (c[kd >> 2] ^ e) & g;
  C = (c[jd >> 2] ^ f) & g;
  D = (c[id >> 2] ^ i) & g;
  E = (c[hd >> 2] ^ j) & g;
  F = (c[gd >> 2] ^ l) & g;
  G = (c[fd >> 2] ^ m) & g;
  H = (c[ed >> 2] ^ n) & g;
  I = (c[dd >> 2] ^ o) & g;
  J = (c[cd >> 2] ^ p) & g;
  h = (c[bd >> 2] ^ h) & g ^ h;
  c[Da >> 2] = h;
  e = B ^ e;
  c[Fa >> 2] = e;
  f = C ^ f;
  c[Ga >> 2] = f;
  i = D ^ i;
  c[Ha >> 2] = i;
  j = E ^ j;
  c[Ia >> 2] = j;
  l = F ^ l;
  c[Ja >> 2] = l;
  m = G ^ m;
  c[Ka >> 2] = m;
  n = H ^ n;
  c[La >> 2] = n;
  o = I ^ o;
  c[Ma >> 2] = o;
  p = J ^ p;
  c[Na >> 2] = p;
  g = (na ^ 5) + -1 | 0;
  J = g >>> 31;
  g = g >> 31;
  if ((J + -1 & ~J | (J | -2) & g | 0) != -1) {
   g = 13;
   break;
  }
  r = (c[ud >> 2] ^ L) & g;
  s = (c[td >> 2] ^ M) & g;
  t = (c[sd >> 2] ^ N) & g;
  u = (c[rd >> 2] ^ O) & g;
  v = (c[qd >> 2] ^ P) & g;
  w = (c[pd >> 2] ^ Q) & g;
  x = (c[od >> 2] ^ R) & g;
  y = (c[nd >> 2] ^ S) & g;
  z = (c[md >> 2] ^ T) & g;
  q = (c[ld >> 2] ^ K) & g ^ K;
  c[oh >> 2] = q;
  r = r ^ L;
  c[og >> 2] = r;
  s = s ^ M;
  c[tg >> 2] = s;
  t = t ^ N;
  c[ug >> 2] = t;
  u = u ^ O;
  c[vg >> 2] = u;
  v = v ^ P;
  c[wg >> 2] = v;
  w = w ^ Q;
  c[xg >> 2] = w;
  x = x ^ R;
  c[yg >> 2] = x;
  y = y ^ S;
  c[zg >> 2] = y;
  z = z ^ T;
  c[Ag >> 2] = z;
  B = (c[Ed >> 2] ^ V) & g;
  C = (c[Dd >> 2] ^ W) & g;
  D = (c[Cd >> 2] ^ X) & g;
  E = (c[Bd >> 2] ^ Y) & g;
  F = (c[Ad >> 2] ^ Z) & g;
  G = (c[zd >> 2] ^ _) & g;
  H = (c[yd >> 2] ^ $) & g;
  I = (c[xd >> 2] ^ aa) & g;
  J = (c[wd >> 2] ^ ba) & g;
  A = (c[vd >> 2] ^ U) & g ^ U;
  c[pg >> 2] = A;
  B = B ^ V;
  c[qg >> 2] = B;
  C = C ^ W;
  c[Lg >> 2] = C;
  D = D ^ X;
  c[Mg >> 2] = D;
  E = E ^ Y;
  c[Ng >> 2] = E;
  F = F ^ Z;
  c[Og >> 2] = F;
  G = G ^ _;
  c[Pg >> 2] = G;
  H = H ^ $;
  c[Qg >> 2] = H;
  I = I ^ aa;
  c[Rg >> 2] = I;
  J = J ^ ba;
  c[Sg >> 2] = J;
  L = (c[Od >> 2] ^ da) & g;
  M = (c[Nd >> 2] ^ ea) & g;
  N = (c[Md >> 2] ^ fa) & g;
  O = (c[Ld >> 2] ^ ga) & g;
  P = (c[Kd >> 2] ^ ia) & g;
  Q = (c[Jd >> 2] ^ ja) & g;
  R = (c[Id >> 2] ^ ka) & g;
  S = (c[Hd >> 2] ^ la) & g;
  T = (c[Gd >> 2] ^ ma) & g;
  K = (c[Fd >> 2] ^ ca) & g ^ ca;
  c[rg >> 2] = K;
  L = L ^ da;
  c[sg >> 2] = L;
  M = M ^ ea;
  c[bh >> 2] = M;
  N = N ^ fa;
  c[ch >> 2] = N;
  O = O ^ ga;
  c[dh >> 2] = O;
  P = P ^ ia;
  c[pa >> 2] = P;
  Q = Q ^ ja;
  c[qa >> 2] = Q;
  R = R ^ ka;
  c[ra >> 2] = R;
  S = S ^ la;
  c[sa >> 2] = S;
  T = T ^ ma;
  c[ta >> 2] = T;
  da = (c[Yd >> 2] ^ e) & g;
  ea = (c[Xd >> 2] ^ f) & g;
  fa = (c[Wd >> 2] ^ i) & g;
  ga = (c[Vd >> 2] ^ j) & g;
  ia = (c[Ud >> 2] ^ l) & g;
  ja = (c[Td >> 2] ^ m) & g;
  ka = (c[Sd >> 2] ^ n) & g;
  la = (c[Rd >> 2] ^ o) & g;
  ma = (c[Qd >> 2] ^ p) & g;
  h = (c[Pd >> 2] ^ h) & g ^ h;
  c[Da >> 2] = h;
  e = da ^ e;
  c[Fa >> 2] = e;
  f = ea ^ f;
  c[Ga >> 2] = f;
  i = fa ^ i;
  c[Ha >> 2] = i;
  j = ga ^ j;
  c[Ia >> 2] = j;
  l = ia ^ l;
  c[Ja >> 2] = l;
  m = ja ^ m;
  c[Ka >> 2] = m;
  n = ka ^ n;
  c[La >> 2] = n;
  o = la ^ o;
  c[Ma >> 2] = o;
  p = ma ^ p;
  c[Na >> 2] = p;
  g = (na ^ 6) + -1 | 0;
  ma = g >>> 31;
  g = g >> 31;
  if ((ma + -1 & ~ma | (ma | -2) & g | 0) != -1) {
   g = 15;
   break;
  }
  ma = (c[ge >> 2] ^ r) & g;
  la = (c[fe >> 2] ^ s) & g;
  ka = (c[ee >> 2] ^ t) & g;
  ja = (c[de >> 2] ^ u) & g;
  ia = (c[ce >> 2] ^ v) & g;
  ga = (c[be >> 2] ^ w) & g;
  fa = (c[ae >> 2] ^ x) & g;
  ea = (c[$d >> 2] ^ y) & g;
  da = (c[_d >> 2] ^ z) & g;
  q = (c[Zd >> 2] ^ q) & g ^ q;
  c[oh >> 2] = q;
  r = ma ^ r;
  c[og >> 2] = r;
  s = la ^ s;
  c[tg >> 2] = s;
  t = ka ^ t;
  c[ug >> 2] = t;
  u = ja ^ u;
  c[vg >> 2] = u;
  v = ia ^ v;
  c[wg >> 2] = v;
  w = ga ^ w;
  c[xg >> 2] = w;
  x = fa ^ x;
  c[yg >> 2] = x;
  y = ea ^ y;
  c[zg >> 2] = y;
  z = da ^ z;
  c[Ag >> 2] = z;
  da = (c[qe >> 2] ^ B) & g;
  ea = (c[pe >> 2] ^ C) & g;
  fa = (c[oe >> 2] ^ D) & g;
  ga = (c[ne >> 2] ^ E) & g;
  ia = (c[me >> 2] ^ F) & g;
  ja = (c[le >> 2] ^ G) & g;
  ka = (c[ke >> 2] ^ H) & g;
  la = (c[je >> 2] ^ I) & g;
  ma = (c[ie >> 2] ^ J) & g;
  A = (c[he >> 2] ^ A) & g ^ A;
  c[pg >> 2] = A;
  B = da ^ B;
  c[qg >> 2] = B;
  C = ea ^ C;
  c[Lg >> 2] = C;
  D = fa ^ D;
  c[Mg >> 2] = D;
  E = ga ^ E;
  c[Ng >> 2] = E;
  F = ia ^ F;
  c[Og >> 2] = F;
  G = ja ^ G;
  c[Pg >> 2] = G;
  H = ka ^ H;
  c[Qg >> 2] = H;
  I = la ^ I;
  c[Rg >> 2] = I;
  J = ma ^ J;
  c[Sg >> 2] = J;
  ma = (c[Ae >> 2] ^ L) & g;
  la = (c[ze >> 2] ^ M) & g;
  ka = (c[ye >> 2] ^ N) & g;
  ja = (c[xe >> 2] ^ O) & g;
  ia = (c[we >> 2] ^ P) & g;
  ga = (c[ve >> 2] ^ Q) & g;
  fa = (c[ue >> 2] ^ R) & g;
  ea = (c[te >> 2] ^ S) & g;
  da = (c[se >> 2] ^ T) & g;
  K = (c[re >> 2] ^ K) & g ^ K;
  c[rg >> 2] = K;
  L = ma ^ L;
  c[sg >> 2] = L;
  M = la ^ M;
  c[bh >> 2] = M;
  N = ka ^ N;
  c[ch >> 2] = N;
  O = ja ^ O;
  c[dh >> 2] = O;
  P = ia ^ P;
  c[pa >> 2] = P;
  Q = ga ^ Q;
  c[qa >> 2] = Q;
  R = fa ^ R;
  c[ra >> 2] = R;
  S = ea ^ S;
  c[sa >> 2] = S;
  T = da ^ T;
  c[ta >> 2] = T;
  da = (c[Ke >> 2] ^ e) & g;
  ea = (c[Je >> 2] ^ f) & g;
  fa = (c[Ie >> 2] ^ i) & g;
  ga = (c[He >> 2] ^ j) & g;
  ia = (c[Ge >> 2] ^ l) & g;
  ja = (c[Fe >> 2] ^ m) & g;
  ka = (c[Ee >> 2] ^ n) & g;
  la = (c[De >> 2] ^ o) & g;
  ma = (c[Ce >> 2] ^ p) & g;
  h = (c[Be >> 2] ^ h) & g ^ h;
  c[Da >> 2] = h;
  e = da ^ e;
  c[Fa >> 2] = e;
  f = ea ^ f;
  c[Ga >> 2] = f;
  i = fa ^ i;
  c[Ha >> 2] = i;
  j = ga ^ j;
  c[Ia >> 2] = j;
  l = ia ^ l;
  c[Ja >> 2] = l;
  m = ja ^ m;
  c[Ka >> 2] = m;
  n = ka ^ n;
  c[La >> 2] = n;
  o = la ^ o;
  c[Ma >> 2] = o;
  p = ma ^ p;
  c[Na >> 2] = p;
  g = (na ^ 7) + -1 | 0;
  ma = g >>> 31;
  g = g >> 31;
  if ((ma + -1 & ~ma | (ma | -2) & g | 0) != -1) {
   g = 17;
   break;
  }
  aa = (c[Ue >> 2] ^ r) & g;
  $ = (c[Te >> 2] ^ s) & g;
  _ = (c[Se >> 2] ^ t) & g;
  Z = (c[Re >> 2] ^ u) & g;
  Y = (c[Qe >> 2] ^ v) & g;
  ca = (c[Pe >> 2] ^ w) & g;
  da = (c[Oe >> 2] ^ x) & g;
  ea = (c[Ne >> 2] ^ y) & g;
  fa = (c[Me >> 2] ^ z) & g;
  q = (c[Le >> 2] ^ q) & g ^ q;
  c[oh >> 2] = q;
  r = aa ^ r;
  c[og >> 2] = r;
  s = $ ^ s;
  c[tg >> 2] = s;
  t = _ ^ t;
  c[ug >> 2] = t;
  u = Z ^ u;
  c[vg >> 2] = u;
  v = Y ^ v;
  c[wg >> 2] = v;
  w = ca ^ w;
  c[xg >> 2] = w;
  x = da ^ x;
  c[yg >> 2] = x;
  y = ea ^ y;
  c[zg >> 2] = y;
  z = fa ^ z;
  c[Ag >> 2] = z;
  fa = (c[cf >> 2] ^ B) & g;
  ea = (c[bf >> 2] ^ C) & g;
  da = (c[af >> 2] ^ D) & g;
  ca = (c[$e >> 2] ^ E) & g;
  Y = (c[_e >> 2] ^ F) & g;
  Z = (c[Ze >> 2] ^ G) & g;
  _ = (c[Ye >> 2] ^ H) & g;
  $ = (c[Xe >> 2] ^ I) & g;
  aa = (c[We >> 2] ^ J) & g;
  A = (c[Ve >> 2] ^ A) & g ^ A;
  c[pg >> 2] = A;
  B = fa ^ B;
  c[qg >> 2] = B;
  C = ea ^ C;
  c[Lg >> 2] = C;
  D = da ^ D;
  c[Mg >> 2] = D;
  E = ca ^ E;
  c[Ng >> 2] = E;
  Y = Y ^ F;
  c[Og >> 2] = Y;
  Z = Z ^ G;
  c[Pg >> 2] = Z;
  _ = _ ^ H;
  c[Qg >> 2] = _;
  $ = $ ^ I;
  c[Rg >> 2] = $;
  aa = aa ^ J;
  c[Sg >> 2] = aa;
  ca = (c[nf >> 2] ^ L) & g;
  da = (c[mf >> 2] ^ M) & g;
  ea = (c[lf >> 2] ^ N) & g;
  fa = (c[kf >> 2] ^ O) & g;
  ga = (c[jf >> 2] ^ P) & g;
  ia = (c[hf >> 2] ^ Q) & g;
  ja = (c[gf >> 2] ^ R) & g;
  ka = (c[ff >> 2] ^ S) & g;
  la = (c[ef >> 2] ^ T) & g;
  ba = (c[df >> 2] ^ K) & g ^ K;
  c[rg >> 2] = ba;
  ca = ca ^ L;
  c[sg >> 2] = ca;
  da = da ^ M;
  c[bh >> 2] = da;
  ea = ea ^ N;
  c[ch >> 2] = ea;
  fa = fa ^ O;
  c[dh >> 2] = fa;
  ga = ga ^ P;
  c[pa >> 2] = ga;
  ia = ia ^ Q;
  c[qa >> 2] = ia;
  ja = ja ^ R;
  c[ra >> 2] = ja;
  ka = ka ^ S;
  c[sa >> 2] = ka;
  la = la ^ T;
  c[ta >> 2] = la;
  Q = (c[xf >> 2] ^ e) & g;
  R = (c[wf >> 2] ^ f) & g;
  S = (c[vf >> 2] ^ i) & g;
  ma = (c[uf >> 2] ^ j) & g;
  T = (c[tf >> 2] ^ l) & g;
  U = (c[sf >> 2] ^ m) & g;
  V = (c[rf >> 2] ^ n) & g;
  W = (c[qf >> 2] ^ o) & g;
  X = (c[pf >> 2] ^ p) & g;
  h = (c[of >> 2] ^ h) & g ^ h;
  c[Da >> 2] = h;
  e = Q ^ e;
  c[Fa >> 2] = e;
  f = R ^ f;
  c[Ga >> 2] = f;
  i = S ^ i;
  c[Ha >> 2] = i;
  j = ma ^ j;
  c[Ia >> 2] = j;
  T = T ^ l;
  c[Ja >> 2] = T;
  U = U ^ m;
  c[Ka >> 2] = U;
  V = V ^ n;
  c[La >> 2] = V;
  W = W ^ o;
  c[Ma >> 2] = W;
  X = X ^ p;
  c[Na >> 2] = X;
  g = (na ^ 8) + -1 | 0;
  na = g >>> 31;
  g = g >> 31;
  if ((na + -1 & ~na | (na | -2) & g | 0) != -1) {
   g = 19;
   break;
  }
  R = (c[Hf >> 2] ^ r) & g;
  Q = (c[Gf >> 2] ^ s) & g;
  P = (c[Ff >> 2] ^ t) & g;
  O = (c[Ef >> 2] ^ u) & g;
  N = (c[Df >> 2] ^ v) & g;
  M = (c[Cf >> 2] ^ w) & g;
  L = (c[Bf >> 2] ^ x) & g;
  K = (c[Af >> 2] ^ y) & g;
  J = (c[zf >> 2] ^ z) & g;
  S = (c[yf >> 2] ^ q) & g ^ q;
  c[oh >> 2] = S;
  R = R ^ r;
  c[og >> 2] = R;
  Q = Q ^ s;
  c[tg >> 2] = Q;
  P = P ^ t;
  c[ug >> 2] = P;
  O = O ^ u;
  c[vg >> 2] = O;
  N = N ^ v;
  c[wg >> 2] = N;
  M = M ^ w;
  c[xg >> 2] = M;
  L = L ^ x;
  c[yg >> 2] = L;
  K = K ^ y;
  c[zg >> 2] = K;
  J = J ^ z;
  c[Ag >> 2] = J;
  H = (c[Rf >> 2] ^ B) & g;
  G = (c[Qf >> 2] ^ C) & g;
  F = (c[Pf >> 2] ^ D) & g;
  t = (c[Of >> 2] ^ E) & g;
  u = (c[Nf >> 2] ^ Y) & g;
  v = (c[Mf >> 2] ^ Z) & g;
  w = (c[Lf >> 2] ^ _) & g;
  x = (c[Kf >> 2] ^ $) & g;
  z = (c[Jf >> 2] ^ aa) & g;
  I = (c[If >> 2] ^ A) & g ^ A;
  c[pg >> 2] = I;
  H = H ^ B;
  c[qg >> 2] = H;
  G = G ^ C;
  c[Lg >> 2] = G;
  F = F ^ D;
  c[Mg >> 2] = F;
  E = t ^ E;
  c[Ng >> 2] = E;
  D = u ^ Y;
  c[Og >> 2] = D;
  C = v ^ Z;
  c[Pg >> 2] = C;
  B = w ^ _;
  c[Qg >> 2] = B;
  A = x ^ $;
  c[Rg >> 2] = A;
  z = z ^ aa;
  c[Sg >> 2] = z;
  x = (c[$f >> 2] ^ ca) & g;
  w = (c[_f >> 2] ^ da) & g;
  v = (c[Zf >> 2] ^ ea) & g;
  u = (c[Yf >> 2] ^ fa) & g;
  t = (c[Xf >> 2] ^ ga) & g;
  s = (c[Wf >> 2] ^ ia) & g;
  r = (c[Vf >> 2] ^ ja) & g;
  q = (c[Uf >> 2] ^ ka) & g;
  p = (c[Tf >> 2] ^ la) & g;
  y = (c[Sf >> 2] ^ ba) & g ^ ba;
  c[rg >> 2] = y;
  x = x ^ ca;
  c[sg >> 2] = x;
  w = w ^ da;
  c[bh >> 2] = w;
  v = v ^ ea;
  c[ch >> 2] = v;
  u = u ^ fa;
  c[dh >> 2] = u;
  t = t ^ ga;
  c[pa >> 2] = t;
  s = s ^ ia;
  c[qa >> 2] = s;
  r = r ^ ja;
  c[ra >> 2] = r;
  q = q ^ ka;
  c[sa >> 2] = q;
  p = p ^ la;
  c[ta >> 2] = p;
  n = (c[jg >> 2] ^ e) & g;
  m = (c[ig >> 2] ^ f) & g;
  l = (c[hg >> 2] ^ i) & g;
  ia = (c[gg >> 2] ^ j) & g;
  ja = (c[fg >> 2] ^ T) & g;
  ka = (c[eg >> 2] ^ U) & g;
  la = (c[dg >> 2] ^ V) & g;
  ma = (c[cg >> 2] ^ W) & g;
  na = (c[bg >> 2] ^ X) & g;
  o = (c[ag >> 2] ^ h) & g ^ h;
  c[Da >> 2] = o;
  n = n ^ e;
  c[Fa >> 2] = n;
  m = m ^ f;
  c[Ga >> 2] = m;
  l = l ^ i;
  c[Ha >> 2] = l;
  j = ia ^ j;
  c[Ia >> 2] = j;
  i = ja ^ T;
  c[Ja >> 2] = i;
  f = ka ^ U;
  c[Ka >> 2] = f;
  e = la ^ V;
  c[La >> 2] = e;
  h = ma ^ W;
  c[Ma >> 2] = h;
  g = na ^ X;
  c[Na >> 2] = g;
  if ((kg + -1 & ~kg | (kg | -2) & lg | 0) != -1) {
   g = 21;
   break;
  }
  ea = (I ^ S) & lg;
  fa = (H ^ R) & lg;
  ga = (G ^ Q) & lg;
  ia = (F ^ P) & lg;
  ja = (E ^ O) & lg;
  ka = (D ^ N) & lg;
  la = (C ^ M) & lg;
  ma = (B ^ L) & lg;
  na = (A ^ K) & lg;
  kg = (z ^ J) & lg;
  c[oh >> 2] = ea ^ S;
  c[og >> 2] = fa ^ R;
  c[tg >> 2] = ga ^ Q;
  c[ug >> 2] = ia ^ P;
  c[vg >> 2] = ja ^ O;
  c[wg >> 2] = ka ^ N;
  c[xg >> 2] = la ^ M;
  c[yg >> 2] = ma ^ L;
  c[zg >> 2] = na ^ K;
  c[Ag >> 2] = kg ^ J;
  c[pg >> 2] = ea ^ I;
  c[qg >> 2] = fa ^ H;
  c[Lg >> 2] = ga ^ G;
  c[Mg >> 2] = ia ^ F;
  c[Ng >> 2] = ja ^ E;
  c[Og >> 2] = ka ^ D;
  c[Pg >> 2] = la ^ C;
  c[Qg >> 2] = ma ^ B;
  c[Rg >> 2] = na ^ A;
  c[Sg >> 2] = kg ^ z;
  c[rg >> 2] = y;
  c[sg >> 2] = x;
  c[bh >> 2] = w;
  c[ch >> 2] = v;
  c[dh >> 2] = u;
  c[pa >> 2] = t;
  c[qa >> 2] = s;
  c[ra >> 2] = r;
  c[sa >> 2] = q;
  c[ta >> 2] = p;
  c[Da >> 2] = (o ^ 0 - o) & lg ^ o;
  c[Fa >> 2] = (n ^ 0 - n) & lg ^ n;
  c[Ga >> 2] = (m ^ 0 - m) & lg ^ m;
  c[Ha >> 2] = (l ^ 0 - l) & lg ^ l;
  c[Ia >> 2] = (j ^ 0 - j) & lg ^ j;
  c[Ja >> 2] = (i ^ 0 - i) & lg ^ i;
  c[Ka >> 2] = (f ^ 0 - f) & lg ^ f;
  c[La >> 2] = (e ^ 0 - e) & lg ^ e;
  c[Ma >> 2] = (h ^ 0 - h) & lg ^ h;
  c[Na >> 2] = (g ^ 0 - g) & lg ^ g;
  dc(mh, nh, oh);
  ec(b, mh, eh);
  ec(mg, gh, hh);
  ec(ng, hh, eh);
  if (!oa) {
   g = 23;
   break;
  } else oa = oa + -1 | 0;
 }
 switch (g | 0) {
 case 5:
  {
   ha(36472, 36533, 177, 36553);
   break;
  }
 case 7:
  {
   ha(36472, 36533, 177, 36553);
   break;
  }
 case 9:
  {
   ha(36472, 36533, 177, 36553);
   break;
  }
 case 11:
  {
   ha(36472, 36533, 177, 36553);
   break;
  }
 case 13:
  {
   ha(36472, 36533, 177, 36553);
   break;
  }
 case 15:
  {
   ha(36472, 36533, 177, 36553);
   break;
  }
 case 17:
  {
   ha(36472, 36533, 177, 36553);
   break;
  }
 case 19:
  {
   ha(36472, 36533, 177, 36553);
   break;
  }
 case 21:
  {
   ha(36472, 36533, 177, 36553);
   break;
  }
 case 23:
  {
   k = ph;
   return;
  }
 }
}

function zc(b) {
 b = b | 0;
 var c = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0, ia = 0, ja = 0, ka = 0, la = 0, ma = 0, na = 0, oa = 0, pa = 0, qa = 0, ra = 0, sa = 0, ta = 0, ua = 0, va = 0, wa = 0, xa = 0, ya = 0, za = 0, Aa = 0, Ba = 0, Ca = 0, Da = 0, Ea = 0, Fa = 0, Ga = 0, Ha = 0, Ia = 0, Ja = 0, Ka = 0, La = 0, Ma = 0, Na = 0, Oa = 0, Pa = 0, Qa = 0, Ra = 0, Sa = 0, Ta = 0, Ua = 0, Va = 0, Wa = 0, Xa = 0, Ya = 0, Za = 0, _a = 0, $a = 0, ab = 0, bb = 0, cb = 0, db = 0, eb = 0, fb = 0, gb = 0;
 ma = b + 1 | 0;
 ja = b + 2 | 0;
 P = a[ja >> 0] | 0;
 wa = d[b >> 0] | 0;
 F = gg(d[ma >> 0] | 0 | 0, 0, 8) | 0;
 ta = U() | 0;
 P = P & 255;
 ua = gg(P | 0, 0, 16) | 0;
 U() | 0;
 ia = b + 3 | 0;
 v = gg(d[ia >> 0] | 0 | 0, 0, 8) | 0;
 ba = U() | 0;
 ea = b + 4 | 0;
 _ = gg(d[ea >> 0] | 0 | 0, 0, 16) | 0;
 ba = ba | (U() | 0);
 da = b + 5 | 0;
 O = d[da >> 0] | 0;
 $ = gg(O | 0, 0, 24) | 0;
 ba = fg(v | P | _ | $ | 0, ba | (U() | 0) | 0, 5) | 0;
 U() | 0;
 $ = b + 6 | 0;
 _ = b + 7 | 0;
 P = a[_ >> 0] | 0;
 v = gg(d[$ >> 0] | 0 | 0, 0, 8) | 0;
 Ca = U() | 0;
 P = P & 255;
 Z = gg(P | 0, 0, 16) | 0;
 Ca = fg(v | O | Z | 0, Ca | (U() | 0) | 0, 2) | 0;
 U() | 0;
 Z = b + 8 | 0;
 O = gg(d[Z >> 0] | 0 | 0, 0, 8) | 0;
 v = U() | 0;
 V = b + 9 | 0;
 Ba = gg(d[V >> 0] | 0 | 0, 0, 16) | 0;
 v = v | (U() | 0);
 T = b + 10 | 0;
 Ua = d[T >> 0] | 0;
 S = gg(Ua | 0, 0, 24) | 0;
 v = fg(O | P | Ba | S | 0, v | (U() | 0) | 0, 7) | 0;
 U() | 0;
 S = b + 11 | 0;
 Ba = gg(d[S >> 0] | 0 | 0, 0, 8) | 0;
 P = U() | 0;
 O = b + 12 | 0;
 I = gg(d[O >> 0] | 0 | 0, 0, 16) | 0;
 P = P | (U() | 0);
 N = b + 13 | 0;
 w = d[N >> 0] | 0;
 J = gg(w | 0, 0, 24) | 0;
 P = fg(Ba | Ua | I | J | 0, P | (U() | 0) | 0, 4) | 0;
 U() | 0;
 J = b + 14 | 0;
 I = b + 15 | 0;
 Ua = a[I >> 0] | 0;
 Ba = gg(d[J >> 0] | 0 | 0, 0, 8) | 0;
 ra = U() | 0;
 Ua = Ua & 255;
 H = gg(Ua | 0, 0, 16) | 0;
 ra = fg(Ba | w | H | 0, ra | (U() | 0) | 0, 1) | 0;
 U() | 0;
 H = b + 16 | 0;
 w = gg(d[H >> 0] | 0 | 0, 0, 8) | 0;
 Ba = U() | 0;
 D = b + 17 | 0;
 y = gg(d[D >> 0] | 0 | 0, 0, 16) | 0;
 Ba = Ba | (U() | 0);
 C = b + 18 | 0;
 x = d[C >> 0] | 0;
 B = gg(x | 0, 0, 24) | 0;
 Ba = fg(w | Ua | y | B | 0, Ba | (U() | 0) | 0, 6) | 0;
 U() | 0;
 B = b + 19 | 0;
 y = b + 20 | 0;
 Ua = a[y >> 0] | 0;
 w = gg(d[B >> 0] | 0 | 0, 0, 8) | 0;
 Va = U() | 0;
 Ua = gg(Ua & 255 | 0, 0, 16) | 0;
 Va = fg(w | x | Ua | 0, Va | (U() | 0) | 0, 3) | 0;
 Ua = U() | 0;
 x = b + 21 | 0;
 w = b + 22 | 0;
 t = b + 23 | 0;
 e = a[t >> 0] | 0;
 ab = d[x >> 0] | 0;
 bb = gg(d[w >> 0] | 0 | 0, 0, 8) | 0;
 _a = U() | 0;
 e = e & 255;
 $a = gg(e | 0, 0, 16) | 0;
 U() | 0;
 s = b + 24 | 0;
 Ma = gg(d[s >> 0] | 0 | 0, 0, 8) | 0;
 Ra = U() | 0;
 o = b + 25 | 0;
 i = gg(d[o >> 0] | 0 | 0, 0, 16) | 0;
 Ra = Ra | (U() | 0);
 n = b + 26 | 0;
 oa = d[n >> 0] | 0;
 j = gg(oa | 0, 0, 24) | 0;
 Ra = fg(Ma | e | i | j | 0, Ra | (U() | 0) | 0, 5) | 0;
 U() | 0;
 j = b + 27 | 0;
 i = b + 28 | 0;
 e = a[i >> 0] | 0;
 Ma = gg(d[j >> 0] | 0 | 0, 0, 8) | 0;
 Za = U() | 0;
 e = e & 255;
 h = gg(e | 0, 0, 16) | 0;
 Za = fg(Ma | oa | h | 0, Za | (U() | 0) | 0, 2) | 0;
 U() | 0;
 h = b + 29 | 0;
 oa = gg(d[h >> 0] | 0 | 0, 0, 8) | 0;
 Ma = U() | 0;
 g = b + 30 | 0;
 fb = gg(d[g >> 0] | 0 | 0, 0, 16) | 0;
 Ma = Ma | (U() | 0);
 c = b + 31 | 0;
 ca = d[c >> 0] | 0;
 k = gg(ca | 0, 0, 24) | 0;
 Ma = fg(oa | e | fb | k | 0, Ma | (U() | 0) | 0, 7) | 0;
 U() | 0;
 k = gg(d[b + 32 >> 0] | 0 | 0, 0, 8) | 0;
 fb = U() | 0;
 e = gg(d[b + 33 >> 0] | 0 | 0, 0, 16) | 0;
 fb = fb | (U() | 0);
 oa = d[b + 34 >> 0] | 0;
 q = gg(oa | 0, 0, 24) | 0;
 fb = fg(k | ca | e | q | 0, fb | (U() | 0) | 0, 4) | 0;
 U() | 0;
 q = a[b + 36 >> 0] | 0;
 e = gg(d[b + 35 >> 0] | 0 | 0, 0, 8) | 0;
 ca = U() | 0;
 q = q & 255;
 k = gg(q | 0, 0, 16) | 0;
 ca = fg(e | oa | k | 0, ca | (U() | 0) | 0, 1) | 0;
 U() | 0;
 k = gg(d[b + 37 >> 0] | 0 | 0, 0, 8) | 0;
 oa = U() | 0;
 e = gg(d[b + 38 >> 0] | 0 | 0, 0, 16) | 0;
 oa = oa | (U() | 0);
 Oa = d[b + 39 >> 0] | 0;
 aa = gg(Oa | 0, 0, 24) | 0;
 oa = fg(k | q | e | aa | 0, oa | (U() | 0) | 0, 6) | 0;
 U() | 0;
 aa = a[b + 41 >> 0] | 0;
 e = gg(d[b + 40 >> 0] | 0 | 0, 0, 8) | 0;
 q = U() | 0;
 aa = gg(aa & 255 | 0, 0, 16) | 0;
 q = fg(e | Oa | aa | 0, q | (U() | 0) | 0, 3) | 0;
 aa = U() | 0;
 Oa = a[b + 44 >> 0] | 0;
 e = d[b + 42 >> 0] | 0;
 k = gg(d[b + 43 >> 0] | 0 | 0, 0, 8) | 0;
 K = U() | 0;
 Oa = Oa & 255;
 r = gg(Oa | 0, 0, 16) | 0;
 U() | 0;
 z = gg(d[b + 45 >> 0] | 0 | 0, 0, 8) | 0;
 fa = U() | 0;
 Fa = gg(d[b + 46 >> 0] | 0 | 0, 0, 16) | 0;
 fa = fa | (U() | 0);
 gb = d[b + 47 >> 0] | 0;
 L = gg(gb | 0, 0, 24) | 0;
 fa = fg(z | Oa | Fa | L | 0, fa | (U() | 0) | 0, 5) | 0;
 U() | 0;
 L = a[b + 49 >> 0] | 0;
 Fa = gg(d[b + 48 >> 0] | 0 | 0, 0, 8) | 0;
 Oa = U() | 0;
 L = L & 255;
 z = gg(L | 0, 0, 16) | 0;
 Oa = fg(Fa | gb | z | 0, Oa | (U() | 0) | 0, 2) | 0;
 U() | 0;
 Oa = Oa & 2097151;
 z = gg(d[b + 50 >> 0] | 0 | 0, 0, 8) | 0;
 gb = U() | 0;
 Fa = gg(d[b + 51 >> 0] | 0 | 0, 0, 16) | 0;
 gb = gb | (U() | 0);
 ka = d[b + 52 >> 0] | 0;
 M = gg(ka | 0, 0, 24) | 0;
 gb = fg(z | L | Fa | M | 0, gb | (U() | 0) | 0, 7) | 0;
 U() | 0;
 gb = gb & 2097151;
 M = gg(d[b + 53 >> 0] | 0 | 0, 0, 8) | 0;
 Fa = U() | 0;
 L = gg(d[b + 54 >> 0] | 0 | 0, 0, 16) | 0;
 Fa = Fa | (U() | 0);
 z = d[b + 55 >> 0] | 0;
 W = gg(z | 0, 0, 24) | 0;
 Fa = fg(M | ka | L | W | 0, Fa | (U() | 0) | 0, 4) | 0;
 U() | 0;
 Fa = Fa & 2097151;
 W = a[b + 57 >> 0] | 0;
 L = gg(d[b + 56 >> 0] | 0 | 0, 0, 8) | 0;
 ka = U() | 0;
 W = W & 255;
 M = gg(W | 0, 0, 16) | 0;
 ka = fg(L | z | M | 0, ka | (U() | 0) | 0, 1) | 0;
 U() | 0;
 ka = ka & 2097151;
 M = gg(d[b + 58 >> 0] | 0 | 0, 0, 8) | 0;
 z = U() | 0;
 L = gg(d[b + 59 >> 0] | 0 | 0, 0, 16) | 0;
 z = z | (U() | 0);
 na = d[b + 60 >> 0] | 0;
 qa = gg(na | 0, 0, 24) | 0;
 z = fg(M | W | L | qa | 0, z | (U() | 0) | 0, 6) | 0;
 U() | 0;
 z = z & 2097151;
 qa = gg(d[b + 61 >> 0] | 0 | 0, 0, 8) | 0;
 L = U() | 0;
 W = gg(d[b + 62 >> 0] | 0 | 0, 0, 16) | 0;
 L = L | (U() | 0);
 M = gg(d[b + 63 >> 0] | 0 | 0, 0, 24) | 0;
 L = fg(qa | na | W | M | 0, L | (U() | 0) | 0, 3) | 0;
 M = U() | 0;
 W = _f(L | 0, M | 0, 666643, 0) | 0;
 na = U() | 0;
 qa = _f(L | 0, M | 0, 470296, 0) | 0;
 ha = U() | 0;
 u = _f(L | 0, M | 0, 654183, 0) | 0;
 E = U() | 0;
 va = _f(L | 0, M | 0, -997805, -1) | 0;
 Aa = U() | 0;
 m = _f(L | 0, M | 0, 136657, 0) | 0;
 za = U() | 0;
 M = _f(L | 0, M | 0, -683901, -1) | 0;
 K = $f(M | 0, U() | 0, k | e | r & 2031616 | 0, K | 0) | 0;
 r = U() | 0;
 e = _f(z | 0, 0, 666643, 0) | 0;
 k = U() | 0;
 M = _f(z | 0, 0, 470296, 0) | 0;
 L = U() | 0;
 Xa = _f(z | 0, 0, 654183, 0) | 0;
 G = U() | 0;
 X = _f(z | 0, 0, -997805, -1) | 0;
 Q = U() | 0;
 ya = _f(z | 0, 0, 136657, 0) | 0;
 pa = U() | 0;
 z = _f(z | 0, 0, -683901, -1) | 0;
 R = U() | 0;
 Da = _f(ka | 0, 0, 666643, 0) | 0;
 xa = U() | 0;
 ga = _f(ka | 0, 0, 470296, 0) | 0;
 Na = U() | 0;
 Ha = _f(ka | 0, 0, 654183, 0) | 0;
 Ga = U() | 0;
 cb = _f(ka | 0, 0, -997805, -1) | 0;
 Wa = U() | 0;
 l = _f(ka | 0, 0, 136657, 0) | 0;
 p = U() | 0;
 ka = _f(ka | 0, 0, -683901, -1) | 0;
 oa = $f(ka | 0, U() | 0, oa & 2097151 | 0, 0) | 0;
 pa = $f(oa | 0, U() | 0, ya | 0, pa | 0) | 0;
 Aa = $f(pa | 0, U() | 0, va | 0, Aa | 0) | 0;
 va = U() | 0;
 pa = _f(Fa | 0, 0, 666643, 0) | 0;
 ya = U() | 0;
 oa = _f(Fa | 0, 0, 470296, 0) | 0;
 ka = U() | 0;
 sa = _f(Fa | 0, 0, 654183, 0) | 0;
 Y = U() | 0;
 Ja = _f(Fa | 0, 0, -997805, -1) | 0;
 Ia = U() | 0;
 eb = _f(Fa | 0, 0, 136657, 0) | 0;
 db = U() | 0;
 Fa = _f(Fa | 0, 0, -683901, -1) | 0;
 Ea = U() | 0;
 f = _f(gb | 0, 0, 666643, 0) | 0;
 A = U() | 0;
 Sa = _f(gb | 0, 0, 470296, 0) | 0;
 Ta = U() | 0;
 Qa = _f(gb | 0, 0, 654183, 0) | 0;
 Pa = U() | 0;
 Ya = _f(gb | 0, 0, -997805, -1) | 0;
 la = U() | 0;
 La = _f(gb | 0, 0, 136657, 0) | 0;
 Ka = U() | 0;
 gb = _f(gb | 0, 0, -683901, -1) | 0;
 fb = $f(gb | 0, U() | 0, fb & 2097151 | 0, 0) | 0;
 db = $f(fb | 0, U() | 0, eb | 0, db | 0) | 0;
 Wa = $f(db | 0, U() | 0, cb | 0, Wa | 0) | 0;
 G = $f(Wa | 0, U() | 0, Xa | 0, G | 0) | 0;
 ha = $f(G | 0, U() | 0, qa | 0, ha | 0) | 0;
 qa = U() | 0;
 G = _f(Oa | 0, 0, 666643, 0) | 0;
 Ba = $f(G | 0, U() | 0, Ba & 2097151 | 0, 0) | 0;
 G = U() | 0;
 Xa = _f(Oa | 0, 0, 470296, 0) | 0;
 Wa = U() | 0;
 cb = _f(Oa | 0, 0, 654183, 0) | 0;
 _a = $f(cb | 0, U() | 0, bb | ab | $a & 2031616 | 0, _a | 0) | 0;
 Ta = $f(_a | 0, U() | 0, Sa | 0, Ta | 0) | 0;
 ya = $f(Ta | 0, U() | 0, pa | 0, ya | 0) | 0;
 pa = U() | 0;
 Ta = _f(Oa | 0, 0, -997805, -1) | 0;
 Sa = U() | 0;
 _a = _f(Oa | 0, 0, 136657, 0) | 0;
 Za = $f(_a | 0, U() | 0, Za & 2097151 | 0, 0) | 0;
 la = $f(Za | 0, U() | 0, Ya | 0, la | 0) | 0;
 Y = $f(la | 0, U() | 0, sa | 0, Y | 0) | 0;
 Na = $f(Y | 0, U() | 0, ga | 0, Na | 0) | 0;
 k = $f(Na | 0, U() | 0, e | 0, k | 0) | 0;
 e = U() | 0;
 Oa = _f(Oa | 0, 0, -683901, -1) | 0;
 Na = U() | 0;
 ga = $f(Ba | 0, G | 0, 1048576, 0) | 0;
 Y = U() | 0;
 sa = fg(ga | 0, Y | 0, 21) | 0;
 la = U() | 0;
 Ua = $f(Xa | 0, Wa | 0, Va | 0, Ua | 0) | 0;
 la = $f(Ua | 0, U() | 0, sa | 0, la | 0) | 0;
 A = $f(la | 0, U() | 0, f | 0, A | 0) | 0;
 f = U() | 0;
 Y = ag(Ba | 0, G | 0, ga & -2097152 | 0, Y & 2047 | 0) | 0;
 ga = U() | 0;
 G = $f(ya | 0, pa | 0, 1048576, 0) | 0;
 Ba = U() | 0;
 la = fg(G | 0, Ba | 0, 21) | 0;
 sa = U() | 0;
 Ra = $f(Ta | 0, Sa | 0, Ra & 2097151 | 0, 0) | 0;
 Pa = $f(Ra | 0, U() | 0, Qa | 0, Pa | 0) | 0;
 ka = $f(Pa | 0, U() | 0, oa | 0, ka | 0) | 0;
 xa = $f(ka | 0, U() | 0, Da | 0, xa | 0) | 0;
 sa = $f(xa | 0, U() | 0, la | 0, sa | 0) | 0;
 la = U() | 0;
 xa = $f(k | 0, e | 0, 1048576, 0) | 0;
 Da = U() | 0;
 ka = eg(xa | 0, Da | 0, 21) | 0;
 oa = U() | 0;
 Ma = $f(Oa | 0, Na | 0, Ma & 2097151 | 0, 0) | 0;
 Ka = $f(Ma | 0, U() | 0, La | 0, Ka | 0) | 0;
 Ia = $f(Ka | 0, U() | 0, Ja | 0, Ia | 0) | 0;
 Ga = $f(Ia | 0, U() | 0, Ha | 0, Ga | 0) | 0;
 L = $f(Ga | 0, U() | 0, M | 0, L | 0) | 0;
 na = $f(L | 0, U() | 0, W | 0, na | 0) | 0;
 oa = $f(na | 0, U() | 0, ka | 0, oa | 0) | 0;
 ka = U() | 0;
 na = $f(ha | 0, qa | 0, 1048576, 0) | 0;
 W = U() | 0;
 L = eg(na | 0, W | 0, 21) | 0;
 M = U() | 0;
 ca = $f(Fa | 0, Ea | 0, ca & 2097151 | 0, 0) | 0;
 p = $f(ca | 0, U() | 0, l | 0, p | 0) | 0;
 Q = $f(p | 0, U() | 0, X | 0, Q | 0) | 0;
 E = $f(Q | 0, U() | 0, u | 0, E | 0) | 0;
 M = $f(E | 0, U() | 0, L | 0, M | 0) | 0;
 L = U() | 0;
 W = ag(ha | 0, qa | 0, na & -2097152 | 0, W | 0) | 0;
 na = U() | 0;
 qa = $f(Aa | 0, va | 0, 1048576, 0) | 0;
 ha = U() | 0;
 E = eg(qa | 0, ha | 0, 21) | 0;
 u = U() | 0;
 aa = $f(z | 0, R | 0, q | 0, aa | 0) | 0;
 za = $f(aa | 0, U() | 0, m | 0, za | 0) | 0;
 u = $f(za | 0, U() | 0, E | 0, u | 0) | 0;
 E = U() | 0;
 ha = ag(Aa | 0, va | 0, qa & -2097152 | 0, ha | 0) | 0;
 qa = U() | 0;
 va = $f(K | 0, r | 0, 1048576, 0) | 0;
 Aa = U() | 0;
 za = eg(va | 0, Aa | 0, 21) | 0;
 fa = $f(za | 0, U() | 0, fa & 2097151 | 0, 0) | 0;
 za = U() | 0;
 Aa = ag(K | 0, r | 0, va & -2097152 | 0, Aa | 0) | 0;
 va = U() | 0;
 r = $f(A | 0, f | 0, 1048576, 0) | 0;
 K = U() | 0;
 m = fg(r | 0, K | 0, 21) | 0;
 aa = U() | 0;
 K = ag(A | 0, f | 0, r & -2097152 | 0, K | 0) | 0;
 r = U() | 0;
 f = $f(sa | 0, la | 0, 1048576, 0) | 0;
 A = U() | 0;
 q = eg(f | 0, A | 0, 21) | 0;
 R = U() | 0;
 A = ag(sa | 0, la | 0, f & -2097152 | 0, A | 0) | 0;
 f = U() | 0;
 la = $f(oa | 0, ka | 0, 1048576, 0) | 0;
 sa = U() | 0;
 z = eg(la | 0, sa | 0, 21) | 0;
 na = $f(z | 0, U() | 0, W | 0, na | 0) | 0;
 W = U() | 0;
 sa = ag(oa | 0, ka | 0, la & -2097152 | 0, sa | 0) | 0;
 la = U() | 0;
 ka = $f(M | 0, L | 0, 1048576, 0) | 0;
 oa = U() | 0;
 z = eg(ka | 0, oa | 0, 21) | 0;
 qa = $f(z | 0, U() | 0, ha | 0, qa | 0) | 0;
 ha = U() | 0;
 oa = ag(M | 0, L | 0, ka & -2097152 | 0, oa | 0) | 0;
 ka = U() | 0;
 L = $f(u | 0, E | 0, 1048576, 0) | 0;
 M = U() | 0;
 z = eg(L | 0, M | 0, 21) | 0;
 va = $f(z | 0, U() | 0, Aa | 0, va | 0) | 0;
 Aa = U() | 0;
 M = ag(u | 0, E | 0, L & -2097152 | 0, M | 0) | 0;
 L = U() | 0;
 E = _f(fa | 0, za | 0, 666643, 0) | 0;
 ra = $f(E | 0, U() | 0, ra & 2097151 | 0, 0) | 0;
 E = U() | 0;
 u = _f(fa | 0, za | 0, 470296, 0) | 0;
 u = $f(Y | 0, ga | 0, u | 0, U() | 0) | 0;
 ga = U() | 0;
 Y = _f(fa | 0, za | 0, 654183, 0) | 0;
 Y = $f(K | 0, r | 0, Y | 0, U() | 0) | 0;
 r = U() | 0;
 K = _f(fa | 0, za | 0, -997805, -1) | 0;
 z = U() | 0;
 Q = _f(fa | 0, za | 0, 136657, 0) | 0;
 Q = $f(A | 0, f | 0, Q | 0, U() | 0) | 0;
 f = U() | 0;
 za = _f(fa | 0, za | 0, -683901, -1) | 0;
 fa = U() | 0;
 R = $f(k | 0, e | 0, q | 0, R | 0) | 0;
 Da = ag(R | 0, U() | 0, xa & -2097152 | 0, Da | 0) | 0;
 fa = $f(Da | 0, U() | 0, za | 0, fa | 0) | 0;
 za = U() | 0;
 Da = _f(va | 0, Aa | 0, 666643, 0) | 0;
 P = $f(Da | 0, U() | 0, P & 2097151 | 0, 0) | 0;
 Da = U() | 0;
 xa = _f(va | 0, Aa | 0, 470296, 0) | 0;
 xa = $f(ra | 0, E | 0, xa | 0, U() | 0) | 0;
 E = U() | 0;
 ra = _f(va | 0, Aa | 0, 654183, 0) | 0;
 ra = $f(u | 0, ga | 0, ra | 0, U() | 0) | 0;
 ga = U() | 0;
 u = _f(va | 0, Aa | 0, -997805, -1) | 0;
 u = $f(Y | 0, r | 0, u | 0, U() | 0) | 0;
 r = U() | 0;
 Y = _f(va | 0, Aa | 0, 136657, 0) | 0;
 R = U() | 0;
 Aa = _f(va | 0, Aa | 0, -683901, -1) | 0;
 Aa = $f(Q | 0, f | 0, Aa | 0, U() | 0) | 0;
 f = U() | 0;
 Q = _f(M | 0, L | 0, 666643, 0) | 0;
 v = $f(Q | 0, U() | 0, v & 2097151 | 0, 0) | 0;
 Q = U() | 0;
 va = _f(M | 0, L | 0, 470296, 0) | 0;
 va = $f(P | 0, Da | 0, va | 0, U() | 0) | 0;
 Da = U() | 0;
 P = _f(M | 0, L | 0, 654183, 0) | 0;
 P = $f(xa | 0, E | 0, P | 0, U() | 0) | 0;
 E = U() | 0;
 xa = _f(M | 0, L | 0, -997805, -1) | 0;
 xa = $f(ra | 0, ga | 0, xa | 0, U() | 0) | 0;
 ga = U() | 0;
 ra = _f(M | 0, L | 0, 136657, 0) | 0;
 ra = $f(u | 0, r | 0, ra | 0, U() | 0) | 0;
 r = U() | 0;
 L = _f(M | 0, L | 0, -683901, -1) | 0;
 M = U() | 0;
 aa = $f(ya | 0, pa | 0, m | 0, aa | 0) | 0;
 Ba = ag(aa | 0, U() | 0, G & -2097152 | 0, Ba | 0) | 0;
 z = $f(Ba | 0, U() | 0, K | 0, z | 0) | 0;
 R = $f(z | 0, U() | 0, Y | 0, R | 0) | 0;
 M = $f(R | 0, U() | 0, L | 0, M | 0) | 0;
 L = U() | 0;
 R = _f(qa | 0, ha | 0, 666643, 0) | 0;
 Y = U() | 0;
 z = _f(qa | 0, ha | 0, 470296, 0) | 0;
 K = U() | 0;
 Ba = _f(qa | 0, ha | 0, 654183, 0) | 0;
 G = U() | 0;
 aa = _f(qa | 0, ha | 0, -997805, -1) | 0;
 m = U() | 0;
 pa = _f(qa | 0, ha | 0, 136657, 0) | 0;
 pa = $f(xa | 0, ga | 0, pa | 0, U() | 0) | 0;
 ga = U() | 0;
 ha = _f(qa | 0, ha | 0, -683901, -1) | 0;
 ha = $f(ra | 0, r | 0, ha | 0, U() | 0) | 0;
 r = U() | 0;
 ra = _f(oa | 0, ka | 0, 666643, 0) | 0;
 qa = U() | 0;
 xa = _f(oa | 0, ka | 0, 470296, 0) | 0;
 ya = U() | 0;
 u = _f(oa | 0, ka | 0, 654183, 0) | 0;
 q = U() | 0;
 e = _f(oa | 0, ka | 0, -997805, -1) | 0;
 k = U() | 0;
 A = _f(oa | 0, ka | 0, 136657, 0) | 0;
 X = U() | 0;
 ka = _f(oa | 0, ka | 0, -683901, -1) | 0;
 ka = $f(pa | 0, ga | 0, ka | 0, U() | 0) | 0;
 ga = U() | 0;
 pa = _f(na | 0, W | 0, 666643, 0) | 0;
 ta = $f(pa | 0, U() | 0, F | wa | ua & 2031616 | 0, ta | 0) | 0;
 ua = U() | 0;
 wa = _f(na | 0, W | 0, 470296, 0) | 0;
 F = U() | 0;
 pa = _f(na | 0, W | 0, 654183, 0) | 0;
 Ca = $f(pa | 0, U() | 0, Ca & 2097151 | 0, 0) | 0;
 Y = $f(Ca | 0, U() | 0, R | 0, Y | 0) | 0;
 ya = $f(Y | 0, U() | 0, xa | 0, ya | 0) | 0;
 xa = U() | 0;
 Y = _f(na | 0, W | 0, -997805, -1) | 0;
 R = U() | 0;
 Ca = _f(na | 0, W | 0, 136657, 0) | 0;
 Ca = $f(va | 0, Da | 0, Ca | 0, U() | 0) | 0;
 G = $f(Ca | 0, U() | 0, Ba | 0, G | 0) | 0;
 k = $f(G | 0, U() | 0, e | 0, k | 0) | 0;
 e = U() | 0;
 W = _f(na | 0, W | 0, -683901, -1) | 0;
 na = U() | 0;
 G = $f(ta | 0, ua | 0, 1048576, 0) | 0;
 Ba = U() | 0;
 Ca = eg(G | 0, Ba | 0, 21) | 0;
 Da = U() | 0;
 ba = $f(wa | 0, F | 0, ba & 2097151 | 0, 0) | 0;
 qa = $f(ba | 0, U() | 0, ra | 0, qa | 0) | 0;
 Da = $f(qa | 0, U() | 0, Ca | 0, Da | 0) | 0;
 Ca = U() | 0;
 Ba = ag(ta | 0, ua | 0, G & -2097152 | 0, Ba | 0) | 0;
 G = U() | 0;
 ua = $f(ya | 0, xa | 0, 1048576, 0) | 0;
 ta = U() | 0;
 qa = eg(ua | 0, ta | 0, 21) | 0;
 ra = U() | 0;
 R = $f(v | 0, Q | 0, Y | 0, R | 0) | 0;
 K = $f(R | 0, U() | 0, z | 0, K | 0) | 0;
 q = $f(K | 0, U() | 0, u | 0, q | 0) | 0;
 ra = $f(q | 0, U() | 0, qa | 0, ra | 0) | 0;
 qa = U() | 0;
 q = $f(k | 0, e | 0, 1048576, 0) | 0;
 u = U() | 0;
 K = eg(q | 0, u | 0, 21) | 0;
 z = U() | 0;
 na = $f(P | 0, E | 0, W | 0, na | 0) | 0;
 m = $f(na | 0, U() | 0, aa | 0, m | 0) | 0;
 X = $f(m | 0, U() | 0, A | 0, X | 0) | 0;
 z = $f(X | 0, U() | 0, K | 0, z | 0) | 0;
 K = U() | 0;
 X = $f(ka | 0, ga | 0, 1048576, 0) | 0;
 A = U() | 0;
 m = eg(X | 0, A | 0, 21) | 0;
 m = $f(ha | 0, r | 0, m | 0, U() | 0) | 0;
 r = U() | 0;
 A = ag(ka | 0, ga | 0, X & -2097152 | 0, A | 0) | 0;
 X = U() | 0;
 ga = $f(M | 0, L | 0, 1048576, 0) | 0;
 ka = U() | 0;
 ha = eg(ga | 0, ka | 0, 21) | 0;
 ha = $f(Aa | 0, f | 0, ha | 0, U() | 0) | 0;
 f = U() | 0;
 ka = ag(M | 0, L | 0, ga & -2097152 | 0, ka | 0) | 0;
 ga = U() | 0;
 L = $f(fa | 0, za | 0, 1048576, 0) | 0;
 M = U() | 0;
 Aa = eg(L | 0, M | 0, 21) | 0;
 Aa = $f(sa | 0, la | 0, Aa | 0, U() | 0) | 0;
 la = U() | 0;
 M = ag(fa | 0, za | 0, L & -2097152 | 0, M | 0) | 0;
 L = U() | 0;
 za = $f(Da | 0, Ca | 0, 1048576, 0) | 0;
 fa = U() | 0;
 sa = eg(za | 0, fa | 0, 21) | 0;
 aa = U() | 0;
 na = $f(ra | 0, qa | 0, 1048576, 0) | 0;
 W = U() | 0;
 E = eg(na | 0, W | 0, 21) | 0;
 P = U() | 0;
 R = $f(z | 0, K | 0, 1048576, 0) | 0;
 Y = U() | 0;
 Q = eg(R | 0, Y | 0, 21) | 0;
 Q = $f(A | 0, X | 0, Q | 0, U() | 0) | 0;
 X = U() | 0;
 A = $f(m | 0, r | 0, 1048576, 0) | 0;
 v = U() | 0;
 ba = eg(A | 0, v | 0, 21) | 0;
 ba = $f(ka | 0, ga | 0, ba | 0, U() | 0) | 0;
 ga = U() | 0;
 v = ag(m | 0, r | 0, A & -2097152 | 0, v | 0) | 0;
 A = U() | 0;
 r = $f(ha | 0, f | 0, 1048576, 0) | 0;
 m = U() | 0;
 ka = eg(r | 0, m | 0, 21) | 0;
 ka = $f(M | 0, L | 0, ka | 0, U() | 0) | 0;
 L = U() | 0;
 m = ag(ha | 0, f | 0, r & -2097152 | 0, m | 0) | 0;
 r = U() | 0;
 f = $f(Aa | 0, la | 0, 1048576, 0) | 0;
 ha = U() | 0;
 M = eg(f | 0, ha | 0, 21) | 0;
 F = U() | 0;
 ha = ag(Aa | 0, la | 0, f & -2097152 | 0, ha | 0) | 0;
 f = U() | 0;
 la = _f(M | 0, F | 0, 666643, 0) | 0;
 la = $f(Ba | 0, G | 0, la | 0, U() | 0) | 0;
 G = U() | 0;
 Ba = _f(M | 0, F | 0, 470296, 0) | 0;
 Aa = U() | 0;
 wa = _f(M | 0, F | 0, 654183, 0) | 0;
 va = U() | 0;
 pa = _f(M | 0, F | 0, -997805, -1) | 0;
 oa = U() | 0;
 p = _f(M | 0, F | 0, 136657, 0) | 0;
 l = U() | 0;
 F = _f(M | 0, F | 0, -683901, -1) | 0;
 M = U() | 0;
 G = eg(la | 0, G | 0, 21) | 0;
 ca = U() | 0;
 Aa = $f(Da | 0, Ca | 0, Ba | 0, Aa | 0) | 0;
 fa = ag(Aa | 0, U() | 0, za & -2097152 | 0, fa | 0) | 0;
 ca = $f(fa | 0, U() | 0, G | 0, ca | 0) | 0;
 G = eg(ca | 0, U() | 0, 21) | 0;
 fa = U() | 0;
 va = $f(ya | 0, xa | 0, wa | 0, va | 0) | 0;
 ta = ag(va | 0, U() | 0, ua & -2097152 | 0, ta | 0) | 0;
 aa = $f(ta | 0, U() | 0, sa | 0, aa | 0) | 0;
 fa = $f(aa | 0, U() | 0, G | 0, fa | 0) | 0;
 G = eg(fa | 0, U() | 0, 21) | 0;
 aa = U() | 0;
 oa = $f(ra | 0, qa | 0, pa | 0, oa | 0) | 0;
 W = ag(oa | 0, U() | 0, na & -2097152 | 0, W | 0) | 0;
 aa = $f(W | 0, U() | 0, G | 0, aa | 0) | 0;
 G = eg(aa | 0, U() | 0, 21) | 0;
 W = U() | 0;
 l = $f(k | 0, e | 0, p | 0, l | 0) | 0;
 u = ag(l | 0, U() | 0, q & -2097152 | 0, u | 0) | 0;
 P = $f(u | 0, U() | 0, E | 0, P | 0) | 0;
 W = $f(P | 0, U() | 0, G | 0, W | 0) | 0;
 G = eg(W | 0, U() | 0, 21) | 0;
 P = U() | 0;
 M = $f(z | 0, K | 0, F | 0, M | 0) | 0;
 Y = ag(M | 0, U() | 0, R & -2097152 | 0, Y | 0) | 0;
 P = $f(Y | 0, U() | 0, G | 0, P | 0) | 0;
 G = eg(P | 0, U() | 0, 21) | 0;
 G = $f(Q | 0, X | 0, G | 0, U() | 0) | 0;
 X = eg(G | 0, U() | 0, 21) | 0;
 A = $f(X | 0, U() | 0, v | 0, A | 0) | 0;
 v = eg(A | 0, U() | 0, 21) | 0;
 v = $f(ba | 0, ga | 0, v | 0, U() | 0) | 0;
 ga = eg(v | 0, U() | 0, 21) | 0;
 r = $f(ga | 0, U() | 0, m | 0, r | 0) | 0;
 m = eg(r | 0, U() | 0, 21) | 0;
 m = $f(ka | 0, L | 0, m | 0, U() | 0) | 0;
 L = eg(m | 0, U() | 0, 21) | 0;
 f = $f(L | 0, U() | 0, ha | 0, f | 0) | 0;
 ha = eg(f | 0, U() | 0, 21) | 0;
 L = U() | 0;
 ka = _f(ha | 0, L | 0, 666643, 0) | 0;
 la = $f(ka | 0, U() | 0, la & 2097151 | 0, 0) | 0;
 ka = U() | 0;
 ga = _f(ha | 0, L | 0, 470296, 0) | 0;
 ca = $f(ga | 0, U() | 0, ca & 2097151 | 0, 0) | 0;
 ga = U() | 0;
 ba = _f(ha | 0, L | 0, 654183, 0) | 0;
 fa = $f(ba | 0, U() | 0, fa & 2097151 | 0, 0) | 0;
 ba = U() | 0;
 X = _f(ha | 0, L | 0, -997805, -1) | 0;
 aa = $f(X | 0, U() | 0, aa & 2097151 | 0, 0) | 0;
 X = U() | 0;
 Q = _f(ha | 0, L | 0, 136657, 0) | 0;
 W = $f(Q | 0, U() | 0, W & 2097151 | 0, 0) | 0;
 Q = U() | 0;
 L = _f(ha | 0, L | 0, -683901, -1) | 0;
 P = $f(L | 0, U() | 0, P & 2097151 | 0, 0) | 0;
 L = U() | 0;
 ha = eg(la | 0, ka | 0, 21) | 0;
 ha = $f(ca | 0, ga | 0, ha | 0, U() | 0) | 0;
 ga = U() | 0;
 ca = eg(ha | 0, ga | 0, 21) | 0;
 ca = $f(fa | 0, ba | 0, ca | 0, U() | 0) | 0;
 ba = U() | 0;
 fa = ha & 2097151;
 Y = eg(ca | 0, ba | 0, 21) | 0;
 Y = $f(aa | 0, X | 0, Y | 0, U() | 0) | 0;
 X = U() | 0;
 aa = ca & 2097151;
 R = eg(Y | 0, X | 0, 21) | 0;
 R = $f(W | 0, Q | 0, R | 0, U() | 0) | 0;
 Q = U() | 0;
 W = Y & 2097151;
 M = eg(R | 0, Q | 0, 21) | 0;
 M = $f(P | 0, L | 0, M | 0, U() | 0) | 0;
 L = U() | 0;
 P = R & 2097151;
 F = eg(M | 0, L | 0, 21) | 0;
 G = $f(F | 0, U() | 0, G & 2097151 | 0, 0) | 0;
 F = U() | 0;
 K = M & 2097151;
 z = eg(G | 0, F | 0, 21) | 0;
 A = $f(z | 0, U() | 0, A & 2097151 | 0, 0) | 0;
 z = U() | 0;
 E = G & 2097151;
 u = eg(A | 0, z | 0, 21) | 0;
 v = $f(u | 0, U() | 0, v & 2097151 | 0, 0) | 0;
 u = U() | 0;
 q = eg(v | 0, u | 0, 21) | 0;
 r = $f(q | 0, U() | 0, r & 2097151 | 0, 0) | 0;
 q = U() | 0;
 l = eg(r | 0, q | 0, 21) | 0;
 m = $f(l | 0, U() | 0, m & 2097151 | 0, 0) | 0;
 l = U() | 0;
 p = r & 2097151;
 e = eg(m | 0, l | 0, 21) | 0;
 f = $f(e | 0, U() | 0, f & 2097151 | 0, 0) | 0;
 e = U() | 0;
 k = m & 2097151;
 a[b >> 0] = la;
 b = fg(la | 0, ka | 0, 8) | 0;
 U() | 0;
 a[ma >> 0] = b;
 b = fg(la | 0, ka | 0, 16) | 0;
 U() | 0;
 ka = gg(fa | 0, 0, 5) | 0;
 U() | 0;
 a[ja >> 0] = ka | b & 31;
 b = fg(ha | 0, ga | 0, 3) | 0;
 U() | 0;
 a[ia >> 0] = b;
 b = fg(ha | 0, ga | 0, 11) | 0;
 U() | 0;
 a[ea >> 0] = b;
 b = fg(fa | 0, 0, 19) | 0;
 fa = U() | 0;
 ea = gg(aa | 0, 0, 2) | 0;
 U() | 0 | fa;
 a[da >> 0] = ea | b;
 b = fg(ca | 0, ba | 0, 6) | 0;
 U() | 0;
 a[$ >> 0] = b;
 b = fg(aa | 0, 0, 14) | 0;
 aa = U() | 0;
 $ = gg(W | 0, 0, 7) | 0;
 U() | 0 | aa;
 a[_ >> 0] = $ | b;
 b = fg(Y | 0, X | 0, 1) | 0;
 U() | 0;
 a[Z >> 0] = b;
 b = fg(Y | 0, X | 0, 9) | 0;
 U() | 0;
 a[V >> 0] = b;
 b = fg(W | 0, 0, 17) | 0;
 W = U() | 0;
 V = gg(P | 0, 0, 4) | 0;
 U() | 0 | W;
 a[T >> 0] = V | b;
 b = fg(R | 0, Q | 0, 4) | 0;
 U() | 0;
 a[S >> 0] = b;
 b = fg(R | 0, Q | 0, 12) | 0;
 U() | 0;
 a[O >> 0] = b;
 b = fg(P | 0, 0, 20) | 0;
 P = U() | 0;
 O = gg(K | 0, 0, 1) | 0;
 U() | 0 | P;
 a[N >> 0] = O | b;
 b = fg(M | 0, L | 0, 7) | 0;
 U() | 0;
 a[J >> 0] = b;
 b = fg(K | 0, 0, 15) | 0;
 K = U() | 0;
 J = gg(E | 0, 0, 6) | 0;
 U() | 0 | K;
 a[I >> 0] = J | b;
 b = fg(G | 0, F | 0, 2) | 0;
 U() | 0;
 a[H >> 0] = b;
 b = fg(G | 0, F | 0, 10) | 0;
 U() | 0;
 a[D >> 0] = b;
 b = fg(E | 0, 0, 18) | 0;
 E = U() | 0;
 D = gg(A | 0, z | 0, 3) | 0;
 U() | 0 | E;
 a[C >> 0] = D | b;
 b = fg(A | 0, z | 0, 5) | 0;
 U() | 0;
 a[B >> 0] = b;
 b = fg(A | 0, z | 0, 13) | 0;
 U() | 0;
 a[y >> 0] = b;
 a[x >> 0] = v;
 b = fg(v | 0, u | 0, 8) | 0;
 U() | 0;
 a[w >> 0] = b;
 b = fg(v | 0, u | 0, 16) | 0;
 U() | 0;
 u = gg(p | 0, 0, 5) | 0;
 U() | 0;
 a[t >> 0] = u | b & 31;
 b = fg(r | 0, q | 0, 3) | 0;
 U() | 0;
 a[s >> 0] = b;
 b = fg(r | 0, q | 0, 11) | 0;
 U() | 0;
 a[o >> 0] = b;
 b = fg(p | 0, 0, 19) | 0;
 p = U() | 0;
 o = gg(k | 0, 0, 2) | 0;
 U() | 0 | p;
 a[n >> 0] = o | b;
 b = fg(m | 0, l | 0, 6) | 0;
 U() | 0;
 a[j >> 0] = b;
 b = fg(k | 0, 0, 14) | 0;
 k = U() | 0;
 j = gg(f | 0, e | 0, 7) | 0;
 U() | 0 | k;
 a[i >> 0] = j | b;
 b = fg(f | 0, e | 0, 1) | 0;
 U() | 0;
 a[h >> 0] = b;
 b = fg(f | 0, e | 0, 9) | 0;
 U() | 0;
 a[g >> 0] = b;
 b = eg(f | 0, e | 0, 17) | 0;
 U() | 0;
 a[c >> 0] = b;
 return;
}

function Be(a) {
 a = a | 0;
 var b = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0;
 q = k;
 k = k + 16 | 0;
 o = q;
 do if (a >>> 0 < 245) {
  l = a >>> 0 < 11 ? 16 : a + 11 & -8;
  a = l >>> 3;
  n = c[9989] | 0;
  b = n >>> a;
  if (b & 3 | 0) {
   a = (b & 1 ^ 1) + a | 0;
   b = 39996 + (a << 1 << 2) | 0;
   d = b + 8 | 0;
   e = c[d >> 2] | 0;
   f = e + 8 | 0;
   g = c[f >> 2] | 0;
   if ((g | 0) == (b | 0)) c[9989] = n & ~(1 << a); else {
    c[g + 12 >> 2] = b;
    c[d >> 2] = g;
   }
   p = a << 3;
   c[e + 4 >> 2] = p | 3;
   p = e + p + 4 | 0;
   c[p >> 2] = c[p >> 2] | 1;
   p = f;
   k = q;
   return p | 0;
  }
  m = c[9991] | 0;
  if (l >>> 0 > m >>> 0) {
   if (b | 0) {
    i = 2 << a;
    a = b << a & (i | 0 - i);
    a = (a & 0 - a) + -1 | 0;
    i = a >>> 12 & 16;
    a = a >>> i;
    d = a >>> 5 & 8;
    a = a >>> d;
    g = a >>> 2 & 4;
    a = a >>> g;
    b = a >>> 1 & 2;
    a = a >>> b;
    e = a >>> 1 & 1;
    e = (d | i | g | b | e) + (a >>> e) | 0;
    a = 39996 + (e << 1 << 2) | 0;
    b = a + 8 | 0;
    g = c[b >> 2] | 0;
    i = g + 8 | 0;
    d = c[i >> 2] | 0;
    if ((d | 0) == (a | 0)) {
     b = n & ~(1 << e);
     c[9989] = b;
    } else {
     c[d + 12 >> 2] = a;
     c[b >> 2] = d;
     b = n;
    }
    p = e << 3;
    h = p - l | 0;
    c[g + 4 >> 2] = l | 3;
    f = g + l | 0;
    c[f + 4 >> 2] = h | 1;
    c[g + p >> 2] = h;
    if (m | 0) {
     e = c[9994] | 0;
     a = m >>> 3;
     d = 39996 + (a << 1 << 2) | 0;
     a = 1 << a;
     if (!(b & a)) {
      c[9989] = b | a;
      a = d;
      b = d + 8 | 0;
     } else {
      b = d + 8 | 0;
      a = c[b >> 2] | 0;
     }
     c[b >> 2] = e;
     c[a + 12 >> 2] = e;
     c[e + 8 >> 2] = a;
     c[e + 12 >> 2] = d;
    }
    c[9991] = h;
    c[9994] = f;
    p = i;
    k = q;
    return p | 0;
   }
   g = c[9990] | 0;
   if (g) {
    b = (g & 0 - g) + -1 | 0;
    f = b >>> 12 & 16;
    b = b >>> f;
    e = b >>> 5 & 8;
    b = b >>> e;
    h = b >>> 2 & 4;
    b = b >>> h;
    i = b >>> 1 & 2;
    b = b >>> i;
    j = b >>> 1 & 1;
    j = c[40260 + ((e | f | h | i | j) + (b >>> j) << 2) >> 2] | 0;
    b = j;
    i = j;
    j = (c[j + 4 >> 2] & -8) - l | 0;
    while (1) {
     a = c[b + 16 >> 2] | 0;
     if (!a) {
      a = c[b + 20 >> 2] | 0;
      if (!a) break;
     }
     h = (c[a + 4 >> 2] & -8) - l | 0;
     f = h >>> 0 < j >>> 0;
     b = a;
     i = f ? a : i;
     j = f ? h : j;
    }
    h = i + l | 0;
    if (h >>> 0 > i >>> 0) {
     f = c[i + 24 >> 2] | 0;
     a = c[i + 12 >> 2] | 0;
     do if ((a | 0) == (i | 0)) {
      b = i + 20 | 0;
      a = c[b >> 2] | 0;
      if (!a) {
       b = i + 16 | 0;
       a = c[b >> 2] | 0;
       if (!a) {
        d = 0;
        break;
       }
      }
      while (1) {
       e = a + 20 | 0;
       d = c[e >> 2] | 0;
       if (!d) {
        e = a + 16 | 0;
        d = c[e >> 2] | 0;
        if (!d) break; else {
         a = d;
         b = e;
        }
       } else {
        a = d;
        b = e;
       }
      }
      c[b >> 2] = 0;
      d = a;
     } else {
      d = c[i + 8 >> 2] | 0;
      c[d + 12 >> 2] = a;
      c[a + 8 >> 2] = d;
      d = a;
     } while (0);
     do if (f | 0) {
      a = c[i + 28 >> 2] | 0;
      b = 40260 + (a << 2) | 0;
      if ((i | 0) == (c[b >> 2] | 0)) {
       c[b >> 2] = d;
       if (!d) {
        c[9990] = g & ~(1 << a);
        break;
       }
      } else {
       p = f + 16 | 0;
       c[((c[p >> 2] | 0) == (i | 0) ? p : f + 20 | 0) >> 2] = d;
       if (!d) break;
      }
      c[d + 24 >> 2] = f;
      a = c[i + 16 >> 2] | 0;
      if (a | 0) {
       c[d + 16 >> 2] = a;
       c[a + 24 >> 2] = d;
      }
      a = c[i + 20 >> 2] | 0;
      if (a | 0) {
       c[d + 20 >> 2] = a;
       c[a + 24 >> 2] = d;
      }
     } while (0);
     if (j >>> 0 < 16) {
      p = j + l | 0;
      c[i + 4 >> 2] = p | 3;
      p = i + p + 4 | 0;
      c[p >> 2] = c[p >> 2] | 1;
     } else {
      c[i + 4 >> 2] = l | 3;
      c[h + 4 >> 2] = j | 1;
      c[h + j >> 2] = j;
      if (m | 0) {
       e = c[9994] | 0;
       a = m >>> 3;
       d = 39996 + (a << 1 << 2) | 0;
       a = 1 << a;
       if (!(a & n)) {
        c[9989] = a | n;
        a = d;
        b = d + 8 | 0;
       } else {
        b = d + 8 | 0;
        a = c[b >> 2] | 0;
       }
       c[b >> 2] = e;
       c[a + 12 >> 2] = e;
       c[e + 8 >> 2] = a;
       c[e + 12 >> 2] = d;
      }
      c[9991] = j;
      c[9994] = h;
     }
     p = i + 8 | 0;
     k = q;
     return p | 0;
    }
   }
  }
 } else if (a >>> 0 > 4294967231) l = -1; else {
  a = a + 11 | 0;
  l = a & -8;
  j = c[9990] | 0;
  if (j) {
   d = 0 - l | 0;
   a = a >>> 8;
   if (!a) h = 0; else if (l >>> 0 > 16777215) h = 31; else {
    n = (a + 1048320 | 0) >>> 16 & 8;
    p = a << n;
    m = (p + 520192 | 0) >>> 16 & 4;
    p = p << m;
    h = (p + 245760 | 0) >>> 16 & 2;
    h = 14 - (m | n | h) + (p << h >>> 15) | 0;
    h = l >>> (h + 7 | 0) & 1 | h << 1;
   }
   b = c[40260 + (h << 2) >> 2] | 0;
   a : do if (!b) {
    b = 0;
    a = 0;
    p = 61;
   } else {
    a = 0;
    g = l << ((h | 0) == 31 ? 0 : 25 - (h >>> 1) | 0);
    e = 0;
    while (1) {
     f = (c[b + 4 >> 2] & -8) - l | 0;
     if (f >>> 0 < d >>> 0) if (!f) {
      a = b;
      d = 0;
      p = 65;
      break a;
     } else {
      a = b;
      d = f;
     }
     p = c[b + 20 >> 2] | 0;
     b = c[b + 16 + (g >>> 31 << 2) >> 2] | 0;
     e = (p | 0) == 0 | (p | 0) == (b | 0) ? e : p;
     if (!b) {
      b = e;
      p = 61;
      break;
     } else g = g << 1;
    }
   } while (0);
   if ((p | 0) == 61) {
    if ((b | 0) == 0 & (a | 0) == 0) {
     a = 2 << h;
     a = (a | 0 - a) & j;
     if (!a) break;
     n = (a & 0 - a) + -1 | 0;
     h = n >>> 12 & 16;
     n = n >>> h;
     g = n >>> 5 & 8;
     n = n >>> g;
     i = n >>> 2 & 4;
     n = n >>> i;
     m = n >>> 1 & 2;
     n = n >>> m;
     b = n >>> 1 & 1;
     a = 0;
     b = c[40260 + ((g | h | i | m | b) + (n >>> b) << 2) >> 2] | 0;
    }
    if (!b) {
     i = a;
     g = d;
    } else p = 65;
   }
   if ((p | 0) == 65) {
    e = b;
    while (1) {
     n = (c[e + 4 >> 2] & -8) - l | 0;
     b = n >>> 0 < d >>> 0;
     d = b ? n : d;
     a = b ? e : a;
     b = c[e + 16 >> 2] | 0;
     if (!b) b = c[e + 20 >> 2] | 0;
     if (!b) {
      i = a;
      g = d;
      break;
     } else e = b;
    }
   }
   if (i) if (g >>> 0 < ((c[9991] | 0) - l | 0) >>> 0) {
    h = i + l | 0;
    if (h >>> 0 > i >>> 0) {
     f = c[i + 24 >> 2] | 0;
     a = c[i + 12 >> 2] | 0;
     do if ((a | 0) == (i | 0)) {
      b = i + 20 | 0;
      a = c[b >> 2] | 0;
      if (!a) {
       b = i + 16 | 0;
       a = c[b >> 2] | 0;
       if (!a) {
        a = 0;
        break;
       }
      }
      while (1) {
       e = a + 20 | 0;
       d = c[e >> 2] | 0;
       if (!d) {
        e = a + 16 | 0;
        d = c[e >> 2] | 0;
        if (!d) break; else {
         a = d;
         b = e;
        }
       } else {
        a = d;
        b = e;
       }
      }
      c[b >> 2] = 0;
     } else {
      p = c[i + 8 >> 2] | 0;
      c[p + 12 >> 2] = a;
      c[a + 8 >> 2] = p;
     } while (0);
     do if (!f) e = j; else {
      b = c[i + 28 >> 2] | 0;
      d = 40260 + (b << 2) | 0;
      if ((i | 0) == (c[d >> 2] | 0)) {
       c[d >> 2] = a;
       if (!a) {
        e = j & ~(1 << b);
        c[9990] = e;
        break;
       }
      } else {
       p = f + 16 | 0;
       c[((c[p >> 2] | 0) == (i | 0) ? p : f + 20 | 0) >> 2] = a;
       if (!a) {
        e = j;
        break;
       }
      }
      c[a + 24 >> 2] = f;
      b = c[i + 16 >> 2] | 0;
      if (b | 0) {
       c[a + 16 >> 2] = b;
       c[b + 24 >> 2] = a;
      }
      b = c[i + 20 >> 2] | 0;
      if (!b) e = j; else {
       c[a + 20 >> 2] = b;
       c[b + 24 >> 2] = a;
       e = j;
      }
     } while (0);
     b : do if (g >>> 0 < 16) {
      p = g + l | 0;
      c[i + 4 >> 2] = p | 3;
      p = i + p + 4 | 0;
      c[p >> 2] = c[p >> 2] | 1;
     } else {
      c[i + 4 >> 2] = l | 3;
      c[h + 4 >> 2] = g | 1;
      c[h + g >> 2] = g;
      a = g >>> 3;
      if (g >>> 0 < 256) {
       d = 39996 + (a << 1 << 2) | 0;
       b = c[9989] | 0;
       a = 1 << a;
       if (!(b & a)) {
        c[9989] = b | a;
        a = d;
        b = d + 8 | 0;
       } else {
        b = d + 8 | 0;
        a = c[b >> 2] | 0;
       }
       c[b >> 2] = h;
       c[a + 12 >> 2] = h;
       c[h + 8 >> 2] = a;
       c[h + 12 >> 2] = d;
       break;
      }
      a = g >>> 8;
      if (!a) d = 0; else if (g >>> 0 > 16777215) d = 31; else {
       o = (a + 1048320 | 0) >>> 16 & 8;
       p = a << o;
       n = (p + 520192 | 0) >>> 16 & 4;
       p = p << n;
       d = (p + 245760 | 0) >>> 16 & 2;
       d = 14 - (n | o | d) + (p << d >>> 15) | 0;
       d = g >>> (d + 7 | 0) & 1 | d << 1;
      }
      a = 40260 + (d << 2) | 0;
      c[h + 28 >> 2] = d;
      b = h + 16 | 0;
      c[b + 4 >> 2] = 0;
      c[b >> 2] = 0;
      b = 1 << d;
      if (!(e & b)) {
       c[9990] = e | b;
       c[a >> 2] = h;
       c[h + 24 >> 2] = a;
       c[h + 12 >> 2] = h;
       c[h + 8 >> 2] = h;
       break;
      }
      a = c[a >> 2] | 0;
      c : do if ((c[a + 4 >> 2] & -8 | 0) != (g | 0)) {
       e = g << ((d | 0) == 31 ? 0 : 25 - (d >>> 1) | 0);
       while (1) {
        d = a + 16 + (e >>> 31 << 2) | 0;
        b = c[d >> 2] | 0;
        if (!b) break;
        if ((c[b + 4 >> 2] & -8 | 0) == (g | 0)) {
         a = b;
         break c;
        } else {
         e = e << 1;
         a = b;
        }
       }
       c[d >> 2] = h;
       c[h + 24 >> 2] = a;
       c[h + 12 >> 2] = h;
       c[h + 8 >> 2] = h;
       break b;
      } while (0);
      o = a + 8 | 0;
      p = c[o >> 2] | 0;
      c[p + 12 >> 2] = h;
      c[o >> 2] = h;
      c[h + 8 >> 2] = p;
      c[h + 12 >> 2] = a;
      c[h + 24 >> 2] = 0;
     } while (0);
     p = i + 8 | 0;
     k = q;
     return p | 0;
    }
   }
  }
 } while (0);
 d = c[9991] | 0;
 if (d >>> 0 >= l >>> 0) {
  a = d - l | 0;
  b = c[9994] | 0;
  if (a >>> 0 > 15) {
   p = b + l | 0;
   c[9994] = p;
   c[9991] = a;
   c[p + 4 >> 2] = a | 1;
   c[b + d >> 2] = a;
   c[b + 4 >> 2] = l | 3;
  } else {
   c[9991] = 0;
   c[9994] = 0;
   c[b + 4 >> 2] = d | 3;
   p = b + d + 4 | 0;
   c[p >> 2] = c[p >> 2] | 1;
  }
  p = b + 8 | 0;
  k = q;
  return p | 0;
 }
 g = c[9992] | 0;
 if (g >>> 0 > l >>> 0) {
  n = g - l | 0;
  c[9992] = n;
  p = c[9995] | 0;
  o = p + l | 0;
  c[9995] = o;
  c[o + 4 >> 2] = n | 1;
  c[p + 4 >> 2] = l | 3;
  p = p + 8 | 0;
  k = q;
  return p | 0;
 }
 if (!(c[10107] | 0)) {
  c[10109] = 4096;
  c[10108] = 4096;
  c[10110] = -1;
  c[10111] = -1;
  c[10112] = 0;
  c[10100] = 0;
  c[10107] = o & -16 ^ 1431655768;
  a = 4096;
 } else a = c[10109] | 0;
 h = l + 48 | 0;
 i = l + 47 | 0;
 f = a + i | 0;
 e = 0 - a | 0;
 j = f & e;
 if (j >>> 0 <= l >>> 0) {
  p = 0;
  k = q;
  return p | 0;
 }
 a = c[10099] | 0;
 if (a | 0) {
  n = c[10097] | 0;
  o = n + j | 0;
  if (o >>> 0 <= n >>> 0 | o >>> 0 > a >>> 0) {
   p = 0;
   k = q;
   return p | 0;
  }
 }
 d : do if (!(c[10100] & 4)) {
  b = c[9995] | 0;
  e : do if (!b) p = 128; else {
   d = 40404;
   while (1) {
    a = c[d >> 2] | 0;
    if (a >>> 0 <= b >>> 0) if ((a + (c[d + 4 >> 2] | 0) | 0) >>> 0 > b >>> 0) break;
    a = c[d + 8 >> 2] | 0;
    if (!a) {
     p = 128;
     break e;
    } else d = a;
   }
   a = f - g & e;
   if (a >>> 0 < 2147483647) {
    e = ng(a | 0) | 0;
    if ((e | 0) == ((c[d >> 2] | 0) + (c[d + 4 >> 2] | 0) | 0)) {
     if ((e | 0) != (-1 | 0)) {
      p = 145;
      break d;
     }
    } else p = 136;
   } else a = 0;
  } while (0);
  do if ((p | 0) == 128) {
   e = ng(0) | 0;
   if ((e | 0) == (-1 | 0)) a = 0; else {
    a = e;
    b = c[10108] | 0;
    d = b + -1 | 0;
    a = ((d & a | 0) == 0 ? 0 : (d + a & 0 - b) - a | 0) + j | 0;
    b = c[10097] | 0;
    d = a + b | 0;
    if (a >>> 0 > l >>> 0 & a >>> 0 < 2147483647) {
     f = c[10099] | 0;
     if (f | 0) if (d >>> 0 <= b >>> 0 | d >>> 0 > f >>> 0) {
      a = 0;
      break;
     }
     b = ng(a | 0) | 0;
     if ((b | 0) == (e | 0)) {
      p = 145;
      break d;
     } else {
      e = b;
      p = 136;
     }
    } else a = 0;
   }
  } while (0);
  do if ((p | 0) == 136) {
   d = 0 - a | 0;
   if (!(h >>> 0 > a >>> 0 & (a >>> 0 < 2147483647 & (e | 0) != (-1 | 0)))) if ((e | 0) == (-1 | 0)) {
    a = 0;
    break;
   } else {
    p = 145;
    break d;
   }
   b = c[10109] | 0;
   b = i - a + b & 0 - b;
   if (b >>> 0 >= 2147483647) {
    p = 145;
    break d;
   }
   if ((ng(b | 0) | 0) == (-1 | 0)) {
    ng(d | 0) | 0;
    a = 0;
    break;
   } else {
    a = b + a | 0;
    p = 145;
    break d;
   }
  } while (0);
  c[10100] = c[10100] | 4;
  p = 143;
 } else {
  a = 0;
  p = 143;
 } while (0);
 if ((p | 0) == 143) if (j >>> 0 < 2147483647) {
  e = ng(j | 0) | 0;
  o = ng(0) | 0;
  b = o - e | 0;
  d = b >>> 0 > (l + 40 | 0) >>> 0;
  if (!((e | 0) == (-1 | 0) | d ^ 1 | e >>> 0 < o >>> 0 & ((e | 0) != (-1 | 0) & (o | 0) != (-1 | 0)) ^ 1)) {
   a = d ? b : a;
   p = 145;
  }
 }
 if ((p | 0) == 145) {
  b = (c[10097] | 0) + a | 0;
  c[10097] = b;
  if (b >>> 0 > (c[10098] | 0) >>> 0) c[10098] = b;
  j = c[9995] | 0;
  f : do if (!j) {
   p = c[9993] | 0;
   if ((p | 0) == 0 | e >>> 0 < p >>> 0) c[9993] = e;
   c[10101] = e;
   c[10102] = a;
   c[10104] = 0;
   c[9998] = c[10107];
   c[9997] = -1;
   c[10002] = 39996;
   c[10001] = 39996;
   c[10004] = 40004;
   c[10003] = 40004;
   c[10006] = 40012;
   c[10005] = 40012;
   c[10008] = 40020;
   c[10007] = 40020;
   c[10010] = 40028;
   c[10009] = 40028;
   c[10012] = 40036;
   c[10011] = 40036;
   c[10014] = 40044;
   c[10013] = 40044;
   c[10016] = 40052;
   c[10015] = 40052;
   c[10018] = 40060;
   c[10017] = 40060;
   c[10020] = 40068;
   c[10019] = 40068;
   c[10022] = 40076;
   c[10021] = 40076;
   c[10024] = 40084;
   c[10023] = 40084;
   c[10026] = 40092;
   c[10025] = 40092;
   c[10028] = 40100;
   c[10027] = 40100;
   c[10030] = 40108;
   c[10029] = 40108;
   c[10032] = 40116;
   c[10031] = 40116;
   c[10034] = 40124;
   c[10033] = 40124;
   c[10036] = 40132;
   c[10035] = 40132;
   c[10038] = 40140;
   c[10037] = 40140;
   c[10040] = 40148;
   c[10039] = 40148;
   c[10042] = 40156;
   c[10041] = 40156;
   c[10044] = 40164;
   c[10043] = 40164;
   c[10046] = 40172;
   c[10045] = 40172;
   c[10048] = 40180;
   c[10047] = 40180;
   c[10050] = 40188;
   c[10049] = 40188;
   c[10052] = 40196;
   c[10051] = 40196;
   c[10054] = 40204;
   c[10053] = 40204;
   c[10056] = 40212;
   c[10055] = 40212;
   c[10058] = 40220;
   c[10057] = 40220;
   c[10060] = 40228;
   c[10059] = 40228;
   c[10062] = 40236;
   c[10061] = 40236;
   c[10064] = 40244;
   c[10063] = 40244;
   p = a + -40 | 0;
   n = e + 8 | 0;
   n = (n & 7 | 0) == 0 ? 0 : 0 - n & 7;
   o = e + n | 0;
   n = p - n | 0;
   c[9995] = o;
   c[9992] = n;
   c[o + 4 >> 2] = n | 1;
   c[e + p + 4 >> 2] = 40;
   c[9996] = c[10111];
  } else {
   b = 40404;
   do {
    d = c[b >> 2] | 0;
    f = c[b + 4 >> 2] | 0;
    if ((e | 0) == (d + f | 0)) {
     p = 154;
     break;
    }
    b = c[b + 8 >> 2] | 0;
   } while ((b | 0) != 0);
   if ((p | 0) == 154) {
    g = b + 4 | 0;
    if (!(c[b + 12 >> 2] & 8)) if (e >>> 0 > j >>> 0 & d >>> 0 <= j >>> 0) {
     c[g >> 2] = f + a;
     p = (c[9992] | 0) + a | 0;
     n = j + 8 | 0;
     n = (n & 7 | 0) == 0 ? 0 : 0 - n & 7;
     o = j + n | 0;
     n = p - n | 0;
     c[9995] = o;
     c[9992] = n;
     c[o + 4 >> 2] = n | 1;
     c[j + p + 4 >> 2] = 40;
     c[9996] = c[10111];
     break;
    }
   }
   if (e >>> 0 < (c[9993] | 0) >>> 0) c[9993] = e;
   d = e + a | 0;
   b = 40404;
   do {
    if ((c[b >> 2] | 0) == (d | 0)) {
     p = 162;
     break;
    }
    b = c[b + 8 >> 2] | 0;
   } while ((b | 0) != 0);
   if ((p | 0) == 162) if (!(c[b + 12 >> 2] & 8)) {
    c[b >> 2] = e;
    n = b + 4 | 0;
    c[n >> 2] = (c[n >> 2] | 0) + a;
    n = e + 8 | 0;
    n = e + ((n & 7 | 0) == 0 ? 0 : 0 - n & 7) | 0;
    a = d + 8 | 0;
    a = d + ((a & 7 | 0) == 0 ? 0 : 0 - a & 7) | 0;
    m = n + l | 0;
    i = a - n - l | 0;
    c[n + 4 >> 2] = l | 3;
    g : do if ((j | 0) == (a | 0)) {
     p = (c[9992] | 0) + i | 0;
     c[9992] = p;
     c[9995] = m;
     c[m + 4 >> 2] = p | 1;
    } else {
     if ((c[9994] | 0) == (a | 0)) {
      p = (c[9991] | 0) + i | 0;
      c[9991] = p;
      c[9994] = m;
      c[m + 4 >> 2] = p | 1;
      c[m + p >> 2] = p;
      break;
     }
     b = c[a + 4 >> 2] | 0;
     if ((b & 3 | 0) == 1) {
      h = b & -8;
      e = b >>> 3;
      h : do if (b >>> 0 < 256) {
       b = c[a + 8 >> 2] | 0;
       d = c[a + 12 >> 2] | 0;
       if ((d | 0) == (b | 0)) {
        c[9989] = c[9989] & ~(1 << e);
        break;
       } else {
        c[b + 12 >> 2] = d;
        c[d + 8 >> 2] = b;
        break;
       }
      } else {
       g = c[a + 24 >> 2] | 0;
       b = c[a + 12 >> 2] | 0;
       do if ((b | 0) == (a | 0)) {
        d = a + 16 | 0;
        e = d + 4 | 0;
        b = c[e >> 2] | 0;
        if (!b) {
         b = c[d >> 2] | 0;
         if (!b) {
          b = 0;
          break;
         }
        } else d = e;
        while (1) {
         f = b + 20 | 0;
         e = c[f >> 2] | 0;
         if (!e) {
          f = b + 16 | 0;
          e = c[f >> 2] | 0;
          if (!e) break; else {
           b = e;
           d = f;
          }
         } else {
          b = e;
          d = f;
         }
        }
        c[d >> 2] = 0;
       } else {
        p = c[a + 8 >> 2] | 0;
        c[p + 12 >> 2] = b;
        c[b + 8 >> 2] = p;
       } while (0);
       if (!g) break;
       d = c[a + 28 >> 2] | 0;
       e = 40260 + (d << 2) | 0;
       do if ((c[e >> 2] | 0) == (a | 0)) {
        c[e >> 2] = b;
        if (b | 0) break;
        c[9990] = c[9990] & ~(1 << d);
        break h;
       } else {
        p = g + 16 | 0;
        c[((c[p >> 2] | 0) == (a | 0) ? p : g + 20 | 0) >> 2] = b;
        if (!b) break h;
       } while (0);
       c[b + 24 >> 2] = g;
       d = a + 16 | 0;
       e = c[d >> 2] | 0;
       if (e | 0) {
        c[b + 16 >> 2] = e;
        c[e + 24 >> 2] = b;
       }
       d = c[d + 4 >> 2] | 0;
       if (!d) break;
       c[b + 20 >> 2] = d;
       c[d + 24 >> 2] = b;
      } while (0);
      a = a + h | 0;
      f = h + i | 0;
     } else f = i;
     a = a + 4 | 0;
     c[a >> 2] = c[a >> 2] & -2;
     c[m + 4 >> 2] = f | 1;
     c[m + f >> 2] = f;
     a = f >>> 3;
     if (f >>> 0 < 256) {
      d = 39996 + (a << 1 << 2) | 0;
      b = c[9989] | 0;
      a = 1 << a;
      if (!(b & a)) {
       c[9989] = b | a;
       a = d;
       b = d + 8 | 0;
      } else {
       b = d + 8 | 0;
       a = c[b >> 2] | 0;
      }
      c[b >> 2] = m;
      c[a + 12 >> 2] = m;
      c[m + 8 >> 2] = a;
      c[m + 12 >> 2] = d;
      break;
     }
     a = f >>> 8;
     do if (!a) e = 0; else {
      if (f >>> 0 > 16777215) {
       e = 31;
       break;
      }
      o = (a + 1048320 | 0) >>> 16 & 8;
      p = a << o;
      l = (p + 520192 | 0) >>> 16 & 4;
      p = p << l;
      e = (p + 245760 | 0) >>> 16 & 2;
      e = 14 - (l | o | e) + (p << e >>> 15) | 0;
      e = f >>> (e + 7 | 0) & 1 | e << 1;
     } while (0);
     a = 40260 + (e << 2) | 0;
     c[m + 28 >> 2] = e;
     b = m + 16 | 0;
     c[b + 4 >> 2] = 0;
     c[b >> 2] = 0;
     b = c[9990] | 0;
     d = 1 << e;
     if (!(b & d)) {
      c[9990] = b | d;
      c[a >> 2] = m;
      c[m + 24 >> 2] = a;
      c[m + 12 >> 2] = m;
      c[m + 8 >> 2] = m;
      break;
     }
     a = c[a >> 2] | 0;
     i : do if ((c[a + 4 >> 2] & -8 | 0) != (f | 0)) {
      e = f << ((e | 0) == 31 ? 0 : 25 - (e >>> 1) | 0);
      while (1) {
       d = a + 16 + (e >>> 31 << 2) | 0;
       b = c[d >> 2] | 0;
       if (!b) break;
       if ((c[b + 4 >> 2] & -8 | 0) == (f | 0)) {
        a = b;
        break i;
       } else {
        e = e << 1;
        a = b;
       }
      }
      c[d >> 2] = m;
      c[m + 24 >> 2] = a;
      c[m + 12 >> 2] = m;
      c[m + 8 >> 2] = m;
      break g;
     } while (0);
     o = a + 8 | 0;
     p = c[o >> 2] | 0;
     c[p + 12 >> 2] = m;
     c[o >> 2] = m;
     c[m + 8 >> 2] = p;
     c[m + 12 >> 2] = a;
     c[m + 24 >> 2] = 0;
    } while (0);
    p = n + 8 | 0;
    k = q;
    return p | 0;
   }
   d = 40404;
   while (1) {
    b = c[d >> 2] | 0;
    if (b >>> 0 <= j >>> 0) {
     b = b + (c[d + 4 >> 2] | 0) | 0;
     if (b >>> 0 > j >>> 0) break;
    }
    d = c[d + 8 >> 2] | 0;
   }
   g = b + -47 | 0;
   d = g + 8 | 0;
   d = g + ((d & 7 | 0) == 0 ? 0 : 0 - d & 7) | 0;
   g = j + 16 | 0;
   d = d >>> 0 < g >>> 0 ? j : d;
   p = d + 8 | 0;
   f = a + -40 | 0;
   n = e + 8 | 0;
   n = (n & 7 | 0) == 0 ? 0 : 0 - n & 7;
   o = e + n | 0;
   n = f - n | 0;
   c[9995] = o;
   c[9992] = n;
   c[o + 4 >> 2] = n | 1;
   c[e + f + 4 >> 2] = 40;
   c[9996] = c[10111];
   f = d + 4 | 0;
   c[f >> 2] = 27;
   c[p >> 2] = c[10101];
   c[p + 4 >> 2] = c[10102];
   c[p + 8 >> 2] = c[10103];
   c[p + 12 >> 2] = c[10104];
   c[10101] = e;
   c[10102] = a;
   c[10104] = 0;
   c[10103] = p;
   a = d + 24 | 0;
   do {
    p = a;
    a = a + 4 | 0;
    c[a >> 2] = 7;
   } while ((p + 8 | 0) >>> 0 < b >>> 0);
   if ((d | 0) != (j | 0)) {
    h = d - j | 0;
    c[f >> 2] = c[f >> 2] & -2;
    c[j + 4 >> 2] = h | 1;
    c[d >> 2] = h;
    a = h >>> 3;
    if (h >>> 0 < 256) {
     d = 39996 + (a << 1 << 2) | 0;
     b = c[9989] | 0;
     a = 1 << a;
     if (!(b & a)) {
      c[9989] = b | a;
      a = d;
      b = d + 8 | 0;
     } else {
      b = d + 8 | 0;
      a = c[b >> 2] | 0;
     }
     c[b >> 2] = j;
     c[a + 12 >> 2] = j;
     c[j + 8 >> 2] = a;
     c[j + 12 >> 2] = d;
     break;
    }
    a = h >>> 8;
    if (!a) e = 0; else if (h >>> 0 > 16777215) e = 31; else {
     o = (a + 1048320 | 0) >>> 16 & 8;
     p = a << o;
     n = (p + 520192 | 0) >>> 16 & 4;
     p = p << n;
     e = (p + 245760 | 0) >>> 16 & 2;
     e = 14 - (n | o | e) + (p << e >>> 15) | 0;
     e = h >>> (e + 7 | 0) & 1 | e << 1;
    }
    d = 40260 + (e << 2) | 0;
    c[j + 28 >> 2] = e;
    c[j + 20 >> 2] = 0;
    c[g >> 2] = 0;
    a = c[9990] | 0;
    b = 1 << e;
    if (!(a & b)) {
     c[9990] = a | b;
     c[d >> 2] = j;
     c[j + 24 >> 2] = d;
     c[j + 12 >> 2] = j;
     c[j + 8 >> 2] = j;
     break;
    }
    a = c[d >> 2] | 0;
    j : do if ((c[a + 4 >> 2] & -8 | 0) != (h | 0)) {
     e = h << ((e | 0) == 31 ? 0 : 25 - (e >>> 1) | 0);
     while (1) {
      d = a + 16 + (e >>> 31 << 2) | 0;
      b = c[d >> 2] | 0;
      if (!b) break;
      if ((c[b + 4 >> 2] & -8 | 0) == (h | 0)) {
       a = b;
       break j;
      } else {
       e = e << 1;
       a = b;
      }
     }
     c[d >> 2] = j;
     c[j + 24 >> 2] = a;
     c[j + 12 >> 2] = j;
     c[j + 8 >> 2] = j;
     break f;
    } while (0);
    o = a + 8 | 0;
    p = c[o >> 2] | 0;
    c[p + 12 >> 2] = j;
    c[o >> 2] = j;
    c[j + 8 >> 2] = p;
    c[j + 12 >> 2] = a;
    c[j + 24 >> 2] = 0;
   }
  } while (0);
  a = c[9992] | 0;
  if (a >>> 0 > l >>> 0) {
   n = a - l | 0;
   c[9992] = n;
   p = c[9995] | 0;
   o = p + l | 0;
   c[9995] = o;
   c[o + 4 >> 2] = n | 1;
   c[p + 4 >> 2] = l | 3;
   p = p + 8 | 0;
   k = q;
   return p | 0;
  }
 }
 c[(Pd() | 0) >> 2] = 12;
 p = 0;
 k = q;
 return p | 0;
}

function Dc(b, e) {
 b = b | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ia = 0, ja = 0, ka = 0, la = 0, ma = 0, na = 0, oa = 0, pa = 0, qa = 0, ra = 0, sa = 0, ta = 0, ua = 0, va = 0, wa = 0, xa = 0, ya = 0, za = 0, Aa = 0, Ba = 0, Ca = 0, Da = 0, Ea = 0, Fa = 0, Ga = 0, Ha = 0, Ia = 0, Ja = 0, Ka = 0, La = 0, Ma = 0, Na = 0, Oa = 0, Pa = 0, Qa = 0;
 Ka = k;
 k = k + 512 | 0;
 Ja = Ka + 480 | 0;
 g = Ka + 432 | 0;
 h = Ka + 384 | 0;
 X = Ka + 336 | 0;
 Y = Ka + 288 | 0;
 Z = Ka + 240 | 0;
 _ = Ka + 192 | 0;
 ba = Ka + 144 | 0;
 aa = Ka + 96 | 0;
 W = Ka + 48 | 0;
 Ia = Ka;
 y = d[e >> 0] | 0;
 v = gg(d[e + 1 >> 0] | 0 | 0, 0, 8) | 0;
 l = U() | 0;
 p = gg(d[e + 2 >> 0] | 0 | 0, 0, 16) | 0;
 l = l | (U() | 0);
 O = gg(d[e + 3 >> 0] | 0 | 0, 0, 24) | 0;
 l = l | (U() | 0);
 n = a[e + 6 >> 0] | 0;
 Q = d[e + 4 >> 0] | 0;
 i = gg(d[e + 5 >> 0] | 0 | 0, 0, 8) | 0;
 P = U() | 0;
 n = gg(n & 255 | 0, 0, 16) | 0;
 P = gg(i | Q | n | 0, P | (U() | 0) | 0, 6) | 0;
 n = U() | 0;
 Q = a[e + 9 >> 0] | 0;
 i = d[e + 7 >> 0] | 0;
 S = gg(d[e + 8 >> 0] | 0 | 0, 0, 8) | 0;
 B = U() | 0;
 Q = gg(Q & 255 | 0, 0, 16) | 0;
 B = gg(S | i | Q | 0, B | (U() | 0) | 0, 5) | 0;
 Q = U() | 0;
 i = a[e + 12 >> 0] | 0;
 S = d[e + 10 >> 0] | 0;
 z = gg(d[e + 11 >> 0] | 0 | 0, 0, 8) | 0;
 j = U() | 0;
 i = gg(i & 255 | 0, 0, 16) | 0;
 j = gg(z | S | i | 0, j | (U() | 0) | 0, 3) | 0;
 i = U() | 0;
 S = a[e + 15 >> 0] | 0;
 z = d[e + 13 >> 0] | 0;
 u = gg(d[e + 14 >> 0] | 0 | 0, 0, 8) | 0;
 R = U() | 0;
 S = gg(S & 255 | 0, 0, 16) | 0;
 R = gg(u | z | S | 0, R | (U() | 0) | 0, 2) | 0;
 S = U() | 0;
 z = d[e + 16 >> 0] | 0;
 u = gg(d[e + 17 >> 0] | 0 | 0, 0, 8) | 0;
 L = U() | 0;
 ca = gg(d[e + 18 >> 0] | 0 | 0, 0, 16) | 0;
 L = L | (U() | 0);
 f = gg(d[e + 19 >> 0] | 0 | 0, 0, 24) | 0;
 f = u | z | ca | f;
 L = L | (U() | 0);
 ca = a[e + 22 >> 0] | 0;
 z = d[e + 20 >> 0] | 0;
 u = gg(d[e + 21 >> 0] | 0 | 0, 0, 8) | 0;
 T = U() | 0;
 ca = gg(ca & 255 | 0, 0, 16) | 0;
 T = gg(u | z | ca | 0, T | (U() | 0) | 0, 7) | 0;
 ca = U() | 0;
 z = a[e + 25 >> 0] | 0;
 u = d[e + 23 >> 0] | 0;
 w = gg(d[e + 24 >> 0] | 0 | 0, 0, 8) | 0;
 A = U() | 0;
 z = gg(z & 255 | 0, 0, 16) | 0;
 A = gg(w | u | z | 0, A | (U() | 0) | 0, 5) | 0;
 z = U() | 0;
 u = a[e + 28 >> 0] | 0;
 w = d[e + 26 >> 0] | 0;
 t = gg(d[e + 27 >> 0] | 0 | 0, 0, 8) | 0;
 M = U() | 0;
 u = gg(u & 255 | 0, 0, 16) | 0;
 M = gg(t | w | u | 0, M | (U() | 0) | 0, 4) | 0;
 u = U() | 0;
 w = a[e + 31 >> 0] | 0;
 t = d[e + 29 >> 0] | 0;
 e = gg(d[e + 30 >> 0] | 0 | 0, 0, 8) | 0;
 x = U() | 0;
 w = gg(w & 255 | 0, 0, 16) | 0;
 x = gg(e | t | w | 0, x | (U() | 0) | 0, 2) | 0;
 w = U() | 0;
 t = $f(x | 0, w | 0, 16777216, 0) | 0;
 e = fg(t | 0, U() | 0, 25) | 0;
 e = _f(e | 0, U() | 0, 19, 0) | 0;
 l = $f(e | 0, U() | 0, v | y | p | O | 0, l | 0) | 0;
 O = U() | 0;
 p = $f(P | 0, n | 0, 16777216, 0) | 0;
 e = fg(p | 0, U() | 0, 25) | 0;
 e = $f(B | 0, Q | 0, e | 0, U() | 0) | 0;
 Q = U() | 0;
 p = ag(P | 0, n | 0, p & -33554432 | 0, 0) | 0;
 n = U() | 0;
 P = $f(j | 0, i | 0, 16777216, 0) | 0;
 B = fg(P | 0, U() | 0, 25) | 0;
 B = $f(R | 0, S | 0, B | 0, U() | 0) | 0;
 S = U() | 0;
 R = $f(f | 0, L | 0, 16777216, 0) | 0;
 y = fg(R | 0, U() | 0, 25) | 0;
 y = $f(T | 0, ca | 0, y | 0, U() | 0) | 0;
 ca = U() | 0;
 T = $f(A | 0, z | 0, 16777216, 0) | 0;
 v = fg(T | 0, U() | 0, 25) | 0;
 v = $f(M | 0, u | 0, v | 0, U() | 0) | 0;
 u = U() | 0;
 M = $f(l | 0, O | 0, 33554432, 0) | 0;
 N = fg(M | 0, U() | 0, 26) | 0;
 N = $f(p | 0, n | 0, N | 0, U() | 0) | 0;
 U() | 0;
 M = ag(l | 0, O | 0, M & -67108864 | 0, 0) | 0;
 U() | 0;
 O = $f(e | 0, Q | 0, 33554432, 0) | 0;
 l = fg(O | 0, U() | 0, 26) | 0;
 i = $f(l | 0, U() | 0, j | 0, i | 0) | 0;
 P = ag(i | 0, U() | 0, P & -33554432 | 0, 0) | 0;
 U() | 0;
 O = ag(e | 0, Q | 0, O & -67108864 | 0, 0) | 0;
 U() | 0;
 Q = $f(B | 0, S | 0, 33554432, 0) | 0;
 e = fg(Q | 0, U() | 0, 26) | 0;
 L = $f(e | 0, U() | 0, f | 0, L | 0) | 0;
 R = ag(L | 0, U() | 0, R & -33554432 | 0, 0) | 0;
 U() | 0;
 Q = ag(B | 0, S | 0, Q & -67108864 | 0, 0) | 0;
 U() | 0;
 S = $f(y | 0, ca | 0, 33554432, 0) | 0;
 B = fg(S | 0, U() | 0, 26) | 0;
 z = $f(B | 0, U() | 0, A | 0, z | 0) | 0;
 T = ag(z | 0, U() | 0, T & -33554432 | 0, 0) | 0;
 U() | 0;
 S = ag(y | 0, ca | 0, S & -67108864 | 0, 0) | 0;
 U() | 0;
 ca = $f(v | 0, u | 0, 33554432, 0) | 0;
 y = fg(ca | 0, U() | 0, 26) | 0;
 w = $f(y | 0, U() | 0, x | 0, w | 0) | 0;
 t = ag(w | 0, U() | 0, t & -33554432 | 0, 0) | 0;
 U() | 0;
 ca = ag(v | 0, u | 0, ca & -67108864 | 0, 0) | 0;
 U() | 0;
 c[g >> 2] = M;
 c[g + 4 >> 2] = N;
 c[g + 8 >> 2] = O;
 c[g + 12 >> 2] = P;
 c[g + 16 >> 2] = Q;
 c[g + 20 >> 2] = R;
 c[g + 24 >> 2] = S;
 c[g + 28 >> 2] = T;
 c[g + 32 >> 2] = ca;
 c[g + 36 >> 2] = t;
 jc(h, g);
 t = X + 4 | 0;
 ca = c[h + 4 >> 2] | 0;
 T = c[h + 8 >> 2] | 0;
 S = c[h + 12 >> 2] | 0;
 R = c[h + 16 >> 2] | 0;
 Q = c[h + 20 >> 2] | 0;
 P = c[h + 24 >> 2] | 0;
 O = c[h + 28 >> 2] | 0;
 N = c[h + 32 >> 2] | 0;
 M = c[h + 36 >> 2] | 0;
 u = X + 8 | 0;
 v = X + 12 | 0;
 w = X + 16 | 0;
 x = X + 20 | 0;
 y = X + 24 | 0;
 z = X + 28 | 0;
 A = X + 32 | 0;
 B = X + 36 | 0;
 L = (c[h >> 2] | 0) + 1 | 0;
 c[X >> 2] = L;
 c[t >> 2] = ca;
 c[u >> 2] = T;
 c[v >> 2] = S;
 c[w >> 2] = R;
 c[x >> 2] = Q;
 c[y >> 2] = P;
 c[z >> 2] = O;
 c[A >> 2] = N;
 c[B >> 2] = M;
 ic(Y, X);
 ec(Z, 31840, h);
 e = Y + 4 | 0;
 f = Y + 8 | 0;
 i = Y + 12 | 0;
 j = Y + 16 | 0;
 l = Y + 20 | 0;
 n = Y + 24 | 0;
 p = Y + 28 | 0;
 r = Y + 32 | 0;
 s = Y + 36 | 0;
 C = Z + 4 | 0;
 D = Z + 8 | 0;
 E = Z + 12 | 0;
 F = Z + 16 | 0;
 G = Z + 20 | 0;
 H = Z + 24 | 0;
 I = Z + 28 | 0;
 J = Z + 32 | 0;
 K = Z + 36 | 0;
 ma = (c[C >> 2] | 0) + (c[e >> 2] | 0) | 0;
 la = (c[D >> 2] | 0) + (c[f >> 2] | 0) | 0;
 ka = (c[E >> 2] | 0) + (c[i >> 2] | 0) | 0;
 ja = (c[F >> 2] | 0) + (c[j >> 2] | 0) | 0;
 ia = (c[G >> 2] | 0) + (c[l >> 2] | 0) | 0;
 ga = (c[H >> 2] | 0) + (c[n >> 2] | 0) | 0;
 fa = (c[I >> 2] | 0) + (c[p >> 2] | 0) | 0;
 ea = (c[J >> 2] | 0) + (c[r >> 2] | 0) | 0;
 da = (c[K >> 2] | 0) + (c[s >> 2] | 0) | 0;
 c[Y >> 2] = (c[Z >> 2] | 0) + (c[Y >> 2] | 0);
 c[e >> 2] = ma;
 c[f >> 2] = la;
 c[i >> 2] = ka;
 c[j >> 2] = ja;
 c[l >> 2] = ia;
 c[n >> 2] = ga;
 c[p >> 2] = fa;
 c[r >> 2] = ea;
 c[s >> 2] = da;
 rc(b, X, Y);
 ic(Z, b);
 ec(Y, Z, Y);
 ca = ca - (c[e >> 2] | 0) | 0;
 T = T - (c[f >> 2] | 0) | 0;
 S = S - (c[i >> 2] | 0) | 0;
 R = R - (c[j >> 2] | 0) | 0;
 Q = Q - (c[l >> 2] | 0) | 0;
 P = P - (c[n >> 2] | 0) | 0;
 O = O - (c[p >> 2] | 0) | 0;
 N = N - (c[r >> 2] | 0) | 0;
 M = M - (c[s >> 2] | 0) | 0;
 c[Z >> 2] = L - (c[Y >> 2] | 0);
 c[C >> 2] = ca;
 c[D >> 2] = T;
 c[E >> 2] = S;
 c[F >> 2] = R;
 c[G >> 2] = Q;
 c[H >> 2] = P;
 c[I >> 2] = O;
 c[J >> 2] = N;
 c[K >> 2] = M;
 M = c[7973] | 0;
 N = c[7974] | 0;
 O = c[7975] | 0;
 P = c[7976] | 0;
 Q = c[7977] | 0;
 R = c[7978] | 0;
 S = c[7979] | 0;
 T = c[7980] | 0;
 ca = c[7981] | 0;
 c[_ >> 2] = c[7972];
 L = _ + 4 | 0;
 c[L >> 2] = M;
 M = _ + 8 | 0;
 c[M >> 2] = N;
 N = _ + 12 | 0;
 c[N >> 2] = O;
 O = _ + 16 | 0;
 c[O >> 2] = P;
 P = _ + 20 | 0;
 c[P >> 2] = Q;
 Q = _ + 24 | 0;
 c[Q >> 2] = R;
 R = _ + 28 | 0;
 c[R >> 2] = S;
 S = _ + 32 | 0;
 c[S >> 2] = T;
 T = _ + 36 | 0;
 c[T >> 2] = ca;
 sc(Ja, Z);
 ca = Ja + 1 | 0;
 da = Ja + 2 | 0;
 ea = Ja + 3 | 0;
 fa = Ja + 4 | 0;
 ga = Ja + 5 | 0;
 ia = Ja + 6 | 0;
 ja = Ja + 7 | 0;
 ka = Ja + 8 | 0;
 la = Ja + 9 | 0;
 ma = Ja + 10 | 0;
 na = Ja + 11 | 0;
 oa = Ja + 12 | 0;
 pa = Ja + 13 | 0;
 qa = Ja + 14 | 0;
 ra = Ja + 15 | 0;
 sa = Ja + 16 | 0;
 ta = Ja + 17 | 0;
 ua = Ja + 18 | 0;
 va = Ja + 19 | 0;
 wa = Ja + 20 | 0;
 xa = Ja + 21 | 0;
 ya = Ja + 22 | 0;
 za = Ja + 23 | 0;
 Aa = Ja + 24 | 0;
 Ba = Ja + 25 | 0;
 Ca = Ja + 26 | 0;
 Da = Ja + 27 | 0;
 Ea = Ja + 28 | 0;
 Fa = Ja + 29 | 0;
 Ga = Ja + 30 | 0;
 Ha = Ja + 31 | 0;
 do if ((((a[ca >> 0] | a[Ja >> 0] | a[da >> 0] | a[ea >> 0] | a[fa >> 0] | a[ga >> 0] | a[ia >> 0] | a[ja >> 0] | a[ka >> 0] | a[la >> 0] | a[ma >> 0] | a[na >> 0] | a[oa >> 0] | a[pa >> 0] | a[qa >> 0] | a[ra >> 0] | a[sa >> 0] | a[ta >> 0] | a[ua >> 0] | a[va >> 0] | a[wa >> 0] | a[xa >> 0] | a[ya >> 0] | a[za >> 0] | a[Aa >> 0] | a[Ba >> 0] | a[Ca >> 0] | a[Da >> 0] | a[Ea >> 0] | a[Fa >> 0] | a[Ga >> 0] | a[Ha >> 0]) & 255) + -1 | 0) >>> 0 > 4294967039) {
  ec(b, b, 31984);
  $ = 5;
 } else {
  Qa = (c[e >> 2] | 0) + (c[t >> 2] | 0) | 0;
  Pa = (c[f >> 2] | 0) + (c[u >> 2] | 0) | 0;
  Oa = (c[i >> 2] | 0) + (c[v >> 2] | 0) | 0;
  Na = (c[j >> 2] | 0) + (c[w >> 2] | 0) | 0;
  Ma = (c[l >> 2] | 0) + (c[x >> 2] | 0) | 0;
  La = (c[n >> 2] | 0) + (c[y >> 2] | 0) | 0;
  m = (c[p >> 2] | 0) + (c[z >> 2] | 0) | 0;
  o = (c[r >> 2] | 0) + (c[A >> 2] | 0) | 0;
  q = (c[s >> 2] | 0) + (c[B >> 2] | 0) | 0;
  c[Z >> 2] = (c[Y >> 2] | 0) + (c[X >> 2] | 0);
  c[C >> 2] = Qa;
  c[D >> 2] = Pa;
  c[E >> 2] = Oa;
  c[F >> 2] = Na;
  c[G >> 2] = Ma;
  c[H >> 2] = La;
  c[I >> 2] = m;
  c[J >> 2] = o;
  c[K >> 2] = q;
  sc(Ja, Z);
  if ((((a[ca >> 0] | a[Ja >> 0] | a[da >> 0] | a[ea >> 0] | a[fa >> 0] | a[ga >> 0] | a[ia >> 0] | a[ja >> 0] | a[ka >> 0] | a[la >> 0] | a[ma >> 0] | a[na >> 0] | a[oa >> 0] | a[pa >> 0] | a[qa >> 0] | a[ra >> 0] | a[sa >> 0] | a[ta >> 0] | a[ua >> 0] | a[va >> 0] | a[wa >> 0] | a[xa >> 0] | a[ya >> 0] | a[za >> 0] | a[Aa >> 0] | a[Ba >> 0] | a[Ca >> 0] | a[Da >> 0] | a[Ea >> 0] | a[Fa >> 0] | a[Ga >> 0] | a[Ha >> 0]) & 255) + -1 | 0) >>> 0 > 4294967039) {
   ec(b, b, 31936);
   $ = 5;
   break;
  }
  ec(Y, Y, 64);
  q = c[e >> 2] | 0;
  o = c[f >> 2] | 0;
  m = c[i >> 2] | 0;
  j = c[j >> 2] | 0;
  i = c[l >> 2] | 0;
  h = c[n >> 2] | 0;
  g = c[p >> 2] | 0;
  f = c[r >> 2] | 0;
  e = c[s >> 2] | 0;
  p = (c[t >> 2] | 0) - q | 0;
  r = (c[u >> 2] | 0) - o | 0;
  s = (c[v >> 2] | 0) - m | 0;
  La = (c[w >> 2] | 0) - j | 0;
  Ma = (c[x >> 2] | 0) - i | 0;
  Na = (c[y >> 2] | 0) - h | 0;
  Oa = (c[z >> 2] | 0) - g | 0;
  Pa = (c[A >> 2] | 0) - f | 0;
  Qa = (c[B >> 2] | 0) - e | 0;
  c[Z >> 2] = (c[X >> 2] | 0) - (c[Y >> 2] | 0);
  c[C >> 2] = p;
  c[D >> 2] = r;
  c[E >> 2] = s;
  c[F >> 2] = La;
  c[G >> 2] = Ma;
  c[H >> 2] = Na;
  c[I >> 2] = Oa;
  c[J >> 2] = Pa;
  c[K >> 2] = Qa;
  sc(Ja, Z);
  if ((((a[ca >> 0] | a[Ja >> 0] | a[da >> 0] | a[ea >> 0] | a[fa >> 0] | a[ga >> 0] | a[ia >> 0] | a[ja >> 0] | a[ka >> 0] | a[la >> 0] | a[ma >> 0] | a[na >> 0] | a[oa >> 0] | a[pa >> 0] | a[qa >> 0] | a[ra >> 0] | a[sa >> 0] | a[ta >> 0] | a[ua >> 0] | a[va >> 0] | a[wa >> 0] | a[xa >> 0] | a[ya >> 0] | a[za >> 0] | a[Aa >> 0] | a[Ba >> 0] | a[Ca >> 0] | a[Da >> 0] | a[Ea >> 0] | a[Fa >> 0] | a[Ga >> 0] | a[Ha >> 0]) & 255) + -1 | 0) >>> 0 > 4294967039) {
   ec(b, b, 32080);
   V = 1;
   break;
  }
  q = q + (c[t >> 2] | 0) | 0;
  r = o + (c[u >> 2] | 0) | 0;
  s = m + (c[v >> 2] | 0) | 0;
  La = j + (c[w >> 2] | 0) | 0;
  Ma = i + (c[x >> 2] | 0) | 0;
  Na = h + (c[y >> 2] | 0) | 0;
  Oa = g + (c[z >> 2] | 0) | 0;
  Pa = f + (c[A >> 2] | 0) | 0;
  Qa = e + (c[B >> 2] | 0) | 0;
  c[Z >> 2] = (c[Y >> 2] | 0) + (c[X >> 2] | 0);
  c[C >> 2] = q;
  c[D >> 2] = r;
  c[E >> 2] = s;
  c[F >> 2] = La;
  c[G >> 2] = Ma;
  c[H >> 2] = Na;
  c[I >> 2] = Oa;
  c[J >> 2] = Pa;
  c[K >> 2] = Qa;
  sc(Ja, Z);
  if ((((a[ca >> 0] | a[Ja >> 0] | a[da >> 0] | a[ea >> 0] | a[fa >> 0] | a[ga >> 0] | a[ia >> 0] | a[ja >> 0] | a[ka >> 0] | a[la >> 0] | a[ma >> 0] | a[na >> 0] | a[oa >> 0] | a[pa >> 0] | a[qa >> 0] | a[ra >> 0] | a[sa >> 0] | a[ta >> 0] | a[ua >> 0] | a[va >> 0] | a[wa >> 0] | a[xa >> 0] | a[ya >> 0] | a[za >> 0] | a[Aa >> 0] | a[Ba >> 0] | a[Ca >> 0] | a[Da >> 0] | a[Ea >> 0] | a[Fa >> 0] | a[Ga >> 0] | a[Ha >> 0]) & 255) + -1 | 0) >>> 0 > 4294967039) {
   ec(b, b, 32032);
   V = 1;
   break;
  } else ha(36561, 36533, 2659, 36597);
 } while (0);
 if (($ | 0) == 5) {
  ec(b, b, g);
  ec(_, _, h);
  V = 0;
 }
 sc(Ja, b);
 do if ((V | 0) != (a[Ja >> 0] & 1 | 0)) {
  sc(Ja, b);
  if ((((a[ca >> 0] | a[Ja >> 0] | a[da >> 0] | a[ea >> 0] | a[fa >> 0] | a[ga >> 0] | a[ia >> 0] | a[ja >> 0] | a[ka >> 0] | a[la >> 0] | a[ma >> 0] | a[na >> 0] | a[oa >> 0] | a[pa >> 0] | a[qa >> 0] | a[ra >> 0] | a[sa >> 0] | a[ta >> 0] | a[ua >> 0] | a[va >> 0] | a[wa >> 0] | a[xa >> 0] | a[ya >> 0] | a[za >> 0] | a[Aa >> 0] | a[Ba >> 0] | a[Ca >> 0] | a[Da >> 0] | a[Ea >> 0] | a[Fa >> 0] | a[Ga >> 0] | a[Ha >> 0]) & 255) + -1 | 0) >>> 0 > 4294967039) ha(36625, 36533, 2669, 36597); else {
   E = b + 4 | 0;
   G = b + 8 | 0;
   I = b + 12 | 0;
   K = b + 16 | 0;
   Y = b + 20 | 0;
   $ = b + 24 | 0;
   Ma = b + 28 | 0;
   Oa = b + 32 | 0;
   Qa = b + 36 | 0;
   D = 0 - (c[E >> 2] | 0) | 0;
   F = 0 - (c[G >> 2] | 0) | 0;
   H = 0 - (c[I >> 2] | 0) | 0;
   J = 0 - (c[K >> 2] | 0) | 0;
   V = 0 - (c[Y >> 2] | 0) | 0;
   Z = 0 - (c[$ >> 2] | 0) | 0;
   La = 0 - (c[Ma >> 2] | 0) | 0;
   Na = 0 - (c[Oa >> 2] | 0) | 0;
   Pa = 0 - (c[Qa >> 2] | 0) | 0;
   c[b >> 2] = 0 - (c[b >> 2] | 0);
   c[E >> 2] = D;
   c[G >> 2] = F;
   c[I >> 2] = H;
   c[K >> 2] = J;
   c[Y >> 2] = V;
   c[$ >> 2] = Z;
   c[Ma >> 2] = La;
   c[Oa >> 2] = Na;
   c[Qa >> 2] = Pa;
   break;
  }
 } while (0);
 i = b + 80 | 0;
 La = c[_ >> 2] | 0;
 Na = c[L >> 2] | 0;
 Pa = c[M >> 2] | 0;
 f = c[N >> 2] | 0;
 g = c[O >> 2] | 0;
 s = c[P >> 2] | 0;
 e = c[Q >> 2] | 0;
 p = c[R >> 2] | 0;
 n = c[S >> 2] | 0;
 l = c[T >> 2] | 0;
 Ma = c[X >> 2] | 0;
 Oa = c[t >> 2] | 0;
 Qa = c[u >> 2] | 0;
 u = c[v >> 2] | 0;
 t = c[w >> 2] | 0;
 r = c[x >> 2] | 0;
 q = c[y >> 2] | 0;
 o = c[z >> 2] | 0;
 m = c[A >> 2] | 0;
 j = c[B >> 2] | 0;
 c[i >> 2] = Ma + La;
 c[b + 84 >> 2] = Oa + Na;
 c[b + 88 >> 2] = Qa + Pa;
 c[b + 92 >> 2] = u + f;
 c[b + 96 >> 2] = t + g;
 c[b + 100 >> 2] = r + s;
 c[b + 104 >> 2] = q + e;
 c[b + 108 >> 2] = o + p;
 c[b + 112 >> 2] = m + n;
 c[b + 116 >> 2] = j + l;
 h = b + 40 | 0;
 c[h >> 2] = La - Ma;
 c[b + 44 >> 2] = Na - Oa;
 c[b + 48 >> 2] = Pa - Qa;
 c[b + 52 >> 2] = f - u;
 c[b + 56 >> 2] = g - t;
 c[b + 60 >> 2] = s - r;
 c[b + 64 >> 2] = e - q;
 c[b + 68 >> 2] = p - o;
 c[b + 72 >> 2] = n - m;
 c[b + 76 >> 2] = l - j;
 ec(b, b, i);
 uc(W, i);
 ec(ba, b, W);
 ec(aa, h, W);
 ic(ba, ba);
 ic(aa, aa);
 ec(Ia, ba, aa);
 ec(Ia, 16, Ia);
 h = Ia + 4 | 0;
 i = Ia + 8 | 0;
 j = Ia + 12 | 0;
 l = Ia + 16 | 0;
 m = Ia + 20 | 0;
 n = Ia + 24 | 0;
 o = Ia + 28 | 0;
 p = Ia + 32 | 0;
 q = Ia + 36 | 0;
 e = ba + 4 | 0;
 r = (c[ba >> 2] | 0) + (c[Ia >> 2] | 0) - (c[aa >> 2] | 0) | 0;
 s = (c[e >> 2] | 0) + (c[h >> 2] | 0) - (c[aa + 4 >> 2] | 0) | 0;
 t = (c[ba + 8 >> 2] | 0) + (c[i >> 2] | 0) - (c[aa + 8 >> 2] | 0) | 0;
 u = (c[ba + 12 >> 2] | 0) + (c[j >> 2] | 0) - (c[aa + 12 >> 2] | 0) | 0;
 v = (c[ba + 16 >> 2] | 0) + (c[l >> 2] | 0) - (c[aa + 16 >> 2] | 0) | 0;
 w = (c[ba + 20 >> 2] | 0) + (c[m >> 2] | 0) - (c[aa + 20 >> 2] | 0) | 0;
 x = (c[ba + 24 >> 2] | 0) + (c[n >> 2] | 0) - (c[aa + 24 >> 2] | 0) | 0;
 y = (c[ba + 28 >> 2] | 0) + (c[o >> 2] | 0) - (c[aa + 28 >> 2] | 0) | 0;
 z = (c[ba + 32 >> 2] | 0) + (c[p >> 2] | 0) - (c[aa + 32 >> 2] | 0) | 0;
 g = (c[ba + 36 >> 2] | 0) + (c[q >> 2] | 0) - (c[aa + 36 >> 2] | 0) | 0;
 c[ba >> 2] = 1;
 f = e + 36 | 0;
 do {
  c[e >> 2] = 0;
  e = e + 4 | 0;
 } while ((e | 0) < (f | 0));
 c[Ia >> 2] = r + 1;
 c[h >> 2] = s;
 c[i >> 2] = t;
 c[j >> 2] = u;
 c[l >> 2] = v;
 c[m >> 2] = w;
 c[n >> 2] = x;
 c[o >> 2] = y;
 c[p >> 2] = z;
 c[q >> 2] = g;
 sc(Ja, Ia);
 if ((((a[ca >> 0] | a[Ja >> 0] | a[da >> 0] | a[ea >> 0] | a[fa >> 0] | a[ga >> 0] | a[ia >> 0] | a[ja >> 0] | a[ka >> 0] | a[la >> 0] | a[ma >> 0] | a[na >> 0] | a[oa >> 0] | a[pa >> 0] | a[qa >> 0] | a[ra >> 0] | a[sa >> 0] | a[ta >> 0] | a[ua >> 0] | a[va >> 0] | a[wa >> 0] | a[xa >> 0] | a[ya >> 0] | a[za >> 0] | a[Aa >> 0] | a[Ba >> 0] | a[Ca >> 0] | a[Da >> 0] | a[Ea >> 0] | a[Fa >> 0] | a[Ga >> 0] | a[Ha >> 0]) & 255) + -1 | 0) >>> 0 > 4294967039) {
  k = Ka;
  return;
 } else ha(36644, 36533, 2689, 36597);
}

function ec(a, b, d) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0, ia = 0, ja = 0, ka = 0, la = 0, ma = 0, na = 0, oa = 0, pa = 0, qa = 0, ra = 0, sa = 0, ta = 0, ua = 0, va = 0, wa = 0, xa = 0, ya = 0, za = 0, Aa = 0, Ba = 0, Ca = 0, Da = 0, Ea = 0, Fa = 0, Ga = 0, Ha = 0, Ia = 0, Ja = 0, Ka = 0, La = 0, Ma = 0, Na = 0, Oa = 0, Pa = 0, Qa = 0, Ra = 0, Sa = 0, Ta = 0, Ua = 0, Va = 0, Wa = 0, Xa = 0, Ya = 0, Za = 0, _a = 0, $a = 0, ab = 0, bb = 0, cb = 0, db = 0, eb = 0, fb = 0, gb = 0, hb = 0, ib = 0, jb = 0, kb = 0, lb = 0, mb = 0, nb = 0, ob = 0, pb = 0, qb = 0, rb = 0, sb = 0, tb = 0, ub = 0, vb = 0, wb = 0, xb = 0, yb = 0, zb = 0, Ab = 0, Bb = 0, Cb = 0, Db = 0, Eb = 0, Fb = 0, Gb = 0, Hb = 0, Ib = 0, Jb = 0, Kb = 0, Lb = 0, Mb = 0, Nb = 0, Ob = 0, Pb = 0, Qb = 0, Rb = 0, Sb = 0, Tb = 0, Ub = 0, Vb = 0, Wb = 0, Xb = 0, Yb = 0, Zb = 0, _b = 0, $b = 0, ac = 0, bc = 0, cc = 0, dc = 0, ec = 0, fc = 0, gc = 0, hc = 0, ic = 0, jc = 0, kc = 0, lc = 0, mc = 0, nc = 0, oc = 0, pc = 0, qc = 0, rc = 0, sc = 0, tc = 0, uc = 0, vc = 0, wc = 0, xc = 0, yc = 0, zc = 0, Ac = 0, Bc = 0, Cc = 0, Dc = 0, Ec = 0, Fc = 0, Gc = 0, Hc = 0, Ic = 0, Jc = 0, Kc = 0, Lc = 0, Mc = 0, Nc = 0, Oc = 0, Pc = 0, Qc = 0, Rc = 0, Sc = 0;
 r = c[b >> 2] | 0;
 t = c[b + 4 >> 2] | 0;
 k = c[b + 8 >> 2] | 0;
 Tb = c[b + 12 >> 2] | 0;
 g = c[b + 16 >> 2] | 0;
 Aa = c[b + 20 >> 2] | 0;
 h = c[b + 24 >> 2] | 0;
 Bb = c[b + 28 >> 2] | 0;
 fa = c[b + 32 >> 2] | 0;
 ha = c[b + 36 >> 2] | 0;
 H = c[d >> 2] | 0;
 J = c[d + 4 >> 2] | 0;
 F = c[d + 8 >> 2] | 0;
 D = c[d + 12 >> 2] | 0;
 B = c[d + 16 >> 2] | 0;
 z = c[d + 20 >> 2] | 0;
 x = c[d + 24 >> 2] | 0;
 v = c[d + 28 >> 2] | 0;
 j = c[d + 32 >> 2] | 0;
 u = c[d + 36 >> 2] | 0;
 Oc = J * 19 | 0;
 dc = F * 19 | 0;
 sb = D * 19 | 0;
 Ia = B * 19 | 0;
 jc = z * 19 | 0;
 Fb = x * 19 | 0;
 Ua = v * 19 | 0;
 Sc = j * 19 | 0;
 Qc = u * 19 | 0;
 b = t << 1;
 i = Tb << 1;
 f = Aa << 1;
 e = Bb << 1;
 M = ha << 1;
 s = ((r | 0) < 0) << 31 >> 31;
 I = ((H | 0) < 0) << 31 >> 31;
 Mc = _f(H | 0, I | 0, r | 0, s | 0) | 0;
 Lc = U() | 0;
 K = ((J | 0) < 0) << 31 >> 31;
 wc = _f(J | 0, K | 0, r | 0, s | 0) | 0;
 vc = U() | 0;
 G = ((F | 0) < 0) << 31 >> 31;
 vb = _f(F | 0, G | 0, r | 0, s | 0) | 0;
 ub = U() | 0;
 E = ((D | 0) < 0) << 31 >> 31;
 La = _f(D | 0, E | 0, r | 0, s | 0) | 0;
 Ka = U() | 0;
 C = ((B | 0) < 0) << 31 >> 31;
 mc = _f(B | 0, C | 0, r | 0, s | 0) | 0;
 lc = U() | 0;
 A = ((z | 0) < 0) << 31 >> 31;
 Ib = _f(z | 0, A | 0, r | 0, s | 0) | 0;
 Hb = U() | 0;
 y = ((x | 0) < 0) << 31 >> 31;
 Xa = _f(x | 0, y | 0, r | 0, s | 0) | 0;
 Wa = U() | 0;
 w = ((v | 0) < 0) << 31 >> 31;
 ka = _f(v | 0, w | 0, r | 0, s | 0) | 0;
 ja = U() | 0;
 Pc = ((j | 0) < 0) << 31 >> 31;
 P = _f(j | 0, Pc | 0, r | 0, s | 0) | 0;
 O = U() | 0;
 s = _f(u | 0, ((u | 0) < 0) << 31 >> 31 | 0, r | 0, s | 0) | 0;
 r = U() | 0;
 u = ((t | 0) < 0) << 31 >> 31;
 fc = _f(H | 0, I | 0, t | 0, u | 0) | 0;
 gc = U() | 0;
 l = ((b | 0) < 0) << 31 >> 31;
 zb = _f(J | 0, K | 0, b | 0, l | 0) | 0;
 yb = U() | 0;
 Na = _f(F | 0, G | 0, t | 0, u | 0) | 0;
 Ma = U() | 0;
 oc = _f(D | 0, E | 0, b | 0, l | 0) | 0;
 nc = U() | 0;
 Kb = _f(B | 0, C | 0, t | 0, u | 0) | 0;
 Jb = U() | 0;
 Za = _f(z | 0, A | 0, b | 0, l | 0) | 0;
 Ya = U() | 0;
 ma = _f(x | 0, y | 0, t | 0, u | 0) | 0;
 la = U() | 0;
 R = _f(v | 0, w | 0, b | 0, l | 0) | 0;
 Q = U() | 0;
 u = _f(j | 0, Pc | 0, t | 0, u | 0) | 0;
 t = U() | 0;
 Pc = ((Qc | 0) < 0) << 31 >> 31;
 l = _f(Qc | 0, Pc | 0, b | 0, l | 0) | 0;
 b = U() | 0;
 j = ((k | 0) < 0) << 31 >> 31;
 xb = _f(H | 0, I | 0, k | 0, j | 0) | 0;
 wb = U() | 0;
 Ra = _f(J | 0, K | 0, k | 0, j | 0) | 0;
 Qa = U() | 0;
 qc = _f(F | 0, G | 0, k | 0, j | 0) | 0;
 pc = U() | 0;
 Mb = _f(D | 0, E | 0, k | 0, j | 0) | 0;
 Lb = U() | 0;
 $a = _f(B | 0, C | 0, k | 0, j | 0) | 0;
 _a = U() | 0;
 oa = _f(z | 0, A | 0, k | 0, j | 0) | 0;
 na = U() | 0;
 T = _f(x | 0, y | 0, k | 0, j | 0) | 0;
 S = U() | 0;
 w = _f(v | 0, w | 0, k | 0, j | 0) | 0;
 v = U() | 0;
 Rc = ((Sc | 0) < 0) << 31 >> 31;
 yc = _f(Sc | 0, Rc | 0, k | 0, j | 0) | 0;
 xc = U() | 0;
 j = _f(Qc | 0, Pc | 0, k | 0, j | 0) | 0;
 k = U() | 0;
 Ub = ((Tb | 0) < 0) << 31 >> 31;
 Pa = _f(H | 0, I | 0, Tb | 0, Ub | 0) | 0;
 Oa = U() | 0;
 q = ((i | 0) < 0) << 31 >> 31;
 uc = _f(J | 0, K | 0, i | 0, q | 0) | 0;
 tc = U() | 0;
 Ob = _f(F | 0, G | 0, Tb | 0, Ub | 0) | 0;
 Nb = U() | 0;
 bb = _f(D | 0, E | 0, i | 0, q | 0) | 0;
 ab = U() | 0;
 qa = _f(B | 0, C | 0, Tb | 0, Ub | 0) | 0;
 pa = U() | 0;
 W = _f(z | 0, A | 0, i | 0, q | 0) | 0;
 V = U() | 0;
 y = _f(x | 0, y | 0, Tb | 0, Ub | 0) | 0;
 x = U() | 0;
 Va = ((Ua | 0) < 0) << 31 >> 31;
 Ac = _f(Ua | 0, Va | 0, i | 0, q | 0) | 0;
 zc = U() | 0;
 Ub = _f(Sc | 0, Rc | 0, Tb | 0, Ub | 0) | 0;
 Tb = U() | 0;
 q = _f(Qc | 0, Pc | 0, i | 0, q | 0) | 0;
 i = U() | 0;
 za = ((g | 0) < 0) << 31 >> 31;
 sc = _f(H | 0, I | 0, g | 0, za | 0) | 0;
 rc = U() | 0;
 Sb = _f(J | 0, K | 0, g | 0, za | 0) | 0;
 Rb = U() | 0;
 db = _f(F | 0, G | 0, g | 0, za | 0) | 0;
 cb = U() | 0;
 sa = _f(D | 0, E | 0, g | 0, za | 0) | 0;
 ra = U() | 0;
 Y = _f(B | 0, C | 0, g | 0, za | 0) | 0;
 X = U() | 0;
 A = _f(z | 0, A | 0, g | 0, za | 0) | 0;
 z = U() | 0;
 Gb = ((Fb | 0) < 0) << 31 >> 31;
 Cc = _f(Fb | 0, Gb | 0, g | 0, za | 0) | 0;
 Bc = U() | 0;
 Wb = _f(Ua | 0, Va | 0, g | 0, za | 0) | 0;
 Vb = U() | 0;
 jb = _f(Sc | 0, Rc | 0, g | 0, za | 0) | 0;
 ib = U() | 0;
 za = _f(Qc | 0, Pc | 0, g | 0, za | 0) | 0;
 g = U() | 0;
 Ba = ((Aa | 0) < 0) << 31 >> 31;
 Qb = _f(H | 0, I | 0, Aa | 0, Ba | 0) | 0;
 Pb = U() | 0;
 p = ((f | 0) < 0) << 31 >> 31;
 hb = _f(J | 0, K | 0, f | 0, p | 0) | 0;
 gb = U() | 0;
 ua = _f(F | 0, G | 0, Aa | 0, Ba | 0) | 0;
 ta = U() | 0;
 _ = _f(D | 0, E | 0, f | 0, p | 0) | 0;
 Z = U() | 0;
 C = _f(B | 0, C | 0, Aa | 0, Ba | 0) | 0;
 B = U() | 0;
 kc = ((jc | 0) < 0) << 31 >> 31;
 Ec = _f(jc | 0, kc | 0, f | 0, p | 0) | 0;
 Dc = U() | 0;
 Yb = _f(Fb | 0, Gb | 0, Aa | 0, Ba | 0) | 0;
 Xb = U() | 0;
 lb = _f(Ua | 0, Va | 0, f | 0, p | 0) | 0;
 kb = U() | 0;
 Ba = _f(Sc | 0, Rc | 0, Aa | 0, Ba | 0) | 0;
 Aa = U() | 0;
 p = _f(Qc | 0, Pc | 0, f | 0, p | 0) | 0;
 f = U() | 0;
 Ab = ((h | 0) < 0) << 31 >> 31;
 fb = _f(H | 0, I | 0, h | 0, Ab | 0) | 0;
 eb = U() | 0;
 ya = _f(J | 0, K | 0, h | 0, Ab | 0) | 0;
 xa = U() | 0;
 aa = _f(F | 0, G | 0, h | 0, Ab | 0) | 0;
 $ = U() | 0;
 E = _f(D | 0, E | 0, h | 0, Ab | 0) | 0;
 D = U() | 0;
 Ja = ((Ia | 0) < 0) << 31 >> 31;
 Gc = _f(Ia | 0, Ja | 0, h | 0, Ab | 0) | 0;
 Fc = U() | 0;
 _b = _f(jc | 0, kc | 0, h | 0, Ab | 0) | 0;
 Zb = U() | 0;
 nb = _f(Fb | 0, Gb | 0, h | 0, Ab | 0) | 0;
 mb = U() | 0;
 Da = _f(Ua | 0, Va | 0, h | 0, Ab | 0) | 0;
 Ca = U() | 0;
 m = _f(Sc | 0, Rc | 0, h | 0, Ab | 0) | 0;
 n = U() | 0;
 Ab = _f(Qc | 0, Pc | 0, h | 0, Ab | 0) | 0;
 h = U() | 0;
 Cb = ((Bb | 0) < 0) << 31 >> 31;
 wa = _f(H | 0, I | 0, Bb | 0, Cb | 0) | 0;
 va = U() | 0;
 d = ((e | 0) < 0) << 31 >> 31;
 ea = _f(J | 0, K | 0, e | 0, d | 0) | 0;
 da = U() | 0;
 G = _f(F | 0, G | 0, Bb | 0, Cb | 0) | 0;
 F = U() | 0;
 tb = ((sb | 0) < 0) << 31 >> 31;
 Ic = _f(sb | 0, tb | 0, e | 0, d | 0) | 0;
 Hc = U() | 0;
 ac = _f(Ia | 0, Ja | 0, Bb | 0, Cb | 0) | 0;
 $b = U() | 0;
 pb = _f(jc | 0, kc | 0, e | 0, d | 0) | 0;
 ob = U() | 0;
 Fa = _f(Fb | 0, Gb | 0, Bb | 0, Cb | 0) | 0;
 Ea = U() | 0;
 L = _f(Ua | 0, Va | 0, e | 0, d | 0) | 0;
 o = U() | 0;
 Cb = _f(Sc | 0, Rc | 0, Bb | 0, Cb | 0) | 0;
 Bb = U() | 0;
 d = _f(Qc | 0, Pc | 0, e | 0, d | 0) | 0;
 e = U() | 0;
 ga = ((fa | 0) < 0) << 31 >> 31;
 ca = _f(H | 0, I | 0, fa | 0, ga | 0) | 0;
 ba = U() | 0;
 K = _f(J | 0, K | 0, fa | 0, ga | 0) | 0;
 J = U() | 0;
 ec = ((dc | 0) < 0) << 31 >> 31;
 Kc = _f(dc | 0, ec | 0, fa | 0, ga | 0) | 0;
 Jc = U() | 0;
 cc = _f(sb | 0, tb | 0, fa | 0, ga | 0) | 0;
 bc = U() | 0;
 rb = _f(Ia | 0, Ja | 0, fa | 0, ga | 0) | 0;
 qb = U() | 0;
 Ha = _f(jc | 0, kc | 0, fa | 0, ga | 0) | 0;
 Ga = U() | 0;
 ic = _f(Fb | 0, Gb | 0, fa | 0, ga | 0) | 0;
 hc = U() | 0;
 Eb = _f(Ua | 0, Va | 0, fa | 0, ga | 0) | 0;
 Db = U() | 0;
 Ta = _f(Sc | 0, Rc | 0, fa | 0, ga | 0) | 0;
 Sa = U() | 0;
 ga = _f(Qc | 0, Pc | 0, fa | 0, ga | 0) | 0;
 fa = U() | 0;
 ia = ((ha | 0) < 0) << 31 >> 31;
 I = _f(H | 0, I | 0, ha | 0, ia | 0) | 0;
 H = U() | 0;
 N = ((M | 0) < 0) << 31 >> 31;
 Oc = _f(Oc | 0, ((Oc | 0) < 0) << 31 >> 31 | 0, M | 0, N | 0) | 0;
 Nc = U() | 0;
 ec = _f(dc | 0, ec | 0, ha | 0, ia | 0) | 0;
 dc = U() | 0;
 tb = _f(sb | 0, tb | 0, M | 0, N | 0) | 0;
 sb = U() | 0;
 Ja = _f(Ia | 0, Ja | 0, ha | 0, ia | 0) | 0;
 Ia = U() | 0;
 kc = _f(jc | 0, kc | 0, M | 0, N | 0) | 0;
 jc = U() | 0;
 Gb = _f(Fb | 0, Gb | 0, ha | 0, ia | 0) | 0;
 Fb = U() | 0;
 Va = _f(Ua | 0, Va | 0, M | 0, N | 0) | 0;
 Ua = U() | 0;
 ia = _f(Sc | 0, Rc | 0, ha | 0, ia | 0) | 0;
 ha = U() | 0;
 N = _f(Qc | 0, Pc | 0, M | 0, N | 0) | 0;
 M = U() | 0;
 Lc = $f(Oc | 0, Nc | 0, Mc | 0, Lc | 0) | 0;
 Jc = $f(Lc | 0, U() | 0, Kc | 0, Jc | 0) | 0;
 Hc = $f(Jc | 0, U() | 0, Ic | 0, Hc | 0) | 0;
 Fc = $f(Hc | 0, U() | 0, Gc | 0, Fc | 0) | 0;
 Dc = $f(Fc | 0, U() | 0, Ec | 0, Dc | 0) | 0;
 Bc = $f(Dc | 0, U() | 0, Cc | 0, Bc | 0) | 0;
 zc = $f(Bc | 0, U() | 0, Ac | 0, zc | 0) | 0;
 xc = $f(zc | 0, U() | 0, yc | 0, xc | 0) | 0;
 b = $f(xc | 0, U() | 0, l | 0, b | 0) | 0;
 l = U() | 0;
 gc = $f(wc | 0, vc | 0, fc | 0, gc | 0) | 0;
 fc = U() | 0;
 rc = $f(uc | 0, tc | 0, sc | 0, rc | 0) | 0;
 pc = $f(rc | 0, U() | 0, qc | 0, pc | 0) | 0;
 nc = $f(pc | 0, U() | 0, oc | 0, nc | 0) | 0;
 lc = $f(nc | 0, U() | 0, mc | 0, lc | 0) | 0;
 jc = $f(lc | 0, U() | 0, kc | 0, jc | 0) | 0;
 hc = $f(jc | 0, U() | 0, ic | 0, hc | 0) | 0;
 o = $f(hc | 0, U() | 0, L | 0, o | 0) | 0;
 n = $f(o | 0, U() | 0, m | 0, n | 0) | 0;
 f = $f(n | 0, U() | 0, p | 0, f | 0) | 0;
 p = U() | 0;
 n = $f(b | 0, l | 0, 33554432, 0) | 0;
 m = U() | 0;
 o = eg(n | 0, m | 0, 26) | 0;
 L = U() | 0;
 dc = $f(gc | 0, fc | 0, ec | 0, dc | 0) | 0;
 bc = $f(dc | 0, U() | 0, cc | 0, bc | 0) | 0;
 $b = $f(bc | 0, U() | 0, ac | 0, $b | 0) | 0;
 Zb = $f($b | 0, U() | 0, _b | 0, Zb | 0) | 0;
 Xb = $f(Zb | 0, U() | 0, Yb | 0, Xb | 0) | 0;
 Vb = $f(Xb | 0, U() | 0, Wb | 0, Vb | 0) | 0;
 Tb = $f(Vb | 0, U() | 0, Ub | 0, Tb | 0) | 0;
 k = $f(Tb | 0, U() | 0, j | 0, k | 0) | 0;
 L = $f(k | 0, U() | 0, o | 0, L | 0) | 0;
 o = U() | 0;
 m = ag(b | 0, l | 0, n & -67108864 | 0, m | 0) | 0;
 n = U() | 0;
 l = $f(f | 0, p | 0, 33554432, 0) | 0;
 b = U() | 0;
 k = eg(l | 0, b | 0, 26) | 0;
 j = U() | 0;
 Pb = $f(Sb | 0, Rb | 0, Qb | 0, Pb | 0) | 0;
 Nb = $f(Pb | 0, U() | 0, Ob | 0, Nb | 0) | 0;
 Lb = $f(Nb | 0, U() | 0, Mb | 0, Lb | 0) | 0;
 Jb = $f(Lb | 0, U() | 0, Kb | 0, Jb | 0) | 0;
 Hb = $f(Jb | 0, U() | 0, Ib | 0, Hb | 0) | 0;
 Fb = $f(Hb | 0, U() | 0, Gb | 0, Fb | 0) | 0;
 Db = $f(Fb | 0, U() | 0, Eb | 0, Db | 0) | 0;
 Bb = $f(Db | 0, U() | 0, Cb | 0, Bb | 0) | 0;
 h = $f(Bb | 0, U() | 0, Ab | 0, h | 0) | 0;
 j = $f(h | 0, U() | 0, k | 0, j | 0) | 0;
 k = U() | 0;
 b = ag(f | 0, p | 0, l & -67108864 | 0, b | 0) | 0;
 l = U() | 0;
 p = $f(L | 0, o | 0, 16777216, 0) | 0;
 f = eg(p | 0, U() | 0, 25) | 0;
 h = U() | 0;
 wb = $f(zb | 0, yb | 0, xb | 0, wb | 0) | 0;
 ub = $f(wb | 0, U() | 0, vb | 0, ub | 0) | 0;
 sb = $f(ub | 0, U() | 0, tb | 0, sb | 0) | 0;
 qb = $f(sb | 0, U() | 0, rb | 0, qb | 0) | 0;
 ob = $f(qb | 0, U() | 0, pb | 0, ob | 0) | 0;
 mb = $f(ob | 0, U() | 0, nb | 0, mb | 0) | 0;
 kb = $f(mb | 0, U() | 0, lb | 0, kb | 0) | 0;
 ib = $f(kb | 0, U() | 0, jb | 0, ib | 0) | 0;
 i = $f(ib | 0, U() | 0, q | 0, i | 0) | 0;
 h = $f(i | 0, U() | 0, f | 0, h | 0) | 0;
 f = U() | 0;
 p = ag(L | 0, o | 0, p & -33554432 | 0, 0) | 0;
 o = U() | 0;
 L = $f(j | 0, k | 0, 16777216, 0) | 0;
 i = eg(L | 0, U() | 0, 25) | 0;
 q = U() | 0;
 eb = $f(hb | 0, gb | 0, fb | 0, eb | 0) | 0;
 cb = $f(eb | 0, U() | 0, db | 0, cb | 0) | 0;
 ab = $f(cb | 0, U() | 0, bb | 0, ab | 0) | 0;
 _a = $f(ab | 0, U() | 0, $a | 0, _a | 0) | 0;
 Ya = $f(_a | 0, U() | 0, Za | 0, Ya | 0) | 0;
 Wa = $f(Ya | 0, U() | 0, Xa | 0, Wa | 0) | 0;
 Ua = $f(Wa | 0, U() | 0, Va | 0, Ua | 0) | 0;
 Sa = $f(Ua | 0, U() | 0, Ta | 0, Sa | 0) | 0;
 e = $f(Sa | 0, U() | 0, d | 0, e | 0) | 0;
 q = $f(e | 0, U() | 0, i | 0, q | 0) | 0;
 i = U() | 0;
 L = ag(j | 0, k | 0, L & -33554432 | 0, 0) | 0;
 k = U() | 0;
 j = $f(h | 0, f | 0, 33554432, 0) | 0;
 e = eg(j | 0, U() | 0, 26) | 0;
 d = U() | 0;
 Oa = $f(Ra | 0, Qa | 0, Pa | 0, Oa | 0) | 0;
 Ma = $f(Oa | 0, U() | 0, Na | 0, Ma | 0) | 0;
 Ka = $f(Ma | 0, U() | 0, La | 0, Ka | 0) | 0;
 Ia = $f(Ka | 0, U() | 0, Ja | 0, Ia | 0) | 0;
 Ga = $f(Ia | 0, U() | 0, Ha | 0, Ga | 0) | 0;
 Ea = $f(Ga | 0, U() | 0, Fa | 0, Ea | 0) | 0;
 Ca = $f(Ea | 0, U() | 0, Da | 0, Ca | 0) | 0;
 Aa = $f(Ca | 0, U() | 0, Ba | 0, Aa | 0) | 0;
 g = $f(Aa | 0, U() | 0, za | 0, g | 0) | 0;
 d = $f(g | 0, U() | 0, e | 0, d | 0) | 0;
 e = U() | 0;
 j = ag(h | 0, f | 0, j & -67108864 | 0, 0) | 0;
 U() | 0;
 f = $f(q | 0, i | 0, 33554432, 0) | 0;
 h = eg(f | 0, U() | 0, 26) | 0;
 g = U() | 0;
 va = $f(ya | 0, xa | 0, wa | 0, va | 0) | 0;
 ta = $f(va | 0, U() | 0, ua | 0, ta | 0) | 0;
 ra = $f(ta | 0, U() | 0, sa | 0, ra | 0) | 0;
 pa = $f(ra | 0, U() | 0, qa | 0, pa | 0) | 0;
 na = $f(pa | 0, U() | 0, oa | 0, na | 0) | 0;
 la = $f(na | 0, U() | 0, ma | 0, la | 0) | 0;
 ja = $f(la | 0, U() | 0, ka | 0, ja | 0) | 0;
 ha = $f(ja | 0, U() | 0, ia | 0, ha | 0) | 0;
 fa = $f(ha | 0, U() | 0, ga | 0, fa | 0) | 0;
 g = $f(fa | 0, U() | 0, h | 0, g | 0) | 0;
 h = U() | 0;
 f = ag(q | 0, i | 0, f & -67108864 | 0, 0) | 0;
 U() | 0;
 i = $f(d | 0, e | 0, 16777216, 0) | 0;
 q = eg(i | 0, U() | 0, 25) | 0;
 l = $f(q | 0, U() | 0, b | 0, l | 0) | 0;
 b = U() | 0;
 i = ag(d | 0, e | 0, i & -33554432 | 0, 0) | 0;
 U() | 0;
 e = $f(g | 0, h | 0, 16777216, 0) | 0;
 d = eg(e | 0, U() | 0, 25) | 0;
 q = U() | 0;
 ba = $f(ea | 0, da | 0, ca | 0, ba | 0) | 0;
 $ = $f(ba | 0, U() | 0, aa | 0, $ | 0) | 0;
 Z = $f($ | 0, U() | 0, _ | 0, Z | 0) | 0;
 X = $f(Z | 0, U() | 0, Y | 0, X | 0) | 0;
 V = $f(X | 0, U() | 0, W | 0, V | 0) | 0;
 S = $f(V | 0, U() | 0, T | 0, S | 0) | 0;
 Q = $f(S | 0, U() | 0, R | 0, Q | 0) | 0;
 O = $f(Q | 0, U() | 0, P | 0, O | 0) | 0;
 M = $f(O | 0, U() | 0, N | 0, M | 0) | 0;
 q = $f(M | 0, U() | 0, d | 0, q | 0) | 0;
 d = U() | 0;
 e = ag(g | 0, h | 0, e & -33554432 | 0, 0) | 0;
 U() | 0;
 h = $f(l | 0, b | 0, 33554432, 0) | 0;
 g = fg(h | 0, U() | 0, 26) | 0;
 g = $f(L | 0, k | 0, g | 0, U() | 0) | 0;
 U() | 0;
 h = ag(l | 0, b | 0, h & -67108864 | 0, 0) | 0;
 U() | 0;
 b = $f(q | 0, d | 0, 33554432, 0) | 0;
 l = eg(b | 0, U() | 0, 26) | 0;
 k = U() | 0;
 H = $f(K | 0, J | 0, I | 0, H | 0) | 0;
 F = $f(H | 0, U() | 0, G | 0, F | 0) | 0;
 D = $f(F | 0, U() | 0, E | 0, D | 0) | 0;
 B = $f(D | 0, U() | 0, C | 0, B | 0) | 0;
 z = $f(B | 0, U() | 0, A | 0, z | 0) | 0;
 x = $f(z | 0, U() | 0, y | 0, x | 0) | 0;
 v = $f(x | 0, U() | 0, w | 0, v | 0) | 0;
 t = $f(v | 0, U() | 0, u | 0, t | 0) | 0;
 r = $f(t | 0, U() | 0, s | 0, r | 0) | 0;
 k = $f(r | 0, U() | 0, l | 0, k | 0) | 0;
 l = U() | 0;
 b = ag(q | 0, d | 0, b & -67108864 | 0, 0) | 0;
 U() | 0;
 d = $f(k | 0, l | 0, 16777216, 0) | 0;
 q = eg(d | 0, U() | 0, 25) | 0;
 q = _f(q | 0, U() | 0, 19, 0) | 0;
 n = $f(q | 0, U() | 0, m | 0, n | 0) | 0;
 m = U() | 0;
 d = ag(k | 0, l | 0, d & -33554432 | 0, 0) | 0;
 U() | 0;
 l = $f(n | 0, m | 0, 33554432, 0) | 0;
 k = fg(l | 0, U() | 0, 26) | 0;
 k = $f(p | 0, o | 0, k | 0, U() | 0) | 0;
 U() | 0;
 l = ag(n | 0, m | 0, l & -67108864 | 0, 0) | 0;
 U() | 0;
 c[a >> 2] = l;
 c[a + 4 >> 2] = k;
 c[a + 8 >> 2] = j;
 c[a + 12 >> 2] = i;
 c[a + 16 >> 2] = h;
 c[a + 20 >> 2] = g;
 c[a + 24 >> 2] = f;
 c[a + 28 >> 2] = e;
 c[a + 32 >> 2] = b;
 c[a + 36 >> 2] = d;
 return;
}

function Hc(b, c, e) {
 b = b | 0;
 c = c | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0;
 W = a[c + 2 >> 0] | 0;
 N = d[c >> 0] | 0;
 i = gg(d[c + 1 >> 0] | 0 | 0, 0, 8) | 0;
 Y = U() | 0;
 W = W & 255;
 O = gg(W | 0, 0, 16) | 0;
 U() | 0;
 R = gg(d[c + 3 >> 0] | 0 | 0, 0, 8) | 0;
 v = U() | 0;
 P = gg(d[c + 4 >> 0] | 0 | 0, 0, 16) | 0;
 v = v | (U() | 0);
 m = d[c + 5 >> 0] | 0;
 u = gg(m | 0, 0, 24) | 0;
 v = fg(R | W | P | u | 0, v | (U() | 0) | 0, 5) | 0;
 U() | 0;
 u = a[c + 7 >> 0] | 0;
 P = gg(d[c + 6 >> 0] | 0 | 0, 0, 8) | 0;
 W = U() | 0;
 u = u & 255;
 R = gg(u | 0, 0, 16) | 0;
 W = fg(P | m | R | 0, W | (U() | 0) | 0, 2) | 0;
 U() | 0;
 R = gg(d[c + 8 >> 0] | 0 | 0, 0, 8) | 0;
 m = U() | 0;
 P = gg(d[c + 9 >> 0] | 0 | 0, 0, 16) | 0;
 m = m | (U() | 0);
 o = d[c + 10 >> 0] | 0;
 w = gg(o | 0, 0, 24) | 0;
 m = fg(R | u | P | w | 0, m | (U() | 0) | 0, 7) | 0;
 U() | 0;
 w = gg(d[c + 11 >> 0] | 0 | 0, 0, 8) | 0;
 P = U() | 0;
 u = gg(d[c + 12 >> 0] | 0 | 0, 0, 16) | 0;
 P = P | (U() | 0);
 R = d[c + 13 >> 0] | 0;
 H = gg(R | 0, 0, 24) | 0;
 P = fg(w | o | u | H | 0, P | (U() | 0) | 0, 4) | 0;
 U() | 0;
 H = a[c + 15 >> 0] | 0;
 u = gg(d[c + 14 >> 0] | 0 | 0, 0, 8) | 0;
 o = U() | 0;
 H = H & 255;
 w = gg(H | 0, 0, 16) | 0;
 o = fg(u | R | w | 0, o | (U() | 0) | 0, 1) | 0;
 U() | 0;
 w = gg(d[c + 16 >> 0] | 0 | 0, 0, 8) | 0;
 R = U() | 0;
 u = gg(d[c + 17 >> 0] | 0 | 0, 0, 16) | 0;
 R = R | (U() | 0);
 D = d[c + 18 >> 0] | 0;
 F = gg(D | 0, 0, 24) | 0;
 R = fg(w | H | u | F | 0, R | (U() | 0) | 0, 6) | 0;
 U() | 0;
 F = a[c + 20 >> 0] | 0;
 u = gg(d[c + 19 >> 0] | 0 | 0, 0, 8) | 0;
 H = U() | 0;
 F = gg(F & 255 | 0, 0, 16) | 0;
 H = fg(u | D | F | 0, H | (U() | 0) | 0, 3) | 0;
 F = U() | 0;
 D = a[c + 23 >> 0] | 0;
 u = d[c + 21 >> 0] | 0;
 w = gg(d[c + 22 >> 0] | 0 | 0, 0, 8) | 0;
 g = U() | 0;
 D = D & 255;
 l = gg(D | 0, 0, 16) | 0;
 U() | 0;
 Z = gg(d[c + 24 >> 0] | 0 | 0, 0, 8) | 0;
 K = U() | 0;
 X = gg(d[c + 25 >> 0] | 0 | 0, 0, 16) | 0;
 K = K | (U() | 0);
 C = d[c + 26 >> 0] | 0;
 S = gg(C | 0, 0, 24) | 0;
 K = fg(Z | D | X | S | 0, K | (U() | 0) | 0, 5) | 0;
 U() | 0;
 S = a[c + 28 >> 0] | 0;
 X = gg(d[c + 27 >> 0] | 0 | 0, 0, 8) | 0;
 D = U() | 0;
 S = S & 255;
 Z = gg(S | 0, 0, 16) | 0;
 D = fg(X | C | Z | 0, D | (U() | 0) | 0, 2) | 0;
 U() | 0;
 Z = gg(d[c + 29 >> 0] | 0 | 0, 0, 8) | 0;
 C = U() | 0;
 X = gg(d[c + 30 >> 0] | 0 | 0, 0, 16) | 0;
 C = C | (U() | 0);
 I = gg(d[c + 31 >> 0] | 0 | 0, 0, 24) | 0;
 C = fg(Z | S | X | I | 0, C | (U() | 0) | 0, 7) | 0;
 I = U() | 0;
 X = a[e + 2 >> 0] | 0;
 S = d[e >> 0] | 0;
 Z = gg(d[e + 1 >> 0] | 0 | 0, 0, 8) | 0;
 T = U() | 0;
 X = X & 255;
 V = gg(X | 0, 0, 16) | 0;
 U() | 0;
 f = gg(d[e + 3 >> 0] | 0 | 0, 0, 8) | 0;
 _ = U() | 0;
 Q = gg(d[e + 4 >> 0] | 0 | 0, 0, 16) | 0;
 _ = _ | (U() | 0);
 M = d[e + 5 >> 0] | 0;
 c = gg(M | 0, 0, 24) | 0;
 _ = fg(f | X | Q | c | 0, _ | (U() | 0) | 0, 5) | 0;
 U() | 0;
 c = a[e + 7 >> 0] | 0;
 Q = gg(d[e + 6 >> 0] | 0 | 0, 0, 8) | 0;
 X = U() | 0;
 c = c & 255;
 f = gg(c | 0, 0, 16) | 0;
 X = fg(Q | M | f | 0, X | (U() | 0) | 0, 2) | 0;
 U() | 0;
 f = gg(d[e + 8 >> 0] | 0 | 0, 0, 8) | 0;
 M = U() | 0;
 Q = gg(d[e + 9 >> 0] | 0 | 0, 0, 16) | 0;
 M = M | (U() | 0);
 k = d[e + 10 >> 0] | 0;
 L = gg(k | 0, 0, 24) | 0;
 M = fg(f | c | Q | L | 0, M | (U() | 0) | 0, 7) | 0;
 U() | 0;
 L = gg(d[e + 11 >> 0] | 0 | 0, 0, 8) | 0;
 Q = U() | 0;
 c = gg(d[e + 12 >> 0] | 0 | 0, 0, 16) | 0;
 Q = Q | (U() | 0);
 f = d[e + 13 >> 0] | 0;
 j = gg(f | 0, 0, 24) | 0;
 Q = fg(L | k | c | j | 0, Q | (U() | 0) | 0, 4) | 0;
 U() | 0;
 j = a[e + 15 >> 0] | 0;
 c = gg(d[e + 14 >> 0] | 0 | 0, 0, 8) | 0;
 k = U() | 0;
 j = j & 255;
 L = gg(j | 0, 0, 16) | 0;
 k = fg(c | f | L | 0, k | (U() | 0) | 0, 1) | 0;
 U() | 0;
 L = gg(d[e + 16 >> 0] | 0 | 0, 0, 8) | 0;
 f = U() | 0;
 c = gg(d[e + 17 >> 0] | 0 | 0, 0, 16) | 0;
 f = f | (U() | 0);
 A = d[e + 18 >> 0] | 0;
 t = gg(A | 0, 0, 24) | 0;
 f = fg(L | j | c | t | 0, f | (U() | 0) | 0, 6) | 0;
 U() | 0;
 t = a[e + 20 >> 0] | 0;
 c = gg(d[e + 19 >> 0] | 0 | 0, 0, 8) | 0;
 j = U() | 0;
 t = gg(t & 255 | 0, 0, 16) | 0;
 j = fg(c | A | t | 0, j | (U() | 0) | 0, 3) | 0;
 t = U() | 0;
 A = a[e + 23 >> 0] | 0;
 c = d[e + 21 >> 0] | 0;
 L = gg(d[e + 22 >> 0] | 0 | 0, 0, 8) | 0;
 s = U() | 0;
 A = A & 255;
 r = gg(A | 0, 0, 16) | 0;
 U() | 0;
 n = gg(d[e + 24 >> 0] | 0 | 0, 0, 8) | 0;
 G = U() | 0;
 h = gg(d[e + 25 >> 0] | 0 | 0, 0, 16) | 0;
 G = G | (U() | 0);
 E = d[e + 26 >> 0] | 0;
 p = gg(E | 0, 0, 24) | 0;
 G = fg(n | A | h | p | 0, G | (U() | 0) | 0, 5) | 0;
 U() | 0;
 p = a[e + 28 >> 0] | 0;
 h = gg(d[e + 27 >> 0] | 0 | 0, 0, 8) | 0;
 A = U() | 0;
 p = p & 255;
 n = gg(p | 0, 0, 16) | 0;
 A = fg(h | E | n | 0, A | (U() | 0) | 0, 2) | 0;
 U() | 0;
 n = gg(d[e + 29 >> 0] | 0 | 0, 0, 8) | 0;
 E = U() | 0;
 h = gg(d[e + 30 >> 0] | 0 | 0, 0, 16) | 0;
 E = E | (U() | 0);
 B = gg(d[e + 31 >> 0] | 0 | 0, 0, 24) | 0;
 E = fg(n | p | h | B | 0, E | (U() | 0) | 0, 7) | 0;
 B = U() | 0;
 T = ag(i | N | O & 2031616 | 0, Y | 0, Z | S | V & 2031616 | 0, T | 0) | 0;
 V = U() | 0;
 _ = ag(v & 2097151 | 0, 0, _ & 2097151 | 0, 0) | 0;
 v = U() | 0;
 X = ag(W & 2097151 | 0, 0, X & 2097151 | 0, 0) | 0;
 W = U() | 0;
 M = ag(m & 2097151 | 0, 0, M & 2097151 | 0, 0) | 0;
 m = U() | 0;
 Q = ag(P & 2097151 | 0, 0, Q & 2097151 | 0, 0) | 0;
 P = U() | 0;
 k = ag(o & 2097151 | 0, 0, k & 2097151 | 0, 0) | 0;
 o = U() | 0;
 f = ag(R & 2097151 | 0, 0, f & 2097151 | 0, 0) | 0;
 e = U() | 0;
 t = ag(H | 0, F | 0, j | 0, t | 0) | 0;
 j = U() | 0;
 s = ag(w | u | l & 2031616 | 0, g | 0, L | c | r & 2031616 | 0, s | 0) | 0;
 r = U() | 0;
 G = ag(K & 2097151 | 0, 0, G & 2097151 | 0, 0) | 0;
 c = U() | 0;
 A = ag(D & 2097151 | 0, 0, A & 2097151 | 0, 0) | 0;
 D = U() | 0;
 B = ag(C | 0, I | 0, E | 0, B | 0) | 0;
 E = U() | 0;
 I = $f(T | 0, V | 0, 1048576, 0) | 0;
 C = U() | 0;
 K = eg(I | 0, C | 0, 21) | 0;
 K = $f(_ | 0, v | 0, K | 0, U() | 0) | 0;
 v = U() | 0;
 C = ag(T | 0, V | 0, I & -2097152 | 0, C | 0) | 0;
 I = U() | 0;
 V = $f(X | 0, W | 0, 1048576, 0) | 0;
 T = U() | 0;
 _ = eg(V | 0, T | 0, 21) | 0;
 _ = $f(M | 0, m | 0, _ | 0, U() | 0) | 0;
 m = U() | 0;
 M = $f(Q | 0, P | 0, 1048576, 0) | 0;
 L = U() | 0;
 g = eg(M | 0, L | 0, 21) | 0;
 g = $f(k | 0, o | 0, g | 0, U() | 0) | 0;
 o = U() | 0;
 k = $f(f | 0, e | 0, 1048576, 0) | 0;
 l = U() | 0;
 u = eg(k | 0, l | 0, 21) | 0;
 u = $f(t | 0, j | 0, u | 0, U() | 0) | 0;
 j = U() | 0;
 t = $f(s | 0, r | 0, 1048576, 0) | 0;
 w = U() | 0;
 F = eg(t | 0, w | 0, 21) | 0;
 F = $f(G | 0, c | 0, F | 0, U() | 0) | 0;
 c = U() | 0;
 G = $f(A | 0, D | 0, 1048576, 0) | 0;
 H = U() | 0;
 R = eg(G | 0, H | 0, 21) | 0;
 R = $f(B | 0, E | 0, R | 0, U() | 0) | 0;
 E = U() | 0;
 B = $f(K | 0, v | 0, 1048576, 0) | 0;
 S = U() | 0;
 Z = eg(B | 0, S | 0, 21) | 0;
 Y = U() | 0;
 S = ag(K | 0, v | 0, B & -2097152 | 0, S | 0) | 0;
 B = U() | 0;
 v = $f(_ | 0, m | 0, 1048576, 0) | 0;
 K = U() | 0;
 O = eg(v | 0, K | 0, 21) | 0;
 N = U() | 0;
 K = ag(_ | 0, m | 0, v & -2097152 | 0, K | 0) | 0;
 v = U() | 0;
 m = $f(g | 0, o | 0, 1048576, 0) | 0;
 _ = U() | 0;
 i = eg(m | 0, _ | 0, 21) | 0;
 h = U() | 0;
 _ = ag(g | 0, o | 0, m & -2097152 | 0, _ | 0) | 0;
 m = U() | 0;
 o = $f(u | 0, j | 0, 1048576, 0) | 0;
 g = U() | 0;
 p = eg(o | 0, g | 0, 21) | 0;
 n = U() | 0;
 g = ag(u | 0, j | 0, o & -2097152 | 0, g | 0) | 0;
 o = U() | 0;
 j = $f(F | 0, c | 0, 1048576, 0) | 0;
 u = U() | 0;
 z = eg(j | 0, u | 0, 21) | 0;
 x = U() | 0;
 u = ag(F | 0, c | 0, j & -2097152 | 0, u | 0) | 0;
 j = U() | 0;
 c = $f(R | 0, E | 0, 1048576, 0) | 0;
 F = U() | 0;
 $ = eg(c | 0, F | 0, 21) | 0;
 q = U() | 0;
 F = ag(R | 0, E | 0, c & -2097152 | 0, F | 0) | 0;
 c = U() | 0;
 E = _f($ | 0, q | 0, 666643, 0) | 0;
 I = $f(E | 0, U() | 0, C | 0, I | 0) | 0;
 C = U() | 0;
 E = _f($ | 0, q | 0, 470296, 0) | 0;
 E = $f(S | 0, B | 0, E | 0, U() | 0) | 0;
 B = U() | 0;
 S = _f($ | 0, q | 0, 654183, 0) | 0;
 R = U() | 0;
 y = _f($ | 0, q | 0, -997805, -1) | 0;
 y = $f(K | 0, v | 0, y | 0, U() | 0) | 0;
 v = U() | 0;
 K = _f($ | 0, q | 0, 136657, 0) | 0;
 J = U() | 0;
 q = _f($ | 0, q | 0, -683901, -1) | 0;
 q = $f(_ | 0, m | 0, q | 0, U() | 0) | 0;
 m = U() | 0;
 C = eg(I | 0, C | 0, 21) | 0;
 C = $f(E | 0, B | 0, C | 0, U() | 0) | 0;
 B = eg(C | 0, U() | 0, 21) | 0;
 E = U() | 0;
 W = $f(Z | 0, Y | 0, X | 0, W | 0) | 0;
 T = ag(W | 0, U() | 0, V & -2097152 | 0, T | 0) | 0;
 R = $f(T | 0, U() | 0, S | 0, R | 0) | 0;
 E = $f(R | 0, U() | 0, B | 0, E | 0) | 0;
 B = eg(E | 0, U() | 0, 21) | 0;
 B = $f(y | 0, v | 0, B | 0, U() | 0) | 0;
 v = eg(B | 0, U() | 0, 21) | 0;
 y = U() | 0;
 N = $f(Q | 0, P | 0, O | 0, N | 0) | 0;
 L = ag(N | 0, U() | 0, M & -2097152 | 0, L | 0) | 0;
 J = $f(L | 0, U() | 0, K | 0, J | 0) | 0;
 y = $f(J | 0, U() | 0, v | 0, y | 0) | 0;
 v = eg(y | 0, U() | 0, 21) | 0;
 v = $f(q | 0, m | 0, v | 0, U() | 0) | 0;
 m = eg(v | 0, U() | 0, 21) | 0;
 q = U() | 0;
 h = $f(f | 0, e | 0, i | 0, h | 0) | 0;
 l = ag(h | 0, U() | 0, k & -2097152 | 0, l | 0) | 0;
 q = $f(l | 0, U() | 0, m | 0, q | 0) | 0;
 m = eg(q | 0, U() | 0, 21) | 0;
 o = $f(m | 0, U() | 0, g | 0, o | 0) | 0;
 g = eg(o | 0, U() | 0, 21) | 0;
 m = U() | 0;
 r = $f(p | 0, n | 0, s | 0, r | 0) | 0;
 w = ag(r | 0, U() | 0, t & -2097152 | 0, w | 0) | 0;
 m = $f(w | 0, U() | 0, g | 0, m | 0) | 0;
 g = eg(m | 0, U() | 0, 21) | 0;
 j = $f(g | 0, U() | 0, u | 0, j | 0) | 0;
 u = eg(j | 0, U() | 0, 21) | 0;
 g = U() | 0;
 D = $f(z | 0, x | 0, A | 0, D | 0) | 0;
 H = ag(D | 0, U() | 0, G & -2097152 | 0, H | 0) | 0;
 g = $f(H | 0, U() | 0, u | 0, g | 0) | 0;
 u = eg(g | 0, U() | 0, 21) | 0;
 c = $f(u | 0, U() | 0, F | 0, c | 0) | 0;
 F = eg(c | 0, U() | 0, 21) | 0;
 u = U() | 0;
 H = _f(F | 0, u | 0, 666643, 0) | 0;
 I = $f(H | 0, U() | 0, I & 2097151 | 0, 0) | 0;
 H = U() | 0;
 G = _f(F | 0, u | 0, 470296, 0) | 0;
 C = $f(G | 0, U() | 0, C & 2097151 | 0, 0) | 0;
 G = U() | 0;
 D = _f(F | 0, u | 0, 654183, 0) | 0;
 E = $f(D | 0, U() | 0, E & 2097151 | 0, 0) | 0;
 D = U() | 0;
 A = _f(F | 0, u | 0, -997805, -1) | 0;
 B = $f(A | 0, U() | 0, B & 2097151 | 0, 0) | 0;
 A = U() | 0;
 x = _f(F | 0, u | 0, 136657, 0) | 0;
 y = $f(x | 0, U() | 0, y & 2097151 | 0, 0) | 0;
 x = U() | 0;
 u = _f(F | 0, u | 0, -683901, -1) | 0;
 v = $f(u | 0, U() | 0, v & 2097151 | 0, 0) | 0;
 u = U() | 0;
 F = eg(I | 0, H | 0, 21) | 0;
 F = $f(C | 0, G | 0, F | 0, U() | 0) | 0;
 G = U() | 0;
 C = eg(F | 0, G | 0, 21) | 0;
 C = $f(E | 0, D | 0, C | 0, U() | 0) | 0;
 D = U() | 0;
 E = F & 2097151;
 z = eg(C | 0, D | 0, 21) | 0;
 z = $f(B | 0, A | 0, z | 0, U() | 0) | 0;
 A = U() | 0;
 B = C & 2097151;
 w = eg(z | 0, A | 0, 21) | 0;
 w = $f(y | 0, x | 0, w | 0, U() | 0) | 0;
 x = U() | 0;
 y = z & 2097151;
 t = eg(w | 0, x | 0, 21) | 0;
 t = $f(v | 0, u | 0, t | 0, U() | 0) | 0;
 u = U() | 0;
 v = w & 2097151;
 r = eg(t | 0, u | 0, 21) | 0;
 q = $f(r | 0, U() | 0, q & 2097151 | 0, 0) | 0;
 r = U() | 0;
 s = t & 2097151;
 n = eg(q | 0, r | 0, 21) | 0;
 o = $f(n | 0, U() | 0, o & 2097151 | 0, 0) | 0;
 n = U() | 0;
 p = q & 2097151;
 l = eg(o | 0, n | 0, 21) | 0;
 m = $f(l | 0, U() | 0, m & 2097151 | 0, 0) | 0;
 l = U() | 0;
 k = eg(m | 0, l | 0, 21) | 0;
 j = $f(k | 0, U() | 0, j & 2097151 | 0, 0) | 0;
 k = U() | 0;
 h = eg(j | 0, k | 0, 21) | 0;
 g = $f(h | 0, U() | 0, g & 2097151 | 0, 0) | 0;
 h = U() | 0;
 i = j & 2097151;
 e = eg(g | 0, h | 0, 21) | 0;
 c = $f(e | 0, U() | 0, c & 2097151 | 0, 0) | 0;
 e = U() | 0;
 f = g & 2097151;
 a[b >> 0] = I;
 J = fg(I | 0, H | 0, 8) | 0;
 U() | 0;
 a[b + 1 >> 0] = J;
 H = fg(I | 0, H | 0, 16) | 0;
 U() | 0;
 I = gg(E | 0, 0, 5) | 0;
 U() | 0;
 a[b + 2 >> 0] = I | H & 31;
 H = fg(F | 0, G | 0, 3) | 0;
 U() | 0;
 a[b + 3 >> 0] = H;
 G = fg(F | 0, G | 0, 11) | 0;
 U() | 0;
 a[b + 4 >> 0] = G;
 E = fg(E | 0, 0, 19) | 0;
 G = U() | 0;
 F = gg(B | 0, 0, 2) | 0;
 U() | 0 | G;
 a[b + 5 >> 0] = F | E;
 D = fg(C | 0, D | 0, 6) | 0;
 U() | 0;
 a[b + 6 >> 0] = D;
 B = fg(B | 0, 0, 14) | 0;
 D = U() | 0;
 C = gg(y | 0, 0, 7) | 0;
 U() | 0 | D;
 a[b + 7 >> 0] = C | B;
 B = fg(z | 0, A | 0, 1) | 0;
 U() | 0;
 a[b + 8 >> 0] = B;
 A = fg(z | 0, A | 0, 9) | 0;
 U() | 0;
 a[b + 9 >> 0] = A;
 y = fg(y | 0, 0, 17) | 0;
 A = U() | 0;
 z = gg(v | 0, 0, 4) | 0;
 U() | 0 | A;
 a[b + 10 >> 0] = z | y;
 y = fg(w | 0, x | 0, 4) | 0;
 U() | 0;
 a[b + 11 >> 0] = y;
 x = fg(w | 0, x | 0, 12) | 0;
 U() | 0;
 a[b + 12 >> 0] = x;
 v = fg(v | 0, 0, 20) | 0;
 x = U() | 0;
 w = gg(s | 0, 0, 1) | 0;
 U() | 0 | x;
 a[b + 13 >> 0] = w | v;
 u = fg(t | 0, u | 0, 7) | 0;
 U() | 0;
 a[b + 14 >> 0] = u;
 s = fg(s | 0, 0, 15) | 0;
 u = U() | 0;
 t = gg(p | 0, 0, 6) | 0;
 U() | 0 | u;
 a[b + 15 >> 0] = t | s;
 s = fg(q | 0, r | 0, 2) | 0;
 U() | 0;
 a[b + 16 >> 0] = s;
 r = fg(q | 0, r | 0, 10) | 0;
 U() | 0;
 a[b + 17 >> 0] = r;
 p = fg(p | 0, 0, 18) | 0;
 r = U() | 0;
 q = gg(o | 0, n | 0, 3) | 0;
 U() | 0 | r;
 a[b + 18 >> 0] = q | p;
 p = fg(o | 0, n | 0, 5) | 0;
 U() | 0;
 a[b + 19 >> 0] = p;
 n = fg(o | 0, n | 0, 13) | 0;
 U() | 0;
 a[b + 20 >> 0] = n;
 a[b + 21 >> 0] = m;
 n = fg(m | 0, l | 0, 8) | 0;
 U() | 0;
 a[b + 22 >> 0] = n;
 l = fg(m | 0, l | 0, 16) | 0;
 U() | 0;
 m = gg(i | 0, 0, 5) | 0;
 U() | 0;
 a[b + 23 >> 0] = m | l & 31;
 l = fg(j | 0, k | 0, 3) | 0;
 U() | 0;
 a[b + 24 >> 0] = l;
 k = fg(j | 0, k | 0, 11) | 0;
 U() | 0;
 a[b + 25 >> 0] = k;
 i = fg(i | 0, 0, 19) | 0;
 k = U() | 0;
 j = gg(f | 0, 0, 2) | 0;
 U() | 0 | k;
 a[b + 26 >> 0] = j | i;
 h = fg(g | 0, h | 0, 6) | 0;
 U() | 0;
 a[b + 27 >> 0] = h;
 f = fg(f | 0, 0, 14) | 0;
 h = U() | 0;
 g = gg(c | 0, e | 0, 7) | 0;
 U() | 0 | h;
 a[b + 28 >> 0] = g | f;
 f = fg(c | 0, e | 0, 1) | 0;
 U() | 0;
 a[b + 29 >> 0] = f;
 f = fg(c | 0, e | 0, 9) | 0;
 U() | 0;
 a[b + 30 >> 0] = f;
 e = eg(c | 0, e | 0, 17) | 0;
 U() | 0;
 a[b + 31 >> 0] = e;
 return;
}

function Gc(b, c, e) {
 b = b | 0;
 c = c | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, V = 0, W = 0;
 R = a[c + 2 >> 0] | 0;
 J = d[c >> 0] | 0;
 l = gg(d[c + 1 >> 0] | 0 | 0, 0, 8) | 0;
 P = U() | 0;
 R = R & 255;
 I = gg(R | 0, 0, 16) | 0;
 U() | 0;
 h = gg(d[c + 3 >> 0] | 0 | 0, 0, 8) | 0;
 f = U() | 0;
 M = gg(d[c + 4 >> 0] | 0 | 0, 0, 16) | 0;
 f = f | (U() | 0);
 m = d[c + 5 >> 0] | 0;
 g = gg(m | 0, 0, 24) | 0;
 f = fg(h | R | M | g | 0, f | (U() | 0) | 0, 5) | 0;
 U() | 0;
 g = a[c + 7 >> 0] | 0;
 M = gg(d[c + 6 >> 0] | 0 | 0, 0, 8) | 0;
 R = U() | 0;
 g = g & 255;
 h = gg(g | 0, 0, 16) | 0;
 R = fg(M | m | h | 0, R | (U() | 0) | 0, 2) | 0;
 U() | 0;
 h = gg(d[c + 8 >> 0] | 0 | 0, 0, 8) | 0;
 m = U() | 0;
 M = gg(d[c + 9 >> 0] | 0 | 0, 0, 16) | 0;
 m = m | (U() | 0);
 n = d[c + 10 >> 0] | 0;
 u = gg(n | 0, 0, 24) | 0;
 m = fg(h | g | M | u | 0, m | (U() | 0) | 0, 7) | 0;
 U() | 0;
 u = gg(d[c + 11 >> 0] | 0 | 0, 0, 8) | 0;
 M = U() | 0;
 g = gg(d[c + 12 >> 0] | 0 | 0, 0, 16) | 0;
 M = M | (U() | 0);
 h = d[c + 13 >> 0] | 0;
 j = gg(h | 0, 0, 24) | 0;
 M = fg(u | n | g | j | 0, M | (U() | 0) | 0, 4) | 0;
 U() | 0;
 j = a[c + 15 >> 0] | 0;
 g = gg(d[c + 14 >> 0] | 0 | 0, 0, 8) | 0;
 n = U() | 0;
 j = j & 255;
 u = gg(j | 0, 0, 16) | 0;
 n = fg(g | h | u | 0, n | (U() | 0) | 0, 1) | 0;
 U() | 0;
 u = gg(d[c + 16 >> 0] | 0 | 0, 0, 8) | 0;
 h = U() | 0;
 g = gg(d[c + 17 >> 0] | 0 | 0, 0, 16) | 0;
 h = h | (U() | 0);
 D = d[c + 18 >> 0] | 0;
 z = gg(D | 0, 0, 24) | 0;
 h = fg(u | j | g | z | 0, h | (U() | 0) | 0, 6) | 0;
 U() | 0;
 z = a[c + 20 >> 0] | 0;
 g = gg(d[c + 19 >> 0] | 0 | 0, 0, 8) | 0;
 j = U() | 0;
 z = gg(z & 255 | 0, 0, 16) | 0;
 j = fg(g | D | z | 0, j | (U() | 0) | 0, 3) | 0;
 z = U() | 0;
 D = a[c + 23 >> 0] | 0;
 g = d[c + 21 >> 0] | 0;
 u = gg(d[c + 22 >> 0] | 0 | 0, 0, 8) | 0;
 t = U() | 0;
 D = D & 255;
 w = gg(D | 0, 0, 16) | 0;
 U() | 0;
 x = gg(d[c + 24 >> 0] | 0 | 0, 0, 8) | 0;
 H = U() | 0;
 Q = gg(d[c + 25 >> 0] | 0 | 0, 0, 16) | 0;
 H = H | (U() | 0);
 E = d[c + 26 >> 0] | 0;
 r = gg(E | 0, 0, 24) | 0;
 H = fg(x | D | Q | r | 0, H | (U() | 0) | 0, 5) | 0;
 U() | 0;
 r = a[c + 28 >> 0] | 0;
 Q = gg(d[c + 27 >> 0] | 0 | 0, 0, 8) | 0;
 D = U() | 0;
 r = r & 255;
 x = gg(r | 0, 0, 16) | 0;
 D = fg(Q | E | x | 0, D | (U() | 0) | 0, 2) | 0;
 U() | 0;
 x = gg(d[c + 29 >> 0] | 0 | 0, 0, 8) | 0;
 E = U() | 0;
 Q = gg(d[c + 30 >> 0] | 0 | 0, 0, 16) | 0;
 E = E | (U() | 0);
 B = gg(d[c + 31 >> 0] | 0 | 0, 0, 24) | 0;
 E = fg(x | r | Q | B | 0, E | (U() | 0) | 0, 7) | 0;
 B = U() | 0;
 Q = a[e + 2 >> 0] | 0;
 r = d[e >> 0] | 0;
 x = gg(d[e + 1 >> 0] | 0 | 0, 0, 8) | 0;
 p = U() | 0;
 Q = Q & 255;
 s = gg(Q | 0, 0, 16) | 0;
 U() | 0;
 k = gg(d[e + 3 >> 0] | 0 | 0, 0, 8) | 0;
 v = U() | 0;
 L = gg(d[e + 4 >> 0] | 0 | 0, 0, 16) | 0;
 v = v | (U() | 0);
 V = d[e + 5 >> 0] | 0;
 O = gg(V | 0, 0, 24) | 0;
 v = fg(k | Q | L | O | 0, v | (U() | 0) | 0, 5) | 0;
 U() | 0;
 O = a[e + 7 >> 0] | 0;
 L = gg(d[e + 6 >> 0] | 0 | 0, 0, 8) | 0;
 Q = U() | 0;
 O = O & 255;
 k = gg(O | 0, 0, 16) | 0;
 Q = fg(L | V | k | 0, Q | (U() | 0) | 0, 2) | 0;
 U() | 0;
 k = gg(d[e + 8 >> 0] | 0 | 0, 0, 8) | 0;
 V = U() | 0;
 L = gg(d[e + 9 >> 0] | 0 | 0, 0, 16) | 0;
 V = V | (U() | 0);
 o = d[e + 10 >> 0] | 0;
 T = gg(o | 0, 0, 24) | 0;
 V = fg(k | O | L | T | 0, V | (U() | 0) | 0, 7) | 0;
 U() | 0;
 T = gg(d[e + 11 >> 0] | 0 | 0, 0, 8) | 0;
 L = U() | 0;
 O = gg(d[e + 12 >> 0] | 0 | 0, 0, 16) | 0;
 L = L | (U() | 0);
 k = d[e + 13 >> 0] | 0;
 K = gg(k | 0, 0, 24) | 0;
 L = fg(T | o | O | K | 0, L | (U() | 0) | 0, 4) | 0;
 U() | 0;
 K = a[e + 15 >> 0] | 0;
 O = gg(d[e + 14 >> 0] | 0 | 0, 0, 8) | 0;
 o = U() | 0;
 K = K & 255;
 T = gg(K | 0, 0, 16) | 0;
 o = fg(O | k | T | 0, o | (U() | 0) | 0, 1) | 0;
 U() | 0;
 T = gg(d[e + 16 >> 0] | 0 | 0, 0, 8) | 0;
 k = U() | 0;
 O = gg(d[e + 17 >> 0] | 0 | 0, 0, 16) | 0;
 k = k | (U() | 0);
 G = d[e + 18 >> 0] | 0;
 S = gg(G | 0, 0, 24) | 0;
 k = fg(T | K | O | S | 0, k | (U() | 0) | 0, 6) | 0;
 U() | 0;
 S = a[e + 20 >> 0] | 0;
 O = gg(d[e + 19 >> 0] | 0 | 0, 0, 8) | 0;
 K = U() | 0;
 S = gg(S & 255 | 0, 0, 16) | 0;
 K = fg(O | G | S | 0, K | (U() | 0) | 0, 3) | 0;
 S = U() | 0;
 G = a[e + 23 >> 0] | 0;
 O = d[e + 21 >> 0] | 0;
 T = gg(d[e + 22 >> 0] | 0 | 0, 0, 8) | 0;
 c = U() | 0;
 G = G & 255;
 N = gg(G | 0, 0, 16) | 0;
 U() | 0;
 q = gg(d[e + 24 >> 0] | 0 | 0, 0, 8) | 0;
 F = U() | 0;
 A = gg(d[e + 25 >> 0] | 0 | 0, 0, 16) | 0;
 F = F | (U() | 0);
 C = d[e + 26 >> 0] | 0;
 W = gg(C | 0, 0, 24) | 0;
 F = fg(q | G | A | W | 0, F | (U() | 0) | 0, 5) | 0;
 U() | 0;
 W = a[e + 28 >> 0] | 0;
 A = gg(d[e + 27 >> 0] | 0 | 0, 0, 8) | 0;
 G = U() | 0;
 W = W & 255;
 q = gg(W | 0, 0, 16) | 0;
 G = fg(A | C | q | 0, G | (U() | 0) | 0, 2) | 0;
 U() | 0;
 q = gg(d[e + 29 >> 0] | 0 | 0, 0, 8) | 0;
 C = U() | 0;
 A = gg(d[e + 30 >> 0] | 0 | 0, 0, 16) | 0;
 C = C | (U() | 0);
 e = gg(d[e + 31 >> 0] | 0 | 0, 0, 24) | 0;
 e = fg(q | W | A | e | 0, C | (U() | 0) | 0, 7) | 0;
 C = U() | 0;
 P = $f(x | r | s & 2031616 | 0, p | 0, l | J | I & 2031616 | 0, P | 0) | 0;
 I = U() | 0;
 R = $f(Q & 2097151 | 0, 0, R & 2097151 | 0, 0) | 0;
 Q = U() | 0;
 M = $f(L & 2097151 | 0, 0, M & 2097151 | 0, 0) | 0;
 L = U() | 0;
 n = $f(o & 2097151 | 0, 0, n & 2097151 | 0, 0) | 0;
 o = U() | 0;
 h = $f(k & 2097151 | 0, 0, h & 2097151 | 0, 0) | 0;
 k = U() | 0;
 z = $f(K | 0, S | 0, j | 0, z | 0) | 0;
 j = U() | 0;
 t = $f(T | O | N & 2031616 | 0, c | 0, u | g | w & 2031616 | 0, t | 0) | 0;
 w = U() | 0;
 D = $f(G & 2097151 | 0, 0, D & 2097151 | 0, 0) | 0;
 G = U() | 0;
 B = $f(e | 0, C | 0, E | 0, B | 0) | 0;
 E = U() | 0;
 C = $f(P | 0, I | 0, 1048576, 0) | 0;
 e = fg(C | 0, U() | 0, 21) | 0;
 e = $f(e | 0, U() | 0, f & 2097151 | 0, 0) | 0;
 e = $f(e | 0, U() | 0, v & 2097151 | 0, 0) | 0;
 v = U() | 0;
 C = ag(P | 0, I | 0, C & 6291456 | 0, 0) | 0;
 I = U() | 0;
 P = $f(R | 0, Q | 0, 1048576, 0) | 0;
 f = fg(P | 0, U() | 0, 21) | 0;
 m = $f(f | 0, U() | 0, m & 2097151 | 0, 0) | 0;
 V = $f(m | 0, U() | 0, V & 2097151 | 0, 0) | 0;
 m = U() | 0;
 f = $f(M | 0, L | 0, 1048576, 0) | 0;
 g = fg(f | 0, U() | 0, 21) | 0;
 g = $f(n | 0, o | 0, g | 0, U() | 0) | 0;
 o = U() | 0;
 n = $f(h | 0, k | 0, 1048576, 0) | 0;
 u = fg(n | 0, U() | 0, 21) | 0;
 u = $f(z | 0, j | 0, u | 0, U() | 0) | 0;
 j = U() | 0;
 z = $f(t | 0, w | 0, 1048576, 0) | 0;
 c = fg(z | 0, U() | 0, 21) | 0;
 c = $f(c | 0, U() | 0, H & 2097151 | 0, 0) | 0;
 F = $f(c | 0, U() | 0, F & 2097151 | 0, 0) | 0;
 c = U() | 0;
 H = $f(D | 0, G | 0, 1048576, 0) | 0;
 N = fg(H | 0, U() | 0, 21) | 0;
 N = $f(B | 0, E | 0, N | 0, U() | 0) | 0;
 E = U() | 0;
 B = $f(e | 0, v | 0, 1048576, 0) | 0;
 O = U() | 0;
 T = fg(B | 0, O | 0, 21) | 0;
 S = U() | 0;
 O = ag(e | 0, v | 0, B & -2097152 | 0, O & 8191 | 0) | 0;
 B = U() | 0;
 v = $f(V | 0, m | 0, 1048576, 0) | 0;
 e = U() | 0;
 K = fg(v | 0, e | 0, 21) | 0;
 J = U() | 0;
 e = ag(V | 0, m | 0, v & -2097152 | 0, e & 8191 | 0) | 0;
 v = U() | 0;
 m = $f(g | 0, o | 0, 1048576, 0) | 0;
 V = U() | 0;
 l = fg(m | 0, V | 0, 21) | 0;
 p = U() | 0;
 V = ag(g | 0, o | 0, m & -2097152 | 0, V & 8191 | 0) | 0;
 m = U() | 0;
 o = $f(u | 0, j | 0, 1048576, 0) | 0;
 g = U() | 0;
 s = fg(o | 0, g | 0, 21) | 0;
 r = U() | 0;
 g = ag(u | 0, j | 0, o & -2097152 | 0, g & 8191 | 0) | 0;
 o = U() | 0;
 j = $f(F | 0, c | 0, 1048576, 0) | 0;
 u = U() | 0;
 x = fg(j | 0, u | 0, 21) | 0;
 A = U() | 0;
 u = ag(F | 0, c | 0, j & -2097152 | 0, u & 8191 | 0) | 0;
 j = U() | 0;
 c = $f(N | 0, E | 0, 1048576, 0) | 0;
 F = U() | 0;
 W = fg(c | 0, F | 0, 21) | 0;
 q = U() | 0;
 F = ag(N | 0, E | 0, c & -2097152 | 0, F & 268435455 | 0) | 0;
 c = U() | 0;
 E = _f(W | 0, q | 0, 666643, 0) | 0;
 I = $f(E | 0, U() | 0, C | 0, I | 0) | 0;
 C = U() | 0;
 E = _f(W | 0, q | 0, 470296, 0) | 0;
 E = $f(O | 0, B | 0, E | 0, U() | 0) | 0;
 B = U() | 0;
 O = _f(W | 0, q | 0, 654183, 0) | 0;
 N = U() | 0;
 y = _f(W | 0, q | 0, -997805, -1) | 0;
 y = $f(e | 0, v | 0, y | 0, U() | 0) | 0;
 v = U() | 0;
 e = _f(W | 0, q | 0, 136657, 0) | 0;
 i = U() | 0;
 q = _f(W | 0, q | 0, -683901, -1) | 0;
 q = $f(V | 0, m | 0, q | 0, U() | 0) | 0;
 m = U() | 0;
 C = eg(I | 0, C | 0, 21) | 0;
 C = $f(E | 0, B | 0, C | 0, U() | 0) | 0;
 B = eg(C | 0, U() | 0, 21) | 0;
 E = U() | 0;
 Q = $f(T | 0, S | 0, R | 0, Q | 0) | 0;
 P = ag(Q | 0, U() | 0, P & 6291456 | 0, 0) | 0;
 N = $f(P | 0, U() | 0, O | 0, N | 0) | 0;
 E = $f(N | 0, U() | 0, B | 0, E | 0) | 0;
 B = eg(E | 0, U() | 0, 21) | 0;
 B = $f(y | 0, v | 0, B | 0, U() | 0) | 0;
 v = eg(B | 0, U() | 0, 21) | 0;
 y = U() | 0;
 J = $f(M | 0, L | 0, K | 0, J | 0) | 0;
 f = ag(J | 0, U() | 0, f & 6291456 | 0, 0) | 0;
 i = $f(f | 0, U() | 0, e | 0, i | 0) | 0;
 y = $f(i | 0, U() | 0, v | 0, y | 0) | 0;
 v = eg(y | 0, U() | 0, 21) | 0;
 v = $f(q | 0, m | 0, v | 0, U() | 0) | 0;
 m = eg(v | 0, U() | 0, 21) | 0;
 q = U() | 0;
 p = $f(h | 0, k | 0, l | 0, p | 0) | 0;
 n = ag(p | 0, U() | 0, n & 6291456 | 0, 0) | 0;
 q = $f(n | 0, U() | 0, m | 0, q | 0) | 0;
 m = eg(q | 0, U() | 0, 21) | 0;
 o = $f(m | 0, U() | 0, g | 0, o | 0) | 0;
 g = eg(o | 0, U() | 0, 21) | 0;
 m = U() | 0;
 w = $f(s | 0, r | 0, t | 0, w | 0) | 0;
 z = ag(w | 0, U() | 0, z & 6291456 | 0, 0) | 0;
 m = $f(z | 0, U() | 0, g | 0, m | 0) | 0;
 g = eg(m | 0, U() | 0, 21) | 0;
 j = $f(g | 0, U() | 0, u | 0, j | 0) | 0;
 u = eg(j | 0, U() | 0, 21) | 0;
 g = U() | 0;
 G = $f(x | 0, A | 0, D | 0, G | 0) | 0;
 H = ag(G | 0, U() | 0, H & 6291456 | 0, 0) | 0;
 g = $f(H | 0, U() | 0, u | 0, g | 0) | 0;
 u = eg(g | 0, U() | 0, 21) | 0;
 c = $f(u | 0, U() | 0, F | 0, c | 0) | 0;
 F = eg(c | 0, U() | 0, 21) | 0;
 u = U() | 0;
 H = _f(F | 0, u | 0, 666643, 0) | 0;
 I = $f(H | 0, U() | 0, I & 2097151 | 0, 0) | 0;
 H = U() | 0;
 G = _f(F | 0, u | 0, 470296, 0) | 0;
 C = $f(G | 0, U() | 0, C & 2097151 | 0, 0) | 0;
 G = U() | 0;
 D = _f(F | 0, u | 0, 654183, 0) | 0;
 E = $f(D | 0, U() | 0, E & 2097151 | 0, 0) | 0;
 D = U() | 0;
 A = _f(F | 0, u | 0, -997805, -1) | 0;
 B = $f(A | 0, U() | 0, B & 2097151 | 0, 0) | 0;
 A = U() | 0;
 x = _f(F | 0, u | 0, 136657, 0) | 0;
 y = $f(x | 0, U() | 0, y & 2097151 | 0, 0) | 0;
 x = U() | 0;
 u = _f(F | 0, u | 0, -683901, -1) | 0;
 v = $f(u | 0, U() | 0, v & 2097151 | 0, 0) | 0;
 u = U() | 0;
 F = eg(I | 0, H | 0, 21) | 0;
 F = $f(C | 0, G | 0, F | 0, U() | 0) | 0;
 G = U() | 0;
 C = eg(F | 0, G | 0, 21) | 0;
 C = $f(E | 0, D | 0, C | 0, U() | 0) | 0;
 D = U() | 0;
 E = F & 2097151;
 z = eg(C | 0, D | 0, 21) | 0;
 z = $f(B | 0, A | 0, z | 0, U() | 0) | 0;
 A = U() | 0;
 B = C & 2097151;
 w = eg(z | 0, A | 0, 21) | 0;
 w = $f(y | 0, x | 0, w | 0, U() | 0) | 0;
 x = U() | 0;
 y = z & 2097151;
 t = eg(w | 0, x | 0, 21) | 0;
 t = $f(v | 0, u | 0, t | 0, U() | 0) | 0;
 u = U() | 0;
 v = w & 2097151;
 r = eg(t | 0, u | 0, 21) | 0;
 q = $f(r | 0, U() | 0, q & 2097151 | 0, 0) | 0;
 r = U() | 0;
 s = t & 2097151;
 n = eg(q | 0, r | 0, 21) | 0;
 o = $f(n | 0, U() | 0, o & 2097151 | 0, 0) | 0;
 n = U() | 0;
 p = q & 2097151;
 l = eg(o | 0, n | 0, 21) | 0;
 m = $f(l | 0, U() | 0, m & 2097151 | 0, 0) | 0;
 l = U() | 0;
 k = eg(m | 0, l | 0, 21) | 0;
 j = $f(k | 0, U() | 0, j & 2097151 | 0, 0) | 0;
 k = U() | 0;
 h = eg(j | 0, k | 0, 21) | 0;
 g = $f(h | 0, U() | 0, g & 2097151 | 0, 0) | 0;
 h = U() | 0;
 i = j & 2097151;
 e = eg(g | 0, h | 0, 21) | 0;
 c = $f(e | 0, U() | 0, c & 2097151 | 0, 0) | 0;
 e = U() | 0;
 f = g & 2097151;
 a[b >> 0] = I;
 J = fg(I | 0, H | 0, 8) | 0;
 U() | 0;
 a[b + 1 >> 0] = J;
 H = fg(I | 0, H | 0, 16) | 0;
 U() | 0;
 I = gg(E | 0, 0, 5) | 0;
 U() | 0;
 a[b + 2 >> 0] = I | H & 31;
 H = fg(F | 0, G | 0, 3) | 0;
 U() | 0;
 a[b + 3 >> 0] = H;
 G = fg(F | 0, G | 0, 11) | 0;
 U() | 0;
 a[b + 4 >> 0] = G;
 E = fg(E | 0, 0, 19) | 0;
 G = U() | 0;
 F = gg(B | 0, 0, 2) | 0;
 U() | 0 | G;
 a[b + 5 >> 0] = F | E;
 D = fg(C | 0, D | 0, 6) | 0;
 U() | 0;
 a[b + 6 >> 0] = D;
 B = fg(B | 0, 0, 14) | 0;
 D = U() | 0;
 C = gg(y | 0, 0, 7) | 0;
 U() | 0 | D;
 a[b + 7 >> 0] = C | B;
 B = fg(z | 0, A | 0, 1) | 0;
 U() | 0;
 a[b + 8 >> 0] = B;
 A = fg(z | 0, A | 0, 9) | 0;
 U() | 0;
 a[b + 9 >> 0] = A;
 y = fg(y | 0, 0, 17) | 0;
 A = U() | 0;
 z = gg(v | 0, 0, 4) | 0;
 U() | 0 | A;
 a[b + 10 >> 0] = z | y;
 y = fg(w | 0, x | 0, 4) | 0;
 U() | 0;
 a[b + 11 >> 0] = y;
 x = fg(w | 0, x | 0, 12) | 0;
 U() | 0;
 a[b + 12 >> 0] = x;
 v = fg(v | 0, 0, 20) | 0;
 x = U() | 0;
 w = gg(s | 0, 0, 1) | 0;
 U() | 0 | x;
 a[b + 13 >> 0] = w | v;
 u = fg(t | 0, u | 0, 7) | 0;
 U() | 0;
 a[b + 14 >> 0] = u;
 s = fg(s | 0, 0, 15) | 0;
 u = U() | 0;
 t = gg(p | 0, 0, 6) | 0;
 U() | 0 | u;
 a[b + 15 >> 0] = t | s;
 s = fg(q | 0, r | 0, 2) | 0;
 U() | 0;
 a[b + 16 >> 0] = s;
 r = fg(q | 0, r | 0, 10) | 0;
 U() | 0;
 a[b + 17 >> 0] = r;
 p = fg(p | 0, 0, 18) | 0;
 r = U() | 0;
 q = gg(o | 0, n | 0, 3) | 0;
 U() | 0 | r;
 a[b + 18 >> 0] = q | p;
 p = fg(o | 0, n | 0, 5) | 0;
 U() | 0;
 a[b + 19 >> 0] = p;
 n = fg(o | 0, n | 0, 13) | 0;
 U() | 0;
 a[b + 20 >> 0] = n;
 a[b + 21 >> 0] = m;
 n = fg(m | 0, l | 0, 8) | 0;
 U() | 0;
 a[b + 22 >> 0] = n;
 l = fg(m | 0, l | 0, 16) | 0;
 U() | 0;
 m = gg(i | 0, 0, 5) | 0;
 U() | 0;
 a[b + 23 >> 0] = m | l & 31;
 l = fg(j | 0, k | 0, 3) | 0;
 U() | 0;
 a[b + 24 >> 0] = l;
 k = fg(j | 0, k | 0, 11) | 0;
 U() | 0;
 a[b + 25 >> 0] = k;
 i = fg(i | 0, 0, 19) | 0;
 k = U() | 0;
 j = gg(f | 0, 0, 2) | 0;
 U() | 0 | k;
 a[b + 26 >> 0] = j | i;
 h = fg(g | 0, h | 0, 6) | 0;
 U() | 0;
 a[b + 27 >> 0] = h;
 f = fg(f | 0, 0, 14) | 0;
 h = U() | 0;
 g = gg(c | 0, e | 0, 7) | 0;
 U() | 0 | h;
 a[b + 28 >> 0] = g | f;
 f = fg(c | 0, e | 0, 1) | 0;
 U() | 0;
 a[b + 29 >> 0] = f;
 f = fg(c | 0, e | 0, 9) | 0;
 U() | 0;
 a[b + 30 >> 0] = f;
 e = eg(c | 0, e | 0, 17) | 0;
 U() | 0;
 a[b + 31 >> 0] = e;
 return;
}

function qc(b, e) {
 b = b | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0, ia = 0, ja = 0, ka = 0, la = 0, ma = 0, na = 0, oa = 0, pa = 0, qa = 0;
 qa = k;
 k = k + 224 | 0;
 ma = qa + 192 | 0;
 na = qa + 144 | 0;
 y = qa + 96 | 0;
 oa = qa + 48 | 0;
 pa = qa;
 o = d[e >> 0] | 0;
 p = gg(d[e + 1 >> 0] | 0 | 0, 0, 8) | 0;
 n = U() | 0;
 fa = gg(d[e + 2 >> 0] | 0 | 0, 0, 16) | 0;
 n = n | (U() | 0);
 m = gg(d[e + 3 >> 0] | 0 | 0, 0, 24) | 0;
 m = p | o | fa | m;
 n = n | (U() | 0);
 fa = a[e + 6 >> 0] | 0;
 o = d[e + 4 >> 0] | 0;
 p = gg(d[e + 5 >> 0] | 0 | 0, 0, 8) | 0;
 ga = U() | 0;
 fa = gg(fa & 255 | 0, 0, 16) | 0;
 fa = p | o | fa;
 ga = ga | (U() | 0);
 o = gg(fa | 0, ga | 0, 6) | 0;
 p = U() | 0;
 q = a[e + 9 >> 0] | 0;
 ha = d[e + 7 >> 0] | 0;
 s = gg(d[e + 8 >> 0] | 0 | 0, 0, 8) | 0;
 r = U() | 0;
 q = gg(q & 255 | 0, 0, 16) | 0;
 q = s | ha | q;
 r = r | (U() | 0);
 ha = a[e + 12 >> 0] | 0;
 s = d[e + 10 >> 0] | 0;
 t = gg(d[e + 11 >> 0] | 0 | 0, 0, 8) | 0;
 ia = U() | 0;
 ha = gg(ha & 255 | 0, 0, 16) | 0;
 ha = t | s | ha;
 ia = ia | (U() | 0);
 s = gg(ha | 0, ia | 0, 3) | 0;
 t = U() | 0;
 u = a[e + 15 >> 0] | 0;
 ja = d[e + 13 >> 0] | 0;
 h = gg(d[e + 14 >> 0] | 0 | 0, 0, 8) | 0;
 v = U() | 0;
 u = gg(u & 255 | 0, 0, 16) | 0;
 u = h | ja | u;
 v = v | (U() | 0);
 ja = d[e + 16 >> 0] | 0;
 h = gg(d[e + 17 >> 0] | 0 | 0, 0, 8) | 0;
 x = U() | 0;
 f = gg(d[e + 18 >> 0] | 0 | 0, 0, 16) | 0;
 x = x | (U() | 0);
 w = gg(d[e + 19 >> 0] | 0 | 0, 0, 24) | 0;
 w = h | ja | f | w;
 x = x | (U() | 0);
 f = a[e + 22 >> 0] | 0;
 ja = d[e + 20 >> 0] | 0;
 h = gg(d[e + 21 >> 0] | 0 | 0, 0, 8) | 0;
 g = U() | 0;
 f = gg(f & 255 | 0, 0, 16) | 0;
 f = h | ja | f;
 g = g | (U() | 0);
 ja = a[e + 25 >> 0] | 0;
 h = d[e + 23 >> 0] | 0;
 i = gg(d[e + 24 >> 0] | 0 | 0, 0, 8) | 0;
 ka = U() | 0;
 ja = gg(ja & 255 | 0, 0, 16) | 0;
 ja = i | h | ja;
 ka = ka | (U() | 0);
 h = gg(ja | 0, ka | 0, 5) | 0;
 i = U() | 0;
 j = a[e + 28 >> 0] | 0;
 la = d[e + 26 >> 0] | 0;
 ea = gg(d[e + 27 >> 0] | 0 | 0, 0, 8) | 0;
 l = U() | 0;
 j = gg(j & 255 | 0, 0, 16) | 0;
 j = ea | la | j;
 l = l | (U() | 0);
 la = e + 31 | 0;
 ea = a[la >> 0] | 0;
 da = d[e + 29 >> 0] | 0;
 ca = gg(d[e + 30 >> 0] | 0 | 0, 0, 8) | 0;
 e = U() | 0;
 ea = gg(ea & 255 | 0, 0, 16) | 0;
 e = gg(ca | da | ea | 0, e | (U() | 0) | 0, 2) | 0;
 U() | 0;
 e = e & 33554428;
 if ((n >>> 0 > 0 | (n | 0) == 0 & m >>> 0 > 4294967276) & ((fa | 0) == 16777215 & (ga | 0) == 0 & ((q | 0) == 16777215 & (r | 0) == 0 & ((ha | 0) == 16777215 & (ia | 0) == 0 & ((u | 0) == 16777215 & (v | 0) == 0 & ((w | 0) == -1 & (x | 0) == 0 & ((f | 0) == 16777215 & (g | 0) == 0 & ((ja | 0) == 16777215 & (ka | 0) == 0 & ((j | 0) == 16777215 & (l | 0) == 0 & ((e | 0) == 33554428 & 0 == 0)))))))))) {
  pa = -1;
  k = qa;
  return pa | 0;
 }
 Y = gg(q | 0, r | 0, 5) | 0;
 ha = U() | 0;
 ia = gg(u | 0, v | 0, 2) | 0;
 ja = U() | 0;
 f = gg(f | 0, g | 0, 7) | 0;
 ba = U() | 0;
 da = gg(j | 0, l | 0, 4) | 0;
 ka = U() | 0;
 g = $f(e | 0, 0, 16777216, 0) | 0;
 Z = fg(g | 0, U() | 0, 25) | 0;
 Z = ag(0, 0, Z | 0, U() | 0) | 0;
 U() | 0;
 Z = $f(Z & 19 | 0, 0, m | 0, n | 0) | 0;
 fa = U() | 0;
 X = $f(o | 0, p | 0, 16777216, 0) | 0;
 _ = fg(X | 0, U() | 0, 25) | 0;
 _ = $f(Y | 0, ha | 0, _ | 0, U() | 0) | 0;
 ha = U() | 0;
 X = ag(o | 0, p | 0, X & -33554432 | 0, 0) | 0;
 Y = U() | 0;
 ga = $f(s | 0, t | 0, 16777216, 0) | 0;
 $ = fg(ga | 0, U() | 0, 25) | 0;
 $ = $f(ia | 0, ja | 0, $ | 0, U() | 0) | 0;
 ja = U() | 0;
 ia = $f(w | 0, x | 0, 16777216, 0) | 0;
 aa = fg(ia | 0, U() | 0, 25) | 0;
 aa = $f(f | 0, ba | 0, aa | 0, U() | 0) | 0;
 ba = U() | 0;
 f = $f(h | 0, i | 0, 16777216, 0) | 0;
 ca = fg(f | 0, U() | 0, 25) | 0;
 ca = $f(da | 0, ka | 0, ca | 0, U() | 0) | 0;
 ka = U() | 0;
 da = $f(Z | 0, fa | 0, 33554432, 0) | 0;
 ea = fg(da | 0, U() | 0, 26) | 0;
 ea = $f(X | 0, Y | 0, ea | 0, U() | 0) | 0;
 U() | 0;
 da = ag(Z | 0, fa | 0, da & -67108864 | 0, 0) | 0;
 U() | 0;
 fa = $f(_ | 0, ha | 0, 33554432, 0) | 0;
 Z = fg(fa | 0, U() | 0, 26) | 0;
 Z = $f(Z | 0, U() | 0, s | 0, t | 0) | 0;
 ga = ag(Z | 0, U() | 0, ga & -33554432 | 0, 0) | 0;
 U() | 0;
 fa = ag(_ | 0, ha | 0, fa & -67108864 | 0, 0) | 0;
 U() | 0;
 ha = $f($ | 0, ja | 0, 33554432, 0) | 0;
 _ = fg(ha | 0, U() | 0, 26) | 0;
 _ = $f(_ | 0, U() | 0, w | 0, x | 0) | 0;
 ia = ag(_ | 0, U() | 0, ia & -33554432 | 0, 0) | 0;
 U() | 0;
 ha = ag($ | 0, ja | 0, ha & -67108864 | 0, 0) | 0;
 U() | 0;
 ja = $f(aa | 0, ba | 0, 33554432, 0) | 0;
 $ = fg(ja | 0, U() | 0, 26) | 0;
 h = $f($ | 0, U() | 0, h | 0, i | 0) | 0;
 f = ag(h | 0, U() | 0, f & -33554432 | 0, 0) | 0;
 U() | 0;
 ja = ag(aa | 0, ba | 0, ja & -67108864 | 0, 0) | 0;
 U() | 0;
 h = $f(ca | 0, ka | 0, 33554432, 0) | 0;
 ba = fg(h | 0, U() | 0, 26) | 0;
 e = $f(e | 0, 0, ba | 0, U() | 0) | 0;
 g = ag(e | 0, U() | 0, g & 33554432 | 0, 0) | 0;
 U() | 0;
 h = ag(ca | 0, ka | 0, h & -67108864 | 0, 0) | 0;
 U() | 0;
 ka = b + 40 | 0;
 c[ka >> 2] = da;
 c[b + 44 >> 2] = ea;
 c[b + 48 >> 2] = fa;
 c[b + 52 >> 2] = ga;
 c[b + 56 >> 2] = ha;
 c[b + 60 >> 2] = ia;
 c[b + 64 >> 2] = ja;
 c[b + 68 >> 2] = f;
 c[b + 72 >> 2] = h;
 c[b + 76 >> 2] = g;
 g = b + 80 | 0;
 c[g >> 2] = 1;
 h = b + 84 | 0;
 e = h;
 f = e + 36 | 0;
 do {
  c[e >> 2] = 0;
  e = e + 4 | 0;
 } while ((e | 0) < (f | 0));
 ic(na, ka);
 ec(y, na, 16);
 ba = na + 4 | 0;
 ca = na + 8 | 0;
 da = na + 12 | 0;
 ea = na + 16 | 0;
 fa = na + 20 | 0;
 ga = na + 24 | 0;
 ha = na + 28 | 0;
 ia = na + 32 | 0;
 ja = na + 36 | 0;
 I = c[g >> 2] | 0;
 H = c[h >> 2] | 0;
 F = c[b + 88 >> 2] | 0;
 D = c[b + 92 >> 2] | 0;
 B = c[b + 96 >> 2] | 0;
 z = c[b + 100 >> 2] | 0;
 m = c[b + 104 >> 2] | 0;
 j = c[b + 108 >> 2] | 0;
 h = c[b + 112 >> 2] | 0;
 f = c[b + 116 >> 2] | 0;
 o = (c[na >> 2] | 0) - I | 0;
 p = (c[ba >> 2] | 0) - H | 0;
 q = (c[ca >> 2] | 0) - F | 0;
 r = (c[da >> 2] | 0) - D | 0;
 s = (c[ea >> 2] | 0) - B | 0;
 t = (c[fa >> 2] | 0) - z | 0;
 u = (c[ga >> 2] | 0) - m | 0;
 v = (c[ha >> 2] | 0) - j | 0;
 w = (c[ia >> 2] | 0) - h | 0;
 x = (c[ja >> 2] | 0) - f | 0;
 c[na >> 2] = o;
 c[ba >> 2] = p;
 c[ca >> 2] = q;
 c[da >> 2] = r;
 c[ea >> 2] = s;
 c[fa >> 2] = t;
 c[ga >> 2] = u;
 c[ha >> 2] = v;
 c[ia >> 2] = w;
 c[ja >> 2] = x;
 G = y + 4 | 0;
 E = y + 8 | 0;
 C = y + 12 | 0;
 A = y + 16 | 0;
 n = y + 20 | 0;
 l = y + 24 | 0;
 i = y + 28 | 0;
 g = y + 32 | 0;
 e = y + 36 | 0;
 H = (c[G >> 2] | 0) + H | 0;
 F = (c[E >> 2] | 0) + F | 0;
 D = (c[C >> 2] | 0) + D | 0;
 B = (c[A >> 2] | 0) + B | 0;
 z = (c[n >> 2] | 0) + z | 0;
 m = (c[l >> 2] | 0) + m | 0;
 j = (c[i >> 2] | 0) + j | 0;
 h = (c[g >> 2] | 0) + h | 0;
 f = (c[e >> 2] | 0) + f | 0;
 c[y >> 2] = (c[y >> 2] | 0) + I;
 c[G >> 2] = H;
 c[E >> 2] = F;
 c[C >> 2] = D;
 c[A >> 2] = B;
 c[n >> 2] = z;
 c[l >> 2] = m;
 c[i >> 2] = j;
 c[g >> 2] = h;
 c[e >> 2] = f;
 rc(b, na, y);
 ic(oa, b);
 ec(oa, oa, y);
 e = oa + 4 | 0;
 f = oa + 8 | 0;
 g = oa + 12 | 0;
 h = oa + 16 | 0;
 i = oa + 20 | 0;
 j = oa + 24 | 0;
 l = oa + 28 | 0;
 m = oa + 32 | 0;
 n = oa + 36 | 0;
 p = (c[e >> 2] | 0) - p | 0;
 q = (c[f >> 2] | 0) - q | 0;
 r = (c[g >> 2] | 0) - r | 0;
 s = (c[h >> 2] | 0) - s | 0;
 t = (c[i >> 2] | 0) - t | 0;
 u = (c[j >> 2] | 0) - u | 0;
 v = (c[l >> 2] | 0) - v | 0;
 w = (c[m >> 2] | 0) - w | 0;
 x = (c[n >> 2] | 0) - x | 0;
 c[pa >> 2] = (c[oa >> 2] | 0) - o;
 o = pa + 4 | 0;
 c[o >> 2] = p;
 p = pa + 8 | 0;
 c[p >> 2] = q;
 q = pa + 12 | 0;
 c[q >> 2] = r;
 r = pa + 16 | 0;
 c[r >> 2] = s;
 s = pa + 20 | 0;
 c[s >> 2] = t;
 t = pa + 24 | 0;
 c[t >> 2] = u;
 u = pa + 28 | 0;
 c[u >> 2] = v;
 v = pa + 32 | 0;
 c[v >> 2] = w;
 w = pa + 36 | 0;
 c[w >> 2] = x;
 sc(ma, pa);
 x = ma + 1 | 0;
 y = ma + 2 | 0;
 z = ma + 3 | 0;
 A = ma + 4 | 0;
 B = ma + 5 | 0;
 C = ma + 6 | 0;
 D = ma + 7 | 0;
 E = ma + 8 | 0;
 F = ma + 9 | 0;
 G = ma + 10 | 0;
 H = ma + 11 | 0;
 I = ma + 12 | 0;
 J = ma + 13 | 0;
 K = ma + 14 | 0;
 L = ma + 15 | 0;
 M = ma + 16 | 0;
 N = ma + 17 | 0;
 O = ma + 18 | 0;
 P = ma + 19 | 0;
 Q = ma + 20 | 0;
 R = ma + 21 | 0;
 S = ma + 22 | 0;
 T = ma + 23 | 0;
 V = ma + 24 | 0;
 W = ma + 25 | 0;
 X = ma + 26 | 0;
 Y = ma + 27 | 0;
 Z = ma + 28 | 0;
 _ = ma + 29 | 0;
 $ = ma + 30 | 0;
 aa = ma + 31 | 0;
 do if ((((a[x >> 0] | a[ma >> 0] | a[y >> 0] | a[z >> 0] | a[A >> 0] | a[B >> 0] | a[C >> 0] | a[D >> 0] | a[E >> 0] | a[F >> 0] | a[G >> 0] | a[H >> 0] | a[I >> 0] | a[J >> 0] | a[K >> 0] | a[L >> 0] | a[M >> 0] | a[N >> 0] | a[O >> 0] | a[P >> 0] | a[Q >> 0] | a[R >> 0] | a[S >> 0] | a[T >> 0] | a[V >> 0] | a[W >> 0] | a[X >> 0] | a[Y >> 0] | a[Z >> 0] | a[_ >> 0] | a[$ >> 0] | a[aa >> 0]) & 255) + -1 | 0) >>> 0 <= 4294967039) {
  ba = (c[ba >> 2] | 0) + (c[e >> 2] | 0) | 0;
  ca = (c[ca >> 2] | 0) + (c[f >> 2] | 0) | 0;
  da = (c[da >> 2] | 0) + (c[g >> 2] | 0) | 0;
  ea = (c[ea >> 2] | 0) + (c[h >> 2] | 0) | 0;
  fa = (c[fa >> 2] | 0) + (c[i >> 2] | 0) | 0;
  ga = (c[ga >> 2] | 0) + (c[j >> 2] | 0) | 0;
  ha = (c[ha >> 2] | 0) + (c[l >> 2] | 0) | 0;
  ia = (c[ia >> 2] | 0) + (c[m >> 2] | 0) | 0;
  ja = (c[ja >> 2] | 0) + (c[n >> 2] | 0) | 0;
  c[pa >> 2] = (c[na >> 2] | 0) + (c[oa >> 2] | 0);
  c[o >> 2] = ba;
  c[p >> 2] = ca;
  c[q >> 2] = da;
  c[r >> 2] = ea;
  c[s >> 2] = fa;
  c[t >> 2] = ga;
  c[u >> 2] = ha;
  c[v >> 2] = ia;
  c[w >> 2] = ja;
  sc(ma, pa);
  if ((((a[x >> 0] | a[ma >> 0] | a[y >> 0] | a[z >> 0] | a[A >> 0] | a[B >> 0] | a[C >> 0] | a[D >> 0] | a[E >> 0] | a[F >> 0] | a[G >> 0] | a[H >> 0] | a[I >> 0] | a[J >> 0] | a[K >> 0] | a[L >> 0] | a[M >> 0] | a[N >> 0] | a[O >> 0] | a[P >> 0] | a[Q >> 0] | a[R >> 0] | a[S >> 0] | a[T >> 0] | a[V >> 0] | a[W >> 0] | a[X >> 0] | a[Y >> 0] | a[Z >> 0] | a[_ >> 0] | a[$ >> 0] | a[aa >> 0]) & 255) + -1 | 0) >>> 0 > 4294967039) {
   ec(b, b, 64);
   break;
  } else {
   pa = -1;
   k = qa;
   return pa | 0;
  }
 } while (0);
 sc(ma, b);
 do if (((d[la >> 0] | 0) >>> 7 | 0) != (a[ma >> 0] & 1 | 0)) {
  sc(ma, b);
  if ((((a[x >> 0] | a[ma >> 0] | a[y >> 0] | a[z >> 0] | a[A >> 0] | a[B >> 0] | a[C >> 0] | a[D >> 0] | a[E >> 0] | a[F >> 0] | a[G >> 0] | a[H >> 0] | a[I >> 0] | a[J >> 0] | a[K >> 0] | a[L >> 0] | a[M >> 0] | a[N >> 0] | a[O >> 0] | a[P >> 0] | a[Q >> 0] | a[R >> 0] | a[S >> 0] | a[T >> 0] | a[V >> 0] | a[W >> 0] | a[X >> 0] | a[Y >> 0] | a[Z >> 0] | a[_ >> 0] | a[$ >> 0] | a[aa >> 0]) & 255) + -1 | 0) >>> 0 > 4294967039) {
   pa = -1;
   k = qa;
   return pa | 0;
  } else {
   _ = b + 4 | 0;
   aa = b + 8 | 0;
   ca = b + 12 | 0;
   ea = b + 16 | 0;
   ga = b + 20 | 0;
   ia = b + 24 | 0;
   la = b + 28 | 0;
   na = b + 32 | 0;
   pa = b + 36 | 0;
   Z = 0 - (c[_ >> 2] | 0) | 0;
   $ = 0 - (c[aa >> 2] | 0) | 0;
   ba = 0 - (c[ca >> 2] | 0) | 0;
   da = 0 - (c[ea >> 2] | 0) | 0;
   fa = 0 - (c[ga >> 2] | 0) | 0;
   ha = 0 - (c[ia >> 2] | 0) | 0;
   ja = 0 - (c[la >> 2] | 0) | 0;
   ma = 0 - (c[na >> 2] | 0) | 0;
   oa = 0 - (c[pa >> 2] | 0) | 0;
   c[b >> 2] = 0 - (c[b >> 2] | 0);
   c[_ >> 2] = Z;
   c[aa >> 2] = $;
   c[ca >> 2] = ba;
   c[ea >> 2] = da;
   c[ga >> 2] = fa;
   c[ia >> 2] = ha;
   c[la >> 2] = ja;
   c[na >> 2] = ma;
   c[pa >> 2] = oa;
   break;
  }
 } while (0);
 ec(b + 120 | 0, b, ka);
 pa = 0;
 k = qa;
 return pa | 0;
}

function Fc(b) {
 b = b | 0;
 var c = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0, ia = 0, ja = 0, ka = 0, la = 0, ma = 0, na = 0, oa = 0, pa = 0, qa = 0, ra = 0, sa = 0, ta = 0, ua = 0, va = 0;
 ma = b + 1 | 0;
 ja = b + 2 | 0;
 na = a[ja >> 0] | 0;
 ia = d[b >> 0] | 0;
 P = gg(d[ma >> 0] | 0 | 0, 0, 8) | 0;
 la = U() | 0;
 na = na & 255;
 qa = gg(na | 0, 0, 16) | 0;
 U() | 0;
 qa = P | ia | qa & 2031616;
 ia = b + 3 | 0;
 P = gg(d[ia >> 0] | 0 | 0, 0, 8) | 0;
 aa = U() | 0;
 ea = b + 4 | 0;
 _ = gg(d[ea >> 0] | 0 | 0, 0, 16) | 0;
 aa = aa | (U() | 0);
 da = b + 5 | 0;
 O = d[da >> 0] | 0;
 $ = gg(O | 0, 0, 24) | 0;
 aa = fg(P | na | _ | $ | 0, aa | (U() | 0) | 0, 5) | 0;
 U() | 0;
 $ = b + 6 | 0;
 _ = b + 7 | 0;
 na = a[_ >> 0] | 0;
 P = gg(d[$ >> 0] | 0 | 0, 0, 8) | 0;
 ra = U() | 0;
 na = na & 255;
 Z = gg(na | 0, 0, 16) | 0;
 ra = fg(P | O | Z | 0, ra | (U() | 0) | 0, 2) | 0;
 U() | 0;
 ra = ra & 2097151;
 Z = b + 8 | 0;
 O = gg(d[Z >> 0] | 0 | 0, 0, 8) | 0;
 P = U() | 0;
 V = b + 9 | 0;
 u = gg(d[V >> 0] | 0 | 0, 0, 16) | 0;
 P = P | (U() | 0);
 T = b + 10 | 0;
 A = d[T >> 0] | 0;
 S = gg(A | 0, 0, 24) | 0;
 P = fg(O | na | u | S | 0, P | (U() | 0) | 0, 7) | 0;
 U() | 0;
 S = b + 11 | 0;
 u = gg(d[S >> 0] | 0 | 0, 0, 8) | 0;
 na = U() | 0;
 O = b + 12 | 0;
 I = gg(d[O >> 0] | 0 | 0, 0, 16) | 0;
 na = na | (U() | 0);
 N = b + 13 | 0;
 w = d[N >> 0] | 0;
 J = gg(w | 0, 0, 24) | 0;
 na = fg(u | A | I | J | 0, na | (U() | 0) | 0, 4) | 0;
 U() | 0;
 na = na & 2097151;
 J = b + 14 | 0;
 I = b + 15 | 0;
 A = a[I >> 0] | 0;
 u = gg(d[J >> 0] | 0 | 0, 0, 8) | 0;
 v = U() | 0;
 A = A & 255;
 H = gg(A | 0, 0, 16) | 0;
 v = fg(u | w | H | 0, v | (U() | 0) | 0, 1) | 0;
 U() | 0;
 H = b + 16 | 0;
 w = gg(d[H >> 0] | 0 | 0, 0, 8) | 0;
 u = U() | 0;
 D = b + 17 | 0;
 y = gg(d[D >> 0] | 0 | 0, 0, 16) | 0;
 u = u | (U() | 0);
 C = b + 18 | 0;
 x = d[C >> 0] | 0;
 B = gg(x | 0, 0, 24) | 0;
 u = fg(w | A | y | B | 0, u | (U() | 0) | 0, 6) | 0;
 U() | 0;
 u = u & 2097151;
 B = b + 19 | 0;
 y = b + 20 | 0;
 A = a[y >> 0] | 0;
 w = gg(d[B >> 0] | 0 | 0, 0, 8) | 0;
 Q = U() | 0;
 A = gg(A & 255 | 0, 0, 16) | 0;
 Q = fg(w | x | A | 0, Q | (U() | 0) | 0, 3) | 0;
 A = U() | 0;
 x = b + 21 | 0;
 w = b + 22 | 0;
 t = b + 23 | 0;
 l = a[t >> 0] | 0;
 s = d[x >> 0] | 0;
 pa = gg(d[w >> 0] | 0 | 0, 0, 8) | 0;
 Y = U() | 0;
 l = l & 255;
 R = gg(l | 0, 0, 16) | 0;
 U() | 0;
 R = pa | s | R & 2031616;
 s = b + 24 | 0;
 pa = gg(d[s >> 0] | 0 | 0, 0, 8) | 0;
 r = U() | 0;
 o = b + 25 | 0;
 i = gg(d[o >> 0] | 0 | 0, 0, 16) | 0;
 r = r | (U() | 0);
 n = b + 26 | 0;
 ua = d[n >> 0] | 0;
 j = gg(ua | 0, 0, 24) | 0;
 r = fg(pa | l | i | j | 0, r | (U() | 0) | 0, 5) | 0;
 U() | 0;
 j = b + 27 | 0;
 i = b + 28 | 0;
 l = a[i >> 0] | 0;
 pa = gg(d[j >> 0] | 0 | 0, 0, 8) | 0;
 ga = U() | 0;
 l = l & 255;
 h = gg(l | 0, 0, 16) | 0;
 ga = fg(pa | ua | h | 0, ga | (U() | 0) | 0, 2) | 0;
 U() | 0;
 ga = ga & 2097151;
 h = b + 29 | 0;
 ua = gg(d[h >> 0] | 0 | 0, 0, 8) | 0;
 pa = U() | 0;
 g = b + 30 | 0;
 ca = gg(d[g >> 0] | 0 | 0, 0, 16) | 0;
 pa = pa | (U() | 0);
 c = b + 31 | 0;
 fa = gg(d[c >> 0] | 0 | 0, 0, 24) | 0;
 pa = fg(ua | l | ca | fa | 0, pa | (U() | 0) | 0, 7) | 0;
 fa = U() | 0;
 ca = $f(qa | 0, la | 0, 1048576, 0) | 0;
 l = fg(ca | 0, U() | 0, 21) | 0;
 l = $f(aa & 2097151 | 0, 0, l | 0, U() | 0) | 0;
 aa = U() | 0;
 ca = ag(qa | 0, la | 0, ca & 2097152 | 0, 0) | 0;
 la = U() | 0;
 qa = $f(ra | 0, 0, 1048576, 0) | 0;
 ua = fg(qa | 0, U() | 0, 21) | 0;
 ua = $f(P & 2097151 | 0, 0, ua | 0, U() | 0) | 0;
 P = U() | 0;
 p = $f(na | 0, 0, 1048576, 0) | 0;
 m = fg(p | 0, U() | 0, 21) | 0;
 m = $f(v & 2097151 | 0, 0, m | 0, U() | 0) | 0;
 v = U() | 0;
 K = $f(u | 0, 0, 1048576, 0) | 0;
 L = fg(K | 0, U() | 0, 21) | 0;
 L = $f(Q | 0, A | 0, L | 0, U() | 0) | 0;
 A = U() | 0;
 Q = $f(R | 0, Y | 0, 1048576, 0) | 0;
 f = fg(Q | 0, U() | 0, 21) | 0;
 f = $f(r & 2097151 | 0, 0, f | 0, U() | 0) | 0;
 r = U() | 0;
 ka = $f(ga | 0, 0, 1048576, 0) | 0;
 oa = fg(ka | 0, U() | 0, 21) | 0;
 oa = $f(pa | 0, fa | 0, oa | 0, U() | 0) | 0;
 fa = U() | 0;
 pa = $f(l | 0, aa | 0, 1048576, 0) | 0;
 ta = fg(pa | 0, U() | 0, 21) | 0;
 sa = U() | 0;
 pa = ag(l | 0, aa | 0, pa & 6291456 | 0, 0) | 0;
 aa = U() | 0;
 l = $f(ua | 0, P | 0, 1048576, 0) | 0;
 k = fg(l | 0, U() | 0, 21) | 0;
 e = U() | 0;
 l = ag(ua | 0, P | 0, l & 6291456 | 0, 0) | 0;
 P = U() | 0;
 ua = $f(m | 0, v | 0, 1048576, 0) | 0;
 E = fg(ua | 0, U() | 0, 21) | 0;
 z = U() | 0;
 ua = ag(m | 0, v | 0, ua & 6291456 | 0, 0) | 0;
 v = U() | 0;
 m = $f(L | 0, A | 0, 1048576, 0) | 0;
 F = fg(m | 0, U() | 0, 21) | 0;
 M = U() | 0;
 m = ag(L | 0, A | 0, m & 6291456 | 0, 0) | 0;
 A = U() | 0;
 L = $f(f | 0, r | 0, 1048576, 0) | 0;
 X = fg(L | 0, U() | 0, 21) | 0;
 ba = U() | 0;
 L = ag(f | 0, r | 0, L & 6291456 | 0, 0) | 0;
 r = U() | 0;
 f = $f(oa | 0, fa | 0, 1048576, 0) | 0;
 ha = U() | 0;
 va = fg(f | 0, ha | 0, 21) | 0;
 G = U() | 0;
 ha = ag(oa | 0, fa | 0, f & -2097152 | 0, ha & 134217727 | 0) | 0;
 f = U() | 0;
 fa = _f(va | 0, G | 0, 666643, 0) | 0;
 la = $f(fa | 0, U() | 0, ca | 0, la | 0) | 0;
 ca = U() | 0;
 fa = _f(va | 0, G | 0, 470296, 0) | 0;
 fa = $f(pa | 0, aa | 0, fa | 0, U() | 0) | 0;
 aa = U() | 0;
 pa = _f(va | 0, G | 0, 654183, 0) | 0;
 oa = U() | 0;
 W = _f(va | 0, G | 0, -997805, -1) | 0;
 W = $f(l | 0, P | 0, W | 0, U() | 0) | 0;
 P = U() | 0;
 l = _f(va | 0, G | 0, 136657, 0) | 0;
 q = U() | 0;
 G = _f(va | 0, G | 0, -683901, -1) | 0;
 G = $f(ua | 0, v | 0, G | 0, U() | 0) | 0;
 v = U() | 0;
 ca = eg(la | 0, ca | 0, 21) | 0;
 ca = $f(fa | 0, aa | 0, ca | 0, U() | 0) | 0;
 aa = eg(ca | 0, U() | 0, 21) | 0;
 fa = U() | 0;
 ra = $f(ta | 0, sa | 0, ra | 0, 0) | 0;
 qa = ag(ra | 0, U() | 0, qa & 2097152 | 0, 0) | 0;
 oa = $f(qa | 0, U() | 0, pa | 0, oa | 0) | 0;
 fa = $f(oa | 0, U() | 0, aa | 0, fa | 0) | 0;
 aa = eg(fa | 0, U() | 0, 21) | 0;
 aa = $f(W | 0, P | 0, aa | 0, U() | 0) | 0;
 P = eg(aa | 0, U() | 0, 21) | 0;
 W = U() | 0;
 e = $f(na | 0, 0, k | 0, e | 0) | 0;
 p = ag(e | 0, U() | 0, p & 2097152 | 0, 0) | 0;
 q = $f(p | 0, U() | 0, l | 0, q | 0) | 0;
 W = $f(q | 0, U() | 0, P | 0, W | 0) | 0;
 P = eg(W | 0, U() | 0, 21) | 0;
 P = $f(G | 0, v | 0, P | 0, U() | 0) | 0;
 v = eg(P | 0, U() | 0, 21) | 0;
 G = U() | 0;
 z = $f(u | 0, 0, E | 0, z | 0) | 0;
 K = ag(z | 0, U() | 0, K & 2097152 | 0, 0) | 0;
 G = $f(K | 0, U() | 0, v | 0, G | 0) | 0;
 v = eg(G | 0, U() | 0, 21) | 0;
 A = $f(v | 0, U() | 0, m | 0, A | 0) | 0;
 m = eg(A | 0, U() | 0, 21) | 0;
 v = U() | 0;
 Y = $f(F | 0, M | 0, R | 0, Y | 0) | 0;
 Q = ag(Y | 0, U() | 0, Q & 2097152 | 0, 0) | 0;
 v = $f(Q | 0, U() | 0, m | 0, v | 0) | 0;
 m = eg(v | 0, U() | 0, 21) | 0;
 r = $f(m | 0, U() | 0, L | 0, r | 0) | 0;
 L = eg(r | 0, U() | 0, 21) | 0;
 m = U() | 0;
 ga = $f(X | 0, ba | 0, ga | 0, 0) | 0;
 ka = ag(ga | 0, U() | 0, ka & 2097152 | 0, 0) | 0;
 m = $f(ka | 0, U() | 0, L | 0, m | 0) | 0;
 L = eg(m | 0, U() | 0, 21) | 0;
 f = $f(L | 0, U() | 0, ha | 0, f | 0) | 0;
 ha = eg(f | 0, U() | 0, 21) | 0;
 L = U() | 0;
 ka = _f(ha | 0, L | 0, 666643, 0) | 0;
 la = $f(ka | 0, U() | 0, la & 2097151 | 0, 0) | 0;
 ka = U() | 0;
 ga = _f(ha | 0, L | 0, 470296, 0) | 0;
 ca = $f(ga | 0, U() | 0, ca & 2097151 | 0, 0) | 0;
 ga = U() | 0;
 ba = _f(ha | 0, L | 0, 654183, 0) | 0;
 fa = $f(ba | 0, U() | 0, fa & 2097151 | 0, 0) | 0;
 ba = U() | 0;
 X = _f(ha | 0, L | 0, -997805, -1) | 0;
 aa = $f(X | 0, U() | 0, aa & 2097151 | 0, 0) | 0;
 X = U() | 0;
 Q = _f(ha | 0, L | 0, 136657, 0) | 0;
 W = $f(Q | 0, U() | 0, W & 2097151 | 0, 0) | 0;
 Q = U() | 0;
 L = _f(ha | 0, L | 0, -683901, -1) | 0;
 P = $f(L | 0, U() | 0, P & 2097151 | 0, 0) | 0;
 L = U() | 0;
 ha = eg(la | 0, ka | 0, 21) | 0;
 ha = $f(ca | 0, ga | 0, ha | 0, U() | 0) | 0;
 ga = U() | 0;
 ca = eg(ha | 0, ga | 0, 21) | 0;
 ca = $f(fa | 0, ba | 0, ca | 0, U() | 0) | 0;
 ba = U() | 0;
 fa = ha & 2097151;
 Y = eg(ca | 0, ba | 0, 21) | 0;
 Y = $f(aa | 0, X | 0, Y | 0, U() | 0) | 0;
 X = U() | 0;
 aa = ca & 2097151;
 R = eg(Y | 0, X | 0, 21) | 0;
 R = $f(W | 0, Q | 0, R | 0, U() | 0) | 0;
 Q = U() | 0;
 W = Y & 2097151;
 M = eg(R | 0, Q | 0, 21) | 0;
 M = $f(P | 0, L | 0, M | 0, U() | 0) | 0;
 L = U() | 0;
 P = R & 2097151;
 F = eg(M | 0, L | 0, 21) | 0;
 G = $f(F | 0, U() | 0, G & 2097151 | 0, 0) | 0;
 F = U() | 0;
 K = M & 2097151;
 z = eg(G | 0, F | 0, 21) | 0;
 A = $f(z | 0, U() | 0, A & 2097151 | 0, 0) | 0;
 z = U() | 0;
 E = G & 2097151;
 u = eg(A | 0, z | 0, 21) | 0;
 v = $f(u | 0, U() | 0, v & 2097151 | 0, 0) | 0;
 u = U() | 0;
 q = eg(v | 0, u | 0, 21) | 0;
 r = $f(q | 0, U() | 0, r & 2097151 | 0, 0) | 0;
 q = U() | 0;
 l = eg(r | 0, q | 0, 21) | 0;
 m = $f(l | 0, U() | 0, m & 2097151 | 0, 0) | 0;
 l = U() | 0;
 p = r & 2097151;
 e = eg(m | 0, l | 0, 21) | 0;
 f = $f(e | 0, U() | 0, f & 2097151 | 0, 0) | 0;
 e = U() | 0;
 k = m & 2097151;
 a[b >> 0] = la;
 b = fg(la | 0, ka | 0, 8) | 0;
 U() | 0;
 a[ma >> 0] = b;
 b = fg(la | 0, ka | 0, 16) | 0;
 U() | 0;
 ka = gg(fa | 0, 0, 5) | 0;
 U() | 0;
 a[ja >> 0] = ka | b & 31;
 b = fg(ha | 0, ga | 0, 3) | 0;
 U() | 0;
 a[ia >> 0] = b;
 b = fg(ha | 0, ga | 0, 11) | 0;
 U() | 0;
 a[ea >> 0] = b;
 b = fg(fa | 0, 0, 19) | 0;
 fa = U() | 0;
 ea = gg(aa | 0, 0, 2) | 0;
 U() | 0 | fa;
 a[da >> 0] = ea | b;
 b = fg(ca | 0, ba | 0, 6) | 0;
 U() | 0;
 a[$ >> 0] = b;
 b = fg(aa | 0, 0, 14) | 0;
 aa = U() | 0;
 $ = gg(W | 0, 0, 7) | 0;
 U() | 0 | aa;
 a[_ >> 0] = $ | b;
 b = fg(Y | 0, X | 0, 1) | 0;
 U() | 0;
 a[Z >> 0] = b;
 b = fg(Y | 0, X | 0, 9) | 0;
 U() | 0;
 a[V >> 0] = b;
 b = fg(W | 0, 0, 17) | 0;
 W = U() | 0;
 V = gg(P | 0, 0, 4) | 0;
 U() | 0 | W;
 a[T >> 0] = V | b;
 b = fg(R | 0, Q | 0, 4) | 0;
 U() | 0;
 a[S >> 0] = b;
 b = fg(R | 0, Q | 0, 12) | 0;
 U() | 0;
 a[O >> 0] = b;
 b = fg(P | 0, 0, 20) | 0;
 P = U() | 0;
 O = gg(K | 0, 0, 1) | 0;
 U() | 0 | P;
 a[N >> 0] = O | b;
 b = fg(M | 0, L | 0, 7) | 0;
 U() | 0;
 a[J >> 0] = b;
 b = fg(K | 0, 0, 15) | 0;
 K = U() | 0;
 J = gg(E | 0, 0, 6) | 0;
 U() | 0 | K;
 a[I >> 0] = J | b;
 b = fg(G | 0, F | 0, 2) | 0;
 U() | 0;
 a[H >> 0] = b;
 b = fg(G | 0, F | 0, 10) | 0;
 U() | 0;
 a[D >> 0] = b;
 b = fg(E | 0, 0, 18) | 0;
 E = U() | 0;
 D = gg(A | 0, z | 0, 3) | 0;
 U() | 0 | E;
 a[C >> 0] = D | b;
 b = fg(A | 0, z | 0, 5) | 0;
 U() | 0;
 a[B >> 0] = b;
 b = fg(A | 0, z | 0, 13) | 0;
 U() | 0;
 a[y >> 0] = b;
 a[x >> 0] = v;
 b = fg(v | 0, u | 0, 8) | 0;
 U() | 0;
 a[w >> 0] = b;
 b = fg(v | 0, u | 0, 16) | 0;
 U() | 0;
 u = gg(p | 0, 0, 5) | 0;
 U() | 0;
 a[t >> 0] = u | b & 31;
 b = fg(r | 0, q | 0, 3) | 0;
 U() | 0;
 a[s >> 0] = b;
 b = fg(r | 0, q | 0, 11) | 0;
 U() | 0;
 a[o >> 0] = b;
 b = fg(p | 0, 0, 19) | 0;
 p = U() | 0;
 o = gg(k | 0, 0, 2) | 0;
 U() | 0 | p;
 a[n >> 0] = o | b;
 b = fg(m | 0, l | 0, 6) | 0;
 U() | 0;
 a[j >> 0] = b;
 b = fg(k | 0, 0, 14) | 0;
 k = U() | 0;
 j = gg(f | 0, e | 0, 7) | 0;
 U() | 0 | k;
 a[i >> 0] = j | b;
 b = fg(f | 0, e | 0, 1) | 0;
 U() | 0;
 a[h >> 0] = b;
 b = fg(f | 0, e | 0, 9) | 0;
 U() | 0;
 a[g >> 0] = b;
 b = eg(f | 0, e | 0, 17) | 0;
 U() | 0;
 a[c >> 0] = b;
 return;
}

function Mc(a, b) {
 a = a | 0;
 b = b | 0;
 var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0, ia = 0, ja = 0, ka = 0, la = 0, ma = 0, na = 0, oa = 0, pa = 0, qa = 0, ra = 0, sa = 0, ta = 0, ua = 0, va = 0, wa = 0, xa = 0, ya = 0, za = 0, Aa = 0, Ba = 0, Ca = 0, Da = 0;
 na = k;
 k = k + 48 | 0;
 la = na;
 if ((b | 0) <= 0) {
  k = na;
  return;
 }
 ma = a + 8 | 0;
 e = a;
 L = a + 160 | 0;
 g = L;
 Q = a + 128 | 0;
 x = Q;
 R = a + 168 | 0;
 i = R;
 S = a + 136 | 0;
 B = S;
 T = a + 176 | 0;
 l = T;
 V = a + 144 | 0;
 F = V;
 W = a + 184 | 0;
 n = W;
 X = a + 152 | 0;
 J = X;
 Y = a + 192 | 0;
 p = Y;
 Z = a + 80 | 0;
 r = Z;
 _ = a + 120 | 0;
 t = _;
 M = a + 88 | 0;
 v = M;
 N = a + 96 | 0;
 z = N;
 O = a + 104 | 0;
 D = O;
 P = a + 112 | 0;
 H = P;
 $ = a + 40 | 0;
 aa = a + 48 | 0;
 ba = la + 8 | 0;
 ca = a + 16 | 0;
 da = a + 56 | 0;
 ea = la + 16 | 0;
 fa = a + 24 | 0;
 ga = a + 64 | 0;
 ha = la + 24 | 0;
 ia = a + 32 | 0;
 ja = a + 72 | 0;
 ka = la + 32 | 0;
 K = 0;
 d = c[e >> 2] | 0;
 e = c[e + 4 >> 2] | 0;
 q = c[r >> 2] | 0;
 r = c[r + 4 >> 2] | 0;
 s = c[t >> 2] | 0;
 t = c[t + 4 >> 2] | 0;
 f = c[g >> 2] | 0;
 g = c[g + 4 >> 2] | 0;
 u = c[v >> 2] | 0;
 v = c[v + 4 >> 2] | 0;
 w = c[x >> 2] | 0;
 x = c[x + 4 >> 2] | 0;
 h = c[i >> 2] | 0;
 i = c[i + 4 >> 2] | 0;
 y = c[z >> 2] | 0;
 z = c[z + 4 >> 2] | 0;
 A = c[B >> 2] | 0;
 B = c[B + 4 >> 2] | 0;
 j = c[l >> 2] | 0;
 l = c[l + 4 >> 2] | 0;
 C = c[D >> 2] | 0;
 D = c[D + 4 >> 2] | 0;
 E = c[F >> 2] | 0;
 F = c[F + 4 >> 2] | 0;
 m = c[n >> 2] | 0;
 n = c[n + 4 >> 2] | 0;
 G = c[H >> 2] | 0;
 H = c[H + 4 >> 2] | 0;
 I = c[J >> 2] | 0;
 J = c[J + 4 >> 2] | 0;
 o = c[p >> 2] | 0;
 p = c[p + 4 >> 2] | 0;
 do {
  Ca = $;
  Da = c[Ca >> 2] | 0;
  Ca = c[Ca + 4 >> 2] | 0;
  Ba = Da ^ d ^ q ^ s ^ f;
  Aa = Ca ^ e ^ r ^ t ^ g;
  ya = la;
  c[ya >> 2] = Ba;
  c[ya + 4 >> 2] = Aa;
  ya = ma;
  za = c[ya >> 2] | 0;
  ya = c[ya + 4 >> 2] | 0;
  wa = aa;
  xa = c[wa >> 2] | 0;
  wa = c[wa + 4 >> 2] | 0;
  va = xa ^ za ^ u ^ w ^ h;
  ua = wa ^ ya ^ v ^ x ^ i;
  sa = ba;
  c[sa >> 2] = va;
  c[sa + 4 >> 2] = ua;
  sa = ca;
  ta = c[sa >> 2] | 0;
  sa = c[sa + 4 >> 2] | 0;
  qa = da;
  ra = c[qa >> 2] | 0;
  qa = c[qa + 4 >> 2] | 0;
  pa = ra ^ ta ^ y ^ A ^ j;
  oa = qa ^ sa ^ z ^ B ^ l;
  i = ea;
  c[i >> 2] = pa;
  c[i + 4 >> 2] = oa;
  i = fa;
  h = c[i >> 2] | 0;
  i = c[i + 4 >> 2] | 0;
  l = ga;
  j = c[l >> 2] | 0;
  l = c[l + 4 >> 2] | 0;
  m = j ^ h ^ C ^ E ^ m;
  w = l ^ i ^ D ^ F ^ n;
  A = ha;
  c[A >> 2] = m;
  c[A + 4 >> 2] = w;
  A = ia;
  x = c[A >> 2] | 0;
  A = c[A + 4 >> 2] | 0;
  E = ja;
  B = c[E >> 2] | 0;
  E = c[E + 4 >> 2] | 0;
  o = B ^ x ^ G ^ I ^ o;
  J = E ^ A ^ H ^ J ^ p;
  p = ka;
  c[p >> 2] = o;
  c[p + 4 >> 2] = J;
  p = gg(va | 0, ua | 0, 1) | 0;
  I = U() | 0;
  F = fg(va | 0, ua | 0, 63) | 0;
  F = (p | F) ^ o;
  I = (I | (U() | 0)) ^ J;
  p = a;
  c[p >> 2] = F ^ d;
  c[p + 4 >> 2] = I ^ e;
  e = $;
  c[e >> 2] = F ^ Da;
  c[e + 4 >> 2] = I ^ Ca;
  e = Z;
  c[e >> 2] = F ^ q;
  c[e + 4 >> 2] = I ^ r;
  e = _;
  c[e >> 2] = F ^ s;
  c[e + 4 >> 2] = I ^ t;
  e = L;
  c[e >> 2] = F ^ f;
  c[e + 4 >> 2] = I ^ g;
  e = gg(pa | 0, oa | 0, 1) | 0;
  I = U() | 0;
  d = fg(pa | 0, oa | 0, 63) | 0;
  d = (e | d) ^ Ba;
  I = (I | (U() | 0)) ^ Aa;
  e = d ^ za;
  f = I ^ ya;
  F = ma;
  c[F >> 2] = e;
  c[F + 4 >> 2] = f;
  F = aa;
  c[F >> 2] = d ^ xa;
  c[F + 4 >> 2] = I ^ wa;
  F = M;
  c[F >> 2] = d ^ u;
  c[F + 4 >> 2] = I ^ v;
  u = Q;
  F = I ^ c[u + 4 >> 2];
  v = Q;
  c[v >> 2] = d ^ c[u >> 2];
  c[v + 4 >> 2] = F;
  v = R;
  I = I ^ c[v + 4 >> 2];
  F = R;
  c[F >> 2] = d ^ c[v >> 2];
  c[F + 4 >> 2] = I;
  F = gg(m | 0, w | 0, 1) | 0;
  I = U() | 0;
  v = fg(m | 0, w | 0, 63) | 0;
  v = (F | v) ^ va;
  I = (I | (U() | 0)) ^ ua;
  F = ca;
  c[F >> 2] = v ^ ta;
  c[F + 4 >> 2] = I ^ sa;
  F = da;
  c[F >> 2] = v ^ ra;
  c[F + 4 >> 2] = I ^ qa;
  F = N;
  c[F >> 2] = v ^ y;
  c[F + 4 >> 2] = I ^ z;
  z = S;
  F = I ^ c[z + 4 >> 2];
  d = S;
  c[d >> 2] = v ^ c[z >> 2];
  c[d + 4 >> 2] = F;
  d = T;
  I = I ^ c[d + 4 >> 2];
  F = T;
  c[F >> 2] = v ^ c[d >> 2];
  c[F + 4 >> 2] = I;
  F = gg(o | 0, J | 0, 1) | 0;
  I = U() | 0;
  J = fg(o | 0, J | 0, 63) | 0;
  J = (F | J) ^ pa;
  I = (I | (U() | 0)) ^ oa;
  F = fa;
  c[F >> 2] = J ^ h;
  c[F + 4 >> 2] = I ^ i;
  F = ga;
  c[F >> 2] = J ^ j;
  c[F + 4 >> 2] = I ^ l;
  F = O;
  c[F >> 2] = J ^ C;
  c[F + 4 >> 2] = I ^ D;
  D = V;
  F = I ^ c[D + 4 >> 2];
  d = V;
  c[d >> 2] = J ^ c[D >> 2];
  c[d + 4 >> 2] = F;
  d = W;
  I = I ^ c[d + 4 >> 2];
  F = W;
  c[F >> 2] = J ^ c[d >> 2];
  c[F + 4 >> 2] = I;
  F = la;
  I = c[F >> 2] | 0;
  F = c[F + 4 >> 2] | 0;
  d = gg(I | 0, F | 0, 1) | 0;
  J = U() | 0;
  F = fg(I | 0, F | 0, 63) | 0;
  F = (d | F) ^ m;
  J = (J | (U() | 0)) ^ w;
  d = ia;
  c[d >> 2] = F ^ x;
  c[d + 4 >> 2] = J ^ A;
  d = ja;
  c[d >> 2] = F ^ B;
  c[d + 4 >> 2] = J ^ E;
  d = P;
  c[d >> 2] = F ^ G;
  c[d + 4 >> 2] = J ^ H;
  H = X;
  d = J ^ c[H + 4 >> 2];
  I = X;
  c[I >> 2] = F ^ c[H >> 2];
  c[I + 4 >> 2] = d;
  I = Y;
  J = J ^ c[I + 4 >> 2];
  d = Y;
  c[d >> 2] = F ^ c[I >> 2];
  c[d + 4 >> 2] = J;
  d = 0;
  do {
   Da = a + (c[32416 + (d << 2) >> 2] << 3) | 0;
   Aa = Da;
   ya = e;
   e = c[Aa >> 2] | 0;
   za = f;
   f = c[Aa + 4 >> 2] | 0;
   Aa = c[32320 + (d << 2) >> 2] | 0;
   Ba = gg(ya | 0, za | 0, Aa | 0) | 0;
   Ca = U() | 0;
   Aa = fg(ya | 0, za | 0, 64 - Aa | 0) | 0;
   Ca = U() | 0 | Ca;
   c[Da >> 2] = Aa | Ba;
   c[Da + 4 >> 2] = Ca;
   d = d + 1 | 0;
  } while ((d | 0) != 24);
  d = la;
  e = a;
  f = d + 40 | 0;
  do {
   c[d >> 2] = c[e >> 2];
   d = d + 4 | 0;
   e = e + 4 | 0;
  } while ((d | 0) < (f | 0));
  d = ba;
  Da = c[d >> 2] | 0;
  d = c[d + 4 >> 2] | 0;
  Aa = ea;
  Ca = c[Aa >> 2] | 0;
  Aa = c[Aa + 4 >> 2] | 0;
  e = a;
  za = c[e + 4 >> 2] ^ Aa & ~d;
  f = a;
  c[f >> 2] = c[e >> 2] ^ Ca & ~Da;
  c[f + 4 >> 2] = za;
  f = ha;
  za = c[f >> 2] | 0;
  f = c[f + 4 >> 2] | 0;
  e = ma;
  Aa = c[e + 4 >> 2] ^ f & ~Aa;
  Ba = ma;
  c[Ba >> 2] = c[e >> 2] ^ za & ~Ca;
  c[Ba + 4 >> 2] = Aa;
  Ba = ka;
  Aa = c[Ba >> 2] | 0;
  Ba = c[Ba + 4 >> 2] | 0;
  Ca = ca;
  f = c[Ca + 4 >> 2] ^ Ba & ~f;
  e = ca;
  c[e >> 2] = c[Ca >> 2] ^ Aa & ~za;
  c[e + 4 >> 2] = f;
  e = la;
  f = c[e >> 2] | 0;
  e = c[e + 4 >> 2] | 0;
  za = fa;
  Ba = c[za + 4 >> 2] ^ e & ~Ba;
  Ca = fa;
  c[Ca >> 2] = c[za >> 2] ^ f & ~Aa;
  c[Ca + 4 >> 2] = Ba;
  Ca = ia;
  e = c[Ca + 4 >> 2] ^ d & ~e;
  d = ia;
  c[d >> 2] = c[Ca >> 2] ^ Da & ~f;
  c[d + 4 >> 2] = e;
  d = la;
  e = $;
  f = d + 40 | 0;
  do {
   c[d >> 2] = c[e >> 2];
   d = d + 4 | 0;
   e = e + 4 | 0;
  } while ((d | 0) < (f | 0));
  d = ba;
  Da = c[d >> 2] | 0;
  d = c[d + 4 >> 2] | 0;
  Aa = ea;
  Ca = c[Aa >> 2] | 0;
  Aa = c[Aa + 4 >> 2] | 0;
  e = $;
  za = c[e + 4 >> 2] ^ Aa & ~d;
  f = $;
  c[f >> 2] = c[e >> 2] ^ Ca & ~Da;
  c[f + 4 >> 2] = za;
  f = ha;
  za = c[f >> 2] | 0;
  f = c[f + 4 >> 2] | 0;
  e = aa;
  Aa = c[e + 4 >> 2] ^ f & ~Aa;
  Ba = aa;
  c[Ba >> 2] = c[e >> 2] ^ za & ~Ca;
  c[Ba + 4 >> 2] = Aa;
  Ba = ka;
  Aa = c[Ba >> 2] | 0;
  Ba = c[Ba + 4 >> 2] | 0;
  Ca = da;
  f = c[Ca + 4 >> 2] ^ Ba & ~f;
  e = da;
  c[e >> 2] = c[Ca >> 2] ^ Aa & ~za;
  c[e + 4 >> 2] = f;
  e = la;
  f = c[e >> 2] | 0;
  e = c[e + 4 >> 2] | 0;
  za = ga;
  Ba = c[za + 4 >> 2] ^ e & ~Ba;
  Ca = ga;
  c[Ca >> 2] = c[za >> 2] ^ f & ~Aa;
  c[Ca + 4 >> 2] = Ba;
  Ca = ja;
  e = c[Ca + 4 >> 2] ^ d & ~e;
  d = ja;
  c[d >> 2] = c[Ca >> 2] ^ Da & ~f;
  c[d + 4 >> 2] = e;
  d = la;
  e = Z;
  f = d + 40 | 0;
  do {
   c[d >> 2] = c[e >> 2];
   d = d + 4 | 0;
   e = e + 4 | 0;
  } while ((d | 0) < (f | 0));
  d = ba;
  f = c[d >> 2] | 0;
  d = c[d + 4 >> 2] | 0;
  v = ea;
  u = c[v >> 2] | 0;
  v = c[v + 4 >> 2] | 0;
  r = Z;
  q = c[r >> 2] ^ u & ~f;
  r = c[r + 4 >> 2] ^ v & ~d;
  z = Z;
  c[z >> 2] = q;
  c[z + 4 >> 2] = r;
  z = ha;
  y = c[z >> 2] | 0;
  z = c[z + 4 >> 2] | 0;
  D = M;
  u = c[D >> 2] ^ y & ~u;
  v = c[D + 4 >> 2] ^ z & ~v;
  D = M;
  c[D >> 2] = u;
  c[D + 4 >> 2] = v;
  D = ka;
  C = c[D >> 2] | 0;
  D = c[D + 4 >> 2] | 0;
  H = N;
  y = c[H >> 2] ^ C & ~y;
  z = c[H + 4 >> 2] ^ D & ~z;
  H = N;
  c[H >> 2] = y;
  c[H + 4 >> 2] = z;
  H = la;
  G = c[H >> 2] | 0;
  H = c[H + 4 >> 2] | 0;
  e = O;
  C = c[e >> 2] ^ G & ~C;
  D = c[e + 4 >> 2] ^ H & ~D;
  e = O;
  c[e >> 2] = C;
  c[e + 4 >> 2] = D;
  e = P;
  G = c[e >> 2] ^ f & ~G;
  H = c[e + 4 >> 2] ^ d & ~H;
  d = P;
  c[d >> 2] = G;
  c[d + 4 >> 2] = H;
  d = la;
  e = _;
  f = d + 40 | 0;
  do {
   c[d >> 2] = c[e >> 2];
   d = d + 4 | 0;
   e = e + 4 | 0;
  } while ((d | 0) < (f | 0));
  d = ba;
  f = c[d >> 2] | 0;
  d = c[d + 4 >> 2] | 0;
  x = ea;
  w = c[x >> 2] | 0;
  x = c[x + 4 >> 2] | 0;
  t = _;
  s = c[t >> 2] ^ w & ~f;
  t = c[t + 4 >> 2] ^ x & ~d;
  B = _;
  c[B >> 2] = s;
  c[B + 4 >> 2] = t;
  B = ha;
  A = c[B >> 2] | 0;
  B = c[B + 4 >> 2] | 0;
  F = Q;
  w = c[F >> 2] ^ A & ~w;
  x = c[F + 4 >> 2] ^ B & ~x;
  F = Q;
  c[F >> 2] = w;
  c[F + 4 >> 2] = x;
  F = ka;
  E = c[F >> 2] | 0;
  F = c[F + 4 >> 2] | 0;
  J = S;
  A = c[J >> 2] ^ E & ~A;
  B = c[J + 4 >> 2] ^ F & ~B;
  J = S;
  c[J >> 2] = A;
  c[J + 4 >> 2] = B;
  J = la;
  I = c[J >> 2] | 0;
  J = c[J + 4 >> 2] | 0;
  e = V;
  E = c[e >> 2] ^ I & ~E;
  F = c[e + 4 >> 2] ^ J & ~F;
  e = V;
  c[e >> 2] = E;
  c[e + 4 >> 2] = F;
  e = X;
  I = c[e >> 2] ^ f & ~I;
  J = c[e + 4 >> 2] ^ d & ~J;
  d = X;
  c[d >> 2] = I;
  c[d + 4 >> 2] = J;
  d = la;
  e = L;
  f = d + 40 | 0;
  do {
   c[d >> 2] = c[e >> 2];
   d = d + 4 | 0;
   e = e + 4 | 0;
  } while ((d | 0) < (f | 0));
  e = ba;
  d = c[e >> 2] | 0;
  e = c[e + 4 >> 2] | 0;
  i = ea;
  h = c[i >> 2] | 0;
  i = c[i + 4 >> 2] | 0;
  g = L;
  f = c[g >> 2] ^ h & ~d;
  g = c[g + 4 >> 2] ^ i & ~e;
  l = L;
  c[l >> 2] = f;
  c[l + 4 >> 2] = g;
  l = ha;
  j = c[l >> 2] | 0;
  l = c[l + 4 >> 2] | 0;
  n = R;
  h = c[n >> 2] ^ j & ~h;
  i = c[n + 4 >> 2] ^ l & ~i;
  n = R;
  c[n >> 2] = h;
  c[n + 4 >> 2] = i;
  n = ka;
  m = c[n >> 2] | 0;
  n = c[n + 4 >> 2] | 0;
  p = T;
  j = c[p >> 2] ^ m & ~j;
  l = c[p + 4 >> 2] ^ n & ~l;
  p = T;
  c[p >> 2] = j;
  c[p + 4 >> 2] = l;
  p = la;
  o = c[p >> 2] | 0;
  p = c[p + 4 >> 2] | 0;
  Da = W;
  m = c[Da >> 2] ^ o & ~m;
  n = c[Da + 4 >> 2] ^ p & ~n;
  Da = W;
  c[Da >> 2] = m;
  c[Da + 4 >> 2] = n;
  Da = Y;
  o = c[Da >> 2] ^ d & ~o;
  p = c[Da + 4 >> 2] ^ e & ~p;
  e = Y;
  c[e >> 2] = o;
  c[e + 4 >> 2] = p;
  e = 32128 + (K << 3) | 0;
  Da = a;
  d = c[Da >> 2] ^ c[e >> 2];
  e = c[Da + 4 >> 2] ^ c[e + 4 >> 2];
  Da = a;
  c[Da >> 2] = d;
  c[Da + 4 >> 2] = e;
  K = K + 1 | 0;
 } while ((K | 0) != (b | 0));
 k = na;
 return;
}

function jc(a, b) {
 a = a | 0;
 b = b | 0;
 var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0, ia = 0, ja = 0, ka = 0, la = 0, ma = 0, na = 0, oa = 0, pa = 0, qa = 0, ra = 0, sa = 0, ta = 0, ua = 0, va = 0, wa = 0, xa = 0, ya = 0, za = 0, Aa = 0, Ba = 0, Ca = 0, Da = 0, Ea = 0, Fa = 0, Ga = 0, Ha = 0, Ia = 0, Ja = 0, Ka = 0, La = 0, Ma = 0, Na = 0, Oa = 0, Pa = 0, Qa = 0, Ra = 0, Sa = 0, Ta = 0, Ua = 0, Va = 0, Wa = 0, Xa = 0, Ya = 0, Za = 0, _a = 0, $a = 0, ab = 0, bb = 0, cb = 0, db = 0, eb = 0, fb = 0, gb = 0;
 bb = c[b >> 2] | 0;
 La = c[b + 4 >> 2] | 0;
 t = c[b + 8 >> 2] | 0;
 da = c[b + 12 >> 2] | 0;
 u = c[b + 16 >> 2] | 0;
 db = c[b + 20 >> 2] | 0;
 j = c[b + 24 >> 2] | 0;
 pa = c[b + 28 >> 2] | 0;
 g = c[b + 32 >> 2] | 0;
 q = c[b + 36 >> 2] | 0;
 k = bb << 1;
 r = La << 1;
 Xa = t << 1;
 w = da << 1;
 Fa = u << 1;
 p = db << 1;
 oa = j << 1;
 v = pa << 1;
 Wa = db * 38 | 0;
 Ja = j * 19 | 0;
 fa = pa * 38 | 0;
 X = g * 19 | 0;
 gb = q * 38 | 0;
 cb = ((bb | 0) < 0) << 31 >> 31;
 cb = _f(bb | 0, cb | 0, bb | 0, cb | 0) | 0;
 bb = U() | 0;
 l = ((k | 0) < 0) << 31 >> 31;
 Ma = ((La | 0) < 0) << 31 >> 31;
 Ua = _f(k | 0, l | 0, La | 0, Ma | 0) | 0;
 Ta = U() | 0;
 o = ((t | 0) < 0) << 31 >> 31;
 Oa = _f(t | 0, o | 0, k | 0, l | 0) | 0;
 Na = U() | 0;
 ea = ((da | 0) < 0) << 31 >> 31;
 Ea = _f(da | 0, ea | 0, k | 0, l | 0) | 0;
 Da = U() | 0;
 e = ((u | 0) < 0) << 31 >> 31;
 sa = _f(u | 0, e | 0, k | 0, l | 0) | 0;
 ra = U() | 0;
 eb = ((db | 0) < 0) << 31 >> 31;
 ia = _f(db | 0, eb | 0, k | 0, l | 0) | 0;
 ha = U() | 0;
 s = ((j | 0) < 0) << 31 >> 31;
 _ = _f(j | 0, s | 0, k | 0, l | 0) | 0;
 Z = U() | 0;
 qa = ((pa | 0) < 0) << 31 >> 31;
 P = _f(pa | 0, qa | 0, k | 0, l | 0) | 0;
 O = U() | 0;
 h = ((g | 0) < 0) << 31 >> 31;
 F = _f(g | 0, h | 0, k | 0, l | 0) | 0;
 E = U() | 0;
 b = ((q | 0) < 0) << 31 >> 31;
 l = _f(q | 0, b | 0, k | 0, l | 0) | 0;
 k = U() | 0;
 d = ((r | 0) < 0) << 31 >> 31;
 Ma = _f(r | 0, d | 0, La | 0, Ma | 0) | 0;
 La = U() | 0;
 Ca = _f(r | 0, d | 0, t | 0, o | 0) | 0;
 Ba = U() | 0;
 f = ((w | 0) < 0) << 31 >> 31;
 wa = _f(w | 0, f | 0, r | 0, d | 0) | 0;
 va = U() | 0;
 ma = _f(u | 0, e | 0, r | 0, d | 0) | 0;
 la = U() | 0;
 x = ((p | 0) < 0) << 31 >> 31;
 aa = _f(p | 0, x | 0, r | 0, d | 0) | 0;
 $ = U() | 0;
 R = _f(j | 0, s | 0, r | 0, d | 0) | 0;
 Q = U() | 0;
 i = ((v | 0) < 0) << 31 >> 31;
 H = _f(v | 0, i | 0, r | 0, d | 0) | 0;
 G = U() | 0;
 m = _f(g | 0, h | 0, r | 0, d | 0) | 0;
 n = U() | 0;
 fb = ((gb | 0) < 0) << 31 >> 31;
 d = _f(gb | 0, fb | 0, r | 0, d | 0) | 0;
 r = U() | 0;
 ua = _f(t | 0, o | 0, t | 0, o | 0) | 0;
 ta = U() | 0;
 Ya = ((Xa | 0) < 0) << 31 >> 31;
 ka = _f(Xa | 0, Ya | 0, da | 0, ea | 0) | 0;
 ja = U() | 0;
 ca = _f(u | 0, e | 0, Xa | 0, Ya | 0) | 0;
 ba = U() | 0;
 W = _f(db | 0, eb | 0, Xa | 0, Ya | 0) | 0;
 V = U() | 0;
 N = _f(j | 0, s | 0, Xa | 0, Ya | 0) | 0;
 M = U() | 0;
 z = _f(pa | 0, qa | 0, Xa | 0, Ya | 0) | 0;
 y = U() | 0;
 Y = ((X | 0) < 0) << 31 >> 31;
 Ya = _f(X | 0, Y | 0, Xa | 0, Ya | 0) | 0;
 Xa = U() | 0;
 o = _f(gb | 0, fb | 0, t | 0, o | 0) | 0;
 t = U() | 0;
 ea = _f(w | 0, f | 0, da | 0, ea | 0) | 0;
 da = U() | 0;
 T = _f(w | 0, f | 0, u | 0, e | 0) | 0;
 S = U() | 0;
 J = _f(p | 0, x | 0, w | 0, f | 0) | 0;
 I = U() | 0;
 D = _f(j | 0, s | 0, w | 0, f | 0) | 0;
 C = U() | 0;
 ga = ((fa | 0) < 0) << 31 >> 31;
 _a = _f(fa | 0, ga | 0, w | 0, f | 0) | 0;
 Za = U() | 0;
 Qa = _f(X | 0, Y | 0, w | 0, f | 0) | 0;
 Pa = U() | 0;
 f = _f(gb | 0, fb | 0, w | 0, f | 0) | 0;
 w = U() | 0;
 L = _f(u | 0, e | 0, u | 0, e | 0) | 0;
 K = U() | 0;
 Ga = ((Fa | 0) < 0) << 31 >> 31;
 B = _f(Fa | 0, Ga | 0, db | 0, eb | 0) | 0;
 A = U() | 0;
 Ka = ((Ja | 0) < 0) << 31 >> 31;
 ab = _f(Ja | 0, Ka | 0, Fa | 0, Ga | 0) | 0;
 $a = U() | 0;
 Sa = _f(fa | 0, ga | 0, u | 0, e | 0) | 0;
 Ra = U() | 0;
 Ga = _f(X | 0, Y | 0, Fa | 0, Ga | 0) | 0;
 Fa = U() | 0;
 e = _f(gb | 0, fb | 0, u | 0, e | 0) | 0;
 u = U() | 0;
 eb = _f(Wa | 0, ((Wa | 0) < 0) << 31 >> 31 | 0, db | 0, eb | 0) | 0;
 db = U() | 0;
 Wa = _f(Ja | 0, Ka | 0, p | 0, x | 0) | 0;
 Va = U() | 0;
 Ia = _f(fa | 0, ga | 0, p | 0, x | 0) | 0;
 Ha = U() | 0;
 ya = _f(X | 0, Y | 0, p | 0, x | 0) | 0;
 xa = U() | 0;
 x = _f(gb | 0, fb | 0, p | 0, x | 0) | 0;
 p = U() | 0;
 Ka = _f(Ja | 0, Ka | 0, j | 0, s | 0) | 0;
 Ja = U() | 0;
 Aa = _f(fa | 0, ga | 0, j | 0, s | 0) | 0;
 za = U() | 0;
 oa = _f(X | 0, Y | 0, oa | 0, ((oa | 0) < 0) << 31 >> 31 | 0) | 0;
 na = U() | 0;
 s = _f(gb | 0, fb | 0, j | 0, s | 0) | 0;
 j = U() | 0;
 qa = _f(fa | 0, ga | 0, pa | 0, qa | 0) | 0;
 pa = U() | 0;
 ga = _f(X | 0, Y | 0, v | 0, i | 0) | 0;
 fa = U() | 0;
 i = _f(gb | 0, fb | 0, v | 0, i | 0) | 0;
 v = U() | 0;
 Y = _f(X | 0, Y | 0, g | 0, h | 0) | 0;
 X = U() | 0;
 h = _f(gb | 0, fb | 0, g | 0, h | 0) | 0;
 g = U() | 0;
 b = _f(gb | 0, fb | 0, q | 0, b | 0) | 0;
 q = U() | 0;
 bb = $f(eb | 0, db | 0, cb | 0, bb | 0) | 0;
 $a = $f(bb | 0, U() | 0, ab | 0, $a | 0) | 0;
 Za = $f($a | 0, U() | 0, _a | 0, Za | 0) | 0;
 Xa = $f(Za | 0, U() | 0, Ya | 0, Xa | 0) | 0;
 r = $f(Xa | 0, U() | 0, d | 0, r | 0) | 0;
 d = U() | 0;
 Ta = $f(Wa | 0, Va | 0, Ua | 0, Ta | 0) | 0;
 Ra = $f(Ta | 0, U() | 0, Sa | 0, Ra | 0) | 0;
 Pa = $f(Ra | 0, U() | 0, Qa | 0, Pa | 0) | 0;
 t = $f(Pa | 0, U() | 0, o | 0, t | 0) | 0;
 o = U() | 0;
 La = $f(Oa | 0, Na | 0, Ma | 0, La | 0) | 0;
 Ja = $f(La | 0, U() | 0, Ka | 0, Ja | 0) | 0;
 Ha = $f(Ja | 0, U() | 0, Ia | 0, Ha | 0) | 0;
 Fa = $f(Ha | 0, U() | 0, Ga | 0, Fa | 0) | 0;
 w = $f(Fa | 0, U() | 0, f | 0, w | 0) | 0;
 f = U() | 0;
 Ba = $f(Ea | 0, Da | 0, Ca | 0, Ba | 0) | 0;
 za = $f(Ba | 0, U() | 0, Aa | 0, za | 0) | 0;
 xa = $f(za | 0, U() | 0, ya | 0, xa | 0) | 0;
 u = $f(xa | 0, U() | 0, e | 0, u | 0) | 0;
 e = U() | 0;
 ta = $f(wa | 0, va | 0, ua | 0, ta | 0) | 0;
 ra = $f(ta | 0, U() | 0, sa | 0, ra | 0) | 0;
 pa = $f(ra | 0, U() | 0, qa | 0, pa | 0) | 0;
 na = $f(pa | 0, U() | 0, oa | 0, na | 0) | 0;
 p = $f(na | 0, U() | 0, x | 0, p | 0) | 0;
 x = U() | 0;
 ja = $f(ma | 0, la | 0, ka | 0, ja | 0) | 0;
 ha = $f(ja | 0, U() | 0, ia | 0, ha | 0) | 0;
 fa = $f(ha | 0, U() | 0, ga | 0, fa | 0) | 0;
 j = $f(fa | 0, U() | 0, s | 0, j | 0) | 0;
 s = U() | 0;
 ba = $f(ea | 0, da | 0, ca | 0, ba | 0) | 0;
 $ = $f(ba | 0, U() | 0, aa | 0, $ | 0) | 0;
 Z = $f($ | 0, U() | 0, _ | 0, Z | 0) | 0;
 X = $f(Z | 0, U() | 0, Y | 0, X | 0) | 0;
 v = $f(X | 0, U() | 0, i | 0, v | 0) | 0;
 i = U() | 0;
 S = $f(W | 0, V | 0, T | 0, S | 0) | 0;
 Q = $f(S | 0, U() | 0, R | 0, Q | 0) | 0;
 O = $f(Q | 0, U() | 0, P | 0, O | 0) | 0;
 g = $f(O | 0, U() | 0, h | 0, g | 0) | 0;
 h = U() | 0;
 K = $f(N | 0, M | 0, L | 0, K | 0) | 0;
 I = $f(K | 0, U() | 0, J | 0, I | 0) | 0;
 G = $f(I | 0, U() | 0, H | 0, G | 0) | 0;
 E = $f(G | 0, U() | 0, F | 0, E | 0) | 0;
 q = $f(E | 0, U() | 0, b | 0, q | 0) | 0;
 b = U() | 0;
 A = $f(D | 0, C | 0, B | 0, A | 0) | 0;
 y = $f(A | 0, U() | 0, z | 0, y | 0) | 0;
 n = $f(y | 0, U() | 0, m | 0, n | 0) | 0;
 k = $f(n | 0, U() | 0, l | 0, k | 0) | 0;
 l = U() | 0;
 d = gg(r | 0, d | 0, 1) | 0;
 r = U() | 0;
 o = gg(t | 0, o | 0, 1) | 0;
 t = U() | 0;
 f = gg(w | 0, f | 0, 1) | 0;
 w = U() | 0;
 e = gg(u | 0, e | 0, 1) | 0;
 u = U() | 0;
 x = gg(p | 0, x | 0, 1) | 0;
 p = U() | 0;
 s = gg(j | 0, s | 0, 1) | 0;
 j = U() | 0;
 i = gg(v | 0, i | 0, 1) | 0;
 v = U() | 0;
 h = gg(g | 0, h | 0, 1) | 0;
 g = U() | 0;
 b = gg(q | 0, b | 0, 1) | 0;
 q = U() | 0;
 l = gg(k | 0, l | 0, 1) | 0;
 k = U() | 0;
 n = $f(d | 0, r | 0, 33554432, 0) | 0;
 m = U() | 0;
 y = eg(n | 0, m | 0, 26) | 0;
 t = $f(y | 0, U() | 0, o | 0, t | 0) | 0;
 o = U() | 0;
 m = ag(d | 0, r | 0, n & -67108864 | 0, m | 0) | 0;
 n = U() | 0;
 r = $f(x | 0, p | 0, 33554432, 0) | 0;
 d = U() | 0;
 y = eg(r | 0, d | 0, 26) | 0;
 j = $f(y | 0, U() | 0, s | 0, j | 0) | 0;
 s = U() | 0;
 d = ag(x | 0, p | 0, r & -67108864 | 0, d | 0) | 0;
 r = U() | 0;
 p = $f(t | 0, o | 0, 16777216, 0) | 0;
 x = eg(p | 0, U() | 0, 25) | 0;
 w = $f(x | 0, U() | 0, f | 0, w | 0) | 0;
 f = U() | 0;
 p = ag(t | 0, o | 0, p & -33554432 | 0, 0) | 0;
 o = U() | 0;
 t = $f(j | 0, s | 0, 16777216, 0) | 0;
 x = eg(t | 0, U() | 0, 25) | 0;
 v = $f(x | 0, U() | 0, i | 0, v | 0) | 0;
 i = U() | 0;
 t = ag(j | 0, s | 0, t & -33554432 | 0, 0) | 0;
 s = U() | 0;
 j = $f(w | 0, f | 0, 33554432, 0) | 0;
 x = eg(j | 0, U() | 0, 26) | 0;
 u = $f(x | 0, U() | 0, e | 0, u | 0) | 0;
 e = U() | 0;
 j = ag(w | 0, f | 0, j & -67108864 | 0, 0) | 0;
 U() | 0;
 f = $f(v | 0, i | 0, 33554432, 0) | 0;
 w = eg(f | 0, U() | 0, 26) | 0;
 g = $f(w | 0, U() | 0, h | 0, g | 0) | 0;
 h = U() | 0;
 f = ag(v | 0, i | 0, f & -67108864 | 0, 0) | 0;
 U() | 0;
 i = $f(u | 0, e | 0, 16777216, 0) | 0;
 v = eg(i | 0, U() | 0, 25) | 0;
 r = $f(v | 0, U() | 0, d | 0, r | 0) | 0;
 d = U() | 0;
 i = ag(u | 0, e | 0, i & -33554432 | 0, 0) | 0;
 U() | 0;
 e = $f(g | 0, h | 0, 16777216, 0) | 0;
 u = eg(e | 0, U() | 0, 25) | 0;
 q = $f(u | 0, U() | 0, b | 0, q | 0) | 0;
 b = U() | 0;
 e = ag(g | 0, h | 0, e & -33554432 | 0, 0) | 0;
 U() | 0;
 h = $f(r | 0, d | 0, 33554432, 0) | 0;
 g = fg(h | 0, U() | 0, 26) | 0;
 g = $f(t | 0, s | 0, g | 0, U() | 0) | 0;
 U() | 0;
 h = ag(r | 0, d | 0, h & -67108864 | 0, 0) | 0;
 U() | 0;
 d = $f(q | 0, b | 0, 33554432, 0) | 0;
 r = eg(d | 0, U() | 0, 26) | 0;
 k = $f(r | 0, U() | 0, l | 0, k | 0) | 0;
 l = U() | 0;
 d = ag(q | 0, b | 0, d & -67108864 | 0, 0) | 0;
 U() | 0;
 b = $f(k | 0, l | 0, 16777216, 0) | 0;
 q = eg(b | 0, U() | 0, 25) | 0;
 q = _f(q | 0, U() | 0, 19, 0) | 0;
 n = $f(q | 0, U() | 0, m | 0, n | 0) | 0;
 m = U() | 0;
 b = ag(k | 0, l | 0, b & -33554432 | 0, 0) | 0;
 U() | 0;
 l = $f(n | 0, m | 0, 33554432, 0) | 0;
 k = fg(l | 0, U() | 0, 26) | 0;
 k = $f(p | 0, o | 0, k | 0, U() | 0) | 0;
 U() | 0;
 l = ag(n | 0, m | 0, l & -67108864 | 0, 0) | 0;
 U() | 0;
 c[a >> 2] = l;
 c[a + 4 >> 2] = k;
 c[a + 8 >> 2] = j;
 c[a + 12 >> 2] = i;
 c[a + 16 >> 2] = h;
 c[a + 20 >> 2] = g;
 c[a + 24 >> 2] = f;
 c[a + 28 >> 2] = e;
 c[a + 32 >> 2] = d;
 c[a + 36 >> 2] = b;
 return;
}

function ic(a, b) {
 a = a | 0;
 b = b | 0;
 var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0, ia = 0, ja = 0, ka = 0, la = 0, ma = 0, na = 0, oa = 0, pa = 0, qa = 0, ra = 0, sa = 0, ta = 0, ua = 0, va = 0, wa = 0, xa = 0, ya = 0, za = 0, Aa = 0, Ba = 0, Ca = 0, Da = 0, Ea = 0, Fa = 0, Ga = 0, Ha = 0, Ia = 0, Ja = 0, Ka = 0, La = 0, Ma = 0, Na = 0, Oa = 0, Pa = 0, Qa = 0, Ra = 0, Sa = 0, Ta = 0, Ua = 0, Va = 0, Wa = 0, Xa = 0, Ya = 0, Za = 0, _a = 0, $a = 0, ab = 0, bb = 0, cb = 0, db = 0, eb = 0, fb = 0, gb = 0;
 bb = c[b >> 2] | 0;
 va = c[b + 4 >> 2] | 0;
 k = c[b + 8 >> 2] | 0;
 ma = c[b + 12 >> 2] | 0;
 g = c[b + 16 >> 2] | 0;
 db = c[b + 20 >> 2] | 0;
 h = c[b + 24 >> 2] | 0;
 o = c[b + 28 >> 2] | 0;
 O = c[b + 32 >> 2] | 0;
 C = c[b + 36 >> 2] | 0;
 r = bb << 1;
 d = va << 1;
 Xa = k << 1;
 i = ma << 1;
 oa = g << 1;
 f = db << 1;
 m = h << 1;
 e = o << 1;
 Ma = db * 38 | 0;
 sa = h * 19 | 0;
 xa = o * 38 | 0;
 ea = O * 19 | 0;
 gb = C * 38 | 0;
 cb = ((bb | 0) < 0) << 31 >> 31;
 cb = _f(bb | 0, cb | 0, bb | 0, cb | 0) | 0;
 bb = U() | 0;
 s = ((r | 0) < 0) << 31 >> 31;
 ua = ((va | 0) < 0) << 31 >> 31;
 Ka = _f(r | 0, s | 0, va | 0, ua | 0) | 0;
 Ja = U() | 0;
 j = ((k | 0) < 0) << 31 >> 31;
 Wa = _f(k | 0, j | 0, r | 0, s | 0) | 0;
 Va = U() | 0;
 na = ((ma | 0) < 0) << 31 >> 31;
 Ua = _f(ma | 0, na | 0, r | 0, s | 0) | 0;
 Ta = U() | 0;
 Z = ((g | 0) < 0) << 31 >> 31;
 Oa = _f(g | 0, Z | 0, r | 0, s | 0) | 0;
 Na = U() | 0;
 eb = ((db | 0) < 0) << 31 >> 31;
 Aa = _f(db | 0, eb | 0, r | 0, s | 0) | 0;
 za = U() | 0;
 wa = ((h | 0) < 0) << 31 >> 31;
 ha = _f(h | 0, wa | 0, r | 0, s | 0) | 0;
 ga = U() | 0;
 B = ((o | 0) < 0) << 31 >> 31;
 R = _f(o | 0, B | 0, r | 0, s | 0) | 0;
 Q = U() | 0;
 P = ((O | 0) < 0) << 31 >> 31;
 F = _f(O | 0, P | 0, r | 0, s | 0) | 0;
 E = U() | 0;
 D = ((C | 0) < 0) << 31 >> 31;
 s = _f(C | 0, D | 0, r | 0, s | 0) | 0;
 r = U() | 0;
 l = ((d | 0) < 0) << 31 >> 31;
 ua = _f(d | 0, l | 0, va | 0, ua | 0) | 0;
 va = U() | 0;
 ca = _f(d | 0, l | 0, k | 0, j | 0) | 0;
 da = U() | 0;
 q = ((i | 0) < 0) << 31 >> 31;
 Sa = _f(i | 0, q | 0, d | 0, l | 0) | 0;
 Ra = U() | 0;
 Ea = _f(g | 0, Z | 0, d | 0, l | 0) | 0;
 Da = U() | 0;
 p = ((f | 0) < 0) << 31 >> 31;
 ja = _f(f | 0, p | 0, d | 0, l | 0) | 0;
 ia = U() | 0;
 T = _f(h | 0, wa | 0, d | 0, l | 0) | 0;
 S = U() | 0;
 b = ((e | 0) < 0) << 31 >> 31;
 H = _f(e | 0, b | 0, d | 0, l | 0) | 0;
 G = U() | 0;
 u = _f(O | 0, P | 0, d | 0, l | 0) | 0;
 t = U() | 0;
 fb = ((gb | 0) < 0) << 31 >> 31;
 l = _f(gb | 0, fb | 0, d | 0, l | 0) | 0;
 d = U() | 0;
 Qa = _f(k | 0, j | 0, k | 0, j | 0) | 0;
 Pa = U() | 0;
 Ya = ((Xa | 0) < 0) << 31 >> 31;
 Ca = _f(Xa | 0, Ya | 0, ma | 0, na | 0) | 0;
 Ba = U() | 0;
 la = _f(g | 0, Z | 0, Xa | 0, Ya | 0) | 0;
 ka = U() | 0;
 Y = _f(db | 0, eb | 0, Xa | 0, Ya | 0) | 0;
 X = U() | 0;
 N = _f(h | 0, wa | 0, Xa | 0, Ya | 0) | 0;
 M = U() | 0;
 w = _f(o | 0, B | 0, Xa | 0, Ya | 0) | 0;
 v = U() | 0;
 fa = ((ea | 0) < 0) << 31 >> 31;
 Ya = _f(ea | 0, fa | 0, Xa | 0, Ya | 0) | 0;
 Xa = U() | 0;
 j = _f(gb | 0, fb | 0, k | 0, j | 0) | 0;
 k = U() | 0;
 na = _f(i | 0, q | 0, ma | 0, na | 0) | 0;
 ma = U() | 0;
 W = _f(i | 0, q | 0, g | 0, Z | 0) | 0;
 V = U() | 0;
 J = _f(f | 0, p | 0, i | 0, q | 0) | 0;
 I = U() | 0;
 A = _f(h | 0, wa | 0, i | 0, q | 0) | 0;
 z = U() | 0;
 ya = ((xa | 0) < 0) << 31 >> 31;
 _a = _f(xa | 0, ya | 0, i | 0, q | 0) | 0;
 Za = U() | 0;
 Ga = _f(ea | 0, fa | 0, i | 0, q | 0) | 0;
 Fa = U() | 0;
 q = _f(gb | 0, fb | 0, i | 0, q | 0) | 0;
 i = U() | 0;
 L = _f(g | 0, Z | 0, g | 0, Z | 0) | 0;
 K = U() | 0;
 pa = ((oa | 0) < 0) << 31 >> 31;
 y = _f(oa | 0, pa | 0, db | 0, eb | 0) | 0;
 x = U() | 0;
 ta = ((sa | 0) < 0) << 31 >> 31;
 ab = _f(sa | 0, ta | 0, oa | 0, pa | 0) | 0;
 $a = U() | 0;
 Ia = _f(xa | 0, ya | 0, g | 0, Z | 0) | 0;
 Ha = U() | 0;
 pa = _f(ea | 0, fa | 0, oa | 0, pa | 0) | 0;
 oa = U() | 0;
 Z = _f(gb | 0, fb | 0, g | 0, Z | 0) | 0;
 g = U() | 0;
 eb = _f(Ma | 0, ((Ma | 0) < 0) << 31 >> 31 | 0, db | 0, eb | 0) | 0;
 db = U() | 0;
 Ma = _f(sa | 0, ta | 0, f | 0, p | 0) | 0;
 La = U() | 0;
 ra = _f(xa | 0, ya | 0, f | 0, p | 0) | 0;
 qa = U() | 0;
 $ = _f(ea | 0, fa | 0, f | 0, p | 0) | 0;
 _ = U() | 0;
 p = _f(gb | 0, fb | 0, f | 0, p | 0) | 0;
 f = U() | 0;
 ta = _f(sa | 0, ta | 0, h | 0, wa | 0) | 0;
 sa = U() | 0;
 ba = _f(xa | 0, ya | 0, h | 0, wa | 0) | 0;
 aa = U() | 0;
 m = _f(ea | 0, fa | 0, m | 0, ((m | 0) < 0) << 31 >> 31 | 0) | 0;
 n = U() | 0;
 wa = _f(gb | 0, fb | 0, h | 0, wa | 0) | 0;
 h = U() | 0;
 B = _f(xa | 0, ya | 0, o | 0, B | 0) | 0;
 o = U() | 0;
 ya = _f(ea | 0, fa | 0, e | 0, b | 0) | 0;
 xa = U() | 0;
 b = _f(gb | 0, fb | 0, e | 0, b | 0) | 0;
 e = U() | 0;
 fa = _f(ea | 0, fa | 0, O | 0, P | 0) | 0;
 ea = U() | 0;
 P = _f(gb | 0, fb | 0, O | 0, P | 0) | 0;
 O = U() | 0;
 D = _f(gb | 0, fb | 0, C | 0, D | 0) | 0;
 C = U() | 0;
 bb = $f(eb | 0, db | 0, cb | 0, bb | 0) | 0;
 $a = $f(bb | 0, U() | 0, ab | 0, $a | 0) | 0;
 Za = $f($a | 0, U() | 0, _a | 0, Za | 0) | 0;
 Xa = $f(Za | 0, U() | 0, Ya | 0, Xa | 0) | 0;
 d = $f(Xa | 0, U() | 0, l | 0, d | 0) | 0;
 l = U() | 0;
 va = $f(Wa | 0, Va | 0, ua | 0, va | 0) | 0;
 ua = U() | 0;
 da = $f(Ua | 0, Ta | 0, ca | 0, da | 0) | 0;
 ca = U() | 0;
 Pa = $f(Sa | 0, Ra | 0, Qa | 0, Pa | 0) | 0;
 Na = $f(Pa | 0, U() | 0, Oa | 0, Na | 0) | 0;
 o = $f(Na | 0, U() | 0, B | 0, o | 0) | 0;
 n = $f(o | 0, U() | 0, m | 0, n | 0) | 0;
 f = $f(n | 0, U() | 0, p | 0, f | 0) | 0;
 p = U() | 0;
 n = $f(d | 0, l | 0, 33554432, 0) | 0;
 m = U() | 0;
 o = eg(n | 0, m | 0, 26) | 0;
 B = U() | 0;
 Ja = $f(Ma | 0, La | 0, Ka | 0, Ja | 0) | 0;
 Ha = $f(Ja | 0, U() | 0, Ia | 0, Ha | 0) | 0;
 Fa = $f(Ha | 0, U() | 0, Ga | 0, Fa | 0) | 0;
 k = $f(Fa | 0, U() | 0, j | 0, k | 0) | 0;
 B = $f(k | 0, U() | 0, o | 0, B | 0) | 0;
 o = U() | 0;
 m = ag(d | 0, l | 0, n & -67108864 | 0, m | 0) | 0;
 n = U() | 0;
 l = $f(f | 0, p | 0, 33554432, 0) | 0;
 d = U() | 0;
 k = eg(l | 0, d | 0, 26) | 0;
 j = U() | 0;
 Ba = $f(Ea | 0, Da | 0, Ca | 0, Ba | 0) | 0;
 za = $f(Ba | 0, U() | 0, Aa | 0, za | 0) | 0;
 xa = $f(za | 0, U() | 0, ya | 0, xa | 0) | 0;
 h = $f(xa | 0, U() | 0, wa | 0, h | 0) | 0;
 j = $f(h | 0, U() | 0, k | 0, j | 0) | 0;
 k = U() | 0;
 d = ag(f | 0, p | 0, l & -67108864 | 0, d | 0) | 0;
 l = U() | 0;
 p = $f(B | 0, o | 0, 16777216, 0) | 0;
 f = eg(p | 0, U() | 0, 25) | 0;
 h = U() | 0;
 sa = $f(va | 0, ua | 0, ta | 0, sa | 0) | 0;
 qa = $f(sa | 0, U() | 0, ra | 0, qa | 0) | 0;
 oa = $f(qa | 0, U() | 0, pa | 0, oa | 0) | 0;
 i = $f(oa | 0, U() | 0, q | 0, i | 0) | 0;
 h = $f(i | 0, U() | 0, f | 0, h | 0) | 0;
 f = U() | 0;
 p = ag(B | 0, o | 0, p & -33554432 | 0, 0) | 0;
 o = U() | 0;
 B = $f(j | 0, k | 0, 16777216, 0) | 0;
 i = eg(B | 0, U() | 0, 25) | 0;
 q = U() | 0;
 ka = $f(na | 0, ma | 0, la | 0, ka | 0) | 0;
 ia = $f(ka | 0, U() | 0, ja | 0, ia | 0) | 0;
 ga = $f(ia | 0, U() | 0, ha | 0, ga | 0) | 0;
 ea = $f(ga | 0, U() | 0, fa | 0, ea | 0) | 0;
 e = $f(ea | 0, U() | 0, b | 0, e | 0) | 0;
 q = $f(e | 0, U() | 0, i | 0, q | 0) | 0;
 i = U() | 0;
 B = ag(j | 0, k | 0, B & -33554432 | 0, 0) | 0;
 k = U() | 0;
 j = $f(h | 0, f | 0, 33554432, 0) | 0;
 e = eg(j | 0, U() | 0, 26) | 0;
 b = U() | 0;
 aa = $f(da | 0, ca | 0, ba | 0, aa | 0) | 0;
 _ = $f(aa | 0, U() | 0, $ | 0, _ | 0) | 0;
 g = $f(_ | 0, U() | 0, Z | 0, g | 0) | 0;
 b = $f(g | 0, U() | 0, e | 0, b | 0) | 0;
 e = U() | 0;
 j = ag(h | 0, f | 0, j & -67108864 | 0, 0) | 0;
 U() | 0;
 f = $f(q | 0, i | 0, 33554432, 0) | 0;
 h = eg(f | 0, U() | 0, 26) | 0;
 g = U() | 0;
 V = $f(Y | 0, X | 0, W | 0, V | 0) | 0;
 S = $f(V | 0, U() | 0, T | 0, S | 0) | 0;
 Q = $f(S | 0, U() | 0, R | 0, Q | 0) | 0;
 O = $f(Q | 0, U() | 0, P | 0, O | 0) | 0;
 g = $f(O | 0, U() | 0, h | 0, g | 0) | 0;
 h = U() | 0;
 f = ag(q | 0, i | 0, f & -67108864 | 0, 0) | 0;
 U() | 0;
 i = $f(b | 0, e | 0, 16777216, 0) | 0;
 q = eg(i | 0, U() | 0, 25) | 0;
 l = $f(q | 0, U() | 0, d | 0, l | 0) | 0;
 d = U() | 0;
 i = ag(b | 0, e | 0, i & -33554432 | 0, 0) | 0;
 U() | 0;
 e = $f(g | 0, h | 0, 16777216, 0) | 0;
 b = eg(e | 0, U() | 0, 25) | 0;
 q = U() | 0;
 K = $f(N | 0, M | 0, L | 0, K | 0) | 0;
 I = $f(K | 0, U() | 0, J | 0, I | 0) | 0;
 G = $f(I | 0, U() | 0, H | 0, G | 0) | 0;
 E = $f(G | 0, U() | 0, F | 0, E | 0) | 0;
 C = $f(E | 0, U() | 0, D | 0, C | 0) | 0;
 q = $f(C | 0, U() | 0, b | 0, q | 0) | 0;
 b = U() | 0;
 e = ag(g | 0, h | 0, e & -33554432 | 0, 0) | 0;
 U() | 0;
 h = $f(l | 0, d | 0, 33554432, 0) | 0;
 g = fg(h | 0, U() | 0, 26) | 0;
 g = $f(B | 0, k | 0, g | 0, U() | 0) | 0;
 U() | 0;
 h = ag(l | 0, d | 0, h & -67108864 | 0, 0) | 0;
 U() | 0;
 d = $f(q | 0, b | 0, 33554432, 0) | 0;
 l = eg(d | 0, U() | 0, 26) | 0;
 k = U() | 0;
 x = $f(A | 0, z | 0, y | 0, x | 0) | 0;
 v = $f(x | 0, U() | 0, w | 0, v | 0) | 0;
 t = $f(v | 0, U() | 0, u | 0, t | 0) | 0;
 r = $f(t | 0, U() | 0, s | 0, r | 0) | 0;
 k = $f(r | 0, U() | 0, l | 0, k | 0) | 0;
 l = U() | 0;
 d = ag(q | 0, b | 0, d & -67108864 | 0, 0) | 0;
 U() | 0;
 b = $f(k | 0, l | 0, 16777216, 0) | 0;
 q = eg(b | 0, U() | 0, 25) | 0;
 q = _f(q | 0, U() | 0, 19, 0) | 0;
 n = $f(q | 0, U() | 0, m | 0, n | 0) | 0;
 m = U() | 0;
 b = ag(k | 0, l | 0, b & -33554432 | 0, 0) | 0;
 U() | 0;
 l = $f(n | 0, m | 0, 33554432, 0) | 0;
 k = fg(l | 0, U() | 0, 26) | 0;
 k = $f(p | 0, o | 0, k | 0, U() | 0) | 0;
 U() | 0;
 l = ag(n | 0, m | 0, l & -67108864 | 0, 0) | 0;
 U() | 0;
 c[a >> 2] = l;
 c[a + 4 >> 2] = k;
 c[a + 8 >> 2] = j;
 c[a + 12 >> 2] = i;
 c[a + 16 >> 2] = h;
 c[a + 20 >> 2] = g;
 c[a + 24 >> 2] = f;
 c[a + 28 >> 2] = e;
 c[a + 32 >> 2] = d;
 c[a + 36 >> 2] = b;
 return;
}

function Yd(d, e, f, g, i) {
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 i = i | 0;
 var j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0;
 F = k;
 k = k + 64 | 0;
 B = F + 56 | 0;
 C = F + 40 | 0;
 z = F;
 D = F + 48 | 0;
 E = F + 60 | 0;
 c[B >> 2] = e;
 w = (d | 0) != 0;
 x = z + 40 | 0;
 y = x;
 z = z + 39 | 0;
 A = D + 4 | 0;
 j = 0;
 e = 0;
 m = 0;
 a : while (1) {
  do {
   do if ((e | 0) > -1) if ((j | 0) > (2147483647 - e | 0)) {
    c[(Pd() | 0) >> 2] = 75;
    e = -1;
    break;
   } else {
    e = j + e | 0;
    break;
   } while (0);
   s = c[B >> 2] | 0;
   j = a[s >> 0] | 0;
   if (!(j << 24 >> 24)) {
    v = 94;
    break a;
   }
   l = s;
   b : while (1) {
    switch (j << 24 >> 24) {
    case 37:
     {
      v = 10;
      break b;
     }
    case 0:
     {
      j = l;
      break b;
     }
    default:
     {}
    }
    u = l + 1 | 0;
    c[B >> 2] = u;
    j = a[u >> 0] | 0;
    l = u;
   }
   c : do if ((v | 0) == 10) {
    v = 0;
    j = l;
    do {
     if ((a[l + 1 >> 0] | 0) != 37) break c;
     j = j + 1 | 0;
     l = l + 2 | 0;
     c[B >> 2] = l;
    } while ((a[l >> 0] | 0) == 37);
   } while (0);
   j = j - s | 0;
   if (w) Zd(d, s, j);
  } while ((j | 0) != 0);
  u = (Rd(a[(c[B >> 2] | 0) + 1 >> 0] | 0) | 0) == 0;
  l = c[B >> 2] | 0;
  if (u) {
   q = -1;
   o = m;
   j = 1;
  } else if ((a[l + 2 >> 0] | 0) == 36) {
   q = (a[l + 1 >> 0] | 0) + -48 | 0;
   o = 1;
   j = 3;
  } else {
   q = -1;
   o = m;
   j = 1;
  }
  j = l + j | 0;
  c[B >> 2] = j;
  l = a[j >> 0] | 0;
  m = (l << 24 >> 24) + -32 | 0;
  if (m >>> 0 > 31 | (1 << m & 75913 | 0) == 0) n = 0; else {
   n = 0;
   do {
    n = 1 << m | n;
    j = j + 1 | 0;
    c[B >> 2] = j;
    l = a[j >> 0] | 0;
    m = (l << 24 >> 24) + -32 | 0;
   } while (!(m >>> 0 > 31 | (1 << m & 75913 | 0) == 0));
  }
  if (l << 24 >> 24 == 42) {
   if (!(Rd(a[j + 1 >> 0] | 0) | 0)) v = 27; else {
    l = c[B >> 2] | 0;
    if ((a[l + 2 >> 0] | 0) == 36) {
     j = l + 1 | 0;
     c[i + ((a[j >> 0] | 0) + -48 << 2) >> 2] = 10;
     j = c[g + ((a[j >> 0] | 0) + -48 << 3) >> 2] | 0;
     m = 1;
     l = l + 3 | 0;
    } else v = 27;
   }
   if ((v | 0) == 27) {
    v = 0;
    if (o | 0) {
     e = -1;
     break;
    }
    if (w) {
     u = (c[f >> 2] | 0) + (4 - 1) & ~(4 - 1);
     j = c[u >> 2] | 0;
     c[f >> 2] = u + 4;
    } else j = 0;
    m = 0;
    l = (c[B >> 2] | 0) + 1 | 0;
   }
   c[B >> 2] = l;
   u = (j | 0) < 0;
   t = u ? 0 - j | 0 : j;
   n = u ? n | 8192 : n;
   u = m;
  } else {
   j = _d(B) | 0;
   if ((j | 0) < 0) {
    e = -1;
    break;
   }
   t = j;
   u = o;
   l = c[B >> 2] | 0;
  }
  do if ((a[l >> 0] | 0) == 46) {
   j = l + 1 | 0;
   if ((a[j >> 0] | 0) != 42) {
    c[B >> 2] = j;
    j = _d(B) | 0;
    l = c[B >> 2] | 0;
    break;
   }
   if (Rd(a[l + 2 >> 0] | 0) | 0) {
    j = c[B >> 2] | 0;
    if ((a[j + 3 >> 0] | 0) == 36) {
     r = j + 2 | 0;
     c[i + ((a[r >> 0] | 0) + -48 << 2) >> 2] = 10;
     r = c[g + ((a[r >> 0] | 0) + -48 << 3) >> 2] | 0;
     l = j + 4 | 0;
     c[B >> 2] = l;
     j = r;
     break;
    }
   }
   if (u | 0) {
    e = -1;
    break a;
   }
   if (w) {
    r = (c[f >> 2] | 0) + (4 - 1) & ~(4 - 1);
    j = c[r >> 2] | 0;
    c[f >> 2] = r + 4;
   } else j = 0;
   l = (c[B >> 2] | 0) + 2 | 0;
   c[B >> 2] = l;
  } else j = -1; while (0);
  r = 0;
  while (1) {
   if (((a[l >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    e = -1;
    break a;
   }
   m = l;
   l = l + 1 | 0;
   c[B >> 2] = l;
   m = a[(a[m >> 0] | 0) + -65 + (32848 + (r * 58 | 0)) >> 0] | 0;
   o = m & 255;
   if ((o + -1 | 0) >>> 0 >= 8) break; else r = o;
  }
  if (!(m << 24 >> 24)) {
   e = -1;
   break;
  }
  p = (q | 0) > -1;
  do if (m << 24 >> 24 == 19) if (p) {
   e = -1;
   break a;
  } else v = 54; else {
   if (p) {
    c[i + (q << 2) >> 2] = o;
    p = g + (q << 3) | 0;
    q = c[p + 4 >> 2] | 0;
    v = C;
    c[v >> 2] = c[p >> 2];
    c[v + 4 >> 2] = q;
    v = 54;
    break;
   }
   if (!w) {
    e = 0;
    break a;
   }
   $d(C, o, f);
   l = c[B >> 2] | 0;
   v = 55;
  } while (0);
  if ((v | 0) == 54) {
   v = 0;
   if (w) v = 55; else j = 0;
  }
  d : do if ((v | 0) == 55) {
   v = 0;
   l = a[l + -1 >> 0] | 0;
   l = (r | 0) != 0 & (l & 15 | 0) == 3 ? l & -33 : l;
   m = n & -65537;
   q = (n & 8192 | 0) == 0 ? n : m;
   e : do switch (l | 0) {
   case 110:
    switch ((r & 255) << 24 >> 24) {
    case 0:
     {
      c[c[C >> 2] >> 2] = e;
      j = 0;
      break d;
     }
    case 1:
     {
      c[c[C >> 2] >> 2] = e;
      j = 0;
      break d;
     }
    case 2:
     {
      j = c[C >> 2] | 0;
      c[j >> 2] = e;
      c[j + 4 >> 2] = ((e | 0) < 0) << 31 >> 31;
      j = 0;
      break d;
     }
    case 3:
     {
      b[c[C >> 2] >> 1] = e;
      j = 0;
      break d;
     }
    case 4:
     {
      a[c[C >> 2] >> 0] = e;
      j = 0;
      break d;
     }
    case 6:
     {
      c[c[C >> 2] >> 2] = e;
      j = 0;
      break d;
     }
    case 7:
     {
      j = c[C >> 2] | 0;
      c[j >> 2] = e;
      c[j + 4 >> 2] = ((e | 0) < 0) << 31 >> 31;
      j = 0;
      break d;
     }
    default:
     {
      j = 0;
      break d;
     }
    }
   case 112:
    {
     l = 120;
     j = j >>> 0 > 8 ? j : 8;
     m = q | 8;
     v = 67;
     break;
    }
   case 88:
   case 120:
    {
     m = q;
     v = 67;
     break;
    }
   case 111:
    {
     m = C;
     l = c[m >> 2] | 0;
     m = c[m + 4 >> 2] | 0;
     p = be(l, m, x) | 0;
     v = y - p | 0;
     n = 0;
     o = 39088;
     j = (q & 8 | 0) == 0 | (j | 0) > (v | 0) ? j : v + 1 | 0;
     v = 73;
     break;
    }
   case 105:
   case 100:
    {
     m = C;
     l = c[m >> 2] | 0;
     m = c[m + 4 >> 2] | 0;
     if ((m | 0) < 0) {
      l = ag(0, 0, l | 0, m | 0) | 0;
      m = U() | 0;
      n = C;
      c[n >> 2] = l;
      c[n + 4 >> 2] = m;
      n = 1;
      o = 39088;
      v = 72;
      break e;
     } else {
      n = (q & 2049 | 0) != 0 & 1;
      o = (q & 2048 | 0) == 0 ? ((q & 1 | 0) == 0 ? 39088 : 39090) : 39089;
      v = 72;
      break e;
     }
    }
   case 117:
    {
     m = C;
     n = 0;
     o = 39088;
     l = c[m >> 2] | 0;
     m = c[m + 4 >> 2] | 0;
     v = 72;
     break;
    }
   case 99:
    {
     a[z >> 0] = c[C >> 2];
     r = z;
     n = 0;
     o = 39088;
     p = 1;
     j = y;
     break;
    }
   case 109:
    {
     l = de(c[(Pd() | 0) >> 2] | 0) | 0;
     v = 77;
     break;
    }
   case 115:
    {
     l = c[C >> 2] | 0;
     l = (l | 0) == 0 ? 39098 : l;
     v = 77;
     break;
    }
   case 67:
    {
     c[D >> 2] = c[C >> 2];
     c[A >> 2] = 0;
     c[C >> 2] = D;
     o = -1;
     v = 81;
     break;
    }
   case 83:
    {
     if (!j) {
      ee(d, 32, t, 0, q);
      j = 0;
      v = 91;
     } else {
      o = j;
      v = 81;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     j = ge(d, +h[C >> 3], t, j, q, l) | 0;
     break d;
    }
   default:
    {
     r = s;
     n = 0;
     o = 39088;
     p = j;
     m = q;
     j = y;
    }
   } while (0);
   f : do if ((v | 0) == 67) {
    s = C;
    r = c[s >> 2] | 0;
    s = c[s + 4 >> 2] | 0;
    p = ae(r, s, x, l & 32) | 0;
    o = (m & 8 | 0) == 0 | (r | 0) == 0 & (s | 0) == 0;
    n = o ? 0 : 2;
    o = o ? 39088 : 39088 + (l >>> 4) | 0;
    q = m;
    l = r;
    m = s;
    v = 73;
   } else if ((v | 0) == 72) {
    p = ce(l, m, x) | 0;
    v = 73;
   } else if ((v | 0) == 77) {
    v = 0;
    s = Td(l, 0, j) | 0;
    q = (s | 0) == 0;
    r = l;
    n = 0;
    o = 39088;
    p = q ? j : s - l | 0;
    j = q ? l + j | 0 : s;
   } else if ((v | 0) == 81) {
    v = 0;
    n = c[C >> 2] | 0;
    j = 0;
    while (1) {
     l = c[n >> 2] | 0;
     if (!l) break;
     l = fe(E, l) | 0;
     m = (l | 0) < 0;
     if (m | l >>> 0 > (o - j | 0) >>> 0) {
      v = 85;
      break;
     }
     j = l + j | 0;
     if (o >>> 0 > j >>> 0) n = n + 4 | 0; else break;
    }
    if ((v | 0) == 85) {
     v = 0;
     if (m) {
      e = -1;
      break a;
     }
    }
    ee(d, 32, t, j, q);
    if (!j) {
     j = 0;
     v = 91;
    } else {
     m = c[C >> 2] | 0;
     n = 0;
     while (1) {
      l = c[m >> 2] | 0;
      if (!l) {
       v = 91;
       break f;
      }
      l = fe(E, l) | 0;
      n = l + n | 0;
      if ((n | 0) > (j | 0)) {
       v = 91;
       break f;
      }
      Zd(d, E, l);
      if (n >>> 0 >= j >>> 0) {
       v = 91;
       break;
      } else m = m + 4 | 0;
     }
    }
   } while (0);
   if ((v | 0) == 73) {
    v = 0;
    m = (l | 0) != 0 | (m | 0) != 0;
    s = (j | 0) != 0 | m;
    m = y - p + ((m ^ 1) & 1) | 0;
    r = s ? p : x;
    p = s ? ((j | 0) > (m | 0) ? j : m) : 0;
    m = (j | 0) > -1 ? q & -65537 : q;
    j = y;
   } else if ((v | 0) == 91) {
    v = 0;
    ee(d, 32, t, j, q ^ 8192);
    j = (t | 0) > (j | 0) ? t : j;
    break;
   }
   q = j - r | 0;
   p = (p | 0) < (q | 0) ? q : p;
   s = p + n | 0;
   j = (t | 0) < (s | 0) ? s : t;
   ee(d, 32, j, s, m);
   Zd(d, o, n);
   ee(d, 48, j, s, m ^ 65536);
   ee(d, 48, p, q, 0);
   Zd(d, r, q);
   ee(d, 32, j, s, m ^ 8192);
  } while (0);
  m = u;
 }
 g : do if ((v | 0) == 94) if (!d) if (!m) e = 0; else {
  e = 1;
  while (1) {
   j = c[i + (e << 2) >> 2] | 0;
   if (!j) break;
   $d(g + (e << 3) | 0, j, f);
   e = e + 1 | 0;
   if (e >>> 0 >= 10) {
    e = 1;
    break g;
   }
  }
  while (1) {
   if (c[i + (e << 2) >> 2] | 0) {
    e = -1;
    break g;
   }
   e = e + 1 | 0;
   if (e >>> 0 >= 10) {
    e = 1;
    break;
   }
  }
 } while (0);
 k = F;
 return e | 0;
}

function ge(b, e, f, g, h, i) {
 b = b | 0;
 e = +e;
 f = f | 0;
 g = g | 0;
 h = h | 0;
 i = i | 0;
 var j = 0, l = 0, m = 0, n = 0, o = 0.0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0;
 F = k;
 k = k + 560 | 0;
 m = F + 32 | 0;
 v = F + 536 | 0;
 E = F;
 D = E;
 n = F + 540 | 0;
 c[v >> 2] = 0;
 C = n + 12 | 0;
 he(e) | 0;
 j = U() | 0;
 if ((j | 0) < 0) {
  e = -e;
  he(e) | 0;
  B = 1;
  A = 39105;
  j = U() | 0;
 } else {
  B = (h & 2049 | 0) != 0 & 1;
  A = (h & 2048 | 0) == 0 ? ((h & 1 | 0) == 0 ? 39106 : 39111) : 39108;
 }
 do if (0 == 0 & (j & 2146435072 | 0) == 2146435072) {
  E = (i & 32 | 0) != 0;
  j = B + 3 | 0;
  ee(b, 32, f, j, h & -65537);
  Zd(b, A, B);
  Zd(b, e != e | 0.0 != 0.0 ? (E ? 39132 : 39136) : E ? 39124 : 39128, 3);
  ee(b, 32, f, j, h ^ 8192);
 } else {
  e = +ie(e, v) * 2.0;
  j = e != 0.0;
  if (j) c[v >> 2] = (c[v >> 2] | 0) + -1;
  u = i | 32;
  if ((u | 0) == 97) {
   q = i & 32;
   s = (q | 0) == 0 ? A : A + 9 | 0;
   r = B | 2;
   j = 12 - g | 0;
   do if (!(g >>> 0 > 11 | (j | 0) == 0)) {
    o = 8.0;
    do {
     j = j + -1 | 0;
     o = o * 16.0;
    } while ((j | 0) != 0);
    if ((a[s >> 0] | 0) == 45) {
     e = -(o + (-e - o));
     break;
    } else {
     e = e + o - o;
     break;
    }
   } while (0);
   l = c[v >> 2] | 0;
   j = (l | 0) < 0 ? 0 - l | 0 : l;
   j = ce(j, ((j | 0) < 0) << 31 >> 31, C) | 0;
   if ((j | 0) == (C | 0)) {
    j = n + 11 | 0;
    a[j >> 0] = 48;
   }
   a[j + -1 >> 0] = (l >> 31 & 2) + 43;
   p = j + -2 | 0;
   a[p >> 0] = i + 15;
   l = (g | 0) < 1;
   m = (h & 8 | 0) == 0;
   n = E;
   do {
    B = ~~e;
    j = n + 1 | 0;
    a[n >> 0] = q | d[33312 + B >> 0];
    e = (e - +(B | 0)) * 16.0;
    if ((j - D | 0) == 1) if (m & (l & e == 0.0)) n = j; else {
     a[j >> 0] = 46;
     n = n + 2 | 0;
    } else n = j;
   } while (e != 0.0);
   if (!g) t = 25; else if ((-2 - D + n | 0) < (g | 0)) {
    l = C;
    m = p;
    j = g + 2 + l - m | 0;
   } else t = 25;
   if ((t | 0) == 25) {
    l = C;
    m = p;
    j = l - D - m + n | 0;
   }
   C = j + r | 0;
   ee(b, 32, f, C, h);
   Zd(b, s, r);
   ee(b, 48, f, C, h ^ 65536);
   D = n - D | 0;
   Zd(b, E, D);
   E = l - m | 0;
   ee(b, 48, j - (D + E) | 0, 0, 0);
   Zd(b, p, E);
   ee(b, 32, f, C, h ^ 8192);
   j = C;
   break;
  }
  l = (g | 0) < 0 ? 6 : g;
  if (j) {
   j = (c[v >> 2] | 0) + -28 | 0;
   c[v >> 2] = j;
   e = e * 268435456.0;
  } else j = c[v >> 2] | 0;
  z = (j | 0) < 0 ? m : m + 288 | 0;
  m = z;
  do {
   y = ~~e >>> 0;
   c[m >> 2] = y;
   m = m + 4 | 0;
   e = (e - +(y >>> 0)) * 1.0e9;
  } while (e != 0.0);
  y = z;
  if ((j | 0) > 0) {
   q = z;
   while (1) {
    p = (j | 0) < 29 ? j : 29;
    j = m + -4 | 0;
    if (j >>> 0 < q >>> 0) n = q; else {
     n = 0;
     do {
      t = gg(c[j >> 2] | 0, 0, p | 0) | 0;
      t = $f(t | 0, U() | 0, n | 0, 0) | 0;
      w = U() | 0;
      n = dg(t | 0, w | 0, 1e9, 0) | 0;
      x = _f(n | 0, U() | 0, 1e9, 0) | 0;
      x = ag(t | 0, w | 0, x | 0, U() | 0) | 0;
      U() | 0;
      c[j >> 2] = x;
      j = j + -4 | 0;
     } while (j >>> 0 >= q >>> 0);
     if (!n) n = q; else {
      x = q + -4 | 0;
      c[x >> 2] = n;
      n = x;
     }
    }
    a : do if (m >>> 0 > n >>> 0) {
     j = m;
     while (1) {
      m = j + -4 | 0;
      if (c[m >> 2] | 0) {
       m = j;
       break a;
      }
      if (m >>> 0 > n >>> 0) j = m; else break;
     }
    } while (0);
    j = (c[v >> 2] | 0) - p | 0;
    c[v >> 2] = j;
    if ((j | 0) > 0) q = n; else break;
   }
  } else n = z;
  if ((j | 0) < 0) {
   g = ((l + 25 | 0) / 9 | 0) + 1 | 0;
   t = (u | 0) == 102;
   do {
    s = 0 - j | 0;
    s = (s | 0) < 9 ? s : 9;
    if (n >>> 0 < m >>> 0) {
     p = (1 << s) + -1 | 0;
     q = 1e9 >>> s;
     r = 0;
     j = n;
     do {
      x = c[j >> 2] | 0;
      c[j >> 2] = (x >>> s) + r;
      r = L(x & p, q) | 0;
      j = j + 4 | 0;
     } while (j >>> 0 < m >>> 0);
     n = (c[n >> 2] | 0) == 0 ? n + 4 | 0 : n;
     if (r) {
      c[m >> 2] = r;
      m = m + 4 | 0;
     }
    } else n = (c[n >> 2] | 0) == 0 ? n + 4 | 0 : n;
    j = t ? z : n;
    m = (m - j >> 2 | 0) > (g | 0) ? j + (g << 2) | 0 : m;
    j = (c[v >> 2] | 0) + s | 0;
    c[v >> 2] = j;
   } while ((j | 0) < 0);
   t = n;
  } else t = n;
  if (t >>> 0 < m >>> 0) {
   j = (y - t >> 2) * 9 | 0;
   p = c[t >> 2] | 0;
   if (p >>> 0 >= 10) {
    n = 10;
    do {
     n = n * 10 | 0;
     j = j + 1 | 0;
    } while (p >>> 0 >= n >>> 0);
   }
  } else j = 0;
  v = (u | 0) == 103;
  w = (l | 0) != 0;
  n = l - ((u | 0) == 102 ? 0 : j) + ((w & v) << 31 >> 31) | 0;
  if ((n | 0) < (((m - y >> 2) * 9 | 0) + -9 | 0)) {
   x = n + 9216 | 0;
   n = (x | 0) / 9 | 0;
   g = z + 4 + (n + -1024 << 2) | 0;
   n = x - (n * 9 | 0) | 0;
   if ((n | 0) < 8) {
    p = 10;
    while (1) {
     p = p * 10 | 0;
     if ((n | 0) < 7) n = n + 1 | 0; else break;
    }
   } else p = 10;
   r = c[g >> 2] | 0;
   n = (r >>> 0) / (p >>> 0) | 0;
   s = r - (L(n, p) | 0) | 0;
   q = (g + 4 | 0) == (m | 0);
   if (q & (s | 0) == 0) {
    n = g;
    p = t;
   } else {
    o = (n & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    x = p >>> 1;
    e = s >>> 0 < x >>> 0 ? .5 : q & (s | 0) == (x | 0) ? 1.0 : 1.5;
    if (B) {
     x = (a[A >> 0] | 0) == 45;
     e = x ? -e : e;
     o = x ? -o : o;
    }
    n = r - s | 0;
    c[g >> 2] = n;
    if (o + e != o) {
     x = n + p | 0;
     c[g >> 2] = x;
     if (x >>> 0 > 999999999) {
      p = g;
      j = t;
      while (1) {
       n = p + -4 | 0;
       c[p >> 2] = 0;
       if (n >>> 0 < j >>> 0) {
        j = j + -4 | 0;
        c[j >> 2] = 0;
       }
       x = (c[n >> 2] | 0) + 1 | 0;
       c[n >> 2] = x;
       if (x >>> 0 > 999999999) p = n; else {
        p = j;
        break;
       }
      }
     } else {
      n = g;
      p = t;
     }
     j = (y - p >> 2) * 9 | 0;
     r = c[p >> 2] | 0;
     if (r >>> 0 >= 10) {
      q = 10;
      do {
       q = q * 10 | 0;
       j = j + 1 | 0;
      } while (r >>> 0 >= q >>> 0);
     }
    } else {
     n = g;
     p = t;
    }
   }
   x = n + 4 | 0;
   m = m >>> 0 > x >>> 0 ? x : m;
  } else p = t;
  g = 0 - j | 0;
  b : do if (m >>> 0 > p >>> 0) while (1) {
   n = m + -4 | 0;
   if (c[n >> 2] | 0) {
    x = m;
    u = 1;
    break b;
   }
   if (n >>> 0 > p >>> 0) m = n; else {
    x = n;
    u = 0;
    break;
   }
  } else {
   x = m;
   u = 0;
  } while (0);
  do if (v) {
   l = l + ((w ^ 1) & 1) | 0;
   if ((l | 0) > (j | 0) & (j | 0) > -5) {
    r = i + -1 | 0;
    l = l + -1 - j | 0;
   } else {
    r = i + -2 | 0;
    l = l + -1 | 0;
   }
   if (!(h & 8)) {
    if (u) {
     q = c[x + -4 >> 2] | 0;
     if (!q) n = 9; else if (!((q >>> 0) % 10 | 0)) {
      n = 0;
      m = 10;
      do {
       m = m * 10 | 0;
       n = n + 1 | 0;
      } while (!((q >>> 0) % (m >>> 0) | 0 | 0));
     } else n = 0;
    } else n = 9;
    m = ((x - y >> 2) * 9 | 0) + -9 | 0;
    if ((r | 32 | 0) == 102) {
     i = m - n | 0;
     i = (i | 0) > 0 ? i : 0;
     l = (l | 0) < (i | 0) ? l : i;
     break;
    } else {
     i = m + j - n | 0;
     i = (i | 0) > 0 ? i : 0;
     l = (l | 0) < (i | 0) ? l : i;
     break;
    }
   }
  } else r = i; while (0);
  t = (l | 0) != 0;
  q = t ? 1 : h >>> 3 & 1;
  s = (r | 32 | 0) == 102;
  if (s) {
   w = 0;
   j = (j | 0) > 0 ? j : 0;
  } else {
   m = (j | 0) < 0 ? g : j;
   m = ce(m, ((m | 0) < 0) << 31 >> 31, C) | 0;
   n = C;
   if ((n - m | 0) < 2) do {
    m = m + -1 | 0;
    a[m >> 0] = 48;
   } while ((n - m | 0) < 2);
   a[m + -1 >> 0] = (j >> 31 & 2) + 43;
   j = m + -2 | 0;
   a[j >> 0] = r;
   w = j;
   j = n - j | 0;
  }
  j = B + 1 + l + q + j | 0;
  ee(b, 32, f, j, h);
  Zd(b, A, B);
  ee(b, 48, f, j, h ^ 65536);
  if (s) {
   r = p >>> 0 > z >>> 0 ? z : p;
   s = E + 9 | 0;
   p = s;
   q = E + 8 | 0;
   n = r;
   do {
    m = ce(c[n >> 2] | 0, 0, s) | 0;
    if ((n | 0) == (r | 0)) {
     if ((m | 0) == (s | 0)) {
      a[q >> 0] = 48;
      m = q;
     }
    } else if (m >>> 0 > E >>> 0) {
     kg(E | 0, 48, m - D | 0) | 0;
     do m = m + -1 | 0; while (m >>> 0 > E >>> 0);
    }
    Zd(b, m, p - m | 0);
    n = n + 4 | 0;
   } while (n >>> 0 <= z >>> 0);
   if (!((h & 8 | 0) == 0 & (t ^ 1))) Zd(b, 39140, 1);
   if (n >>> 0 < x >>> 0 & (l | 0) > 0) while (1) {
    m = ce(c[n >> 2] | 0, 0, s) | 0;
    if (m >>> 0 > E >>> 0) {
     kg(E | 0, 48, m - D | 0) | 0;
     do m = m + -1 | 0; while (m >>> 0 > E >>> 0);
    }
    Zd(b, m, (l | 0) < 9 ? l : 9);
    n = n + 4 | 0;
    m = l + -9 | 0;
    if (!(n >>> 0 < x >>> 0 & (l | 0) > 9)) {
     l = m;
     break;
    } else l = m;
   }
   ee(b, 48, l + 9 | 0, 9, 0);
  } else {
   v = u ? x : p + 4 | 0;
   if (p >>> 0 < v >>> 0 & (l | 0) > -1) {
    g = E + 9 | 0;
    t = (h & 8 | 0) == 0;
    u = g;
    r = 0 - D | 0;
    s = E + 8 | 0;
    q = p;
    do {
     m = ce(c[q >> 2] | 0, 0, g) | 0;
     if ((m | 0) == (g | 0)) {
      a[s >> 0] = 48;
      m = s;
     }
     do if ((q | 0) == (p | 0)) {
      n = m + 1 | 0;
      Zd(b, m, 1);
      if (t & (l | 0) < 1) {
       m = n;
       break;
      }
      Zd(b, 39140, 1);
      m = n;
     } else {
      if (m >>> 0 <= E >>> 0) break;
      kg(E | 0, 48, m + r | 0) | 0;
      do m = m + -1 | 0; while (m >>> 0 > E >>> 0);
     } while (0);
     D = u - m | 0;
     Zd(b, m, (l | 0) > (D | 0) ? D : l);
     l = l - D | 0;
     q = q + 4 | 0;
    } while (q >>> 0 < v >>> 0 & (l | 0) > -1);
   }
   ee(b, 48, l + 18 | 0, 18, 0);
   Zd(b, w, C - w | 0);
  }
  ee(b, 32, f, j, h ^ 8192);
 } while (0);
 k = F;
 return ((j | 0) < (f | 0) ? f : j) | 0;
}

function Nc(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, U = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0;
 ca = k;
 k = k + 352 | 0;
 aa = ca + 144 | 0;
 ba = ca;
 kg(aa | 0, 0, 200) | 0;
 N = aa + 8 | 0;
 O = aa + 16 | 0;
 P = aa + 24 | 0;
 Q = aa + 32 | 0;
 R = aa + 40 | 0;
 S = aa + 48 | 0;
 T = aa + 56 | 0;
 U = aa + 64 | 0;
 V = aa + 72 | 0;
 W = aa + 80 | 0;
 X = aa + 88 | 0;
 Y = aa + 96 | 0;
 Z = aa + 104 | 0;
 _ = aa + 112 | 0;
 $ = aa + 120 | 0;
 f = aa + 128 | 0;
 if ((d | 0) < 136) {
  g = 0;
  h = 0;
  i = 0;
  j = 0;
  l = 0;
  m = 0;
  n = 0;
  o = 0;
  p = 0;
  q = 0;
  r = 0;
  s = 0;
  t = 0;
  u = 0;
  v = 0;
  w = 0;
  x = 0;
  y = 0;
  z = 0;
  A = 0;
  B = 0;
  C = 0;
  D = 0;
  E = 0;
  F = 0;
  G = 0;
  H = 0;
  I = 0;
  J = 0;
  K = 0;
 } else {
  M = d;
  d = 0;
  g = 0;
  h = 0;
  i = 0;
  j = 0;
  l = 0;
  m = 0;
  n = 0;
  o = 0;
  p = 0;
  q = 0;
  r = 0;
  s = 0;
  t = 0;
  u = 0;
  v = 0;
  w = 0;
  x = 0;
  y = 0;
  z = 0;
  A = 0;
  B = 0;
  C = 0;
  D = 0;
  E = 0;
  F = 0;
  G = 0;
  H = 0;
  I = 0;
  J = 0;
  K = 0;
  L = 0;
  while (1) {
   ea = b;
   da = o ^ c[ea + 4 >> 2];
   o = aa;
   c[o >> 2] = j ^ c[ea >> 2];
   c[o + 4 >> 2] = da;
   j = b + 8 | 0;
   o = D ^ c[j + 4 >> 2];
   D = N;
   c[D >> 2] = C ^ c[j >> 2];
   c[D + 4 >> 2] = o;
   C = b + 16 | 0;
   D = F ^ c[C + 4 >> 2];
   F = O;
   c[F >> 2] = E ^ c[C >> 2];
   c[F + 4 >> 2] = D;
   E = b + 24 | 0;
   F = H ^ c[E + 4 >> 2];
   H = P;
   c[H >> 2] = G ^ c[E >> 2];
   c[H + 4 >> 2] = F;
   G = b + 32 | 0;
   H = J ^ c[G + 4 >> 2];
   J = Q;
   c[J >> 2] = I ^ c[G >> 2];
   c[J + 4 >> 2] = H;
   I = b + 40 | 0;
   L = L ^ c[I + 4 >> 2];
   J = R;
   c[J >> 2] = K ^ c[I >> 2];
   c[J + 4 >> 2] = L;
   K = b + 48 | 0;
   J = g ^ c[K + 4 >> 2];
   L = S;
   c[L >> 2] = d ^ c[K >> 2];
   c[L + 4 >> 2] = J;
   L = b + 56 | 0;
   J = i ^ c[L + 4 >> 2];
   K = T;
   c[K >> 2] = h ^ c[L >> 2];
   c[K + 4 >> 2] = J;
   K = b + 64 | 0;
   J = m ^ c[K + 4 >> 2];
   L = U;
   c[L >> 2] = l ^ c[K >> 2];
   c[L + 4 >> 2] = J;
   L = b + 72 | 0;
   J = p ^ c[L + 4 >> 2];
   K = V;
   c[K >> 2] = n ^ c[L >> 2];
   c[K + 4 >> 2] = J;
   K = b + 80 | 0;
   J = r ^ c[K + 4 >> 2];
   L = W;
   c[L >> 2] = q ^ c[K >> 2];
   c[L + 4 >> 2] = J;
   L = b + 88 | 0;
   J = t ^ c[L + 4 >> 2];
   K = X;
   c[K >> 2] = s ^ c[L >> 2];
   c[K + 4 >> 2] = J;
   K = b + 96 | 0;
   J = v ^ c[K + 4 >> 2];
   L = Y;
   c[L >> 2] = u ^ c[K >> 2];
   c[L + 4 >> 2] = J;
   L = b + 104 | 0;
   J = x ^ c[L + 4 >> 2];
   K = Z;
   c[K >> 2] = w ^ c[L >> 2];
   c[K + 4 >> 2] = J;
   K = b + 112 | 0;
   J = z ^ c[K + 4 >> 2];
   L = _;
   c[L >> 2] = y ^ c[K >> 2];
   c[L + 4 >> 2] = J;
   L = b + 120 | 0;
   J = B ^ c[L + 4 >> 2];
   K = $;
   c[K >> 2] = A ^ c[L >> 2];
   c[K + 4 >> 2] = J;
   K = b + 128 | 0;
   J = f;
   L = c[J + 4 >> 2] ^ c[K + 4 >> 2];
   d = f;
   c[d >> 2] = c[J >> 2] ^ c[K >> 2];
   c[d + 4 >> 2] = L;
   Mc(aa, 24);
   d = M + -136 | 0;
   b = b + 136 | 0;
   if ((M | 0) < 272) break;
   o = aa;
   D = N;
   F = O;
   H = P;
   J = Q;
   L = R;
   g = S;
   i = T;
   m = U;
   p = V;
   r = W;
   t = X;
   v = Y;
   x = Z;
   z = _;
   B = $;
   M = d;
   d = c[g >> 2] | 0;
   g = c[g + 4 >> 2] | 0;
   h = c[i >> 2] | 0;
   i = c[i + 4 >> 2] | 0;
   j = c[o >> 2] | 0;
   l = c[m >> 2] | 0;
   m = c[m + 4 >> 2] | 0;
   n = c[p >> 2] | 0;
   o = c[o + 4 >> 2] | 0;
   p = c[p + 4 >> 2] | 0;
   q = c[r >> 2] | 0;
   r = c[r + 4 >> 2] | 0;
   s = c[t >> 2] | 0;
   t = c[t + 4 >> 2] | 0;
   u = c[v >> 2] | 0;
   v = c[v + 4 >> 2] | 0;
   w = c[x >> 2] | 0;
   x = c[x + 4 >> 2] | 0;
   y = c[z >> 2] | 0;
   z = c[z + 4 >> 2] | 0;
   A = c[B >> 2] | 0;
   B = c[B + 4 >> 2] | 0;
   C = c[D >> 2] | 0;
   D = c[D + 4 >> 2] | 0;
   E = c[F >> 2] | 0;
   F = c[F + 4 >> 2] | 0;
   G = c[H >> 2] | 0;
   H = c[H + 4 >> 2] | 0;
   I = c[J >> 2] | 0;
   J = c[J + 4 >> 2] | 0;
   K = c[L >> 2] | 0;
   L = c[L + 4 >> 2] | 0;
  }
  h = aa;
  j = N;
  m = O;
  o = P;
  q = Q;
  s = R;
  u = S;
  w = T;
  y = U;
  A = V;
  C = W;
  E = X;
  G = Y;
  I = Z;
  K = _;
  f = aa + 128 | 0;
  g = c[h >> 2] | 0;
  h = c[h + 4 >> 2] | 0;
  i = c[j >> 2] | 0;
  j = c[j + 4 >> 2] | 0;
  l = c[m >> 2] | 0;
  m = c[m + 4 >> 2] | 0;
  n = c[o >> 2] | 0;
  o = c[o + 4 >> 2] | 0;
  p = c[q >> 2] | 0;
  q = c[q + 4 >> 2] | 0;
  r = c[s >> 2] | 0;
  s = c[s + 4 >> 2] | 0;
  t = c[u >> 2] | 0;
  u = c[u + 4 >> 2] | 0;
  v = c[w >> 2] | 0;
  w = c[w + 4 >> 2] | 0;
  x = c[y >> 2] | 0;
  y = c[y + 4 >> 2] | 0;
  z = c[A >> 2] | 0;
  A = c[A + 4 >> 2] | 0;
  B = c[C >> 2] | 0;
  C = c[C + 4 >> 2] | 0;
  D = c[E >> 2] | 0;
  E = c[E + 4 >> 2] | 0;
  F = c[G >> 2] | 0;
  G = c[G + 4 >> 2] | 0;
  H = c[I >> 2] | 0;
  I = c[I + 4 >> 2] | 0;
  J = c[K >> 2] | 0;
  K = c[K + 4 >> 2] | 0;
 }
 ig(ba | 0, b | 0, d | 0) | 0;
 a[ba + d >> 0] = 1;
 kg(ba + (d + 1) | 0, 0, 135 - d | 0) | 0;
 M = ba + 135 | 0;
 a[M >> 0] = a[M >> 0] | -128;
 M = ba;
 da = h ^ c[M + 4 >> 2];
 ea = aa;
 c[ea >> 2] = g ^ c[M >> 2];
 c[ea + 4 >> 2] = da;
 ea = ba + 8 | 0;
 da = j ^ c[ea + 4 >> 2];
 c[N >> 2] = i ^ c[ea >> 2];
 c[N + 4 >> 2] = da;
 N = ba + 16 | 0;
 da = m ^ c[N + 4 >> 2];
 ea = O;
 c[ea >> 2] = l ^ c[N >> 2];
 c[ea + 4 >> 2] = da;
 ea = ba + 24 | 0;
 da = o ^ c[ea + 4 >> 2];
 c[P >> 2] = n ^ c[ea >> 2];
 c[P + 4 >> 2] = da;
 P = ba + 32 | 0;
 da = q ^ c[P + 4 >> 2];
 ea = Q;
 c[ea >> 2] = p ^ c[P >> 2];
 c[ea + 4 >> 2] = da;
 ea = ba + 40 | 0;
 da = s ^ c[ea + 4 >> 2];
 c[R >> 2] = r ^ c[ea >> 2];
 c[R + 4 >> 2] = da;
 R = ba + 48 | 0;
 da = u ^ c[R + 4 >> 2];
 ea = S;
 c[ea >> 2] = t ^ c[R >> 2];
 c[ea + 4 >> 2] = da;
 ea = ba + 56 | 0;
 da = w ^ c[ea + 4 >> 2];
 c[T >> 2] = v ^ c[ea >> 2];
 c[T + 4 >> 2] = da;
 T = ba + 64 | 0;
 da = y ^ c[T + 4 >> 2];
 ea = U;
 c[ea >> 2] = x ^ c[T >> 2];
 c[ea + 4 >> 2] = da;
 ea = ba + 72 | 0;
 da = A ^ c[ea + 4 >> 2];
 c[V >> 2] = z ^ c[ea >> 2];
 c[V + 4 >> 2] = da;
 V = ba + 80 | 0;
 da = C ^ c[V + 4 >> 2];
 ea = W;
 c[ea >> 2] = B ^ c[V >> 2];
 c[ea + 4 >> 2] = da;
 ea = ba + 88 | 0;
 da = E ^ c[ea + 4 >> 2];
 c[X >> 2] = D ^ c[ea >> 2];
 c[X + 4 >> 2] = da;
 X = ba + 96 | 0;
 da = G ^ c[X + 4 >> 2];
 ea = Y;
 c[ea >> 2] = F ^ c[X >> 2];
 c[ea + 4 >> 2] = da;
 ea = ba + 104 | 0;
 da = I ^ c[ea + 4 >> 2];
 c[Z >> 2] = H ^ c[ea >> 2];
 c[Z + 4 >> 2] = da;
 Z = ba + 112 | 0;
 da = K ^ c[Z + 4 >> 2];
 ea = _;
 c[ea >> 2] = J ^ c[Z >> 2];
 c[ea + 4 >> 2] = da;
 ea = ba + 120 | 0;
 _ = $;
 da = c[_ + 4 >> 2] ^ c[ea + 4 >> 2];
 c[$ >> 2] = c[_ >> 2] ^ c[ea >> 2];
 c[$ + 4 >> 2] = da;
 ba = ba + 128 | 0;
 $ = f;
 da = c[$ + 4 >> 2] ^ c[ba + 4 >> 2];
 ea = f;
 c[ea >> 2] = c[$ >> 2] ^ c[ba >> 2];
 c[ea + 4 >> 2] = da;
 Mc(aa, 24);
 ig(e | 0, aa | 0, 200) | 0;
 k = ca;
 return;
}

function lc(b, d, e, f) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 var g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, U = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0, ia = 0, ja = 0, ka = 0, la = 0, ma = 0, na = 0, oa = 0, pa = 0, qa = 0, ra = 0, sa = 0, ta = 0, ua = 0, va = 0, wa = 0, xa = 0, ya = 0, za = 0, Aa = 0, Ba = 0, Ca = 0, Da = 0, Ea = 0, Fa = 0, Ga = 0, Ha = 0, Ia = 0, Ja = 0, Ka = 0, La = 0, Ma = 0, Na = 0, Oa = 0, Pa = 0, Qa = 0, Ra = 0, Sa = 0, Ta = 0, Ua = 0, Va = 0, Wa = 0, Xa = 0, Ya = 0, Za = 0, _a = 0, $a = 0, ab = 0, bb = 0, cb = 0, db = 0;
 Ca = k;
 k = k + 2112 | 0;
 xa = Ca + 1536 | 0;
 ya = Ca + 1280 | 0;
 za = Ca;
 Aa = Ca + 1952 | 0;
 Ba = Ca + 1792 | 0;
 mc(xa, d);
 mc(ya, f);
 fc(za, e);
 d = b;
 e = d + 40 | 0;
 do {
  c[d >> 2] = 0;
  d = d + 4 | 0;
 } while ((d | 0) < (e | 0));
 wa = b + 40 | 0;
 c[wa >> 2] = 1;
 d = b + 44 | 0;
 e = d + 36 | 0;
 do {
  c[d >> 2] = 0;
  d = d + 4 | 0;
 } while ((d | 0) < (e | 0));
 va = b + 80 | 0;
 c[va >> 2] = 1;
 d = b + 84 | 0;
 e = d + 36 | 0;
 do {
  c[d >> 2] = 0;
  d = d + 4 | 0;
 } while ((d | 0) < (e | 0));
 d = 255;
 while (1) {
  if (a[xa + d >> 0] | 0) break;
  if (a[ya + d >> 0] | 0) break;
  if (!d) {
   g = 16;
   break;
  } else d = d + -1 | 0;
 }
 if ((g | 0) == 16) {
  k = Ca;
  return;
 }
 if ((d | 0) <= -1) {
  k = Ca;
  return;
 }
 f = Aa + 120 | 0;
 g = Ba + 40 | 0;
 h = Aa + 40 | 0;
 i = Aa + 80 | 0;
 j = Ba + 80 | 0;
 l = Ba + 120 | 0;
 m = Ba + 44 | 0;
 n = Ba + 48 | 0;
 o = Ba + 52 | 0;
 p = Ba + 56 | 0;
 q = Ba + 60 | 0;
 r = Ba + 64 | 0;
 s = Ba + 68 | 0;
 t = Ba + 72 | 0;
 u = Ba + 76 | 0;
 v = Ba + 4 | 0;
 w = Ba + 8 | 0;
 x = Ba + 12 | 0;
 y = Ba + 16 | 0;
 z = Ba + 20 | 0;
 A = Ba + 24 | 0;
 B = Ba + 28 | 0;
 C = Ba + 32 | 0;
 D = Ba + 36 | 0;
 E = Aa + 4 | 0;
 F = Aa + 8 | 0;
 G = Aa + 12 | 0;
 H = Aa + 16 | 0;
 I = Aa + 20 | 0;
 J = Aa + 24 | 0;
 K = Aa + 28 | 0;
 L = Aa + 32 | 0;
 M = Aa + 36 | 0;
 N = Aa + 44 | 0;
 O = Aa + 48 | 0;
 P = Aa + 52 | 0;
 Q = Aa + 56 | 0;
 R = Aa + 60 | 0;
 S = Aa + 64 | 0;
 T = Aa + 68 | 0;
 U = Aa + 72 | 0;
 V = Aa + 76 | 0;
 W = Ba + 84 | 0;
 X = Ba + 88 | 0;
 Y = Ba + 92 | 0;
 Z = Ba + 96 | 0;
 _ = Ba + 100 | 0;
 $ = Ba + 104 | 0;
 aa = Ba + 108 | 0;
 ba = Ba + 112 | 0;
 ca = Ba + 116 | 0;
 da = Aa + 84 | 0;
 ea = Aa + 88 | 0;
 fa = Aa + 92 | 0;
 ga = Aa + 96 | 0;
 ha = Aa + 100 | 0;
 ia = Aa + 104 | 0;
 ja = Aa + 108 | 0;
 ka = Aa + 112 | 0;
 la = Aa + 116 | 0;
 ma = Aa + 124 | 0;
 na = Aa + 128 | 0;
 oa = Aa + 132 | 0;
 pa = Aa + 136 | 0;
 qa = Aa + 140 | 0;
 ra = Aa + 144 | 0;
 sa = Aa + 148 | 0;
 ta = Aa + 152 | 0;
 ua = Aa + 156 | 0;
 while (1) {
  hc(Aa, b);
  e = a[xa + d >> 0] | 0;
  if (e << 24 >> 24 > 0) {
   ec(Ba, Aa, f);
   ec(g, h, i);
   ec(j, i, f);
   ec(l, Aa, h);
   dc(Aa, Ba, za + (((e & 255) >>> 1 & 255) * 160 | 0) | 0);
  } else if (e << 24 >> 24 < 0) {
   ec(Ba, Aa, f);
   ec(g, h, i);
   ec(j, i, f);
   ec(l, Aa, h);
   nc(Aa, Ba, za + ((((e << 24 >> 24) / -2 | 0) << 24 >> 24) * 160 | 0) | 0);
  }
  e = a[ya + d >> 0] | 0;
  if (e << 24 >> 24 > 0) {
   ec(Ba, Aa, f);
   ec(g, h, i);
   ec(j, i, f);
   ec(l, Aa, h);
   oc(Aa, Ba, 30880 + (((e & 255) >>> 1 & 255) * 120 | 0) | 0);
  } else if (e << 24 >> 24 < 0) {
   ec(Ba, Aa, f);
   ec(g, h, i);
   ec(j, i, f);
   ec(l, Aa, h);
   Ua = ((e << 24 >> 24) / -2 | 0) << 24 >> 24;
   db = c[g >> 2] | 0;
   Ra = c[m >> 2] | 0;
   Ja = c[n >> 2] | 0;
   Wa = c[o >> 2] | 0;
   _a = c[p >> 2] | 0;
   cb = c[q >> 2] | 0;
   Ea = c[r >> 2] | 0;
   Ia = c[s >> 2] | 0;
   Ma = c[t >> 2] | 0;
   Qa = c[u >> 2] | 0;
   Va = c[Ba >> 2] | 0;
   Na = c[v >> 2] | 0;
   Fa = c[w >> 2] | 0;
   Ya = c[x >> 2] | 0;
   ab = c[y >> 2] | 0;
   e = c[z >> 2] | 0;
   Ga = c[A >> 2] | 0;
   Ka = c[B >> 2] | 0;
   Oa = c[C >> 2] | 0;
   Sa = c[D >> 2] | 0;
   c[Aa >> 2] = Va + db;
   c[E >> 2] = Na + Ra;
   c[F >> 2] = Fa + Ja;
   c[G >> 2] = Ya + Wa;
   c[H >> 2] = ab + _a;
   c[I >> 2] = e + cb;
   c[J >> 2] = Ga + Ea;
   c[K >> 2] = Ka + Ia;
   c[L >> 2] = Oa + Ma;
   c[M >> 2] = Sa + Qa;
   c[h >> 2] = db - Va;
   c[N >> 2] = Ra - Na;
   c[O >> 2] = Ja - Fa;
   c[P >> 2] = Wa - Ya;
   c[Q >> 2] = _a - ab;
   c[R >> 2] = cb - e;
   c[S >> 2] = Ea - Ga;
   c[T >> 2] = Ia - Ka;
   c[U >> 2] = Ma - Oa;
   c[V >> 2] = Qa - Sa;
   ec(i, Aa, 30880 + (Ua * 120 | 0) + 40 | 0);
   ec(h, h, 30880 + (Ua * 120 | 0) | 0);
   ec(f, 30880 + (Ua * 120 | 0) + 80 | 0, l);
   Ua = c[j >> 2] << 1;
   Sa = c[W >> 2] << 1;
   Qa = c[X >> 2] << 1;
   Oa = c[Y >> 2] << 1;
   Ma = c[Z >> 2] << 1;
   Ka = c[_ >> 2] << 1;
   Ia = c[$ >> 2] << 1;
   Ga = c[aa >> 2] << 1;
   Ea = c[ba >> 2] << 1;
   e = c[ca >> 2] << 1;
   cb = c[i >> 2] | 0;
   ab = c[da >> 2] | 0;
   _a = c[ea >> 2] | 0;
   Ya = c[fa >> 2] | 0;
   Wa = c[ga >> 2] | 0;
   Fa = c[ha >> 2] | 0;
   Ja = c[ia >> 2] | 0;
   Na = c[ja >> 2] | 0;
   Ra = c[ka >> 2] | 0;
   Va = c[la >> 2] | 0;
   db = c[h >> 2] | 0;
   bb = c[N >> 2] | 0;
   $a = c[O >> 2] | 0;
   Za = c[P >> 2] | 0;
   Xa = c[Q >> 2] | 0;
   Da = c[R >> 2] | 0;
   Ha = c[S >> 2] | 0;
   La = c[T >> 2] | 0;
   Pa = c[U >> 2] | 0;
   Ta = c[V >> 2] | 0;
   c[Aa >> 2] = cb - db;
   c[E >> 2] = ab - bb;
   c[F >> 2] = _a - $a;
   c[G >> 2] = Ya - Za;
   c[H >> 2] = Wa - Xa;
   c[I >> 2] = Fa - Da;
   c[J >> 2] = Ja - Ha;
   c[K >> 2] = Na - La;
   c[L >> 2] = Ra - Pa;
   c[M >> 2] = Va - Ta;
   c[h >> 2] = db + cb;
   c[N >> 2] = bb + ab;
   c[O >> 2] = $a + _a;
   c[P >> 2] = Za + Ya;
   c[Q >> 2] = Xa + Wa;
   c[R >> 2] = Da + Fa;
   c[S >> 2] = Ha + Ja;
   c[T >> 2] = La + Na;
   c[U >> 2] = Pa + Ra;
   c[V >> 2] = Ta + Va;
   Va = c[f >> 2] | 0;
   Ta = c[ma >> 2] | 0;
   Ra = c[na >> 2] | 0;
   Pa = c[oa >> 2] | 0;
   Na = c[pa >> 2] | 0;
   La = c[qa >> 2] | 0;
   Ja = c[ra >> 2] | 0;
   Ha = c[sa >> 2] | 0;
   Fa = c[ta >> 2] | 0;
   Da = c[ua >> 2] | 0;
   c[i >> 2] = Ua - Va;
   c[da >> 2] = Sa - Ta;
   c[ea >> 2] = Qa - Ra;
   c[fa >> 2] = Oa - Pa;
   c[ga >> 2] = Ma - Na;
   c[ha >> 2] = Ka - La;
   c[ia >> 2] = Ia - Ja;
   c[ja >> 2] = Ga - Ha;
   c[ka >> 2] = Ea - Fa;
   c[la >> 2] = e - Da;
   c[f >> 2] = Va + Ua;
   c[ma >> 2] = Ta + Sa;
   c[na >> 2] = Ra + Qa;
   c[oa >> 2] = Pa + Oa;
   c[pa >> 2] = Na + Ma;
   c[qa >> 2] = La + Ka;
   c[ra >> 2] = Ja + Ia;
   c[sa >> 2] = Ha + Ga;
   c[ta >> 2] = Fa + Ea;
   c[ua >> 2] = Da + e;
  }
  ec(b, Aa, f);
  ec(wa, h, i);
  ec(va, i, f);
  if ((d | 0) > 0) d = d + -1 | 0; else break;
 }
 k = Ca;
 return;
}

function Ce(a) {
 a = a | 0;
 var b = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0;
 if (!a) return;
 d = a + -8 | 0;
 f = c[9993] | 0;
 a = c[a + -4 >> 2] | 0;
 b = a & -8;
 j = d + b | 0;
 do if (!(a & 1)) {
  e = c[d >> 2] | 0;
  if (!(a & 3)) return;
  h = d + (0 - e) | 0;
  g = e + b | 0;
  if (h >>> 0 < f >>> 0) return;
  if ((c[9994] | 0) == (h | 0)) {
   a = j + 4 | 0;
   b = c[a >> 2] | 0;
   if ((b & 3 | 0) != 3) {
    i = h;
    b = g;
    break;
   }
   c[9991] = g;
   c[a >> 2] = b & -2;
   c[h + 4 >> 2] = g | 1;
   c[h + g >> 2] = g;
   return;
  }
  d = e >>> 3;
  if (e >>> 0 < 256) {
   a = c[h + 8 >> 2] | 0;
   b = c[h + 12 >> 2] | 0;
   if ((b | 0) == (a | 0)) {
    c[9989] = c[9989] & ~(1 << d);
    i = h;
    b = g;
    break;
   } else {
    c[a + 12 >> 2] = b;
    c[b + 8 >> 2] = a;
    i = h;
    b = g;
    break;
   }
  }
  f = c[h + 24 >> 2] | 0;
  a = c[h + 12 >> 2] | 0;
  do if ((a | 0) == (h | 0)) {
   b = h + 16 | 0;
   d = b + 4 | 0;
   a = c[d >> 2] | 0;
   if (!a) {
    a = c[b >> 2] | 0;
    if (!a) {
     a = 0;
     break;
    }
   } else b = d;
   while (1) {
    e = a + 20 | 0;
    d = c[e >> 2] | 0;
    if (!d) {
     e = a + 16 | 0;
     d = c[e >> 2] | 0;
     if (!d) break; else {
      a = d;
      b = e;
     }
    } else {
     a = d;
     b = e;
    }
   }
   c[b >> 2] = 0;
  } else {
   i = c[h + 8 >> 2] | 0;
   c[i + 12 >> 2] = a;
   c[a + 8 >> 2] = i;
  } while (0);
  if (!f) {
   i = h;
   b = g;
  } else {
   b = c[h + 28 >> 2] | 0;
   d = 40260 + (b << 2) | 0;
   if ((c[d >> 2] | 0) == (h | 0)) {
    c[d >> 2] = a;
    if (!a) {
     c[9990] = c[9990] & ~(1 << b);
     i = h;
     b = g;
     break;
    }
   } else {
    i = f + 16 | 0;
    c[((c[i >> 2] | 0) == (h | 0) ? i : f + 20 | 0) >> 2] = a;
    if (!a) {
     i = h;
     b = g;
     break;
    }
   }
   c[a + 24 >> 2] = f;
   b = h + 16 | 0;
   d = c[b >> 2] | 0;
   if (d | 0) {
    c[a + 16 >> 2] = d;
    c[d + 24 >> 2] = a;
   }
   b = c[b + 4 >> 2] | 0;
   if (!b) {
    i = h;
    b = g;
   } else {
    c[a + 20 >> 2] = b;
    c[b + 24 >> 2] = a;
    i = h;
    b = g;
   }
  }
 } else {
  i = d;
  h = d;
 } while (0);
 if (h >>> 0 >= j >>> 0) return;
 a = j + 4 | 0;
 e = c[a >> 2] | 0;
 if (!(e & 1)) return;
 if (!(e & 2)) {
  if ((c[9995] | 0) == (j | 0)) {
   j = (c[9992] | 0) + b | 0;
   c[9992] = j;
   c[9995] = i;
   c[i + 4 >> 2] = j | 1;
   if ((i | 0) != (c[9994] | 0)) return;
   c[9994] = 0;
   c[9991] = 0;
   return;
  }
  if ((c[9994] | 0) == (j | 0)) {
   j = (c[9991] | 0) + b | 0;
   c[9991] = j;
   c[9994] = h;
   c[i + 4 >> 2] = j | 1;
   c[h + j >> 2] = j;
   return;
  }
  f = (e & -8) + b | 0;
  d = e >>> 3;
  do if (e >>> 0 < 256) {
   b = c[j + 8 >> 2] | 0;
   a = c[j + 12 >> 2] | 0;
   if ((a | 0) == (b | 0)) {
    c[9989] = c[9989] & ~(1 << d);
    break;
   } else {
    c[b + 12 >> 2] = a;
    c[a + 8 >> 2] = b;
    break;
   }
  } else {
   g = c[j + 24 >> 2] | 0;
   a = c[j + 12 >> 2] | 0;
   do if ((a | 0) == (j | 0)) {
    b = j + 16 | 0;
    d = b + 4 | 0;
    a = c[d >> 2] | 0;
    if (!a) {
     a = c[b >> 2] | 0;
     if (!a) {
      d = 0;
      break;
     }
    } else b = d;
    while (1) {
     e = a + 20 | 0;
     d = c[e >> 2] | 0;
     if (!d) {
      e = a + 16 | 0;
      d = c[e >> 2] | 0;
      if (!d) break; else {
       a = d;
       b = e;
      }
     } else {
      a = d;
      b = e;
     }
    }
    c[b >> 2] = 0;
    d = a;
   } else {
    d = c[j + 8 >> 2] | 0;
    c[d + 12 >> 2] = a;
    c[a + 8 >> 2] = d;
    d = a;
   } while (0);
   if (g | 0) {
    a = c[j + 28 >> 2] | 0;
    b = 40260 + (a << 2) | 0;
    if ((c[b >> 2] | 0) == (j | 0)) {
     c[b >> 2] = d;
     if (!d) {
      c[9990] = c[9990] & ~(1 << a);
      break;
     }
    } else {
     e = g + 16 | 0;
     c[((c[e >> 2] | 0) == (j | 0) ? e : g + 20 | 0) >> 2] = d;
     if (!d) break;
    }
    c[d + 24 >> 2] = g;
    a = j + 16 | 0;
    b = c[a >> 2] | 0;
    if (b | 0) {
     c[d + 16 >> 2] = b;
     c[b + 24 >> 2] = d;
    }
    a = c[a + 4 >> 2] | 0;
    if (a | 0) {
     c[d + 20 >> 2] = a;
     c[a + 24 >> 2] = d;
    }
   }
  } while (0);
  c[i + 4 >> 2] = f | 1;
  c[h + f >> 2] = f;
  if ((i | 0) == (c[9994] | 0)) {
   c[9991] = f;
   return;
  }
 } else {
  c[a >> 2] = e & -2;
  c[i + 4 >> 2] = b | 1;
  c[h + b >> 2] = b;
  f = b;
 }
 a = f >>> 3;
 if (f >>> 0 < 256) {
  d = 39996 + (a << 1 << 2) | 0;
  b = c[9989] | 0;
  a = 1 << a;
  if (!(b & a)) {
   c[9989] = b | a;
   a = d;
   b = d + 8 | 0;
  } else {
   b = d + 8 | 0;
   a = c[b >> 2] | 0;
  }
  c[b >> 2] = i;
  c[a + 12 >> 2] = i;
  c[i + 8 >> 2] = a;
  c[i + 12 >> 2] = d;
  return;
 }
 a = f >>> 8;
 if (!a) e = 0; else if (f >>> 0 > 16777215) e = 31; else {
  h = (a + 1048320 | 0) >>> 16 & 8;
  j = a << h;
  g = (j + 520192 | 0) >>> 16 & 4;
  j = j << g;
  e = (j + 245760 | 0) >>> 16 & 2;
  e = 14 - (g | h | e) + (j << e >>> 15) | 0;
  e = f >>> (e + 7 | 0) & 1 | e << 1;
 }
 a = 40260 + (e << 2) | 0;
 c[i + 28 >> 2] = e;
 c[i + 20 >> 2] = 0;
 c[i + 16 >> 2] = 0;
 b = c[9990] | 0;
 d = 1 << e;
 a : do if (!(b & d)) {
  c[9990] = b | d;
  c[a >> 2] = i;
  c[i + 24 >> 2] = a;
  c[i + 12 >> 2] = i;
  c[i + 8 >> 2] = i;
 } else {
  a = c[a >> 2] | 0;
  b : do if ((c[a + 4 >> 2] & -8 | 0) != (f | 0)) {
   e = f << ((e | 0) == 31 ? 0 : 25 - (e >>> 1) | 0);
   while (1) {
    d = a + 16 + (e >>> 31 << 2) | 0;
    b = c[d >> 2] | 0;
    if (!b) break;
    if ((c[b + 4 >> 2] & -8 | 0) == (f | 0)) {
     a = b;
     break b;
    } else {
     e = e << 1;
     a = b;
    }
   }
   c[d >> 2] = i;
   c[i + 24 >> 2] = a;
   c[i + 12 >> 2] = i;
   c[i + 8 >> 2] = i;
   break a;
  } while (0);
  h = a + 8 | 0;
  j = c[h >> 2] | 0;
  c[j + 12 >> 2] = i;
  c[h >> 2] = i;
  c[i + 8 >> 2] = j;
  c[i + 12 >> 2] = a;
  c[i + 24 >> 2] = 0;
 } while (0);
 j = (c[9997] | 0) + -1 | 0;
 c[9997] = j;
 if (j | 0) return;
 a = 40412;
 while (1) {
  a = c[a >> 2] | 0;
  if (!a) break; else a = a + 8 | 0;
 }
 c[9997] = -1;
 return;
}

function vc(b, e) {
 b = b | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0;
 t = k;
 k = k + 592 | 0;
 o = t + 464 | 0;
 q = t;
 r = t + 304 | 0;
 p = t + 184 | 0;
 s = t + 64 | 0;
 g = a[e >> 0] | 0;
 a[q >> 0] = g & 15;
 a[q + 1 >> 0] = (g & 255) >>> 4;
 g = a[e + 1 >> 0] | 0;
 a[q + 2 >> 0] = g & 15;
 a[q + 3 >> 0] = (g & 255) >>> 4;
 g = a[e + 2 >> 0] | 0;
 a[q + 4 >> 0] = g & 15;
 a[q + 5 >> 0] = (g & 255) >>> 4;
 g = a[e + 3 >> 0] | 0;
 a[q + 6 >> 0] = g & 15;
 a[q + 7 >> 0] = (g & 255) >>> 4;
 g = a[e + 4 >> 0] | 0;
 a[q + 8 >> 0] = g & 15;
 a[q + 9 >> 0] = (g & 255) >>> 4;
 g = a[e + 5 >> 0] | 0;
 a[q + 10 >> 0] = g & 15;
 a[q + 11 >> 0] = (g & 255) >>> 4;
 g = a[e + 6 >> 0] | 0;
 a[q + 12 >> 0] = g & 15;
 a[q + 13 >> 0] = (g & 255) >>> 4;
 g = a[e + 7 >> 0] | 0;
 a[q + 14 >> 0] = g & 15;
 a[q + 15 >> 0] = (g & 255) >>> 4;
 g = a[e + 8 >> 0] | 0;
 a[q + 16 >> 0] = g & 15;
 a[q + 17 >> 0] = (g & 255) >>> 4;
 g = a[e + 9 >> 0] | 0;
 a[q + 18 >> 0] = g & 15;
 a[q + 19 >> 0] = (g & 255) >>> 4;
 g = a[e + 10 >> 0] | 0;
 a[q + 20 >> 0] = g & 15;
 a[q + 21 >> 0] = (g & 255) >>> 4;
 g = a[e + 11 >> 0] | 0;
 a[q + 22 >> 0] = g & 15;
 a[q + 23 >> 0] = (g & 255) >>> 4;
 g = a[e + 12 >> 0] | 0;
 a[q + 24 >> 0] = g & 15;
 a[q + 25 >> 0] = (g & 255) >>> 4;
 g = a[e + 13 >> 0] | 0;
 a[q + 26 >> 0] = g & 15;
 a[q + 27 >> 0] = (g & 255) >>> 4;
 g = a[e + 14 >> 0] | 0;
 a[q + 28 >> 0] = g & 15;
 a[q + 29 >> 0] = (g & 255) >>> 4;
 g = a[e + 15 >> 0] | 0;
 a[q + 30 >> 0] = g & 15;
 a[q + 31 >> 0] = (g & 255) >>> 4;
 g = a[e + 16 >> 0] | 0;
 a[q + 32 >> 0] = g & 15;
 a[q + 33 >> 0] = (g & 255) >>> 4;
 g = a[e + 17 >> 0] | 0;
 a[q + 34 >> 0] = g & 15;
 a[q + 35 >> 0] = (g & 255) >>> 4;
 g = a[e + 18 >> 0] | 0;
 a[q + 36 >> 0] = g & 15;
 a[q + 37 >> 0] = (g & 255) >>> 4;
 g = a[e + 19 >> 0] | 0;
 a[q + 38 >> 0] = g & 15;
 a[q + 39 >> 0] = (g & 255) >>> 4;
 g = a[e + 20 >> 0] | 0;
 a[q + 40 >> 0] = g & 15;
 a[q + 41 >> 0] = (g & 255) >>> 4;
 g = a[e + 21 >> 0] | 0;
 a[q + 42 >> 0] = g & 15;
 a[q + 43 >> 0] = (g & 255) >>> 4;
 g = a[e + 22 >> 0] | 0;
 a[q + 44 >> 0] = g & 15;
 a[q + 45 >> 0] = (g & 255) >>> 4;
 g = a[e + 23 >> 0] | 0;
 a[q + 46 >> 0] = g & 15;
 a[q + 47 >> 0] = (g & 255) >>> 4;
 g = a[e + 24 >> 0] | 0;
 a[q + 48 >> 0] = g & 15;
 a[q + 49 >> 0] = (g & 255) >>> 4;
 g = a[e + 25 >> 0] | 0;
 a[q + 50 >> 0] = g & 15;
 a[q + 51 >> 0] = (g & 255) >>> 4;
 g = a[e + 26 >> 0] | 0;
 a[q + 52 >> 0] = g & 15;
 a[q + 53 >> 0] = (g & 255) >>> 4;
 g = a[e + 27 >> 0] | 0;
 a[q + 54 >> 0] = g & 15;
 a[q + 55 >> 0] = (g & 255) >>> 4;
 g = a[e + 28 >> 0] | 0;
 a[q + 56 >> 0] = g & 15;
 a[q + 57 >> 0] = (g & 255) >>> 4;
 g = a[e + 29 >> 0] | 0;
 a[q + 58 >> 0] = g & 15;
 a[q + 59 >> 0] = (g & 255) >>> 4;
 g = a[e + 30 >> 0] | 0;
 a[q + 60 >> 0] = g & 15;
 a[q + 61 >> 0] = (g & 255) >>> 4;
 e = a[e + 31 >> 0] | 0;
 a[q + 62 >> 0] = e & 15;
 g = q + 63 | 0;
 a[g >> 0] = (e & 255) >>> 4;
 e = 0;
 f = 0;
 do {
  n = q + f | 0;
  m = e + (d[n >> 0] | 0) | 0;
  e = (m << 24) + 134217728 >> 28;
  a[n >> 0] = m - (e << 4);
  f = f + 1 | 0;
 } while ((f | 0) != 63);
 a[g >> 0] = e + (d[g >> 0] | 0);
 e = b;
 f = e + 40 | 0;
 do {
  c[e >> 2] = 0;
  e = e + 4 | 0;
 } while ((e | 0) < (f | 0));
 m = b + 40 | 0;
 c[m >> 2] = 1;
 j = b + 44 | 0;
 e = j;
 f = e + 36 | 0;
 do {
  c[e >> 2] = 0;
  e = e + 4 | 0;
 } while ((e | 0) < (f | 0));
 n = b + 80 | 0;
 c[n >> 2] = 1;
 l = b + 84 | 0;
 e = l;
 f = e + 76 | 0;
 do {
  c[e >> 2] = 0;
  e = e + 4 | 0;
 } while ((e | 0) < (f | 0));
 f = r + 120 | 0;
 g = r + 40 | 0;
 h = r + 80 | 0;
 i = b + 120 | 0;
 e = 1;
 do {
  wc(s, e >>> 1, a[q + e >> 0] | 0);
  oc(r, b, s);
  ec(b, r, f);
  ec(m, g, h);
  ec(n, h, f);
  ec(i, r, g);
  e = e + 2 | 0;
 } while (e >>> 0 < 64);
 B = c[b + 4 >> 2] | 0;
 z = c[b + 8 >> 2] | 0;
 y = c[b + 12 >> 2] | 0;
 x = c[b + 16 >> 2] | 0;
 w = c[b + 20 >> 2] | 0;
 v = c[b + 24 >> 2] | 0;
 u = c[b + 28 >> 2] | 0;
 e = c[b + 32 >> 2] | 0;
 A = c[b + 36 >> 2] | 0;
 c[o >> 2] = c[b >> 2];
 c[o + 4 >> 2] = B;
 c[o + 8 >> 2] = z;
 c[o + 12 >> 2] = y;
 c[o + 16 >> 2] = x;
 c[o + 20 >> 2] = w;
 c[o + 24 >> 2] = v;
 c[o + 28 >> 2] = u;
 c[o + 32 >> 2] = e;
 c[o + 36 >> 2] = A;
 A = c[j >> 2] | 0;
 e = c[b + 48 >> 2] | 0;
 j = c[b + 52 >> 2] | 0;
 u = c[b + 56 >> 2] | 0;
 v = c[b + 60 >> 2] | 0;
 w = c[b + 64 >> 2] | 0;
 x = c[b + 68 >> 2] | 0;
 y = c[b + 72 >> 2] | 0;
 z = c[b + 76 >> 2] | 0;
 c[o + 40 >> 2] = c[m >> 2];
 c[o + 44 >> 2] = A;
 c[o + 48 >> 2] = e;
 c[o + 52 >> 2] = j;
 c[o + 56 >> 2] = u;
 c[o + 60 >> 2] = v;
 c[o + 64 >> 2] = w;
 c[o + 68 >> 2] = x;
 c[o + 72 >> 2] = y;
 c[o + 76 >> 2] = z;
 z = c[l >> 2] | 0;
 y = c[b + 88 >> 2] | 0;
 x = c[b + 92 >> 2] | 0;
 w = c[b + 96 >> 2] | 0;
 v = c[b + 100 >> 2] | 0;
 u = c[b + 104 >> 2] | 0;
 j = c[b + 108 >> 2] | 0;
 l = c[b + 112 >> 2] | 0;
 e = c[b + 116 >> 2] | 0;
 c[o + 80 >> 2] = c[n >> 2];
 c[o + 84 >> 2] = z;
 c[o + 88 >> 2] = y;
 c[o + 92 >> 2] = x;
 c[o + 96 >> 2] = w;
 c[o + 100 >> 2] = v;
 c[o + 104 >> 2] = u;
 c[o + 108 >> 2] = j;
 c[o + 112 >> 2] = l;
 c[o + 116 >> 2] = e;
 hc(r, o);
 ec(p, r, f);
 o = p + 40 | 0;
 ec(o, g, h);
 e = p + 80 | 0;
 ec(e, h, f);
 hc(r, p);
 ec(p, r, f);
 ec(o, g, h);
 ec(e, h, f);
 hc(r, p);
 ec(p, r, f);
 ec(o, g, h);
 ec(e, h, f);
 hc(r, p);
 ec(b, r, f);
 ec(m, g, h);
 ec(n, h, f);
 ec(i, r, g);
 e = 0;
 do {
  wc(s, e >>> 1, a[q + e >> 0] | 0);
  oc(r, b, s);
  ec(b, r, f);
  ec(m, g, h);
  ec(n, h, f);
  ec(i, r, g);
  e = e + 2 | 0;
 } while (e >>> 0 < 64);
 k = t;
 return;
}

function oc(a, b, d) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, U = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0;
 V = b + 40 | 0;
 k = b + 44 | 0;
 n = b + 48 | 0;
 q = b + 52 | 0;
 t = b + 56 | 0;
 w = b + 60 | 0;
 z = b + 64 | 0;
 C = b + 68 | 0;
 F = b + 72 | 0;
 D = b + 76 | 0;
 S = b + 4 | 0;
 Q = b + 8 | 0;
 f = b + 12 | 0;
 m = b + 16 | 0;
 o = b + 20 | 0;
 v = b + 24 | 0;
 x = b + 28 | 0;
 E = b + 32 | 0;
 P = b + 36 | 0;
 ga = (c[S >> 2] | 0) + (c[k >> 2] | 0) | 0;
 fa = (c[Q >> 2] | 0) + (c[n >> 2] | 0) | 0;
 ea = (c[f >> 2] | 0) + (c[q >> 2] | 0) | 0;
 da = (c[m >> 2] | 0) + (c[t >> 2] | 0) | 0;
 ca = (c[o >> 2] | 0) + (c[w >> 2] | 0) | 0;
 ba = (c[v >> 2] | 0) + (c[z >> 2] | 0) | 0;
 aa = (c[x >> 2] | 0) + (c[C >> 2] | 0) | 0;
 $ = (c[E >> 2] | 0) + (c[F >> 2] | 0) | 0;
 Y = (c[P >> 2] | 0) + (c[D >> 2] | 0) | 0;
 c[a >> 2] = (c[b >> 2] | 0) + (c[V >> 2] | 0);
 ha = a + 4 | 0;
 c[ha >> 2] = ga;
 ga = a + 8 | 0;
 c[ga >> 2] = fa;
 fa = a + 12 | 0;
 c[fa >> 2] = ea;
 ea = a + 16 | 0;
 c[ea >> 2] = da;
 da = a + 20 | 0;
 c[da >> 2] = ca;
 ca = a + 24 | 0;
 c[ca >> 2] = ba;
 ba = a + 28 | 0;
 c[ba >> 2] = aa;
 aa = a + 32 | 0;
 c[aa >> 2] = $;
 $ = a + 36 | 0;
 c[$ >> 2] = Y;
 Y = a + 40 | 0;
 S = (c[k >> 2] | 0) - (c[S >> 2] | 0) | 0;
 Q = (c[n >> 2] | 0) - (c[Q >> 2] | 0) | 0;
 f = (c[q >> 2] | 0) - (c[f >> 2] | 0) | 0;
 m = (c[t >> 2] | 0) - (c[m >> 2] | 0) | 0;
 o = (c[w >> 2] | 0) - (c[o >> 2] | 0) | 0;
 v = (c[z >> 2] | 0) - (c[v >> 2] | 0) | 0;
 x = (c[C >> 2] | 0) - (c[x >> 2] | 0) | 0;
 E = (c[F >> 2] | 0) - (c[E >> 2] | 0) | 0;
 P = (c[D >> 2] | 0) - (c[P >> 2] | 0) | 0;
 c[Y >> 2] = (c[V >> 2] | 0) - (c[b >> 2] | 0);
 V = a + 44 | 0;
 c[V >> 2] = S;
 S = a + 48 | 0;
 c[S >> 2] = Q;
 Q = a + 52 | 0;
 c[Q >> 2] = f;
 f = a + 56 | 0;
 c[f >> 2] = m;
 m = a + 60 | 0;
 c[m >> 2] = o;
 o = a + 64 | 0;
 c[o >> 2] = v;
 v = a + 68 | 0;
 c[v >> 2] = x;
 x = a + 72 | 0;
 c[x >> 2] = E;
 E = a + 76 | 0;
 c[E >> 2] = P;
 P = a + 80 | 0;
 ec(P, a, d);
 ec(Y, Y, d + 40 | 0);
 D = a + 120 | 0;
 ec(D, d + 80 | 0, b + 120 | 0);
 F = c[b + 80 >> 2] << 1;
 C = c[b + 84 >> 2] << 1;
 z = c[b + 88 >> 2] << 1;
 w = c[b + 92 >> 2] << 1;
 t = c[b + 96 >> 2] << 1;
 q = c[b + 100 >> 2] << 1;
 n = c[b + 104 >> 2] << 1;
 k = c[b + 108 >> 2] << 1;
 h = c[b + 112 >> 2] << 1;
 e = c[b + 116 >> 2] << 1;
 Z = c[P >> 2] | 0;
 O = a + 84 | 0;
 W = c[O >> 2] | 0;
 N = a + 88 | 0;
 T = c[N >> 2] | 0;
 M = a + 92 | 0;
 b = c[M >> 2] | 0;
 L = a + 96 | 0;
 g = c[L >> 2] | 0;
 K = a + 100 | 0;
 i = c[K >> 2] | 0;
 J = a + 104 | 0;
 p = c[J >> 2] | 0;
 I = a + 108 | 0;
 r = c[I >> 2] | 0;
 H = a + 112 | 0;
 y = c[H >> 2] | 0;
 G = a + 116 | 0;
 A = c[G >> 2] | 0;
 _ = c[Y >> 2] | 0;
 X = c[V >> 2] | 0;
 U = c[S >> 2] | 0;
 R = c[Q >> 2] | 0;
 d = c[f >> 2] | 0;
 j = c[m >> 2] | 0;
 l = c[o >> 2] | 0;
 s = c[v >> 2] | 0;
 u = c[x >> 2] | 0;
 B = c[E >> 2] | 0;
 c[a >> 2] = Z - _;
 c[ha >> 2] = W - X;
 c[ga >> 2] = T - U;
 c[fa >> 2] = b - R;
 c[ea >> 2] = g - d;
 c[da >> 2] = i - j;
 c[ca >> 2] = p - l;
 c[ba >> 2] = r - s;
 c[aa >> 2] = y - u;
 c[$ >> 2] = A - B;
 c[Y >> 2] = _ + Z;
 c[V >> 2] = X + W;
 c[S >> 2] = U + T;
 c[Q >> 2] = R + b;
 c[f >> 2] = d + g;
 c[m >> 2] = j + i;
 c[o >> 2] = l + p;
 c[v >> 2] = s + r;
 c[x >> 2] = u + y;
 c[E >> 2] = B + A;
 E = c[D >> 2] | 0;
 A = a + 124 | 0;
 B = c[A >> 2] | 0;
 x = a + 128 | 0;
 y = c[x >> 2] | 0;
 u = a + 132 | 0;
 v = c[u >> 2] | 0;
 r = a + 136 | 0;
 s = c[r >> 2] | 0;
 o = a + 140 | 0;
 p = c[o >> 2] | 0;
 l = a + 144 | 0;
 m = c[l >> 2] | 0;
 i = a + 148 | 0;
 j = c[i >> 2] | 0;
 f = a + 152 | 0;
 g = c[f >> 2] | 0;
 d = a + 156 | 0;
 b = c[d >> 2] | 0;
 c[P >> 2] = E + F;
 c[O >> 2] = B + C;
 c[N >> 2] = y + z;
 c[M >> 2] = v + w;
 c[L >> 2] = s + t;
 c[K >> 2] = p + q;
 c[J >> 2] = m + n;
 c[I >> 2] = j + k;
 c[H >> 2] = g + h;
 c[G >> 2] = b + e;
 c[D >> 2] = F - E;
 c[A >> 2] = C - B;
 c[x >> 2] = z - y;
 c[u >> 2] = w - v;
 c[r >> 2] = t - s;
 c[o >> 2] = q - p;
 c[l >> 2] = n - m;
 c[i >> 2] = k - j;
 c[f >> 2] = h - g;
 c[d >> 2] = e - b;
 return;
}

function nc(a, b, d) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, U = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0;
 V = b + 40 | 0;
 i = b + 44 | 0;
 l = b + 48 | 0;
 o = b + 52 | 0;
 r = b + 56 | 0;
 u = b + 60 | 0;
 x = b + 64 | 0;
 A = b + 68 | 0;
 D = b + 72 | 0;
 C = b + 76 | 0;
 S = b + 4 | 0;
 P = b + 8 | 0;
 e = b + 12 | 0;
 m = b + 16 | 0;
 n = b + 20 | 0;
 v = b + 24 | 0;
 w = b + 28 | 0;
 E = b + 32 | 0;
 O = b + 36 | 0;
 ga = (c[S >> 2] | 0) + (c[i >> 2] | 0) | 0;
 fa = (c[P >> 2] | 0) + (c[l >> 2] | 0) | 0;
 ea = (c[e >> 2] | 0) + (c[o >> 2] | 0) | 0;
 da = (c[m >> 2] | 0) + (c[r >> 2] | 0) | 0;
 ca = (c[n >> 2] | 0) + (c[u >> 2] | 0) | 0;
 ba = (c[v >> 2] | 0) + (c[x >> 2] | 0) | 0;
 aa = (c[w >> 2] | 0) + (c[A >> 2] | 0) | 0;
 $ = (c[E >> 2] | 0) + (c[D >> 2] | 0) | 0;
 Y = (c[O >> 2] | 0) + (c[C >> 2] | 0) | 0;
 c[a >> 2] = (c[b >> 2] | 0) + (c[V >> 2] | 0);
 ha = a + 4 | 0;
 c[ha >> 2] = ga;
 ga = a + 8 | 0;
 c[ga >> 2] = fa;
 fa = a + 12 | 0;
 c[fa >> 2] = ea;
 ea = a + 16 | 0;
 c[ea >> 2] = da;
 da = a + 20 | 0;
 c[da >> 2] = ca;
 ca = a + 24 | 0;
 c[ca >> 2] = ba;
 ba = a + 28 | 0;
 c[ba >> 2] = aa;
 aa = a + 32 | 0;
 c[aa >> 2] = $;
 $ = a + 36 | 0;
 c[$ >> 2] = Y;
 Y = a + 40 | 0;
 S = (c[i >> 2] | 0) - (c[S >> 2] | 0) | 0;
 P = (c[l >> 2] | 0) - (c[P >> 2] | 0) | 0;
 e = (c[o >> 2] | 0) - (c[e >> 2] | 0) | 0;
 m = (c[r >> 2] | 0) - (c[m >> 2] | 0) | 0;
 n = (c[u >> 2] | 0) - (c[n >> 2] | 0) | 0;
 v = (c[x >> 2] | 0) - (c[v >> 2] | 0) | 0;
 w = (c[A >> 2] | 0) - (c[w >> 2] | 0) | 0;
 E = (c[D >> 2] | 0) - (c[E >> 2] | 0) | 0;
 O = (c[C >> 2] | 0) - (c[O >> 2] | 0) | 0;
 c[Y >> 2] = (c[V >> 2] | 0) - (c[b >> 2] | 0);
 V = a + 44 | 0;
 c[V >> 2] = S;
 S = a + 48 | 0;
 c[S >> 2] = P;
 P = a + 52 | 0;
 c[P >> 2] = e;
 e = a + 56 | 0;
 c[e >> 2] = m;
 m = a + 60 | 0;
 c[m >> 2] = n;
 n = a + 64 | 0;
 c[n >> 2] = v;
 v = a + 68 | 0;
 c[v >> 2] = w;
 w = a + 72 | 0;
 c[w >> 2] = E;
 E = a + 76 | 0;
 c[E >> 2] = O;
 O = a + 80 | 0;
 ec(O, a, d + 40 | 0);
 ec(Y, Y, d);
 C = a + 120 | 0;
 ec(C, d + 120 | 0, b + 120 | 0);
 ec(a, b + 80 | 0, d + 80 | 0);
 D = c[a >> 2] << 1;
 A = c[ha >> 2] << 1;
 x = c[ga >> 2] << 1;
 u = c[fa >> 2] << 1;
 r = c[ea >> 2] << 1;
 o = c[da >> 2] << 1;
 l = c[ca >> 2] << 1;
 i = c[ba >> 2] << 1;
 f = c[aa >> 2] << 1;
 b = c[$ >> 2] << 1;
 Z = c[O >> 2] | 0;
 N = a + 84 | 0;
 W = c[N >> 2] | 0;
 M = a + 88 | 0;
 T = c[M >> 2] | 0;
 L = a + 92 | 0;
 Q = c[L >> 2] | 0;
 K = a + 96 | 0;
 g = c[K >> 2] | 0;
 J = a + 100 | 0;
 h = c[J >> 2] | 0;
 I = a + 104 | 0;
 p = c[I >> 2] | 0;
 H = a + 108 | 0;
 q = c[H >> 2] | 0;
 G = a + 112 | 0;
 y = c[G >> 2] | 0;
 F = a + 116 | 0;
 z = c[F >> 2] | 0;
 _ = c[Y >> 2] | 0;
 X = c[V >> 2] | 0;
 U = c[S >> 2] | 0;
 R = c[P >> 2] | 0;
 d = c[e >> 2] | 0;
 j = c[m >> 2] | 0;
 k = c[n >> 2] | 0;
 s = c[v >> 2] | 0;
 t = c[w >> 2] | 0;
 B = c[E >> 2] | 0;
 c[a >> 2] = Z - _;
 c[ha >> 2] = W - X;
 c[ga >> 2] = T - U;
 c[fa >> 2] = Q - R;
 c[ea >> 2] = g - d;
 c[da >> 2] = h - j;
 c[ca >> 2] = p - k;
 c[ba >> 2] = q - s;
 c[aa >> 2] = y - t;
 c[$ >> 2] = z - B;
 c[Y >> 2] = _ + Z;
 c[V >> 2] = X + W;
 c[S >> 2] = U + T;
 c[P >> 2] = R + Q;
 c[e >> 2] = d + g;
 c[m >> 2] = j + h;
 c[n >> 2] = k + p;
 c[v >> 2] = s + q;
 c[w >> 2] = t + y;
 c[E >> 2] = B + z;
 E = c[C >> 2] | 0;
 z = a + 124 | 0;
 B = c[z >> 2] | 0;
 w = a + 128 | 0;
 y = c[w >> 2] | 0;
 t = a + 132 | 0;
 v = c[t >> 2] | 0;
 q = a + 136 | 0;
 s = c[q >> 2] | 0;
 n = a + 140 | 0;
 p = c[n >> 2] | 0;
 k = a + 144 | 0;
 m = c[k >> 2] | 0;
 h = a + 148 | 0;
 j = c[h >> 2] | 0;
 e = a + 152 | 0;
 g = c[e >> 2] | 0;
 d = a + 156 | 0;
 a = c[d >> 2] | 0;
 c[O >> 2] = D - E;
 c[N >> 2] = A - B;
 c[M >> 2] = x - y;
 c[L >> 2] = u - v;
 c[K >> 2] = r - s;
 c[J >> 2] = o - p;
 c[I >> 2] = l - m;
 c[H >> 2] = i - j;
 c[G >> 2] = f - g;
 c[F >> 2] = b - a;
 c[C >> 2] = E + D;
 c[z >> 2] = B + A;
 c[w >> 2] = y + x;
 c[t >> 2] = v + u;
 c[q >> 2] = s + r;
 c[n >> 2] = p + o;
 c[k >> 2] = m + l;
 c[h >> 2] = j + i;
 c[e >> 2] = g + f;
 c[d >> 2] = a + b;
 return;
}

function dc(a, b, d) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, U = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0;
 V = b + 40 | 0;
 k = b + 44 | 0;
 n = b + 48 | 0;
 q = b + 52 | 0;
 t = b + 56 | 0;
 w = b + 60 | 0;
 z = b + 64 | 0;
 C = b + 68 | 0;
 F = b + 72 | 0;
 D = b + 76 | 0;
 S = b + 4 | 0;
 Q = b + 8 | 0;
 f = b + 12 | 0;
 m = b + 16 | 0;
 o = b + 20 | 0;
 v = b + 24 | 0;
 x = b + 28 | 0;
 E = b + 32 | 0;
 P = b + 36 | 0;
 ga = (c[S >> 2] | 0) + (c[k >> 2] | 0) | 0;
 fa = (c[Q >> 2] | 0) + (c[n >> 2] | 0) | 0;
 ea = (c[f >> 2] | 0) + (c[q >> 2] | 0) | 0;
 da = (c[m >> 2] | 0) + (c[t >> 2] | 0) | 0;
 ca = (c[o >> 2] | 0) + (c[w >> 2] | 0) | 0;
 ba = (c[v >> 2] | 0) + (c[z >> 2] | 0) | 0;
 aa = (c[x >> 2] | 0) + (c[C >> 2] | 0) | 0;
 $ = (c[E >> 2] | 0) + (c[F >> 2] | 0) | 0;
 Y = (c[P >> 2] | 0) + (c[D >> 2] | 0) | 0;
 c[a >> 2] = (c[b >> 2] | 0) + (c[V >> 2] | 0);
 ha = a + 4 | 0;
 c[ha >> 2] = ga;
 ga = a + 8 | 0;
 c[ga >> 2] = fa;
 fa = a + 12 | 0;
 c[fa >> 2] = ea;
 ea = a + 16 | 0;
 c[ea >> 2] = da;
 da = a + 20 | 0;
 c[da >> 2] = ca;
 ca = a + 24 | 0;
 c[ca >> 2] = ba;
 ba = a + 28 | 0;
 c[ba >> 2] = aa;
 aa = a + 32 | 0;
 c[aa >> 2] = $;
 $ = a + 36 | 0;
 c[$ >> 2] = Y;
 Y = a + 40 | 0;
 S = (c[k >> 2] | 0) - (c[S >> 2] | 0) | 0;
 Q = (c[n >> 2] | 0) - (c[Q >> 2] | 0) | 0;
 f = (c[q >> 2] | 0) - (c[f >> 2] | 0) | 0;
 m = (c[t >> 2] | 0) - (c[m >> 2] | 0) | 0;
 o = (c[w >> 2] | 0) - (c[o >> 2] | 0) | 0;
 v = (c[z >> 2] | 0) - (c[v >> 2] | 0) | 0;
 x = (c[C >> 2] | 0) - (c[x >> 2] | 0) | 0;
 E = (c[F >> 2] | 0) - (c[E >> 2] | 0) | 0;
 P = (c[D >> 2] | 0) - (c[P >> 2] | 0) | 0;
 c[Y >> 2] = (c[V >> 2] | 0) - (c[b >> 2] | 0);
 V = a + 44 | 0;
 c[V >> 2] = S;
 S = a + 48 | 0;
 c[S >> 2] = Q;
 Q = a + 52 | 0;
 c[Q >> 2] = f;
 f = a + 56 | 0;
 c[f >> 2] = m;
 m = a + 60 | 0;
 c[m >> 2] = o;
 o = a + 64 | 0;
 c[o >> 2] = v;
 v = a + 68 | 0;
 c[v >> 2] = x;
 x = a + 72 | 0;
 c[x >> 2] = E;
 E = a + 76 | 0;
 c[E >> 2] = P;
 P = a + 80 | 0;
 ec(P, a, d);
 ec(Y, Y, d + 40 | 0);
 D = a + 120 | 0;
 ec(D, d + 120 | 0, b + 120 | 0);
 ec(a, b + 80 | 0, d + 80 | 0);
 F = c[a >> 2] << 1;
 C = c[ha >> 2] << 1;
 z = c[ga >> 2] << 1;
 w = c[fa >> 2] << 1;
 t = c[ea >> 2] << 1;
 q = c[da >> 2] << 1;
 n = c[ca >> 2] << 1;
 k = c[ba >> 2] << 1;
 h = c[aa >> 2] << 1;
 e = c[$ >> 2] << 1;
 Z = c[P >> 2] | 0;
 O = a + 84 | 0;
 W = c[O >> 2] | 0;
 N = a + 88 | 0;
 T = c[N >> 2] | 0;
 M = a + 92 | 0;
 b = c[M >> 2] | 0;
 L = a + 96 | 0;
 g = c[L >> 2] | 0;
 K = a + 100 | 0;
 i = c[K >> 2] | 0;
 J = a + 104 | 0;
 p = c[J >> 2] | 0;
 I = a + 108 | 0;
 r = c[I >> 2] | 0;
 H = a + 112 | 0;
 y = c[H >> 2] | 0;
 G = a + 116 | 0;
 A = c[G >> 2] | 0;
 _ = c[Y >> 2] | 0;
 X = c[V >> 2] | 0;
 U = c[S >> 2] | 0;
 R = c[Q >> 2] | 0;
 d = c[f >> 2] | 0;
 j = c[m >> 2] | 0;
 l = c[o >> 2] | 0;
 s = c[v >> 2] | 0;
 u = c[x >> 2] | 0;
 B = c[E >> 2] | 0;
 c[a >> 2] = Z - _;
 c[ha >> 2] = W - X;
 c[ga >> 2] = T - U;
 c[fa >> 2] = b - R;
 c[ea >> 2] = g - d;
 c[da >> 2] = i - j;
 c[ca >> 2] = p - l;
 c[ba >> 2] = r - s;
 c[aa >> 2] = y - u;
 c[$ >> 2] = A - B;
 c[Y >> 2] = _ + Z;
 c[V >> 2] = X + W;
 c[S >> 2] = U + T;
 c[Q >> 2] = R + b;
 c[f >> 2] = d + g;
 c[m >> 2] = j + i;
 c[o >> 2] = l + p;
 c[v >> 2] = s + r;
 c[x >> 2] = u + y;
 c[E >> 2] = B + A;
 E = c[D >> 2] | 0;
 A = a + 124 | 0;
 B = c[A >> 2] | 0;
 x = a + 128 | 0;
 y = c[x >> 2] | 0;
 u = a + 132 | 0;
 v = c[u >> 2] | 0;
 r = a + 136 | 0;
 s = c[r >> 2] | 0;
 o = a + 140 | 0;
 p = c[o >> 2] | 0;
 l = a + 144 | 0;
 m = c[l >> 2] | 0;
 i = a + 148 | 0;
 j = c[i >> 2] | 0;
 f = a + 152 | 0;
 g = c[f >> 2] | 0;
 d = a + 156 | 0;
 b = c[d >> 2] | 0;
 c[P >> 2] = E + F;
 c[O >> 2] = B + C;
 c[N >> 2] = y + z;
 c[M >> 2] = v + w;
 c[L >> 2] = s + t;
 c[K >> 2] = p + q;
 c[J >> 2] = m + n;
 c[I >> 2] = j + k;
 c[H >> 2] = g + h;
 c[G >> 2] = b + e;
 c[D >> 2] = F - E;
 c[A >> 2] = C - B;
 c[x >> 2] = z - y;
 c[u >> 2] = w - v;
 c[r >> 2] = t - s;
 c[o >> 2] = q - p;
 c[l >> 2] = n - m;
 c[i >> 2] = k - j;
 c[f >> 2] = h - g;
 c[d >> 2] = e - b;
 return;
}

function Vc(b, d, e, f, g, h, i) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 h = h | 0;
 i = i | 0;
 var j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0;
 C = k;
 k = k + 2176 | 0;
 t = C + 1280 | 0;
 u = C + 1960 | 0;
 v = C + 1800 | 0;
 A = C + 1784 | 0;
 n = C + 1624 | 0;
 p = C;
 x = C + 2144 | 0;
 y = C + 2112 | 0;
 z = C + 2080 | 0;
 q = C + 1504 | 0;
 r = C + 1344 | 0;
 s = f + 4 | 0;
 j = (c[s >> 2] | 0) - (c[f >> 2] | 0) | 0;
 l = j >> 5;
 c[A >> 2] = 0;
 B = A + 4 | 0;
 c[B >> 2] = 0;
 m = A + 8 | 0;
 c[m >> 2] = 0;
 do if (j | 0) if (l >>> 0 > 67108863) Ze(A); else {
  o = He(j << 1) | 0;
  c[A >> 2] = o;
  o = o + (l << 6) | 0;
  c[m >> 2] = o;
  c[B >> 2] = o;
  break;
 } while (0);
 Fe(39860);
 o = k;
 k = k + ((1 * ((c[s >> 2] | 0) - (c[f >> 2] | 0) << 1 | 32) | 0) + 15 & -16) | 0;
 a : do if (!(qc(n, e) | 0)) {
  fc(p, n);
  Ec(x);
  e = o;
  j = d;
  l = e + 32 | 0;
  do {
   a[e >> 0] = a[j >> 0] | 0;
   e = e + 1 | 0;
   j = j + 1 | 0;
  } while ((e | 0) < (l | 0));
  do if ((c[s >> 2] | 0) == (c[f >> 2] | 0)) j = 32; else {
   n = o + 32 | 0;
   m = 0;
   while (1) {
    if ((m | 0) == (h | 0) & 0 == (i | 0)) {
     Qc(64, t);
     zc(t);
     e = y;
     j = t;
     l = e + 32 | 0;
     do {
      a[e >> 0] = a[j >> 0] | 0;
      e = e + 1 | 0;
      j = j + 1 | 0;
     } while ((e | 0) < (l | 0));
     vc(r, y);
     tc(n + (m << 6) | 0, r);
     Lc((c[f >> 2] | 0) + (m << 5) | 0, 32, t);
     Dc(u, t);
     Cc(v, u);
     kc(r, v);
     Ac(q, y, r);
     yc(n + (m << 6) + 32 | 0, q);
    } else {
     e = c[A >> 2] | 0;
     Qc(64, t);
     zc(t);
     e = e + (m << 6) | 0;
     j = t;
     l = e + 32 | 0;
     do {
      a[e >> 0] = a[j >> 0] | 0;
      e = e + 1 | 0;
      j = j + 1 | 0;
     } while ((e | 0) < (l | 0));
     e = (c[A >> 2] | 0) + (m << 6) + 32 | 0;
     Qc(64, t);
     zc(t);
     j = t;
     l = e + 32 | 0;
     do {
      a[e >> 0] = a[j >> 0] | 0;
      e = e + 1 | 0;
      j = j + 1 | 0;
     } while ((e | 0) < (l | 0));
     if (qc(r, (c[f >> 2] | 0) + (m << 5) | 0) | 0) break;
     d = c[A >> 2] | 0;
     lc(q, d + (m << 6) | 0, r, d + (m << 6) + 32 | 0);
     yc(n + (m << 6) | 0, q);
     Lc((c[f >> 2] | 0) + (m << 5) | 0, 32, t);
     Dc(u, t);
     Cc(v, u);
     kc(r, v);
     d = c[A >> 2] | 0;
     Bc(q, d + (m << 6) + 32 | 0, r, d + (m << 6) | 0, p);
     yc(n + (m << 6) + 32 | 0, q);
     Gc(x, x, (c[A >> 2] | 0) + (m << 6) | 0);
    }
    m = m + 1 | 0;
    j = (c[s >> 2] | 0) - (c[f >> 2] | 0) | 0;
    if (m >>> 0 >= j >> 5 >>> 0) {
     w = 24;
     break;
    }
   }
   if ((w | 0) == 24) {
    j = j << 1 | 32;
    break;
   }
   a[b >> 0] = 0;
   d = b + 4 | 0;
   c[d >> 2] = 0;
   o = b + 8 | 0;
   c[o >> 2] = 0;
   j = b + 12 | 0;
   c[j >> 2] = 0;
   n = c[A >> 2] | 0;
   l = (c[B >> 2] | 0) - n | 0;
   m = l >> 6;
   if (l | 0) {
    if (m >>> 0 > 67108863) Ze(d);
    e = He(l) | 0;
    c[o >> 2] = e;
    c[d >> 2] = e;
    c[j >> 2] = e + (m << 6);
    if ((l | 0) > 0) {
     ig(e | 0, n | 0, l | 0) | 0;
     c[o >> 2] = e + (l >>> 6 << 6);
    }
   }
   break a;
  } while (0);
  Lc(o, j, z);
  Fc(z);
  Hc((c[A >> 2] | 0) + (h << 6) | 0, z, x);
  d = c[A >> 2] | 0;
  Ic(d + (h << 6) + 32 | 0, d + (h << 6) | 0, g, y);
  a[b >> 0] = 1;
  d = b + 4 | 0;
  c[d >> 2] = 0;
  o = b + 8 | 0;
  c[o >> 2] = 0;
  j = b + 12 | 0;
  c[j >> 2] = 0;
  n = c[A >> 2] | 0;
  l = (c[B >> 2] | 0) - n | 0;
  m = l >> 6;
  if (l | 0) {
   if (m >>> 0 > 67108863) Ze(d);
   e = He(l) | 0;
   c[o >> 2] = e;
   c[d >> 2] = e;
   c[j >> 2] = e + (m << 6);
   if ((l | 0) > 0) {
    ig(e | 0, n | 0, l | 0) | 0;
    c[o >> 2] = e + (l >>> 6 << 6);
   }
  }
 } else {
  a[b >> 0] = 0;
  d = b + 4 | 0;
  c[d >> 2] = 0;
  o = b + 8 | 0;
  c[o >> 2] = 0;
  j = b + 12 | 0;
  c[j >> 2] = 0;
  n = c[A >> 2] | 0;
  l = (c[B >> 2] | 0) - n | 0;
  m = l >> 6;
  if (l | 0) {
   if (m >>> 0 > 67108863) Ze(d);
   e = He(l) | 0;
   c[o >> 2] = e;
   c[d >> 2] = e;
   c[j >> 2] = e + (m << 6);
   if ((l | 0) > 0) {
    ig(e | 0, n | 0, l | 0) | 0;
    c[o >> 2] = e + (l >>> 6 << 6);
   }
  }
 } while (0);
 Ge(39860);
 j = c[A >> 2] | 0;
 if (!j) {
  k = C;
  return;
 }
 c[B >> 2] = j;
 Ie(j);
 k = C;
 return;
}

function Jc(a) {
 a = a | 0;
 var b = 0, c = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0;
 b = d[a >> 0] | 0;
 O = gg(d[a + 1 >> 0] | 0 | 0, 0, 8) | 0;
 N = U() | 0;
 M = gg(d[a + 2 >> 0] | 0 | 0, 0, 16) | 0;
 N = N | (U() | 0);
 H = gg(d[a + 3 >> 0] | 0 | 0, 0, 24) | 0;
 N = N | (U() | 0);
 I = d[a + 4 >> 0] | 0;
 L = gg(d[a + 5 >> 0] | 0 | 0, 0, 8) | 0;
 K = U() | 0;
 J = gg(d[a + 6 >> 0] | 0 | 0, 0, 16) | 0;
 K = K | (U() | 0);
 C = gg(d[a + 7 >> 0] | 0 | 0, 0, 24) | 0;
 K = K | (U() | 0);
 D = d[a + 8 >> 0] | 0;
 G = gg(d[a + 9 >> 0] | 0 | 0, 0, 8) | 0;
 F = U() | 0;
 E = gg(d[a + 10 >> 0] | 0 | 0, 0, 16) | 0;
 F = F | (U() | 0);
 x = gg(d[a + 11 >> 0] | 0 | 0, 0, 24) | 0;
 F = F | (U() | 0);
 y = d[a + 12 >> 0] | 0;
 B = gg(d[a + 13 >> 0] | 0 | 0, 0, 8) | 0;
 A = U() | 0;
 z = gg(d[a + 14 >> 0] | 0 | 0, 0, 16) | 0;
 A = A | (U() | 0);
 s = gg(d[a + 15 >> 0] | 0 | 0, 0, 24) | 0;
 A = A | (U() | 0);
 v = d[a + 16 >> 0] | 0;
 w = gg(d[a + 17 >> 0] | 0 | 0, 0, 8) | 0;
 n = U() | 0;
 u = gg(d[a + 18 >> 0] | 0 | 0, 0, 16) | 0;
 n = n | (U() | 0);
 t = gg(d[a + 19 >> 0] | 0 | 0, 0, 24) | 0;
 n = n | (U() | 0);
 q = d[a + 20 >> 0] | 0;
 r = gg(d[a + 21 >> 0] | 0 | 0, 0, 8) | 0;
 i = U() | 0;
 p = gg(d[a + 22 >> 0] | 0 | 0, 0, 16) | 0;
 i = i | (U() | 0);
 o = gg(d[a + 23 >> 0] | 0 | 0, 0, 24) | 0;
 i = i | (U() | 0);
 l = d[a + 24 >> 0] | 0;
 m = gg(d[a + 25 >> 0] | 0 | 0, 0, 8) | 0;
 c = U() | 0;
 k = gg(d[a + 26 >> 0] | 0 | 0, 0, 16) | 0;
 c = c | (U() | 0);
 j = gg(d[a + 27 >> 0] | 0 | 0, 0, 24) | 0;
 c = c | (U() | 0);
 e = d[a + 28 >> 0] | 0;
 h = gg(d[a + 29 >> 0] | 0 | 0, 0, 8) | 0;
 g = U() | 0;
 f = gg(d[a + 30 >> 0] | 0 | 0, 0, 16) | 0;
 g = g | (U() | 0);
 a = gg(d[a + 31 >> 0] | 0 | 0, 0, 24) | 0;
 g = g | (U() | 0);
 N = ag(1559614444, 0, O | b | M | H | 0, N | 0) | 0;
 H = U() | 0;
 M = eg(N | 0, H | 0, 63) | 0;
 b = U() | 0;
 H = ag(0, 0, N | 0, H | 0) | 0;
 H = fg(H | 0, U() | 0, 63) | 0;
 H = $f(M | 0, b | 0, H | 0, U() | 0) | 0;
 b = U() | 0;
 K = ag(1477600026, 0, L | I | J | C | 0, K | 0) | 0;
 C = U() | 0;
 J = eg(K | 0, C | 0, 63) | 0;
 I = U() | 0;
 C = ag(0, 0, K | 0, C | 0) | 0;
 C = eg(C | 0, U() | 0, 63) | 0;
 C = ag(J | 0, I | 0, C | 0, U() | 0) | 0;
 C = gg(C | 0, U() | 0, 1) | 0;
 C = $f(H | 0, b | 0, C | 0, U() | 0) | 0;
 b = U() | 0;
 F = ag(-1560830762, 0, G | D | E | x | 0, F | 0) | 0;
 x = U() | 0;
 E = eg(F | 0, x | 0, 63) | 0;
 D = U() | 0;
 x = ag(0, 0, F | 0, x | 0) | 0;
 x = eg(x | 0, U() | 0, 63) | 0;
 x = ag(E | 0, D | 0, x | 0, U() | 0) | 0;
 x = gg(x | 0, U() | 0, 2) | 0;
 x = $f(C | 0, b | 0, x | 0, U() | 0) | 0;
 b = U() | 0;
 A = ag(350157278, 0, B | y | z | s | 0, A | 0) | 0;
 s = U() | 0;
 z = eg(A | 0, s | 0, 63) | 0;
 y = U() | 0;
 s = ag(0, 0, A | 0, s | 0) | 0;
 s = eg(s | 0, U() | 0, 63) | 0;
 s = ag(z | 0, y | 0, s | 0, U() | 0) | 0;
 s = gg(s | 0, U() | 0, 3) | 0;
 s = $f(x | 0, b | 0, s | 0, U() | 0) | 0;
 b = U() | 0;
 n = ag(0, 0, w | v | u | t | 0, n | 0) | 0;
 n = eg(n | 0, U() | 0, 63) | 0;
 n = gg(n | 0, U() | 0, 4) | 0;
 n = $f(s | 0, b | 0, n | 0, U() | 0) | 0;
 b = U() | 0;
 i = ag(0, 0, r | q | p | o | 0, i | 0) | 0;
 i = eg(i | 0, U() | 0, 63) | 0;
 i = gg(i | 0, U() | 0, 5) | 0;
 i = $f(n | 0, b | 0, i | 0, U() | 0) | 0;
 b = U() | 0;
 c = ag(0, 0, m | l | k | j | 0, c | 0) | 0;
 c = eg(c | 0, U() | 0, 63) | 0;
 c = gg(c | 0, U() | 0, 6) | 0;
 c = $f(i | 0, b | 0, c | 0, U() | 0) | 0;
 b = U() | 0;
 g = ag(268435456, 0, h | e | f | a | 0, g | 0) | 0;
 a = U() | 0;
 f = eg(g | 0, a | 0, 63) | 0;
 e = U() | 0;
 a = ag(0, 0, g | 0, a | 0) | 0;
 a = eg(a | 0, U() | 0, 63) | 0;
 a = ag(f | 0, e | 0, a | 0, U() | 0) | 0;
 a = gg(a | 0, U() | 0, 7) | 0;
 a = $f(c | 0, b | 0, a | 0, U() | 0) | 0;
 a = fg(a | 0, U() | 0, 8) | 0;
 U() | 0;
 return a | 0;
}

function hc(a, b) {
 a = a | 0;
 b = b | 0;
 var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, U = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0, ia = 0, ja = 0, ka = 0;
 d = k;
 k = k + 48 | 0;
 I = d;
 ic(a, b);
 S = a + 80 | 0;
 ja = b + 40 | 0;
 ic(S, ja);
 v = a + 120 | 0;
 jc(v, b + 80 | 0);
 ka = a + 40 | 0;
 ia = (c[b + 44 >> 2] | 0) + (c[b + 4 >> 2] | 0) | 0;
 ha = (c[b + 48 >> 2] | 0) + (c[b + 8 >> 2] | 0) | 0;
 ga = (c[b + 52 >> 2] | 0) + (c[b + 12 >> 2] | 0) | 0;
 fa = (c[b + 56 >> 2] | 0) + (c[b + 16 >> 2] | 0) | 0;
 ea = (c[b + 60 >> 2] | 0) + (c[b + 20 >> 2] | 0) | 0;
 da = (c[b + 64 >> 2] | 0) + (c[b + 24 >> 2] | 0) | 0;
 ca = (c[b + 68 >> 2] | 0) + (c[b + 28 >> 2] | 0) | 0;
 ba = (c[b + 72 >> 2] | 0) + (c[b + 32 >> 2] | 0) | 0;
 aa = (c[b + 76 >> 2] | 0) + (c[b + 36 >> 2] | 0) | 0;
 c[ka >> 2] = (c[ja >> 2] | 0) + (c[b >> 2] | 0);
 ja = a + 44 | 0;
 c[ja >> 2] = ia;
 ia = a + 48 | 0;
 c[ia >> 2] = ha;
 ha = a + 52 | 0;
 c[ha >> 2] = ga;
 ga = a + 56 | 0;
 c[ga >> 2] = fa;
 fa = a + 60 | 0;
 c[fa >> 2] = ea;
 ea = a + 64 | 0;
 c[ea >> 2] = da;
 da = a + 68 | 0;
 c[da >> 2] = ca;
 ca = a + 72 | 0;
 c[ca >> 2] = ba;
 ba = a + 76 | 0;
 c[ba >> 2] = aa;
 ic(I, ka);
 aa = c[S >> 2] | 0;
 R = a + 84 | 0;
 $ = c[R >> 2] | 0;
 Q = a + 88 | 0;
 _ = c[Q >> 2] | 0;
 P = a + 92 | 0;
 Z = c[P >> 2] | 0;
 O = a + 96 | 0;
 Y = c[O >> 2] | 0;
 N = a + 100 | 0;
 X = c[N >> 2] | 0;
 M = a + 104 | 0;
 W = c[M >> 2] | 0;
 L = a + 108 | 0;
 V = c[L >> 2] | 0;
 K = a + 112 | 0;
 U = c[K >> 2] | 0;
 J = a + 116 | 0;
 T = c[J >> 2] | 0;
 w = c[a >> 2] | 0;
 F = a + 4 | 0;
 u = c[F >> 2] | 0;
 D = a + 8 | 0;
 s = c[D >> 2] | 0;
 B = a + 12 | 0;
 q = c[B >> 2] | 0;
 z = a + 16 | 0;
 o = c[z >> 2] | 0;
 b = a + 20 | 0;
 m = c[b >> 2] | 0;
 g = a + 24 | 0;
 j = c[g >> 2] | 0;
 l = a + 28 | 0;
 h = c[l >> 2] | 0;
 p = a + 32 | 0;
 f = c[p >> 2] | 0;
 t = a + 36 | 0;
 x = c[t >> 2] | 0;
 H = w + aa | 0;
 G = u + $ | 0;
 E = s + _ | 0;
 C = q + Z | 0;
 A = o + Y | 0;
 y = m + X | 0;
 e = j + W | 0;
 i = h + V | 0;
 n = f + U | 0;
 r = x + T | 0;
 c[ka >> 2] = H;
 c[ja >> 2] = G;
 c[ia >> 2] = E;
 c[ha >> 2] = C;
 c[ga >> 2] = A;
 c[fa >> 2] = y;
 c[ea >> 2] = e;
 c[da >> 2] = i;
 c[ca >> 2] = n;
 c[ba >> 2] = r;
 w = aa - w | 0;
 u = $ - u | 0;
 s = _ - s | 0;
 q = Z - q | 0;
 o = Y - o | 0;
 m = X - m | 0;
 j = W - j | 0;
 h = V - h | 0;
 f = U - f | 0;
 x = T - x | 0;
 c[S >> 2] = w;
 c[R >> 2] = u;
 c[Q >> 2] = s;
 c[P >> 2] = q;
 c[O >> 2] = o;
 c[N >> 2] = m;
 c[M >> 2] = j;
 c[L >> 2] = h;
 c[K >> 2] = f;
 c[J >> 2] = x;
 G = (c[I + 4 >> 2] | 0) - G | 0;
 E = (c[I + 8 >> 2] | 0) - E | 0;
 C = (c[I + 12 >> 2] | 0) - C | 0;
 A = (c[I + 16 >> 2] | 0) - A | 0;
 y = (c[I + 20 >> 2] | 0) - y | 0;
 e = (c[I + 24 >> 2] | 0) - e | 0;
 i = (c[I + 28 >> 2] | 0) - i | 0;
 n = (c[I + 32 >> 2] | 0) - n | 0;
 r = (c[I + 36 >> 2] | 0) - r | 0;
 c[a >> 2] = (c[I >> 2] | 0) - H;
 c[F >> 2] = G;
 c[D >> 2] = E;
 c[B >> 2] = C;
 c[z >> 2] = A;
 c[b >> 2] = y;
 c[g >> 2] = e;
 c[l >> 2] = i;
 c[p >> 2] = n;
 c[t >> 2] = r;
 t = a + 124 | 0;
 r = a + 128 | 0;
 p = a + 132 | 0;
 n = a + 136 | 0;
 l = a + 140 | 0;
 i = a + 144 | 0;
 g = a + 148 | 0;
 e = a + 152 | 0;
 b = a + 156 | 0;
 u = (c[t >> 2] | 0) - u | 0;
 s = (c[r >> 2] | 0) - s | 0;
 q = (c[p >> 2] | 0) - q | 0;
 o = (c[n >> 2] | 0) - o | 0;
 m = (c[l >> 2] | 0) - m | 0;
 j = (c[i >> 2] | 0) - j | 0;
 h = (c[g >> 2] | 0) - h | 0;
 f = (c[e >> 2] | 0) - f | 0;
 a = (c[b >> 2] | 0) - x | 0;
 c[v >> 2] = (c[v >> 2] | 0) - w;
 c[t >> 2] = u;
 c[r >> 2] = s;
 c[p >> 2] = q;
 c[n >> 2] = o;
 c[l >> 2] = m;
 c[i >> 2] = j;
 c[g >> 2] = h;
 c[e >> 2] = f;
 c[b >> 2] = a;
 k = d;
 return;
}

function mc(b, c) {
 b = b | 0;
 c = c | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0;
 e = 0;
 do {
  a[b + e >> 0] = (d[c + (e >>> 3) >> 0] | 0) >>> (e & 7) & 1;
  e = e + 1 | 0;
 } while ((e | 0) != 256);
 k = 0;
 do {
  j = b + k | 0;
  e = a[j >> 0] | 0;
  i = k;
  k = k + 1 | 0;
  a : do if (e << 24 >> 24 != 0 & k >>> 0 < 256) {
   g = b + k | 0;
   c = a[g >> 0] | 0;
   b : do if (c << 24 >> 24) {
    f = e << 24 >> 24;
    e = c << 24 >> 24 << 1;
    c = e + f | 0;
    if ((c | 0) < 16) {
     a[j >> 0] = c;
     a[g >> 0] = 0;
     break;
    }
    e = f - e | 0;
    if ((e | 0) <= -16) break a;
    a[j >> 0] = e;
    e = k;
    while (1) {
     c = b + e | 0;
     if (!(a[c >> 0] | 0)) break;
     a[c >> 0] = 0;
     if (e >>> 0 < 255) e = e + 1 | 0; else break b;
    }
    a[c >> 0] = 1;
   } while (0);
   e = i + 2 | 0;
   if (e >>> 0 < 256) {
    g = b + e | 0;
    c = a[g >> 0] | 0;
    c : do if (c << 24 >> 24) {
     h = a[j >> 0] | 0;
     c = c << 24 >> 24 << 2;
     f = c + h | 0;
     if ((f | 0) < 16) {
      a[j >> 0] = f;
      a[g >> 0] = 0;
      break;
     }
     c = h - c | 0;
     if ((c | 0) <= -16) break a;
     a[j >> 0] = c;
     while (1) {
      c = b + e | 0;
      if (!(a[c >> 0] | 0)) break;
      a[c >> 0] = 0;
      if (e >>> 0 < 255) e = e + 1 | 0; else break c;
     }
     a[c >> 0] = 1;
    } while (0);
    e = i + 3 | 0;
    if (e >>> 0 < 256) {
     g = b + e | 0;
     c = a[g >> 0] | 0;
     d : do if (c << 24 >> 24) {
      h = a[j >> 0] | 0;
      c = c << 24 >> 24 << 3;
      f = c + h | 0;
      if ((f | 0) < 16) {
       a[j >> 0] = f;
       a[g >> 0] = 0;
       break;
      }
      c = h - c | 0;
      if ((c | 0) <= -16) break a;
      a[j >> 0] = c;
      while (1) {
       c = b + e | 0;
       if (!(a[c >> 0] | 0)) break;
       a[c >> 0] = 0;
       if (e >>> 0 < 255) e = e + 1 | 0; else break d;
      }
      a[c >> 0] = 1;
     } while (0);
     e = i + 4 | 0;
     if (e >>> 0 < 256) {
      g = b + e | 0;
      c = a[g >> 0] | 0;
      e : do if (c << 24 >> 24) {
       h = a[j >> 0] | 0;
       c = c << 24 >> 24 << 4;
       f = c + h | 0;
       if ((f | 0) < 16) {
        a[j >> 0] = f;
        a[g >> 0] = 0;
        break;
       }
       c = h - c | 0;
       if ((c | 0) <= -16) break a;
       a[j >> 0] = c;
       while (1) {
        c = b + e | 0;
        if (!(a[c >> 0] | 0)) break;
        a[c >> 0] = 0;
        if (e >>> 0 < 255) e = e + 1 | 0; else break e;
       }
       a[c >> 0] = 1;
      } while (0);
      e = i + 5 | 0;
      if (e >>> 0 < 256) {
       g = b + e | 0;
       c = a[g >> 0] | 0;
       f : do if (c << 24 >> 24) {
        h = a[j >> 0] | 0;
        c = c << 24 >> 24 << 5;
        f = c + h | 0;
        if ((f | 0) < 16) {
         a[j >> 0] = f;
         a[g >> 0] = 0;
         break;
        }
        c = h - c | 0;
        if ((c | 0) <= -16) break a;
        a[j >> 0] = c;
        while (1) {
         c = b + e | 0;
         if (!(a[c >> 0] | 0)) break;
         a[c >> 0] = 0;
         if (e >>> 0 < 255) e = e + 1 | 0; else break f;
        }
        a[c >> 0] = 1;
       } while (0);
       e = i + 6 | 0;
       if (e >>> 0 < 256) {
        g = b + e | 0;
        c = a[g >> 0] | 0;
        if (c << 24 >> 24) {
         h = a[j >> 0] | 0;
         c = c << 24 >> 24 << 6;
         f = c + h | 0;
         if ((f | 0) < 16) {
          a[j >> 0] = f;
          a[g >> 0] = 0;
          break;
         }
         c = h - c | 0;
         if ((c | 0) > -16) {
          a[j >> 0] = c;
          while (1) {
           c = b + e | 0;
           if (!(a[c >> 0] | 0)) break;
           a[c >> 0] = 0;
           if (e >>> 0 < 255) e = e + 1 | 0; else break a;
          }
          a[c >> 0] = 1;
         }
        }
       }
      }
     }
    }
   }
  } while (0);
 } while ((k | 0) != 256);
 return;
}
function cg(a, b, d, e, f) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 var g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0;
 l = a;
 j = b;
 k = j;
 h = d;
 n = e;
 i = n;
 if (!k) {
  g = (f | 0) != 0;
  if (!i) {
   if (g) {
    c[f >> 2] = (l >>> 0) % (h >>> 0);
    c[f + 4 >> 2] = 0;
   }
   n = 0;
   f = (l >>> 0) / (h >>> 0) >>> 0;
   return (T(n | 0), f) | 0;
  } else {
   if (!g) {
    n = 0;
    f = 0;
    return (T(n | 0), f) | 0;
   }
   c[f >> 2] = a | 0;
   c[f + 4 >> 2] = b & 0;
   n = 0;
   f = 0;
   return (T(n | 0), f) | 0;
  }
 }
 g = (i | 0) == 0;
 do if (!h) {
  if (g) {
   if (f | 0) {
    c[f >> 2] = (k >>> 0) % (h >>> 0);
    c[f + 4 >> 2] = 0;
   }
   n = 0;
   f = (k >>> 0) / (h >>> 0) >>> 0;
   return (T(n | 0), f) | 0;
  }
  if (!l) {
   if (f | 0) {
    c[f >> 2] = 0;
    c[f + 4 >> 2] = (k >>> 0) % (i >>> 0);
   }
   n = 0;
   f = (k >>> 0) / (i >>> 0) >>> 0;
   return (T(n | 0), f) | 0;
  }
  g = i - 1 | 0;
  if (!(g & i)) {
   if (f | 0) {
    c[f >> 2] = a | 0;
    c[f + 4 >> 2] = g & k | b & 0;
   }
   n = 0;
   f = k >>> ((bg(i | 0) | 0) >>> 0);
   return (T(n | 0), f) | 0;
  }
  g = (O(i | 0) | 0) - (O(k | 0) | 0) | 0;
  if (g >>> 0 <= 30) {
   b = g + 1 | 0;
   i = 31 - g | 0;
   h = b;
   a = k << i | l >>> (b >>> 0);
   b = k >>> (b >>> 0);
   g = 0;
   i = l << i;
   break;
  }
  if (!f) {
   n = 0;
   f = 0;
   return (T(n | 0), f) | 0;
  }
  c[f >> 2] = a | 0;
  c[f + 4 >> 2] = j | b & 0;
  n = 0;
  f = 0;
  return (T(n | 0), f) | 0;
 } else {
  if (!g) {
   g = (O(i | 0) | 0) - (O(k | 0) | 0) | 0;
   if (g >>> 0 <= 31) {
    m = g + 1 | 0;
    i = 31 - g | 0;
    b = g - 31 >> 31;
    h = m;
    a = l >>> (m >>> 0) & b | k << i;
    b = k >>> (m >>> 0) & b;
    g = 0;
    i = l << i;
    break;
   }
   if (!f) {
    n = 0;
    f = 0;
    return (T(n | 0), f) | 0;
   }
   c[f >> 2] = a | 0;
   c[f + 4 >> 2] = j | b & 0;
   n = 0;
   f = 0;
   return (T(n | 0), f) | 0;
  }
  g = h - 1 | 0;
  if (g & h | 0) {
   i = (O(h | 0) | 0) + 33 - (O(k | 0) | 0) | 0;
   p = 64 - i | 0;
   m = 32 - i | 0;
   j = m >> 31;
   o = i - 32 | 0;
   b = o >> 31;
   h = i;
   a = m - 1 >> 31 & k >>> (o >>> 0) | (k << m | l >>> (i >>> 0)) & b;
   b = b & k >>> (i >>> 0);
   g = l << p & j;
   i = (k << p | l >>> (o >>> 0)) & j | l << m & i - 33 >> 31;
   break;
  }
  if (f | 0) {
   c[f >> 2] = g & l;
   c[f + 4 >> 2] = 0;
  }
  if ((h | 0) == 1) {
   o = j | b & 0;
   p = a | 0 | 0;
   return (T(o | 0), p) | 0;
  } else {
   p = bg(h | 0) | 0;
   o = k >>> (p >>> 0) | 0;
   p = k << 32 - p | l >>> (p >>> 0) | 0;
   return (T(o | 0), p) | 0;
  }
 } while (0);
 if (!h) {
  k = i;
  j = 0;
  i = 0;
 } else {
  m = d | 0 | 0;
  l = n | e & 0;
  k = $f(m | 0, l | 0, -1, -1) | 0;
  d = U() | 0;
  j = i;
  i = 0;
  do {
   e = j;
   j = g >>> 31 | j << 1;
   g = i | g << 1;
   e = a << 1 | e >>> 31 | 0;
   n = a >>> 31 | b << 1 | 0;
   ag(k | 0, d | 0, e | 0, n | 0) | 0;
   p = U() | 0;
   o = p >> 31 | ((p | 0) < 0 ? -1 : 0) << 1;
   i = o & 1;
   a = ag(e | 0, n | 0, o & m | 0, (((p | 0) < 0 ? -1 : 0) >> 31 | ((p | 0) < 0 ? -1 : 0) << 1) & l | 0) | 0;
   b = U() | 0;
   h = h - 1 | 0;
  } while ((h | 0) != 0);
  k = j;
  j = 0;
 }
 h = 0;
 if (f | 0) {
  c[f >> 2] = a;
  c[f + 4 >> 2] = b;
 }
 o = (g | 0) >>> 31 | (k | h) << 1 | (h << 1 | g >>> 31) & 0 | j;
 p = (g << 1 | 0 >>> 31) & -2 | i;
 return (T(o | 0), p) | 0;
}

function bd(b, d, e, f, g, h) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 h = h | 0;
 var i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0;
 D = k;
 k = k + 336 | 0;
 x = D;
 w = D + 104 | 0;
 q = D + 296 | 0;
 l = D + 264 | 0;
 m = D + 200 | 0;
 C = D + 92 | 0;
 u = D + 136 | 0;
 B = D + 64 | 0;
 r = D + 232 | 0;
 s = D + 168 | 0;
 t = D + 80 | 0;
 c[b >> 2] = 0;
 y = b + 4 | 0;
 c[y >> 2] = 0;
 z = b + 8 | 0;
 c[z >> 2] = 0;
 o = l;
 p = o + 32 | 0;
 do {
  a[o >> 0] = 0;
  o = o + 1 | 0;
 } while ((o | 0) < (p | 0));
 Wc(d, l, 32, 0, x) | 0;
 Wc(e, m, 32, 0, x) | 0;
 c[C >> 2] = 0;
 A = C + 4 | 0;
 c[A >> 2] = 0;
 i = C + 8 | 0;
 c[i >> 2] = 0;
 j = f + 4 | 0;
 d = c[f >> 2] | 0;
 if ((c[j >> 2] | 0) != (d | 0)) {
  e = 0;
  do {
   Wc(d + (e * 12 | 0) | 0, w, 32, 0, x) | 0;
   d = c[A >> 2] | 0;
   if ((d | 0) == (c[i >> 2] | 0)) Fd(C, w); else {
    o = d;
    n = w;
    p = o + 32 | 0;
    do {
     a[o >> 0] = a[n >> 0] | 0;
     o = o + 1 | 0;
     n = n + 1 | 0;
    } while ((o | 0) < (p | 0));
    c[A >> 2] = d + 32;
   }
   e = e + 1 | 0;
   d = c[f >> 2] | 0;
  } while (e >>> 0 < (((c[j >> 2] | 0) - d | 0) / 12 | 0) >>> 0);
 }
 Wc(g, u, 32, 0, x) | 0;
 o = r;
 n = l;
 p = o + 32 | 0;
 do {
  a[o >> 0] = a[n >> 0] | 0;
  o = o + 1 | 0;
  n = n + 1 | 0;
 } while ((o | 0) < (p | 0));
 o = s;
 n = m;
 p = o + 32 | 0;
 do {
  a[o >> 0] = a[n >> 0] | 0;
  o = o + 1 | 0;
  n = n + 1 | 0;
 } while ((o | 0) < (p | 0));
 c[t >> 2] = 0;
 g = t + 4 | 0;
 c[g >> 2] = 0;
 d = t + 8 | 0;
 c[d >> 2] = 0;
 j = c[C >> 2] | 0;
 e = (c[A >> 2] | 0) - j | 0;
 i = e >> 5;
 if (e | 0) {
  if (i >>> 0 > 134217727) Ze(t);
  f = He(e) | 0;
  c[g >> 2] = f;
  c[t >> 2] = f;
  c[d >> 2] = f + (i << 5);
  if ((e | 0) > 0) {
   ig(f | 0, j | 0, e | 0) | 0;
   c[g >> 2] = f + (e >>> 5 << 5);
  }
 }
 o = q;
 n = r;
 p = o + 32 | 0;
 do {
  a[o >> 0] = a[n >> 0] | 0;
  o = o + 1 | 0;
  n = n + 1 | 0;
 } while ((o | 0) < (p | 0));
 o = w;
 n = s;
 p = o + 32 | 0;
 do {
  a[o >> 0] = a[n >> 0] | 0;
  o = o + 1 | 0;
  n = n + 1 | 0;
 } while ((o | 0) < (p | 0));
 o = x;
 n = u;
 p = o + 32 | 0;
 do {
  a[o >> 0] = a[n >> 0] | 0;
  o = o + 1 | 0;
  n = n + 1 | 0;
 } while ((o | 0) < (p | 0));
 Vc(B, q, w, t, x, h, 0);
 d = c[t >> 2] | 0;
 if (d | 0) {
  c[g >> 2] = d;
  Ie(d);
 }
 j = B + 4 | 0;
 if (!(a[B >> 0] | 0)) v = 22; else {
  d = c[j >> 2] | 0;
  f = c[B + 8 >> 2] | 0;
  if ((d | 0) != (f | 0)) {
   i = w + 11 | 0;
   do {
    o = x;
    n = d;
    p = o + 64 | 0;
    do {
     a[o >> 0] = a[n >> 0] | 0;
     o = o + 1 | 0;
     n = n + 1 | 0;
    } while ((o | 0) < (p | 0));
    Yc(w, x, 64, 0);
    e = c[y >> 2] | 0;
    if (e >>> 0 < (c[z >> 2] | 0) >>> 0) {
     c[e >> 2] = c[w >> 2];
     c[e + 4 >> 2] = c[w + 4 >> 2];
     c[e + 8 >> 2] = c[w + 8 >> 2];
     c[w >> 2] = 0;
     c[w + 4 >> 2] = 0;
     c[w + 8 >> 2] = 0;
     c[y >> 2] = (c[y >> 2] | 0) + 12;
    } else {
     Gd(b, w);
     if ((a[i >> 0] | 0) < 0) Ie(c[w >> 2] | 0);
    }
    d = d + 64 | 0;
   } while ((d | 0) != (f | 0));
   v = 22;
  }
 }
 if ((v | 0) == 22) d = c[j >> 2] | 0;
 if (d | 0) {
  c[B + 8 >> 2] = d;
  Ie(d);
 }
 d = c[C >> 2] | 0;
 if (!d) {
  k = D;
  return;
 }
 c[A >> 2] = d;
 Ie(d);
 k = D;
 return;
}

function wc(a, b, d) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0;
 m = k;
 k = k + 128 | 0;
 l = m;
 e = d << 24 >> 24;
 h = (d & 255) >>> 7 & 255;
 d = e - ((0 - h & e) << 1) | 0;
 c[a >> 2] = 1;
 e = a + 4 | 0;
 i = e;
 j = i + 36 | 0;
 do {
  c[i >> 2] = 0;
  i = i + 4 | 0;
 } while ((i | 0) < (j | 0));
 f = a + 40 | 0;
 c[f >> 2] = 1;
 g = a + 44 | 0;
 i = g;
 j = i + 76 | 0;
 do {
  c[i >> 2] = 0;
  i = i + 4 | 0;
 } while ((i | 0) < (j | 0));
 s = d & 255;
 r = ((s ^ 1) + -1 | 0) >>> 31;
 xc(a, 160 + (b * 960 | 0) | 0, r);
 xc(f, 160 + (b * 960 | 0) + 40 | 0, r);
 j = a + 80 | 0;
 xc(j, 160 + (b * 960 | 0) + 80 | 0, r);
 r = ((s ^ 2) + -1 | 0) >>> 31;
 xc(a, 160 + (b * 960 | 0) + 120 | 0, r);
 xc(f, 160 + (b * 960 | 0) + 160 | 0, r);
 xc(j, 160 + (b * 960 | 0) + 200 | 0, r);
 r = ((s ^ 3) + -1 | 0) >>> 31;
 xc(a, 160 + (b * 960 | 0) + 240 | 0, r);
 xc(f, 160 + (b * 960 | 0) + 280 | 0, r);
 xc(j, 160 + (b * 960 | 0) + 320 | 0, r);
 r = ((s ^ 4) + -1 | 0) >>> 31;
 xc(a, 160 + (b * 960 | 0) + 360 | 0, r);
 xc(f, 160 + (b * 960 | 0) + 400 | 0, r);
 xc(j, 160 + (b * 960 | 0) + 440 | 0, r);
 r = ((s ^ 5) + -1 | 0) >>> 31;
 xc(a, 160 + (b * 960 | 0) + 480 | 0, r);
 xc(f, 160 + (b * 960 | 0) + 520 | 0, r);
 xc(j, 160 + (b * 960 | 0) + 560 | 0, r);
 r = ((s ^ 6) + -1 | 0) >>> 31;
 xc(a, 160 + (b * 960 | 0) + 600 | 0, r);
 xc(f, 160 + (b * 960 | 0) + 640 | 0, r);
 xc(j, 160 + (b * 960 | 0) + 680 | 0, r);
 r = ((s ^ 7) + -1 | 0) >>> 31;
 xc(a, 160 + (b * 960 | 0) + 720 | 0, r);
 xc(f, 160 + (b * 960 | 0) + 760 | 0, r);
 xc(j, 160 + (b * 960 | 0) + 800 | 0, r);
 s = ((s ^ 8) + -1 | 0) >>> 31;
 xc(a, 160 + (b * 960 | 0) + 840 | 0, s);
 xc(f, 160 + (b * 960 | 0) + 880 | 0, s);
 xc(j, 160 + (b * 960 | 0) + 920 | 0, s);
 b = c[g >> 2] | 0;
 s = c[a + 48 >> 2] | 0;
 r = c[a + 52 >> 2] | 0;
 q = c[a + 56 >> 2] | 0;
 p = c[a + 60 >> 2] | 0;
 o = c[a + 64 >> 2] | 0;
 n = c[a + 68 >> 2] | 0;
 d = c[a + 72 >> 2] | 0;
 i = c[a + 76 >> 2] | 0;
 c[l >> 2] = c[f >> 2];
 c[l + 4 >> 2] = b;
 c[l + 8 >> 2] = s;
 c[l + 12 >> 2] = r;
 c[l + 16 >> 2] = q;
 c[l + 20 >> 2] = p;
 c[l + 24 >> 2] = o;
 c[l + 28 >> 2] = n;
 c[l + 32 >> 2] = d;
 c[l + 36 >> 2] = i;
 i = l + 40 | 0;
 e = c[e >> 2] | 0;
 d = c[a + 8 >> 2] | 0;
 n = c[a + 12 >> 2] | 0;
 o = c[a + 16 >> 2] | 0;
 p = c[a + 20 >> 2] | 0;
 q = c[a + 24 >> 2] | 0;
 r = c[a + 28 >> 2] | 0;
 s = c[a + 32 >> 2] | 0;
 b = c[a + 36 >> 2] | 0;
 c[i >> 2] = c[a >> 2];
 c[l + 44 >> 2] = e;
 c[l + 48 >> 2] = d;
 c[l + 52 >> 2] = n;
 c[l + 56 >> 2] = o;
 c[l + 60 >> 2] = p;
 c[l + 64 >> 2] = q;
 c[l + 68 >> 2] = r;
 c[l + 72 >> 2] = s;
 c[l + 76 >> 2] = b;
 b = l + 80 | 0;
 s = 0 - (c[a + 84 >> 2] | 0) | 0;
 r = 0 - (c[a + 88 >> 2] | 0) | 0;
 q = 0 - (c[a + 92 >> 2] | 0) | 0;
 p = 0 - (c[a + 96 >> 2] | 0) | 0;
 o = 0 - (c[a + 100 >> 2] | 0) | 0;
 n = 0 - (c[a + 104 >> 2] | 0) | 0;
 d = 0 - (c[a + 108 >> 2] | 0) | 0;
 e = 0 - (c[a + 112 >> 2] | 0) | 0;
 g = 0 - (c[a + 116 >> 2] | 0) | 0;
 c[b >> 2] = 0 - (c[j >> 2] | 0);
 c[l + 84 >> 2] = s;
 c[l + 88 >> 2] = r;
 c[l + 92 >> 2] = q;
 c[l + 96 >> 2] = p;
 c[l + 100 >> 2] = o;
 c[l + 104 >> 2] = n;
 c[l + 108 >> 2] = d;
 c[l + 112 >> 2] = e;
 c[l + 116 >> 2] = g;
 xc(a, l, h);
 xc(f, i, h);
 xc(j, b, h);
 k = m;
 return;
}

function Rf(b, d, e, f, g) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 var h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0;
 a : do if (kf(b, c[d + 8 >> 2] | 0, g) | 0) mf(0, d, e, f); else {
  if (!(kf(b, c[d >> 2] | 0, g) | 0)) {
   q = c[b + 12 >> 2] | 0;
   k = b + 16 + (q << 3) | 0;
   Vf(b + 16 | 0, d, e, f, g);
   h = b + 24 | 0;
   if ((q | 0) <= 1) break;
   b = c[b + 8 >> 2] | 0;
   if (!(b & 2)) {
    j = d + 36 | 0;
    if ((c[j >> 2] | 0) != 1) {
     if (!(b & 1)) {
      b = d + 54 | 0;
      while (1) {
       if (a[b >> 0] | 0) break a;
       if ((c[j >> 2] | 0) == 1) break a;
       Vf(h, d, e, f, g);
       h = h + 8 | 0;
       if (h >>> 0 >= k >>> 0) break a;
      }
     }
     b = d + 24 | 0;
     i = d + 54 | 0;
     while (1) {
      if (a[i >> 0] | 0) break a;
      if ((c[j >> 2] | 0) == 1) if ((c[b >> 2] | 0) == 1) break a;
      Vf(h, d, e, f, g);
      h = h + 8 | 0;
      if (h >>> 0 >= k >>> 0) break a;
     }
    }
   }
   b = d + 54 | 0;
   while (1) {
    if (a[b >> 0] | 0) break a;
    Vf(h, d, e, f, g);
    h = h + 8 | 0;
    if (h >>> 0 >= k >>> 0) break a;
   }
  }
  if ((c[d + 16 >> 2] | 0) != (e | 0)) {
   p = d + 20 | 0;
   if ((c[p >> 2] | 0) != (e | 0)) {
    c[d + 32 >> 2] = f;
    q = d + 44 | 0;
    if ((c[q >> 2] | 0) == 4) break;
    k = b + 16 + (c[b + 12 >> 2] << 3) | 0;
    f = d + 52 | 0;
    l = d + 53 | 0;
    n = d + 54 | 0;
    m = b + 8 | 0;
    o = d + 24 | 0;
    h = 0;
    i = b + 16 | 0;
    j = 0;
    b : while (1) {
     if (i >>> 0 >= k >>> 0) {
      b = 18;
      break;
     }
     a[f >> 0] = 0;
     a[l >> 0] = 0;
     Uf(i, d, e, e, 1, g);
     if (a[n >> 0] | 0) {
      b = 18;
      break;
     }
     do if (!(a[l >> 0] | 0)) b = j; else {
      if (!(a[f >> 0] | 0)) if (!(c[m >> 2] & 1)) {
       h = 1;
       b = 18;
       break b;
      } else {
       h = 1;
       b = j;
       break;
      }
      if ((c[o >> 2] | 0) == 1) {
       b = 23;
       break b;
      }
      if (!(c[m >> 2] & 2)) {
       b = 23;
       break b;
      } else {
       h = 1;
       b = 1;
      }
     } while (0);
     i = i + 8 | 0;
     j = b;
    }
    do if ((b | 0) == 18) {
     if (!j) {
      c[p >> 2] = e;
      e = d + 40 | 0;
      c[e >> 2] = (c[e >> 2] | 0) + 1;
      if ((c[d + 36 >> 2] | 0) == 1) if ((c[o >> 2] | 0) == 2) {
       a[n >> 0] = 1;
       if (h) {
        b = 23;
        break;
       } else {
        h = 4;
        break;
       }
      }
     }
     if (h) b = 23; else h = 4;
    } while (0);
    if ((b | 0) == 23) h = 3;
    c[q >> 2] = h;
    break;
   }
  }
  if ((f | 0) == 1) c[d + 32 >> 2] = 1;
 } while (0);
 return;
}

function fc(a, b) {
 a = a | 0;
 b = b | 0;
 var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0;
 d = k;
 k = k + 608 | 0;
 h = d + 480 | 0;
 f = d + 320 | 0;
 n = d + 160 | 0;
 e = d;
 gc(a, b);
 r = c[b + 4 >> 2] | 0;
 q = c[b + 8 >> 2] | 0;
 p = c[b + 12 >> 2] | 0;
 o = c[b + 16 >> 2] | 0;
 m = c[b + 20 >> 2] | 0;
 g = c[b + 24 >> 2] | 0;
 j = c[b + 28 >> 2] | 0;
 l = c[b + 32 >> 2] | 0;
 i = c[b + 36 >> 2] | 0;
 c[h >> 2] = c[b >> 2];
 c[h + 4 >> 2] = r;
 c[h + 8 >> 2] = q;
 c[h + 12 >> 2] = p;
 c[h + 16 >> 2] = o;
 c[h + 20 >> 2] = m;
 c[h + 24 >> 2] = g;
 c[h + 28 >> 2] = j;
 c[h + 32 >> 2] = l;
 c[h + 36 >> 2] = i;
 i = c[b + 44 >> 2] | 0;
 l = c[b + 48 >> 2] | 0;
 j = c[b + 52 >> 2] | 0;
 g = c[b + 56 >> 2] | 0;
 m = c[b + 60 >> 2] | 0;
 o = c[b + 64 >> 2] | 0;
 p = c[b + 68 >> 2] | 0;
 q = c[b + 72 >> 2] | 0;
 r = c[b + 76 >> 2] | 0;
 c[h + 40 >> 2] = c[b + 40 >> 2];
 c[h + 44 >> 2] = i;
 c[h + 48 >> 2] = l;
 c[h + 52 >> 2] = j;
 c[h + 56 >> 2] = g;
 c[h + 60 >> 2] = m;
 c[h + 64 >> 2] = o;
 c[h + 68 >> 2] = p;
 c[h + 72 >> 2] = q;
 c[h + 76 >> 2] = r;
 r = c[b + 84 >> 2] | 0;
 q = c[b + 88 >> 2] | 0;
 p = c[b + 92 >> 2] | 0;
 o = c[b + 96 >> 2] | 0;
 m = c[b + 100 >> 2] | 0;
 g = c[b + 104 >> 2] | 0;
 j = c[b + 108 >> 2] | 0;
 l = c[b + 112 >> 2] | 0;
 i = c[b + 116 >> 2] | 0;
 c[h + 80 >> 2] = c[b + 80 >> 2];
 c[h + 84 >> 2] = r;
 c[h + 88 >> 2] = q;
 c[h + 92 >> 2] = p;
 c[h + 96 >> 2] = o;
 c[h + 100 >> 2] = m;
 c[h + 104 >> 2] = g;
 c[h + 108 >> 2] = j;
 c[h + 112 >> 2] = l;
 c[h + 116 >> 2] = i;
 hc(f, h);
 h = f + 120 | 0;
 ec(n, f, h);
 b = f + 40 | 0;
 i = f + 80 | 0;
 ec(n + 40 | 0, b, i);
 ec(n + 80 | 0, i, h);
 ec(n + 120 | 0, f, b);
 dc(f, n, a);
 ec(e, f, h);
 l = e + 40 | 0;
 ec(l, b, i);
 j = e + 80 | 0;
 ec(j, i, h);
 g = e + 120 | 0;
 ec(g, f, b);
 m = a + 160 | 0;
 gc(m, e);
 dc(f, n, m);
 ec(e, f, h);
 ec(l, b, i);
 ec(j, i, h);
 ec(g, f, b);
 m = a + 320 | 0;
 gc(m, e);
 dc(f, n, m);
 ec(e, f, h);
 ec(l, b, i);
 ec(j, i, h);
 ec(g, f, b);
 m = a + 480 | 0;
 gc(m, e);
 dc(f, n, m);
 ec(e, f, h);
 ec(l, b, i);
 ec(j, i, h);
 ec(g, f, b);
 m = a + 640 | 0;
 gc(m, e);
 dc(f, n, m);
 ec(e, f, h);
 ec(l, b, i);
 ec(j, i, h);
 ec(g, f, b);
 m = a + 800 | 0;
 gc(m, e);
 dc(f, n, m);
 ec(e, f, h);
 ec(l, b, i);
 ec(j, i, h);
 ec(g, f, b);
 m = a + 960 | 0;
 gc(m, e);
 dc(f, n, m);
 ec(e, f, h);
 ec(l, b, i);
 ec(j, i, h);
 ec(g, f, b);
 gc(a + 1120 | 0, e);
 k = d;
 return;
}

function gc(a, b) {
 a = a | 0;
 b = b | 0;
 var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0;
 m = b + 40 | 0;
 v = b + 44 | 0;
 u = b + 48 | 0;
 t = b + 52 | 0;
 s = b + 56 | 0;
 r = b + 60 | 0;
 q = b + 64 | 0;
 p = b + 68 | 0;
 o = b + 72 | 0;
 n = b + 76 | 0;
 d = b + 4 | 0;
 e = b + 8 | 0;
 f = b + 12 | 0;
 g = b + 16 | 0;
 h = b + 20 | 0;
 i = b + 24 | 0;
 j = b + 28 | 0;
 k = b + 32 | 0;
 l = b + 36 | 0;
 E = (c[d >> 2] | 0) + (c[v >> 2] | 0) | 0;
 D = (c[e >> 2] | 0) + (c[u >> 2] | 0) | 0;
 C = (c[f >> 2] | 0) + (c[t >> 2] | 0) | 0;
 B = (c[g >> 2] | 0) + (c[s >> 2] | 0) | 0;
 A = (c[h >> 2] | 0) + (c[r >> 2] | 0) | 0;
 z = (c[i >> 2] | 0) + (c[q >> 2] | 0) | 0;
 y = (c[j >> 2] | 0) + (c[p >> 2] | 0) | 0;
 x = (c[k >> 2] | 0) + (c[o >> 2] | 0) | 0;
 w = (c[l >> 2] | 0) + (c[n >> 2] | 0) | 0;
 c[a >> 2] = (c[b >> 2] | 0) + (c[m >> 2] | 0);
 c[a + 4 >> 2] = E;
 c[a + 8 >> 2] = D;
 c[a + 12 >> 2] = C;
 c[a + 16 >> 2] = B;
 c[a + 20 >> 2] = A;
 c[a + 24 >> 2] = z;
 c[a + 28 >> 2] = y;
 c[a + 32 >> 2] = x;
 c[a + 36 >> 2] = w;
 d = (c[v >> 2] | 0) - (c[d >> 2] | 0) | 0;
 e = (c[u >> 2] | 0) - (c[e >> 2] | 0) | 0;
 f = (c[t >> 2] | 0) - (c[f >> 2] | 0) | 0;
 g = (c[s >> 2] | 0) - (c[g >> 2] | 0) | 0;
 h = (c[r >> 2] | 0) - (c[h >> 2] | 0) | 0;
 i = (c[q >> 2] | 0) - (c[i >> 2] | 0) | 0;
 j = (c[p >> 2] | 0) - (c[j >> 2] | 0) | 0;
 k = (c[o >> 2] | 0) - (c[k >> 2] | 0) | 0;
 l = (c[n >> 2] | 0) - (c[l >> 2] | 0) | 0;
 c[a + 40 >> 2] = (c[m >> 2] | 0) - (c[b >> 2] | 0);
 c[a + 44 >> 2] = d;
 c[a + 48 >> 2] = e;
 c[a + 52 >> 2] = f;
 c[a + 56 >> 2] = g;
 c[a + 60 >> 2] = h;
 c[a + 64 >> 2] = i;
 c[a + 68 >> 2] = j;
 c[a + 72 >> 2] = k;
 c[a + 76 >> 2] = l;
 l = c[b + 84 >> 2] | 0;
 k = c[b + 88 >> 2] | 0;
 j = c[b + 92 >> 2] | 0;
 i = c[b + 96 >> 2] | 0;
 h = c[b + 100 >> 2] | 0;
 g = c[b + 104 >> 2] | 0;
 f = c[b + 108 >> 2] | 0;
 e = c[b + 112 >> 2] | 0;
 d = c[b + 116 >> 2] | 0;
 c[a + 80 >> 2] = c[b + 80 >> 2];
 c[a + 84 >> 2] = l;
 c[a + 88 >> 2] = k;
 c[a + 92 >> 2] = j;
 c[a + 96 >> 2] = i;
 c[a + 100 >> 2] = h;
 c[a + 104 >> 2] = g;
 c[a + 108 >> 2] = f;
 c[a + 112 >> 2] = e;
 c[a + 116 >> 2] = d;
 ec(a + 120 | 0, b + 120 | 0, 112);
 return;
}

function ad(b, d, e, f, g, h) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 h = h | 0;
 var i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0;
 r = k;
 k = k + 64 | 0;
 n = r + 48 | 0;
 p = r + 36 | 0;
 q = r + 24 | 0;
 o = r + 12 | 0;
 m = r;
 i = d + 4 | 0;
 j = c[d >> 2] | 0;
 c[p >> 2] = 0;
 c[p + 4 >> 2] = 0;
 c[p + 8 >> 2] = 0;
 if (j >>> 0 > 4294967279) Oe(p);
 if (j >>> 0 < 11) {
  a[p + 11 >> 0] = j;
  if (!j) d = p; else {
   d = p;
   l = 6;
  }
 } else {
  l = j + 16 & -16;
  d = He(l) | 0;
  c[p >> 2] = d;
  c[p + 8 >> 2] = l | -2147483648;
  c[p + 4 >> 2] = j;
  l = 6;
 }
 if ((l | 0) == 6) ig(d | 0, i | 0, j | 0) | 0;
 a[d + j >> 0] = 0;
 i = e + 4 | 0;
 j = c[e >> 2] | 0;
 c[q >> 2] = 0;
 c[q + 4 >> 2] = 0;
 c[q + 8 >> 2] = 0;
 if (j >>> 0 > 4294967279) Oe(q);
 if (j >>> 0 < 11) {
  a[q + 11 >> 0] = j;
  if (!j) d = q; else {
   d = q;
   l = 12;
  }
 } else {
  l = j + 16 & -16;
  d = He(l) | 0;
  c[q >> 2] = d;
  c[q + 8 >> 2] = l | -2147483648;
  c[q + 4 >> 2] = j;
  l = 12;
 }
 if ((l | 0) == 12) ig(d | 0, i | 0, j | 0) | 0;
 a[d + j >> 0] = 0;
 Hd(o, f);
 i = g + 4 | 0;
 j = c[g >> 2] | 0;
 c[m >> 2] = 0;
 c[m + 4 >> 2] = 0;
 c[m + 8 >> 2] = 0;
 if (j >>> 0 > 4294967279) Oe(m);
 if (j >>> 0 < 11) {
  a[m + 11 >> 0] = j;
  if (!j) d = m; else {
   d = m;
   l = 18;
  }
 } else {
  l = j + 16 & -16;
  d = He(l) | 0;
  c[m >> 2] = d;
  c[m + 8 >> 2] = l | -2147483648;
  c[m + 4 >> 2] = j;
  l = 18;
 }
 if ((l | 0) == 18) ig(d | 0, i | 0, j | 0) | 0;
 a[d + j >> 0] = 0;
 Zb[b & 7](n, p, q, o, m, h);
 e = He(12) | 0;
 c[e >> 2] = c[n >> 2];
 l = n + 4 | 0;
 c[e + 4 >> 2] = c[l >> 2];
 h = n + 8 | 0;
 c[e + 8 >> 2] = c[h >> 2];
 c[h >> 2] = 0;
 c[l >> 2] = 0;
 c[n >> 2] = 0;
 if ((a[m + 11 >> 0] | 0) < 0) Ie(c[m >> 2] | 0);
 i = c[o >> 2] | 0;
 if (i | 0) {
  j = o + 4 | 0;
  d = c[j >> 2] | 0;
  if ((d | 0) == (i | 0)) d = i; else {
   do {
    d = d + -12 | 0;
    if ((a[d + 11 >> 0] | 0) < 0) Ie(c[d >> 2] | 0);
   } while ((d | 0) != (i | 0));
   d = c[o >> 2] | 0;
  }
  c[j >> 2] = i;
  Ie(d);
 }
 if ((a[q + 11 >> 0] | 0) < 0) Ie(c[q >> 2] | 0);
 if ((a[p + 11 >> 0] | 0) >= 0) {
  k = r;
  return e | 0;
 }
 Ie(c[p >> 2] | 0);
 k = r;
 return e | 0;
}

function rc(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0;
 i = k;
 k = k + 240 | 0;
 d = i + 192 | 0;
 e = i + 144 | 0;
 f = i + 96 | 0;
 g = i + 48 | 0;
 h = i;
 ic(d, c);
 ec(d, d, c);
 ic(e, d);
 ec(e, e, c);
 ec(e, e, b);
 ic(f, e);
 ic(g, f);
 ic(g, g);
 ec(g, e, g);
 ec(f, f, g);
 ic(f, f);
 ec(f, g, f);
 ic(g, f);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ec(f, g, f);
 ic(g, f);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ec(g, g, f);
 ic(h, g);
 ic(h, h);
 ic(h, h);
 ic(h, h);
 ic(h, h);
 ic(h, h);
 ic(h, h);
 ic(h, h);
 ic(h, h);
 ic(h, h);
 ic(h, h);
 ic(h, h);
 ic(h, h);
 ic(h, h);
 ic(h, h);
 ic(h, h);
 ic(h, h);
 ic(h, h);
 ic(h, h);
 ic(h, h);
 ec(g, h, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ec(f, g, f);
 ic(g, f);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ec(g, g, f);
 ic(h, g);
 c = 0;
 do {
  ic(h, h);
  c = c + 1 | 0;
 } while ((c | 0) != 99);
 ec(g, h, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ic(g, g);
 ec(f, g, f);
 ic(f, f);
 ic(f, f);
 ec(f, f, e);
 ec(f, f, d);
 ec(a, f, b);
 k = i;
 return;
}

function uc(a, b) {
 a = a | 0;
 b = b | 0;
 var c = 0, d = 0, e = 0, f = 0, g = 0;
 g = k;
 k = k + 192 | 0;
 c = g + 144 | 0;
 d = g + 96 | 0;
 e = g + 48 | 0;
 f = g;
 ic(c, b);
 ic(d, c);
 ic(d, d);
 ec(d, b, d);
 ec(c, c, d);
 ic(e, c);
 ec(d, d, e);
 ic(e, d);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ec(d, e, d);
 ic(e, d);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ec(e, e, d);
 ic(f, e);
 ic(f, f);
 ic(f, f);
 ic(f, f);
 ic(f, f);
 ic(f, f);
 ic(f, f);
 ic(f, f);
 ic(f, f);
 ic(f, f);
 ic(f, f);
 ic(f, f);
 ic(f, f);
 ic(f, f);
 ic(f, f);
 ic(f, f);
 ic(f, f);
 ic(f, f);
 ic(f, f);
 ic(f, f);
 ec(e, f, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ec(d, e, d);
 ic(e, d);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ec(e, e, d);
 ic(f, e);
 b = 0;
 do {
  ic(f, f);
  b = b + 1 | 0;
 } while ((b | 0) != 99);
 ec(e, f, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ic(e, e);
 ec(d, e, d);
 ic(d, d);
 ic(d, d);
 ic(d, d);
 ic(d, d);
 ic(d, d);
 ec(a, d, c);
 k = g;
 return;
}

function $d(a, b, d) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0.0;
 a : do if (b >>> 0 <= 20) do switch (b | 0) {
 case 9:
  {
   e = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
   b = c[e >> 2] | 0;
   c[d >> 2] = e + 4;
   c[a >> 2] = b;
   break a;
  }
 case 10:
  {
   e = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
   b = c[e >> 2] | 0;
   c[d >> 2] = e + 4;
   e = a;
   c[e >> 2] = b;
   c[e + 4 >> 2] = ((b | 0) < 0) << 31 >> 31;
   break a;
  }
 case 11:
  {
   e = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
   b = c[e >> 2] | 0;
   c[d >> 2] = e + 4;
   e = a;
   c[e >> 2] = b;
   c[e + 4 >> 2] = 0;
   break a;
  }
 case 12:
  {
   e = (c[d >> 2] | 0) + (8 - 1) & ~(8 - 1);
   b = e;
   f = c[b >> 2] | 0;
   b = c[b + 4 >> 2] | 0;
   c[d >> 2] = e + 8;
   e = a;
   c[e >> 2] = f;
   c[e + 4 >> 2] = b;
   break a;
  }
 case 13:
  {
   f = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
   e = c[f >> 2] | 0;
   c[d >> 2] = f + 4;
   e = (e & 65535) << 16 >> 16;
   f = a;
   c[f >> 2] = e;
   c[f + 4 >> 2] = ((e | 0) < 0) << 31 >> 31;
   break a;
  }
 case 14:
  {
   f = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
   e = c[f >> 2] | 0;
   c[d >> 2] = f + 4;
   f = a;
   c[f >> 2] = e & 65535;
   c[f + 4 >> 2] = 0;
   break a;
  }
 case 15:
  {
   f = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
   e = c[f >> 2] | 0;
   c[d >> 2] = f + 4;
   e = (e & 255) << 24 >> 24;
   f = a;
   c[f >> 2] = e;
   c[f + 4 >> 2] = ((e | 0) < 0) << 31 >> 31;
   break a;
  }
 case 16:
  {
   f = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
   e = c[f >> 2] | 0;
   c[d >> 2] = f + 4;
   f = a;
   c[f >> 2] = e & 255;
   c[f + 4 >> 2] = 0;
   break a;
  }
 case 17:
  {
   f = (c[d >> 2] | 0) + (8 - 1) & ~(8 - 1);
   g = +h[f >> 3];
   c[d >> 2] = f + 8;
   h[a >> 3] = g;
   break a;
  }
 case 18:
  {
   f = (c[d >> 2] | 0) + (8 - 1) & ~(8 - 1);
   g = +h[f >> 3];
   c[d >> 2] = f + 8;
   h[a >> 3] = g;
   break a;
  }
 default:
  break a;
 } while (0); while (0);
 return;
}

function sc(b, d) {
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0;
 t = c[d >> 2] | 0;
 s = c[d + 4 >> 2] | 0;
 q = c[d + 8 >> 2] | 0;
 o = c[d + 12 >> 2] | 0;
 m = c[d + 16 >> 2] | 0;
 l = c[d + 20 >> 2] | 0;
 k = c[d + 24 >> 2] | 0;
 i = c[d + 28 >> 2] | 0;
 g = c[d + 32 >> 2] | 0;
 e = c[d + 36 >> 2] | 0;
 t = (((((((((((((e * 19 | 0) + 16777216 >> 25) + t >> 26) + s >> 25) + q >> 26) + o >> 25) + m >> 26) + l >> 25) + k >> 26) + i >> 25) + g >> 26) + e >> 25) * 19 | 0) + t | 0;
 s = (t >> 26) + s | 0;
 q = (s >> 25) + q | 0;
 r = s & 33554431;
 o = (q >> 26) + o | 0;
 p = q & 67108863;
 m = (o >> 25) + m | 0;
 n = o & 33554431;
 l = (m >> 26) + l | 0;
 k = (l >> 25) + k | 0;
 i = (k >> 26) + i | 0;
 j = k & 67108863;
 g = (i >> 25) + g | 0;
 h = i & 33554431;
 e = (g >> 26) + e | 0;
 f = g & 67108863;
 d = e & 33554431;
 a[b >> 0] = t;
 a[b + 1 >> 0] = t >>> 8;
 a[b + 2 >> 0] = t >>> 16;
 a[b + 3 >> 0] = r << 2 | t >>> 24 & 3;
 a[b + 4 >> 0] = s >>> 6;
 a[b + 5 >> 0] = s >>> 14;
 a[b + 6 >> 0] = p << 3 | r >>> 22;
 a[b + 7 >> 0] = q >>> 5;
 a[b + 8 >> 0] = q >>> 13;
 a[b + 9 >> 0] = n << 5 | p >>> 21;
 a[b + 10 >> 0] = o >>> 3;
 a[b + 11 >> 0] = o >>> 11;
 a[b + 12 >> 0] = m << 6 | n >>> 19;
 a[b + 13 >> 0] = m >>> 2;
 a[b + 14 >> 0] = m >>> 10;
 a[b + 15 >> 0] = m >>> 18;
 a[b + 16 >> 0] = l;
 a[b + 17 >> 0] = l >>> 8;
 a[b + 18 >> 0] = l >>> 16;
 a[b + 19 >> 0] = j << 1 | l >>> 24 & 1;
 a[b + 20 >> 0] = k >>> 7;
 a[b + 21 >> 0] = k >>> 15;
 a[b + 22 >> 0] = h << 3 | j >>> 23;
 a[b + 23 >> 0] = i >>> 5;
 a[b + 24 >> 0] = i >>> 13;
 a[b + 25 >> 0] = f << 4 | h >>> 21;
 a[b + 26 >> 0] = g >>> 4;
 a[b + 27 >> 0] = g >>> 12;
 a[b + 28 >> 0] = d << 6 | f >>> 20;
 a[b + 29 >> 0] = e >>> 2;
 a[b + 30 >> 0] = e >>> 10;
 a[b + 31 >> 0] = d >>> 18;
 return;
}

function Bc(b, d, e, f, g) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 var h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0;
 u = k;
 k = k + 2112 | 0;
 p = u + 1536 | 0;
 q = u + 1280 | 0;
 r = u;
 s = u + 1952 | 0;
 t = u + 1792 | 0;
 mc(p, d);
 mc(q, f);
 fc(r, e);
 d = b;
 e = d + 40 | 0;
 do {
  c[d >> 2] = 0;
  d = d + 4 | 0;
 } while ((d | 0) < (e | 0));
 n = b + 40 | 0;
 c[n >> 2] = 1;
 d = b + 44 | 0;
 e = d + 36 | 0;
 do {
  c[d >> 2] = 0;
  d = d + 4 | 0;
 } while ((d | 0) < (e | 0));
 o = b + 80 | 0;
 c[o >> 2] = 1;
 d = b + 84 | 0;
 e = d + 36 | 0;
 do {
  c[d >> 2] = 0;
  d = d + 4 | 0;
 } while ((d | 0) < (e | 0));
 d = 255;
 while (1) {
  if (a[p + d >> 0] | 0) break;
  if (a[q + d >> 0] | 0) break;
  if (!d) {
   h = 16;
   break;
  } else d = d + -1 | 0;
 }
 if ((h | 0) == 16) {
  k = u;
  return;
 }
 if ((d | 0) <= -1) {
  k = u;
  return;
 }
 f = s + 120 | 0;
 h = t + 40 | 0;
 i = s + 40 | 0;
 j = s + 80 | 0;
 l = t + 80 | 0;
 m = t + 120 | 0;
 while (1) {
  hc(s, b);
  e = a[p + d >> 0] | 0;
  if (e << 24 >> 24 > 0) {
   ec(t, s, f);
   ec(h, i, j);
   ec(l, j, f);
   ec(m, s, i);
   dc(s, t, r + (((e & 255) >>> 1 & 255) * 160 | 0) | 0);
  } else if (e << 24 >> 24 < 0) {
   ec(t, s, f);
   ec(h, i, j);
   ec(l, j, f);
   ec(m, s, i);
   nc(s, t, r + ((((e << 24 >> 24) / -2 | 0) << 24 >> 24) * 160 | 0) | 0);
  }
  e = a[q + d >> 0] | 0;
  if (e << 24 >> 24 > 0) {
   ec(t, s, f);
   ec(h, i, j);
   ec(l, j, f);
   ec(m, s, i);
   dc(s, t, g + (((e & 255) >>> 1 & 255) * 160 | 0) | 0);
  } else if (e << 24 >> 24 < 0) {
   ec(t, s, f);
   ec(h, i, j);
   ec(l, j, f);
   ec(m, s, i);
   nc(s, t, g + ((((e << 24 >> 24) / -2 | 0) << 24 >> 24) * 160 | 0) | 0);
  }
  ec(b, s, f);
  ec(n, i, j);
  ec(o, j, f);
  if ((d | 0) > 0) d = d + -1 | 0; else break;
 }
 k = u;
 return;
}

function Dd(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
 l = b + 8 | 0;
 h = c[l >> 2] | 0;
 m = b + 4 | 0;
 f = c[m >> 2] | 0;
 if (((h - f | 0) / 12 | 0) >>> 0 >= d >>> 0) {
  do {
   Pe(f, e);
   f = (c[m >> 2] | 0) + 12 | 0;
   c[m >> 2] = f;
   d = d + -1 | 0;
  } while ((d | 0) != 0);
  return;
 }
 g = c[b >> 2] | 0;
 i = (f - g | 0) / 12 | 0;
 f = i + d | 0;
 if (f >>> 0 > 357913941) Ze(b);
 k = (h - g | 0) / 12 | 0;
 h = k << 1;
 h = k >>> 0 < 178956970 ? (h >>> 0 < f >>> 0 ? f : h) : 357913941;
 do if (!h) g = 0; else if (h >>> 0 > 357913941) {
  m = ia(8) | 0;
  Le(m, 37333);
  c[m >> 2] = 36364;
  la(m | 0, 35608, 6);
 } else {
  g = He(h * 12 | 0) | 0;
  break;
 } while (0);
 f = g + (i * 12 | 0) | 0;
 j = f;
 k = g + (h * 12 | 0) | 0;
 h = j;
 g = f;
 while (1) {
  Pe(g, e);
  g = h + 12 | 0;
  d = d + -1 | 0;
  if (!d) break; else h = g;
 }
 i = c[b >> 2] | 0;
 d = c[m >> 2] | 0;
 if ((d | 0) == (i | 0)) {
  d = j;
  h = i;
  f = i;
 } else {
  do {
   f = f + -12 | 0;
   d = d + -12 | 0;
   c[f >> 2] = c[d >> 2];
   c[f + 4 >> 2] = c[d + 4 >> 2];
   c[f + 8 >> 2] = c[d + 8 >> 2];
   c[d >> 2] = 0;
   c[d + 4 >> 2] = 0;
   c[d + 8 >> 2] = 0;
  } while ((d | 0) != (i | 0));
  d = f;
  h = c[b >> 2] | 0;
  f = c[m >> 2] | 0;
 }
 c[b >> 2] = d;
 c[m >> 2] = g;
 c[l >> 2] = k;
 d = h;
 if ((f | 0) != (d | 0)) do {
  f = f + -12 | 0;
  if ((a[f + 11 >> 0] | 0) < 0) Ie(c[f >> 2] | 0);
 } while ((f | 0) != (d | 0));
 if (!h) return;
 Ie(h);
 return;
}

function id(b, d, e, f) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 var g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0;
 n = k;
 k = k + 48 | 0;
 j = n + 24 | 0;
 l = n + 12 | 0;
 m = n;
 g = d + 4 | 0;
 h = c[d >> 2] | 0;
 c[l >> 2] = 0;
 c[l + 4 >> 2] = 0;
 c[l + 8 >> 2] = 0;
 if (h >>> 0 > 4294967279) Oe(l);
 if (h >>> 0 < 11) {
  a[l + 11 >> 0] = h;
  if (!h) d = l; else {
   d = l;
   i = 6;
  }
 } else {
  i = h + 16 & -16;
  d = He(i) | 0;
  c[l >> 2] = d;
  c[l + 8 >> 2] = i | -2147483648;
  c[l + 4 >> 2] = h;
  i = 6;
 }
 if ((i | 0) == 6) ig(d | 0, g | 0, h | 0) | 0;
 a[d + h >> 0] = 0;
 g = f + 4 | 0;
 h = c[f >> 2] | 0;
 c[m >> 2] = 0;
 c[m + 4 >> 2] = 0;
 c[m + 8 >> 2] = 0;
 if (h >>> 0 > 4294967279) Oe(m);
 if (h >>> 0 < 11) {
  a[m + 11 >> 0] = h;
  if (!h) d = m; else {
   d = m;
   i = 12;
  }
 } else {
  i = h + 16 & -16;
  d = He(i) | 0;
  c[m >> 2] = d;
  c[m + 8 >> 2] = i | -2147483648;
  c[m + 4 >> 2] = h;
  i = 12;
 }
 if ((i | 0) == 12) ig(d | 0, g | 0, h | 0) | 0;
 a[d + h >> 0] = 0;
 Xb[b & 7](j, l, e, m);
 d = a[j + 11 >> 0] | 0;
 if (d << 24 >> 24 < 0) {
  i = c[j + 4 >> 2] | 0;
  d = Be(i + 4 | 0) | 0;
  c[d >> 2] = i;
  j = c[j >> 2] | 0;
  ig(d + 4 | 0, j | 0, i | 0) | 0;
  Ie(j);
 } else {
  i = d & 255;
  d = Be(i + 4 | 0) | 0;
  c[d >> 2] = i;
  ig(d + 4 | 0, j | 0, i | 0) | 0;
 }
 if ((a[m + 11 >> 0] | 0) < 0) Ie(c[m >> 2] | 0);
 if ((a[l + 11 >> 0] | 0) >= 0) {
  k = n;
  return d | 0;
 }
 Ie(c[l >> 2] | 0);
 k = n;
 return d | 0;
}

function ed(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0;
 m = k;
 k = k + 48 | 0;
 i = m + 24 | 0;
 j = m + 12 | 0;
 l = m;
 f = d + 4 | 0;
 g = c[d >> 2] | 0;
 c[j >> 2] = 0;
 c[j + 4 >> 2] = 0;
 c[j + 8 >> 2] = 0;
 if (g >>> 0 > 4294967279) Oe(j);
 if (g >>> 0 < 11) {
  a[j + 11 >> 0] = g;
  if (!g) d = j; else {
   d = j;
   h = 6;
  }
 } else {
  h = g + 16 & -16;
  d = He(h) | 0;
  c[j >> 2] = d;
  c[j + 8 >> 2] = h | -2147483648;
  c[j + 4 >> 2] = g;
  h = 6;
 }
 if ((h | 0) == 6) ig(d | 0, f | 0, g | 0) | 0;
 a[d + g >> 0] = 0;
 f = e + 4 | 0;
 g = c[e >> 2] | 0;
 c[l >> 2] = 0;
 c[l + 4 >> 2] = 0;
 c[l + 8 >> 2] = 0;
 if (g >>> 0 > 4294967279) Oe(l);
 if (g >>> 0 < 11) {
  a[l + 11 >> 0] = g;
  if (!g) d = l; else {
   d = l;
   h = 12;
  }
 } else {
  h = g + 16 & -16;
  d = He(h) | 0;
  c[l >> 2] = d;
  c[l + 8 >> 2] = h | -2147483648;
  c[l + 4 >> 2] = g;
  h = 12;
 }
 if ((h | 0) == 12) ig(d | 0, f | 0, g | 0) | 0;
 a[d + g >> 0] = 0;
 Wb[b & 7](i, j, l);
 d = a[i + 11 >> 0] | 0;
 if (d << 24 >> 24 < 0) {
  h = c[i + 4 >> 2] | 0;
  d = Be(h + 4 | 0) | 0;
  c[d >> 2] = h;
  i = c[i >> 2] | 0;
  ig(d + 4 | 0, i | 0, h | 0) | 0;
  Ie(i);
 } else {
  h = d & 255;
  d = Be(h + 4 | 0) | 0;
  c[d >> 2] = h;
  ig(d + 4 | 0, i | 0, h | 0) | 0;
 }
 if ((a[l + 11 >> 0] | 0) < 0) Ie(c[l >> 2] | 0);
 if ((a[j + 11 >> 0] | 0) >= 0) {
  k = m;
  return d | 0;
 }
 Ie(c[j >> 2] | 0);
 k = m;
 return d | 0;
}

function ig(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0;
 if ((e | 0) >= 8192) return Qa(b | 0, d | 0, e | 0) | 0;
 h = b | 0;
 g = b + e | 0;
 if ((b & 3) == (d & 3)) {
  while (b & 3) {
   if (!e) return h | 0;
   a[b >> 0] = a[d >> 0] | 0;
   b = b + 1 | 0;
   d = d + 1 | 0;
   e = e - 1 | 0;
  }
  e = g & -4 | 0;
  f = e - 64 | 0;
  while ((b | 0) <= (f | 0)) {
   c[b >> 2] = c[d >> 2];
   c[b + 4 >> 2] = c[d + 4 >> 2];
   c[b + 8 >> 2] = c[d + 8 >> 2];
   c[b + 12 >> 2] = c[d + 12 >> 2];
   c[b + 16 >> 2] = c[d + 16 >> 2];
   c[b + 20 >> 2] = c[d + 20 >> 2];
   c[b + 24 >> 2] = c[d + 24 >> 2];
   c[b + 28 >> 2] = c[d + 28 >> 2];
   c[b + 32 >> 2] = c[d + 32 >> 2];
   c[b + 36 >> 2] = c[d + 36 >> 2];
   c[b + 40 >> 2] = c[d + 40 >> 2];
   c[b + 44 >> 2] = c[d + 44 >> 2];
   c[b + 48 >> 2] = c[d + 48 >> 2];
   c[b + 52 >> 2] = c[d + 52 >> 2];
   c[b + 56 >> 2] = c[d + 56 >> 2];
   c[b + 60 >> 2] = c[d + 60 >> 2];
   b = b + 64 | 0;
   d = d + 64 | 0;
  }
  while ((b | 0) < (e | 0)) {
   c[b >> 2] = c[d >> 2];
   b = b + 4 | 0;
   d = d + 4 | 0;
  }
 } else {
  e = g - 4 | 0;
  while ((b | 0) < (e | 0)) {
   a[b >> 0] = a[d >> 0] | 0;
   a[b + 1 >> 0] = a[d + 1 >> 0] | 0;
   a[b + 2 >> 0] = a[d + 2 >> 0] | 0;
   a[b + 3 >> 0] = a[d + 3 >> 0] | 0;
   b = b + 4 | 0;
   d = d + 4 | 0;
  }
 }
 while ((b | 0) < (g | 0)) {
  a[b >> 0] = a[d >> 0] | 0;
  b = b + 1 | 0;
  d = d + 1 | 0;
 }
 return h | 0;
}

function Gd(b, d) {
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0;
 j = b + 4 | 0;
 e = c[b >> 2] | 0;
 h = ((c[j >> 2] | 0) - e | 0) / 12 | 0;
 f = h + 1 | 0;
 if (f >>> 0 > 357913941) Ze(b);
 k = b + 8 | 0;
 i = ((c[k >> 2] | 0) - e | 0) / 12 | 0;
 g = i << 1;
 g = i >>> 0 < 178956970 ? (g >>> 0 < f >>> 0 ? f : g) : 357913941;
 do if (!g) e = 0; else if (g >>> 0 > 357913941) {
  k = ia(8) | 0;
  Le(k, 37333);
  c[k >> 2] = 36364;
  la(k | 0, 35608, 6);
 } else {
  e = He(g * 12 | 0) | 0;
  break;
 } while (0);
 f = e + (h * 12 | 0) | 0;
 i = e + (g * 12 | 0) | 0;
 c[f >> 2] = c[d >> 2];
 c[f + 4 >> 2] = c[d + 4 >> 2];
 c[f + 8 >> 2] = c[d + 8 >> 2];
 c[d >> 2] = 0;
 c[d + 4 >> 2] = 0;
 c[d + 8 >> 2] = 0;
 d = f + 12 | 0;
 h = c[b >> 2] | 0;
 e = c[j >> 2] | 0;
 if ((e | 0) == (h | 0)) {
  g = h;
  e = h;
 } else {
  do {
   f = f + -12 | 0;
   e = e + -12 | 0;
   c[f >> 2] = c[e >> 2];
   c[f + 4 >> 2] = c[e + 4 >> 2];
   c[f + 8 >> 2] = c[e + 8 >> 2];
   c[e >> 2] = 0;
   c[e + 4 >> 2] = 0;
   c[e + 8 >> 2] = 0;
  } while ((e | 0) != (h | 0));
  g = c[b >> 2] | 0;
  e = c[j >> 2] | 0;
 }
 c[b >> 2] = f;
 c[j >> 2] = d;
 c[k >> 2] = i;
 f = g;
 if ((e | 0) != (f | 0)) do {
  e = e + -12 | 0;
  if ((a[e + 11 >> 0] | 0) < 0) Ie(c[e >> 2] | 0);
 } while ((e | 0) != (f | 0));
 if (!g) return;
 Ie(g);
 return;
}

function Md(a, b, d) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0;
 n = k;
 k = k + 48 | 0;
 l = n + 32 | 0;
 g = n + 16 | 0;
 f = n;
 i = a + 28 | 0;
 e = c[i >> 2] | 0;
 c[f >> 2] = e;
 j = a + 20 | 0;
 e = (c[j >> 2] | 0) - e | 0;
 c[f + 4 >> 2] = e;
 c[f + 8 >> 2] = b;
 c[f + 12 >> 2] = d;
 e = e + d | 0;
 h = a + 60 | 0;
 c[g >> 2] = c[h >> 2];
 c[g + 4 >> 2] = f;
 c[g + 8 >> 2] = 2;
 g = Od(qa(146, g | 0) | 0) | 0;
 a : do if ((e | 0) == (g | 0)) m = 3; else {
  b = 2;
  while (1) {
   if ((g | 0) < 0) break;
   e = e - g | 0;
   p = c[f + 4 >> 2] | 0;
   o = g >>> 0 > p >>> 0;
   f = o ? f + 8 | 0 : f;
   b = b + (o << 31 >> 31) | 0;
   p = g - (o ? p : 0) | 0;
   c[f >> 2] = (c[f >> 2] | 0) + p;
   o = f + 4 | 0;
   c[o >> 2] = (c[o >> 2] | 0) - p;
   c[l >> 2] = c[h >> 2];
   c[l + 4 >> 2] = f;
   c[l + 8 >> 2] = b;
   g = Od(qa(146, l | 0) | 0) | 0;
   if ((e | 0) == (g | 0)) {
    m = 3;
    break a;
   }
  }
  c[a + 16 >> 2] = 0;
  c[i >> 2] = 0;
  c[j >> 2] = 0;
  c[a >> 2] = c[a >> 2] | 32;
  if ((b | 0) == 2) d = 0; else d = d - (c[f + 4 >> 2] | 0) | 0;
 } while (0);
 if ((m | 0) == 3) {
  p = c[a + 44 >> 2] | 0;
  c[a + 16 >> 2] = p + (c[a + 48 >> 2] | 0);
  c[i >> 2] = p;
  c[j >> 2] = p;
 }
 k = n;
 return d | 0;
}

function rf(b, d, e, f, g) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 var h = 0, i = 0, j = 0;
 do if (kf(b, c[d + 8 >> 2] | 0, g) | 0) mf(0, d, e, f); else {
  if (!(kf(b, c[d >> 2] | 0, g) | 0)) {
   i = c[b + 8 >> 2] | 0;
   Yb[c[(c[i >> 2] | 0) + 24 >> 2] & 3](i, d, e, f, g);
   break;
  }
  if ((c[d + 16 >> 2] | 0) != (e | 0)) {
   h = d + 20 | 0;
   if ((c[h >> 2] | 0) != (e | 0)) {
    c[d + 32 >> 2] = f;
    i = d + 44 | 0;
    if ((c[i >> 2] | 0) == 4) break;
    f = d + 52 | 0;
    a[f >> 0] = 0;
    j = d + 53 | 0;
    a[j >> 0] = 0;
    b = c[b + 8 >> 2] | 0;
    Zb[c[(c[b >> 2] | 0) + 20 >> 2] & 7](b, d, e, e, 1, g);
    if (!(a[j >> 0] | 0)) {
     f = 0;
     b = 11;
    } else if (!(a[f >> 0] | 0)) {
     f = 1;
     b = 11;
    } else b = 15;
    do if ((b | 0) == 11) {
     c[h >> 2] = e;
     j = d + 40 | 0;
     c[j >> 2] = (c[j >> 2] | 0) + 1;
     if ((c[d + 36 >> 2] | 0) == 1) if ((c[d + 24 >> 2] | 0) == 2) {
      a[d + 54 >> 0] = 1;
      if (f) {
       b = 15;
       break;
      } else {
       f = 4;
       break;
      }
     }
     if (f) b = 15; else f = 4;
    } while (0);
    if ((b | 0) == 15) f = 3;
    c[i >> 2] = f;
    break;
   }
  }
  if ((f | 0) == 1) c[d + 32 >> 2] = 1;
 } while (0);
 return;
}

function re(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0;
 o = (c[b >> 2] | 0) + 1794895138 | 0;
 h = se(c[b + 8 >> 2] | 0, o) | 0;
 f = se(c[b + 12 >> 2] | 0, o) | 0;
 g = se(c[b + 16 >> 2] | 0, o) | 0;
 a : do if (h >>> 0 < d >>> 2 >>> 0) {
  n = d - (h << 2) | 0;
  if (f >>> 0 < n >>> 0 & g >>> 0 < n >>> 0) if (!((g | f) & 3)) {
   n = f >>> 2;
   m = g >>> 2;
   l = 0;
   while (1) {
    j = h >>> 1;
    k = l + j | 0;
    i = k << 1;
    g = i + n | 0;
    f = se(c[b + (g << 2) >> 2] | 0, o) | 0;
    g = se(c[b + (g + 1 << 2) >> 2] | 0, o) | 0;
    if (!(g >>> 0 < d >>> 0 & f >>> 0 < (d - g | 0) >>> 0)) {
     f = 0;
     break a;
    }
    if (a[b + (g + f) >> 0] | 0) {
     f = 0;
     break a;
    }
    f = te(e, b + g | 0) | 0;
    if (!f) break;
    f = (f | 0) < 0;
    if ((h | 0) == 1) {
     f = 0;
     break a;
    }
    l = f ? l : k;
    h = f ? j : h - j | 0;
   }
   f = i + m | 0;
   g = se(c[b + (f << 2) >> 2] | 0, o) | 0;
   f = se(c[b + (f + 1 << 2) >> 2] | 0, o) | 0;
   if (f >>> 0 < d >>> 0 & g >>> 0 < (d - f | 0) >>> 0) f = (a[b + (f + g) >> 0] | 0) == 0 ? b + f | 0 : 0; else f = 0;
  } else f = 0; else f = 0;
 } else f = 0; while (0);
 return f | 0;
}

function xc(a, b, d) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0;
 r = c[a >> 2] | 0;
 s = a + 4 | 0;
 t = c[s >> 2] | 0;
 u = a + 8 | 0;
 v = c[u >> 2] | 0;
 w = a + 12 | 0;
 x = c[w >> 2] | 0;
 e = a + 16 | 0;
 f = c[e >> 2] | 0;
 g = a + 20 | 0;
 h = c[g >> 2] | 0;
 i = a + 24 | 0;
 j = c[i >> 2] | 0;
 k = a + 28 | 0;
 l = c[k >> 2] | 0;
 m = a + 32 | 0;
 n = c[m >> 2] | 0;
 o = a + 36 | 0;
 p = c[o >> 2] | 0;
 q = 0 - d | 0;
 if ((d + -1 & ~d | d + -2 & q | 0) == -1) {
  F = (c[b + 4 >> 2] ^ t) & q;
  E = (c[b + 8 >> 2] ^ v) & q;
  D = (c[b + 12 >> 2] ^ x) & q;
  C = (c[b + 16 >> 2] ^ f) & q;
  B = (c[b + 20 >> 2] ^ h) & q;
  A = (c[b + 24 >> 2] ^ j) & q;
  z = (c[b + 28 >> 2] ^ l) & q;
  y = (c[b + 32 >> 2] ^ n) & q;
  d = (c[b + 36 >> 2] ^ p) & q;
  c[a >> 2] = (c[b >> 2] ^ r) & q ^ r;
  c[s >> 2] = F ^ t;
  c[u >> 2] = E ^ v;
  c[w >> 2] = D ^ x;
  c[e >> 2] = C ^ f;
  c[g >> 2] = B ^ h;
  c[i >> 2] = A ^ j;
  c[k >> 2] = z ^ l;
  c[m >> 2] = y ^ n;
  c[o >> 2] = d ^ p;
  return;
 } else ha(36472, 36533, 177, 36553);
}

function Ed(b, d) {
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0;
 j = b + 4 | 0;
 e = c[b >> 2] | 0;
 h = ((c[j >> 2] | 0) - e | 0) / 12 | 0;
 f = h + 1 | 0;
 if (f >>> 0 > 357913941) Ze(b);
 k = b + 8 | 0;
 i = ((c[k >> 2] | 0) - e | 0) / 12 | 0;
 g = i << 1;
 g = i >>> 0 < 178956970 ? (g >>> 0 < f >>> 0 ? f : g) : 357913941;
 do if (!g) e = 0; else if (g >>> 0 > 357913941) {
  k = ia(8) | 0;
  Le(k, 37333);
  c[k >> 2] = 36364;
  la(k | 0, 35608, 6);
 } else {
  e = He(g * 12 | 0) | 0;
  break;
 } while (0);
 f = e + (h * 12 | 0) | 0;
 i = e + (g * 12 | 0) | 0;
 Pe(f, d);
 d = f + 12 | 0;
 h = c[b >> 2] | 0;
 e = c[j >> 2] | 0;
 if ((e | 0) == (h | 0)) {
  g = h;
  e = h;
 } else {
  do {
   f = f + -12 | 0;
   e = e + -12 | 0;
   c[f >> 2] = c[e >> 2];
   c[f + 4 >> 2] = c[e + 4 >> 2];
   c[f + 8 >> 2] = c[e + 8 >> 2];
   c[e >> 2] = 0;
   c[e + 4 >> 2] = 0;
   c[e + 8 >> 2] = 0;
  } while ((e | 0) != (h | 0));
  g = c[b >> 2] | 0;
  e = c[j >> 2] | 0;
 }
 c[b >> 2] = f;
 c[j >> 2] = d;
 c[k >> 2] = i;
 f = g;
 if ((e | 0) != (f | 0)) do {
  e = e + -12 | 0;
  if ((a[e + 11 >> 0] | 0) < 0) Ie(c[e >> 2] | 0);
 } while ((e | 0) != (f | 0));
 if (!g) return;
 Ie(g);
 return;
}

function Nf(a, b, d) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0;
 h = k;
 k = k + 64 | 0;
 g = h;
 c[d >> 2] = c[c[d >> 2] >> 2];
 if (Of(a, b, 0) | 0) b = 1; else if (!b) b = 0; else {
  e = of(b, 35536, 35640, 0) | 0;
  if (!e) b = 0; else if (!(c[e + 8 >> 2] & ~c[a + 8 >> 2])) {
   b = a + 12 | 0;
   a = e + 12 | 0;
   if (kf(c[b >> 2] | 0, c[a >> 2] | 0, 0) | 0) b = 1; else if (kf(c[b >> 2] | 0, 35672, 0) | 0) b = 1; else {
    b = c[b >> 2] | 0;
    if (!b) b = 0; else {
     f = of(b, 35536, 35520, 0) | 0;
     if (!f) b = 0; else {
      b = c[a >> 2] | 0;
      if (!b) b = 0; else {
       b = of(b, 35536, 35520, 0) | 0;
       if (!b) b = 0; else {
        a = g + 4 | 0;
        e = a + 52 | 0;
        do {
         c[a >> 2] = 0;
         a = a + 4 | 0;
        } while ((a | 0) < (e | 0));
        c[g >> 2] = b;
        c[g + 8 >> 2] = f;
        c[g + 12 >> 2] = -1;
        c[g + 48 >> 2] = 1;
        Xb[c[(c[b >> 2] | 0) + 28 >> 2] & 7](b, g, c[d >> 2] | 0, 1);
        if ((c[g + 24 >> 2] | 0) == 1) {
         c[d >> 2] = c[g + 16 >> 2];
         b = 1;
        } else b = 0;
       }
      }
     }
    }
   }
  } else b = 0;
 }
 k = h;
 return b | 0;
}

function of(d, e, f, g) {
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 var h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0;
 q = k;
 k = k + 64 | 0;
 o = q;
 n = c[d >> 2] | 0;
 p = d + (c[n + -8 >> 2] | 0) | 0;
 n = c[n + -4 >> 2] | 0;
 c[o >> 2] = f;
 c[o + 4 >> 2] = d;
 c[o + 8 >> 2] = e;
 c[o + 12 >> 2] = g;
 d = o + 16 | 0;
 e = o + 20 | 0;
 g = o + 24 | 0;
 h = o + 28 | 0;
 i = o + 32 | 0;
 j = o + 40 | 0;
 l = d;
 m = l + 36 | 0;
 do {
  c[l >> 2] = 0;
  l = l + 4 | 0;
 } while ((l | 0) < (m | 0));
 b[d + 36 >> 1] = 0;
 a[d + 38 >> 0] = 0;
 a : do if (kf(n, f, 0) | 0) {
  c[o + 48 >> 2] = 1;
  Zb[c[(c[n >> 2] | 0) + 20 >> 2] & 7](n, o, p, p, 1, 0);
  d = (c[g >> 2] | 0) == 1 ? p : 0;
 } else {
  Yb[c[(c[n >> 2] | 0) + 24 >> 2] & 3](n, o, p, 1, 0);
  switch (c[o + 36 >> 2] | 0) {
  case 0:
   {
    d = (c[j >> 2] | 0) == 1 & (c[h >> 2] | 0) == 1 & (c[i >> 2] | 0) == 1 ? c[e >> 2] | 0 : 0;
    break a;
   }
  case 1:
   break;
  default:
   {
    d = 0;
    break a;
   }
  }
  if ((c[g >> 2] | 0) != 1) if (!((c[j >> 2] | 0) == 0 & (c[h >> 2] | 0) == 1 & (c[i >> 2] | 0) == 1)) {
   d = 0;
   break;
  }
  d = c[d >> 2] | 0;
 } while (0);
 k = q;
 return d | 0;
}

function Xd(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0;
 s = k;
 k = k + 224 | 0;
 n = s + 208 | 0;
 p = s + 160 | 0;
 q = s + 80 | 0;
 r = s;
 f = p;
 g = f + 40 | 0;
 do {
  c[f >> 2] = 0;
  f = f + 4 | 0;
 } while ((f | 0) < (g | 0));
 c[n >> 2] = c[e >> 2];
 if ((Yd(0, d, n, q, p) | 0) < 0) e = -1; else {
  if ((c[b + 76 >> 2] | 0) > -1) o = Ud(b) | 0; else o = 0;
  e = c[b >> 2] | 0;
  m = e & 32;
  if ((a[b + 74 >> 0] | 0) < 1) c[b >> 2] = e & -33;
  f = b + 48 | 0;
  if (!(c[f >> 2] | 0)) {
   g = b + 44 | 0;
   h = c[g >> 2] | 0;
   c[g >> 2] = r;
   i = b + 28 | 0;
   c[i >> 2] = r;
   j = b + 20 | 0;
   c[j >> 2] = r;
   c[f >> 2] = 80;
   l = b + 16 | 0;
   c[l >> 2] = r + 80;
   e = Yd(b, d, n, q, p) | 0;
   if (h) {
    Qb[c[b + 36 >> 2] & 15](b, 0, 0) | 0;
    e = (c[j >> 2] | 0) == 0 ? -1 : e;
    c[g >> 2] = h;
    c[f >> 2] = 0;
    c[l >> 2] = 0;
    c[i >> 2] = 0;
    c[j >> 2] = 0;
   }
  } else e = Yd(b, d, n, q, p) | 0;
  f = c[b >> 2] | 0;
  c[b >> 2] = f | m;
  if (o | 0) Vd(b);
  e = (f & 32 | 0) == 0 ? e : -1;
 }
 k = s;
 return e | 0;
}

function Ve(b, d) {
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0;
 if (d >>> 0 > 4294967279) Oe(b);
 i = b + 11 | 0;
 g = a[i >> 0] | 0;
 h = g << 24 >> 24 < 0;
 if (h) {
  k = c[b + 4 >> 2] | 0;
  e = (c[b + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  k = g & 255;
  e = 10;
 }
 j = k >>> 0 > d >>> 0 ? k : d;
 d = j >>> 0 < 11;
 j = d ? 10 : (j + 16 & -16) + -1 | 0;
 do if ((j | 0) != (e | 0)) {
  do if (d) {
   d = c[b >> 2] | 0;
   if (h) {
    g = 0;
    e = d;
    f = b;
    h = 13;
   } else {
    De(b, d, (g & 255) + 1 | 0) | 0;
    Ie(d);
    h = 16;
   }
  } else {
   e = j + 1 | 0;
   f = He(e) | 0;
   if (h) {
    g = 1;
    e = c[b >> 2] | 0;
    h = 13;
    break;
   } else {
    De(f, b, (g & 255) + 1 | 0) | 0;
    d = b + 4 | 0;
    h = 15;
    break;
   }
  } while (0);
  if ((h | 0) == 13) {
   d = b + 4 | 0;
   De(f, e, (c[d >> 2] | 0) + 1 | 0) | 0;
   Ie(e);
   if (g) {
    e = j + 1 | 0;
    h = 15;
   } else h = 16;
  }
  if ((h | 0) == 15) {
   c[b + 8 >> 2] = e | -2147483648;
   c[d >> 2] = k;
   c[b >> 2] = f;
   break;
  } else if ((h | 0) == 16) {
   a[i >> 0] = k;
   break;
  }
 } while (0);
 return;
}

function Xc(b, e) {
 b = b | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0;
 f = a[e + 11 >> 0] | 0;
 h = f << 24 >> 24 < 0;
 f = h ? c[e + 4 >> 2] | 0 : f & 255;
 if (f & 1 | 0) {
  j = ia(8) | 0;
  Ne(j, 36962);
  la(j | 0, 35592, 8);
 }
 i = f >>> 1;
 c[b >> 2] = 0;
 f = b + 4 | 0;
 c[f >> 2] = 0;
 g = b + 8 | 0;
 c[g >> 2] = 0;
 if (!i) return;
 j = He(i) | 0;
 c[b >> 2] = j;
 b = j + i | 0;
 c[g >> 2] = b;
 kg(j | 0, 0, i | 0) | 0;
 c[f >> 2] = b;
 if ((b | 0) == (j | 0)) return;
 g = h ? c[e >> 2] | 0 : e;
 b = 0;
 h = 0;
 while (1) {
  f = b << 1;
  e = a[32512 + (d[g + f >> 0] | 0) >> 0] | 0;
  if ((e & 255) > 15) {
   f = 7;
   break;
  }
  f = a[32512 + (d[g + (f | 1) >> 0] | 0) >> 0] | 0;
  if ((f & 255) > 15) {
   f = 9;
   break;
  }
  a[j + b >> 0] = (e & 255) << 4 | f & 255;
  b = $f(b | 0, h | 0, 1, 0) | 0;
  h = U() | 0;
  if (!(h >>> 0 < 0 | (h | 0) == 0 & b >>> 0 < i >>> 0)) {
   f = 11;
   break;
  }
 }
 if ((f | 0) == 7) {
  j = ia(8) | 0;
  Ne(j, 36935);
  la(j | 0, 35592, 8);
 } else if ((f | 0) == 9) {
  j = ia(8) | 0;
  Ne(j, 36935);
  la(j | 0, 35592, 8);
 } else if ((f | 0) == 11) return;
}

function Wc(b, e, f, g, h) {
 b = b | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 h = h | 0;
 var i = 0, j = 0, k = 0, l = 0, m = 0, n = 0;
 m = b + 11 | 0;
 j = a[m >> 0] | 0;
 k = j << 24 >> 24 < 0;
 n = b + 4 | 0;
 j = k ? c[n >> 2] | 0 : j & 255;
 if (j & 1 | 0) {
  h = 0;
  return h | 0;
 }
 i = j >>> 1;
 if (0 > g >>> 0 | 0 == (g | 0) & i >>> 0 > f >>> 0) {
  h = 0;
  return h | 0;
 }
 a : do if (j >>> 0 > 1) {
  l = 0;
  j = k;
  g = 0;
  while (1) {
   f = l << 1;
   i = j ? c[b >> 2] | 0 : b;
   j = a[32512 + (d[i + f >> 0] | 0) >> 0] | 0;
   if ((j & 255) > 15) {
    i = 0;
    f = 9;
    break;
   }
   i = a[32512 + (d[i + (f | 1) >> 0] | 0) >> 0] | 0;
   if ((i & 255) > 15) {
    i = 0;
    f = 9;
    break;
   }
   a[e + l >> 0] = (j & 255) << 4 | i & 255;
   l = $f(l | 0, g | 0, 1, 0) | 0;
   g = U() | 0;
   i = a[m >> 0] | 0;
   j = i << 24 >> 24 < 0;
   i = (j ? c[n >> 2] | 0 : i & 255) >>> 1;
   if (!(g >>> 0 < 0 | (g | 0) == 0 & l >>> 0 < i >>> 0)) {
    j = 0;
    break a;
   }
  }
  if ((f | 0) == 9) return i | 0;
 } else j = 0; while (0);
 c[h >> 2] = i;
 c[h + 4 >> 2] = j;
 h = 1;
 return h | 0;
}

function Td(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0;
 h = d & 255;
 f = (e | 0) != 0;
 a : do if (f & (b & 3 | 0) != 0) {
  g = d & 255;
  while (1) {
   if ((a[b >> 0] | 0) == g << 24 >> 24) {
    i = 6;
    break a;
   }
   b = b + 1 | 0;
   e = e + -1 | 0;
   f = (e | 0) != 0;
   if (!(f & (b & 3 | 0) != 0)) {
    i = 5;
    break;
   }
  }
 } else i = 5; while (0);
 if ((i | 0) == 5) if (f) i = 6; else i = 16;
 b : do if ((i | 0) == 6) {
  g = d & 255;
  if ((a[b >> 0] | 0) == g << 24 >> 24) if (!e) {
   i = 16;
   break;
  } else break;
  f = L(h, 16843009) | 0;
  c : do if (e >>> 0 > 3) while (1) {
   h = c[b >> 2] ^ f;
   if ((h & -2139062144 ^ -2139062144) & h + -16843009 | 0) break c;
   b = b + 4 | 0;
   e = e + -4 | 0;
   if (e >>> 0 <= 3) {
    i = 11;
    break;
   }
  } else i = 11; while (0);
  if ((i | 0) == 11) if (!e) {
   i = 16;
   break;
  }
  while (1) {
   if ((a[b >> 0] | 0) == g << 24 >> 24) break b;
   e = e + -1 | 0;
   if (!e) {
    i = 16;
    break;
   } else b = b + 1 | 0;
  }
 } while (0);
 if ((i | 0) == 16) b = 0;
 return b | 0;
}

function gd(b, d) {
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0;
 j = k;
 k = k + 32 | 0;
 h = j + 12 | 0;
 i = j;
 e = d + 4 | 0;
 f = c[d >> 2] | 0;
 c[i >> 2] = 0;
 c[i + 4 >> 2] = 0;
 c[i + 8 >> 2] = 0;
 if (f >>> 0 > 4294967279) Oe(i);
 if (f >>> 0 < 11) {
  a[i + 11 >> 0] = f;
  if (!f) d = i; else {
   d = i;
   g = 6;
  }
 } else {
  g = f + 16 & -16;
  d = He(g) | 0;
  c[i >> 2] = d;
  c[i + 8 >> 2] = g | -2147483648;
  c[i + 4 >> 2] = f;
  g = 6;
 }
 if ((g | 0) == 6) ig(d | 0, e | 0, f | 0) | 0;
 a[d + f >> 0] = 0;
 Vb[b & 3](h, i);
 d = a[h + 11 >> 0] | 0;
 if (d << 24 >> 24 < 0) {
  g = c[h + 4 >> 2] | 0;
  d = Be(g + 4 | 0) | 0;
  c[d >> 2] = g;
  h = c[h >> 2] | 0;
  ig(d + 4 | 0, h | 0, g | 0) | 0;
  Ie(h);
 } else {
  g = d & 255;
  d = Be(g + 4 | 0) | 0;
  c[d >> 2] = g;
  ig(d + 4 | 0, h | 0, g | 0) | 0;
 }
 if ((a[i + 11 >> 0] | 0) >= 0) {
  k = j;
  return d | 0;
 }
 Ie(c[i >> 2] | 0);
 k = j;
 return d | 0;
}

function od(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0;
 j = k;
 k = k + 16 | 0;
 i = j;
 f = e + 4 | 0;
 g = c[e >> 2] | 0;
 c[i >> 2] = 0;
 c[i + 4 >> 2] = 0;
 c[i + 8 >> 2] = 0;
 if (g >>> 0 > 4294967279) Oe(i);
 if (g >>> 0 < 11) {
  a[i + 11 >> 0] = g;
  if (!g) e = i; else {
   e = i;
   h = 6;
  }
 } else {
  h = g + 16 & -16;
  e = He(h) | 0;
  c[i >> 2] = e;
  c[i + 8 >> 2] = h | -2147483648;
  c[i + 4 >> 2] = g;
  h = 6;
 }
 if ((h | 0) == 6) ig(e | 0, f | 0, g | 0) | 0;
 a[e + g >> 0] = 0;
 e = d + (c[b >> 2] | 0) | 0;
 f = e + 11 | 0;
 if ((a[f >> 0] | 0) < 0) {
  a[c[e >> 2] >> 0] = 0;
  c[e + 4 >> 2] = 0;
  Ve(e, 0);
  c[e >> 2] = c[i >> 2];
  c[e + 4 >> 2] = c[i + 4 >> 2];
  c[e + 8 >> 2] = c[i + 8 >> 2];
  k = j;
  return;
 } else {
  a[e >> 0] = 0;
  a[f >> 0] = 0;
  Ve(e, 0);
  c[e >> 2] = c[i >> 2];
  c[e + 4 >> 2] = c[i + 4 >> 2];
  c[e + 8 >> 2] = c[i + 8 >> 2];
  k = j;
  return;
 }
}

function Qf(b, d, e, f, g, h) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 h = h | 0;
 var i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0;
 if (kf(b, c[d + 8 >> 2] | 0, h) | 0) nf(0, d, e, f, g); else {
  p = d + 52 | 0;
  i = a[p >> 0] | 0;
  j = d + 53 | 0;
  k = a[j >> 0] | 0;
  o = c[b + 12 >> 2] | 0;
  l = b + 16 + (o << 3) | 0;
  a[p >> 0] = 0;
  a[j >> 0] = 0;
  Uf(b + 16 | 0, d, e, f, g, h);
  a : do if ((o | 0) > 1) {
   m = d + 24 | 0;
   n = b + 8 | 0;
   o = d + 54 | 0;
   b = b + 24 | 0;
   do {
    if (a[o >> 0] | 0) break a;
    if (!(a[p >> 0] | 0)) {
     if (a[j >> 0] | 0) if (!(c[n >> 2] & 1)) break a;
    } else {
     if ((c[m >> 2] | 0) == 1) break a;
     if (!(c[n >> 2] & 2)) break a;
    }
    a[p >> 0] = 0;
    a[j >> 0] = 0;
    Uf(b, d, e, f, g, h);
    b = b + 8 | 0;
   } while (b >>> 0 < l >>> 0);
  } while (0);
  a[p >> 0] = i;
  a[j >> 0] = k;
 }
 return;
}

function Jd(a) {
 a = a | 0;
 Ja(35672, 37793);
 wa(35688, 37798, 1, 1, 0);
 Da(35696, 37803, 1, -128, 127);
 Da(35712, 37808, 1, -128, 127);
 Da(35704, 37820, 1, 0, 255);
 Da(35720, 37834, 2, -32768, 32767);
 Da(35728, 37840, 2, 0, 65535);
 Da(35736, 37855, 4, -2147483648, 2147483647);
 Da(35744, 37859, 4, 0, -1);
 Da(35752, 37872, 4, -2147483648, 2147483647);
 Da(35760, 37877, 4, 0, -1);
 Ba(35768, 37891, 4);
 Ba(35776, 37897, 8);
 Fa(35240, 37904);
 Fa(35368, 37916);
 Ga(35392, 4, 37949);
 Aa(35328, 37962);
 Ea(35416, 0, 37978);
 Ea(35424, 0, 38008);
 Ea(35432, 1, 38045);
 Ea(35440, 2, 38084);
 Ea(35448, 3, 38115);
 Ea(35456, 4, 38155);
 Ea(35464, 5, 38184);
 Ea(35472, 4, 38222);
 Ea(35480, 5, 38252);
 Ea(35424, 0, 38291);
 Ea(35432, 1, 38323);
 Ea(35440, 2, 38356);
 Ea(35448, 3, 38389);
 Ea(35456, 4, 38423);
 Ea(35464, 5, 38456);
 Ea(35488, 6, 38490);
 Ea(35496, 7, 38521);
 Ea(35504, 7, 38553);
 return;
}

function ue(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0;
 f = e + 16 | 0;
 g = c[f >> 2] | 0;
 if (!g) if (!(ve(e) | 0)) {
  g = c[f >> 2] | 0;
  h = 5;
 } else f = 0; else h = 5;
 a : do if ((h | 0) == 5) {
  j = e + 20 | 0;
  i = c[j >> 2] | 0;
  f = i;
  if ((g - i | 0) >>> 0 < d >>> 0) {
   f = Qb[c[e + 36 >> 2] & 15](e, b, d) | 0;
   break;
  }
  b : do if ((a[e + 75 >> 0] | 0) < 0 | (d | 0) == 0) {
   h = 0;
   g = b;
  } else {
   i = d;
   while (1) {
    g = i + -1 | 0;
    if ((a[b + g >> 0] | 0) == 10) break;
    if (!g) {
     h = 0;
     g = b;
     break b;
    } else i = g;
   }
   f = Qb[c[e + 36 >> 2] & 15](e, b, i) | 0;
   if (f >>> 0 < i >>> 0) break a;
   h = i;
   g = b + i | 0;
   d = d - i | 0;
   f = c[j >> 2] | 0;
  } while (0);
  ig(f | 0, g | 0, d | 0) | 0;
  c[j >> 2] = (c[j >> 2] | 0) + d;
  f = h + d | 0;
 } while (0);
 return f | 0;
}

function ke(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 do if (!b) b = 1; else {
  if (d >>> 0 < 128) {
   a[b >> 0] = d;
   b = 1;
   break;
  }
  if (!(c[c[(le() | 0) + 188 >> 2] >> 2] | 0)) if ((d & -128 | 0) == 57216) {
   a[b >> 0] = d;
   b = 1;
   break;
  } else {
   c[(Pd() | 0) >> 2] = 84;
   b = -1;
   break;
  }
  if (d >>> 0 < 2048) {
   a[b >> 0] = d >>> 6 | 192;
   a[b + 1 >> 0] = d & 63 | 128;
   b = 2;
   break;
  }
  if (d >>> 0 < 55296 | (d & -8192 | 0) == 57344) {
   a[b >> 0] = d >>> 12 | 224;
   a[b + 1 >> 0] = d >>> 6 & 63 | 128;
   a[b + 2 >> 0] = d & 63 | 128;
   b = 3;
   break;
  }
  if ((d + -65536 | 0) >>> 0 < 1048576) {
   a[b >> 0] = d >>> 18 | 240;
   a[b + 1 >> 0] = d >>> 12 & 63 | 128;
   a[b + 2 >> 0] = d >>> 6 & 63 | 128;
   a[b + 3 >> 0] = d & 63 | 128;
   b = 4;
   break;
  } else {
   c[(Pd() | 0) >> 2] = 84;
   b = -1;
   break;
  }
 } while (0);
 return b | 0;
}

function _e() {
 var a = 0, b = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0;
 f = k;
 k = k + 48 | 0;
 h = f + 32 | 0;
 e = f + 24 | 0;
 i = f + 16 | 0;
 g = f;
 f = f + 36 | 0;
 a = $e() | 0;
 if (a | 0) {
  d = c[a >> 2] | 0;
  if (d | 0) {
   a = d + 48 | 0;
   b = c[a >> 2] | 0;
   a = c[a + 4 >> 2] | 0;
   if (!((b & -256 | 0) == 1126902528 & (a | 0) == 1129074247)) {
    c[e >> 2] = 39296;
    af(39246, e);
   }
   if ((b | 0) == 1126902529 & (a | 0) == 1129074247) a = c[d + 44 >> 2] | 0; else a = d + 80 | 0;
   c[f >> 2] = a;
   e = c[d >> 2] | 0;
   a = c[e + 4 >> 2] | 0;
   if (Qb[c[(c[8878] | 0) + 16 >> 2] & 15](35512, e, f) | 0) {
    i = c[f >> 2] | 0;
    i = Ob[c[(c[i >> 2] | 0) + 8 >> 2] & 7](i) | 0;
    c[g >> 2] = 39296;
    c[g + 4 >> 2] = a;
    c[g + 8 >> 2] = i;
    af(39160, g);
   } else {
    c[i >> 2] = 39296;
    c[i + 4 >> 2] = a;
    af(39205, i);
   }
  }
 }
 af(39284, h);
}

function Tc(b, c, d, e) {
 b = b | 0;
 c = c | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0;
 p = k;
 k = k + 832 | 0;
 i = p + 792 | 0;
 j = p + 760 | 0;
 l = p + 600 | 0;
 m = p + 440 | 0;
 n = p + 280 | 0;
 o = p + 120 | 0;
 h = p;
 if (qc(l, d) | 0) {
  o = 0;
  k = p;
  return o | 0;
 }
 d = i + 32 | 0;
 g = i;
 f = g + 32 | 0;
 do {
  a[g >> 0] = a[b >> 0] | 0;
  g = g + 1 | 0;
  b = b + 1 | 0;
 } while ((g | 0) < (f | 0));
 if (c >>> 0 > 127) while (1) {
  f = d + 1 | 0;
  a[d >> 0] = c | 128;
  b = c >>> 7;
  if (c >>> 0 > 16383) {
   d = f;
   c = b;
  } else {
   d = f;
   break;
  }
 } else b = c;
 c = d + 1 | 0;
 a[d >> 0] = b;
 if (c >>> 0 > (i + 37 | 0) >>> 0) ha(36804, 36786, 123, 36854);
 Lc(i, c - i | 0, j);
 Fc(j);
 vc(m, j);
 gc(n, m);
 nc(o, l, n);
 pc(h, o);
 yc(e, h);
 o = 1;
 k = p;
 return o | 0;
}

function Fd(b, d) {
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0;
 l = b + 4 | 0;
 m = c[b >> 2] | 0;
 n = (c[l >> 2] | 0) - m | 0;
 f = n >> 5;
 e = f + 1 | 0;
 o = m;
 if (e >>> 0 > 134217727) Ze(b);
 k = b + 8 | 0;
 i = (c[k >> 2] | 0) - m | 0;
 j = i >> 4;
 e = i >> 5 >>> 0 < 67108863 ? (j >>> 0 < e >>> 0 ? e : j) : 134217727;
 do if (!e) j = 0; else if (e >>> 0 > 134217727) {
  o = ia(8) | 0;
  Le(o, 37333);
  c[o >> 2] = 36364;
  la(o | 0, 35608, 6);
 } else {
  j = He(e << 5) | 0;
  break;
 } while (0);
 i = j + (f << 5) | 0;
 g = j + (e << 5) | 0;
 h = i;
 e = d;
 f = h + 32 | 0;
 do {
  a[h >> 0] = a[e >> 0] | 0;
  h = h + 1 | 0;
  e = e + 1 | 0;
 } while ((h | 0) < (f | 0));
 if ((n | 0) > 0) ig(j | 0, o | 0, n | 0) | 0;
 c[b >> 2] = j;
 c[l >> 2] = i + 32;
 c[k >> 2] = g;
 if (!m) return;
 Ie(o);
 return;
}

function kg(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0;
 h = b + e | 0;
 d = d & 255;
 if ((e | 0) >= 67) {
  while (b & 3) {
   a[b >> 0] = d;
   b = b + 1 | 0;
  }
  f = h & -4 | 0;
  g = f - 64 | 0;
  i = d | d << 8 | d << 16 | d << 24;
  while ((b | 0) <= (g | 0)) {
   c[b >> 2] = i;
   c[b + 4 >> 2] = i;
   c[b + 8 >> 2] = i;
   c[b + 12 >> 2] = i;
   c[b + 16 >> 2] = i;
   c[b + 20 >> 2] = i;
   c[b + 24 >> 2] = i;
   c[b + 28 >> 2] = i;
   c[b + 32 >> 2] = i;
   c[b + 36 >> 2] = i;
   c[b + 40 >> 2] = i;
   c[b + 44 >> 2] = i;
   c[b + 48 >> 2] = i;
   c[b + 52 >> 2] = i;
   c[b + 56 >> 2] = i;
   c[b + 60 >> 2] = i;
   b = b + 64 | 0;
  }
  while ((b | 0) < (f | 0)) {
   c[b >> 2] = i;
   b = b + 4 | 0;
  }
 }
 while ((b | 0) < (h | 0)) {
  a[b >> 0] = d;
  b = b + 1 | 0;
 }
 return h - e | 0;
}

function wd(b, d, e, f) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 var g = 0, h = 0, i = 0, j = 0, l = 0;
 l = k;
 k = k + 16 | 0;
 i = l;
 g = c[b >> 2] | 0;
 b = c[b + 4 >> 2] | 0;
 h = d + (b >> 1) | 0;
 if (b & 1) g = c[(c[h >> 2] | 0) + g >> 2] | 0;
 d = f + 4 | 0;
 f = c[f >> 2] | 0;
 c[i >> 2] = 0;
 c[i + 4 >> 2] = 0;
 c[i + 8 >> 2] = 0;
 if (f >>> 0 > 4294967279) Oe(i);
 if (f >>> 0 < 11) {
  a[i + 11 >> 0] = f;
  if (!f) b = i; else {
   b = i;
   j = 9;
  }
 } else {
  j = f + 16 & -16;
  b = He(j) | 0;
  c[i >> 2] = b;
  c[i + 8 >> 2] = j | -2147483648;
  c[i + 4 >> 2] = f;
  j = 9;
 }
 if ((j | 0) == 9) ig(b | 0, d | 0, f | 0) | 0;
 a[b + f >> 0] = 0;
 Wb[g & 7](h, e, i);
 if ((a[i + 11 >> 0] | 0) >= 0) {
  k = l;
  return;
 }
 Ie(c[i >> 2] | 0);
 k = l;
 return;
}

function Ue(b, d, e, f, g, h, i, j) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 h = h | 0;
 i = i | 0;
 j = j | 0;
 var l = 0, m = 0, n = 0, o = 0, p = 0;
 p = k;
 k = k + 16 | 0;
 o = p;
 if ((-18 - d | 0) >>> 0 < e >>> 0) Oe(b);
 if ((a[b + 11 >> 0] | 0) < 0) n = c[b >> 2] | 0; else n = b;
 if (d >>> 0 < 2147483623) {
  l = e + d | 0;
  m = d << 1;
  l = l >>> 0 < m >>> 0 ? m : l;
  l = l >>> 0 < 11 ? 11 : l + 16 & -16;
 } else l = -17;
 m = He(l) | 0;
 if (g | 0) De(m, n, g) | 0;
 if (i | 0) De(m + g | 0, j, i) | 0;
 e = f - h | 0;
 f = e - g | 0;
 if (f | 0) De(m + g + i | 0, n + g + h | 0, f) | 0;
 if ((d | 0) != 10) Ie(n);
 c[b >> 2] = m;
 c[b + 8 >> 2] = l | -2147483648;
 i = e + i | 0;
 c[b + 4 >> 2] = i;
 a[o >> 0] = 0;
 Ee(m + i | 0, o);
 k = p;
 return;
}

function ud(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0;
 j = k;
 k = k + 16 | 0;
 h = j;
 f = c[b >> 2] | 0;
 b = c[b + 4 >> 2] | 0;
 g = d + (b >> 1) | 0;
 if (b & 1) f = c[(c[g >> 2] | 0) + f >> 2] | 0;
 d = e + 4 | 0;
 e = c[e >> 2] | 0;
 c[h >> 2] = 0;
 c[h + 4 >> 2] = 0;
 c[h + 8 >> 2] = 0;
 if (e >>> 0 > 4294967279) Oe(h);
 if (e >>> 0 < 11) {
  a[h + 11 >> 0] = e;
  if (!e) b = h; else {
   b = h;
   i = 9;
  }
 } else {
  i = e + 16 & -16;
  b = He(i) | 0;
  c[h >> 2] = b;
  c[h + 8 >> 2] = i | -2147483648;
  c[h + 4 >> 2] = e;
  i = 9;
 }
 if ((i | 0) == 9) ig(b | 0, d | 0, e | 0) | 0;
 a[b + e >> 0] = 0;
 Vb[f & 3](g, h);
 if ((a[h + 11 >> 0] | 0) >= 0) {
  k = j;
  return;
 }
 Ie(c[h >> 2] | 0);
 k = j;
 return;
}

function Ae(b, d) {
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0;
 if ((c[d + 76 >> 2] | 0) < 0) i = 3; else if (!(Ud(d) | 0)) i = 3; else {
  f = b & 255;
  e = b & 255;
  if ((e | 0) == (a[d + 75 >> 0] | 0)) i = 10; else {
   g = d + 20 | 0;
   h = c[g >> 2] | 0;
   if (h >>> 0 < (c[d + 16 >> 2] | 0) >>> 0) {
    c[g >> 2] = h + 1;
    a[h >> 0] = f;
   } else i = 10;
  }
  if ((i | 0) == 10) e = ze(d, b) | 0;
  Vd(d);
 }
 do if ((i | 0) == 3) {
  h = b & 255;
  e = b & 255;
  if ((e | 0) != (a[d + 75 >> 0] | 0)) {
   f = d + 20 | 0;
   g = c[f >> 2] | 0;
   if (g >>> 0 < (c[d + 16 >> 2] | 0) >>> 0) {
    c[f >> 2] = g + 1;
    a[g >> 0] = h;
    break;
   }
  }
  e = ze(d, b) | 0;
 } while (0);
 return e | 0;
}

function Cd(b, d, e, f) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 var g = 0, h = 0, i = 0, j = 0, l = 0;
 l = k;
 k = k + 16 | 0;
 j = l;
 h = c[b >> 2] | 0;
 g = f + 4 | 0;
 f = c[f >> 2] | 0;
 c[j >> 2] = 0;
 c[j + 4 >> 2] = 0;
 c[j + 8 >> 2] = 0;
 if (f >>> 0 > 4294967279) Oe(j);
 if (f >>> 0 < 11) {
  a[j + 11 >> 0] = f;
  if (!f) b = j; else {
   b = j;
   i = 6;
  }
 } else {
  i = f + 16 & -16;
  b = He(i) | 0;
  c[j >> 2] = b;
  c[j + 8 >> 2] = i | -2147483648;
  c[j + 4 >> 2] = f;
  i = 6;
 }
 if ((i | 0) == 6) ig(b | 0, g | 0, f | 0) | 0;
 a[b + f >> 0] = 0;
 b = Qb[h & 15](d, e, j) | 0;
 if ((a[j + 11 >> 0] | 0) >= 0) {
  k = l;
  return b | 0;
 }
 Ie(c[j >> 2] | 0);
 k = l;
 return b | 0;
}

function dd(b) {
 b = b | 0;
 var d = 0, e = 0, f = 0, g = 0;
 g = k;
 k = k + 80 | 0;
 f = g + 48 | 0;
 e = g + 16 | 0;
 d = g;
 Sc(f, e);
 c[b >> 2] = 0;
 c[b + 4 >> 2] = 0;
 c[b + 8 >> 2] = 0;
 c[b + 12 >> 2] = 0;
 c[b + 16 >> 2] = 0;
 c[b + 20 >> 2] = 0;
 Yc(d, f, 32, 0);
 a[b >> 0] = 0;
 a[b + 11 >> 0] = 0;
 Ve(b, 0);
 c[b >> 2] = c[d >> 2];
 c[b + 4 >> 2] = c[d + 4 >> 2];
 c[b + 8 >> 2] = c[d + 8 >> 2];
 Yc(d, e, 32, 0);
 e = b + 12 | 0;
 f = e + 11 | 0;
 if ((a[f >> 0] | 0) < 0) {
  a[c[e >> 2] >> 0] = 0;
  c[b + 16 >> 2] = 0;
 } else {
  a[e >> 0] = 0;
  a[f >> 0] = 0;
 }
 Ve(e, 0);
 c[e >> 2] = c[d >> 2];
 c[e + 4 >> 2] = c[d + 4 >> 2];
 c[e + 8 >> 2] = c[d + 8 >> 2];
 k = g;
 return;
}

function nf(b, d, e, f, g) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 a[d + 53 >> 0] = 1;
 do if ((c[d + 4 >> 2] | 0) == (f | 0)) {
  a[d + 52 >> 0] = 1;
  b = d + 16 | 0;
  f = c[b >> 2] | 0;
  if (!f) {
   c[b >> 2] = e;
   c[d + 24 >> 2] = g;
   c[d + 36 >> 2] = 1;
   if (!((g | 0) == 1 ? (c[d + 48 >> 2] | 0) == 1 : 0)) break;
   a[d + 54 >> 0] = 1;
   break;
  }
  if ((f | 0) != (e | 0)) {
   g = d + 36 | 0;
   c[g >> 2] = (c[g >> 2] | 0) + 1;
   a[d + 54 >> 0] = 1;
   break;
  }
  f = d + 24 | 0;
  b = c[f >> 2] | 0;
  if ((b | 0) == 2) {
   c[f >> 2] = g;
   b = g;
  }
  if ((b | 0) == 1 ? (c[d + 48 >> 2] | 0) == 1 : 0) a[d + 54 >> 0] = 1;
 } while (0);
 return;
}

function Xe(b, d) {
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0;
 j = k;
 k = k + 16 | 0;
 h = j;
 i = j + 1 | 0;
 a[h >> 0] = d;
 g = b + 11 | 0;
 d = a[g >> 0] | 0;
 e = d << 24 >> 24 < 0;
 if (e) {
  f = c[b + 4 >> 2] | 0;
  d = (c[b + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  f = d & 255;
  d = 10;
 }
 if ((f | 0) == (d | 0)) {
  We(b, d, 1, d, d, 0, 0);
  if ((a[g >> 0] | 0) < 0) e = 8; else e = 7;
 } else if (e) e = 8; else e = 7;
 if ((e | 0) == 7) {
  a[g >> 0] = f + 1;
  d = b;
 } else if ((e | 0) == 8) {
  d = c[b >> 2] | 0;
  c[b + 4 >> 2] = f + 1;
 }
 b = d + f | 0;
 Ee(b, h);
 a[i >> 0] = 0;
 Ee(b + 1 | 0, i);
 k = j;
 return;
}

function hd(b, d) {
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0;
 i = k;
 k = k + 64 | 0;
 f = i + 12 | 0;
 g = i + 24 | 0;
 h = i;
 c[b >> 2] = 0;
 c[b + 4 >> 2] = 0;
 c[b + 8 >> 2] = 0;
 Xc(f, d);
 d = g;
 e = d + 32 | 0;
 do {
  a[d >> 0] = 0;
  d = d + 1 | 0;
 } while ((d | 0) < (e | 0));
 d = c[f >> 2] | 0;
 e = f + 4 | 0;
 Lc(d, (c[e >> 2] | 0) - d | 0, g);
 Yc(h, g, 32, 0);
 a[b >> 0] = 0;
 a[b + 11 >> 0] = 0;
 Ve(b, 0);
 c[b >> 2] = c[h >> 2];
 c[b + 4 >> 2] = c[h + 4 >> 2];
 c[b + 8 >> 2] = c[h + 8 >> 2];
 d = c[f >> 2] | 0;
 if (!d) {
  k = i;
  return;
 }
 c[e >> 2] = d;
 Ie(d);
 k = i;
 return;
}

function ff(a, b, d) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0;
 h = k;
 k = k + 64 | 0;
 g = h;
 if (kf(a, b, 0) | 0) b = 1; else if (!b) b = 0; else {
  b = of(b, 35536, 35520, 0) | 0;
  if (!b) b = 0; else {
   e = g + 4 | 0;
   f = e + 52 | 0;
   do {
    c[e >> 2] = 0;
    e = e + 4 | 0;
   } while ((e | 0) < (f | 0));
   c[g >> 2] = b;
   c[g + 8 >> 2] = a;
   c[g + 12 >> 2] = -1;
   c[g + 48 >> 2] = 1;
   Xb[c[(c[b >> 2] | 0) + 28 >> 2] & 7](b, g, c[d >> 2] | 0, 1);
   if ((c[g + 24 >> 2] | 0) == 1) {
    c[d >> 2] = c[g + 16 >> 2];
    b = 1;
   } else b = 0;
  }
 }
 k = h;
 return b | 0;
}

function Se(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0, l = 0;
 l = k;
 k = k + 16 | 0;
 i = l;
 j = b + 11 | 0;
 f = a[j >> 0] | 0;
 g = f << 24 >> 24 < 0;
 if (g) h = (c[b + 8 >> 2] & 2147483647) + -1 | 0; else h = 10;
 do if (h >>> 0 < e >>> 0) {
  if (g) f = c[b + 4 >> 2] | 0; else f = f & 255;
  Ue(b, h, e - h | 0, f, 0, f, e, d);
 } else {
  if (g) f = c[b >> 2] | 0; else f = b;
  Te(f, d, e) | 0;
  a[i >> 0] = 0;
  Ee(f + e | 0, i);
  if ((a[j >> 0] | 0) < 0) {
   c[b + 4 >> 2] = e;
   break;
  } else {
   a[j >> 0] = e;
   break;
  }
 } while (0);
 k = l;
 return b | 0;
}

function ze(b, e) {
 b = b | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0;
 m = k;
 k = k + 16 | 0;
 j = m;
 l = e & 255;
 a[j >> 0] = l;
 f = b + 16 | 0;
 g = c[f >> 2] | 0;
 if (!g) if (!(ve(b) | 0)) {
  g = c[f >> 2] | 0;
  h = 4;
 } else f = -1; else h = 4;
 do if ((h | 0) == 4) {
  i = b + 20 | 0;
  h = c[i >> 2] | 0;
  if (h >>> 0 < g >>> 0) {
   f = e & 255;
   if ((f | 0) != (a[b + 75 >> 0] | 0)) {
    c[i >> 2] = h + 1;
    a[h >> 0] = l;
    break;
   }
  }
  if ((Qb[c[b + 36 >> 2] & 15](b, j, 1) | 0) == 1) f = d[j >> 0] | 0; else f = -1;
 } while (0);
 k = m;
 return f | 0;
}

function kd(a) {
 a = a | 0;
 xa(35272, 35296, 35312, 0, 37053, 5, 37276, 0, 37276, 0, a | 0, 37141, 16);
 ya(35272, 1, 35824, 37053, 6, 2);
 a = He(8) | 0;
 c[a >> 2] = 2;
 c[a + 4 >> 2] = 0;
 za(35272, 37278, 3, 35828, 37154, 3, a | 0, 0);
 a = He(8) | 0;
 c[a >> 2] = 4;
 c[a + 4 >> 2] = 0;
 za(35272, 37288, 4, 32816, 37295, 5, a | 0, 0);
 a = He(8) | 0;
 c[a >> 2] = 7;
 c[a + 4 >> 2] = 0;
 za(35272, 37301, 2, 35840, 37093, 3, a | 0, 0);
 a = He(4) | 0;
 c[a >> 2] = 5;
 za(35272, 37306, 3, 35848, 37075, 7, a | 0, 0);
 a = He(4) | 0;
 c[a >> 2] = 8;
 za(35272, 37310, 4, 32832, 37115, 2, a | 0, 0);
 return;
}

function zd(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0;
 i = k;
 k = k + 16 | 0;
 h = i;
 f = c[d >> 2] | 0;
 g = f;
 if ((((c[d + 4 >> 2] | 0) - f | 0) / 12 | 0) >>> 0 <= e >>> 0) {
  c[b >> 2] = 1;
  k = i;
  return;
 }
 d = g + (e * 12 | 0) | 0;
 f = a[d + 11 >> 0] | 0;
 if (f << 24 >> 24 < 0) {
  f = c[g + (e * 12 | 0) + 4 >> 2] | 0;
  g = Be(f + 4 | 0) | 0;
  c[g >> 2] = f;
  d = c[d >> 2] | 0;
 } else {
  f = f & 255;
  g = Be(f + 4 | 0) | 0;
  c[g >> 2] = f;
 }
 ig(g + 4 | 0, d | 0, f | 0) | 0;
 c[h >> 2] = g;
 c[b >> 2] = Na(35240, h | 0) | 0;
 k = i;
 return;
}

function We(b, d, e, f, g, h, i) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 h = h | 0;
 i = i | 0;
 var j = 0, k = 0, l = 0;
 if ((-17 - d | 0) >>> 0 < e >>> 0) Oe(b);
 if ((a[b + 11 >> 0] | 0) < 0) l = c[b >> 2] | 0; else l = b;
 if (d >>> 0 < 2147483623) {
  j = e + d | 0;
  k = d << 1;
  j = j >>> 0 < k >>> 0 ? k : j;
  j = j >>> 0 < 11 ? 11 : j + 16 & -16;
 } else j = -17;
 k = He(j) | 0;
 if (g | 0) De(k, l, g) | 0;
 e = f - h - g | 0;
 if (e | 0) De(k + g + i | 0, l + g + h | 0, e) | 0;
 if ((d | 0) != 10) Ie(l);
 c[b >> 2] = k;
 c[b + 8 >> 2] = j | -2147483648;
 return;
}

function ce(b, c, d) {
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0;
 if (c >>> 0 > 0 | (c | 0) == 0 & b >>> 0 > 4294967295) {
  do {
   e = b;
   b = dg(b | 0, c | 0, 10, 0) | 0;
   f = c;
   c = U() | 0;
   g = _f(b | 0, c | 0, 10, 0) | 0;
   g = ag(e | 0, f | 0, g | 0, U() | 0) | 0;
   U() | 0;
   d = d + -1 | 0;
   a[d >> 0] = g & 255 | 48;
  } while (f >>> 0 > 9 | (f | 0) == 9 & e >>> 0 > 4294967295);
  c = b;
 } else c = b;
 if (c) do {
  g = c;
  c = (c >>> 0) / 10 | 0;
  d = d + -1 | 0;
  a[d >> 0] = g - (c * 10 | 0) | 48;
 } while (g >>> 0 >= 10);
 return d | 0;
}

function hf(b, d, e, f, g) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 do if (kf(b, c[d + 8 >> 2] | 0, g) | 0) mf(0, d, e, f); else if (kf(b, c[d >> 2] | 0, g) | 0) {
  if ((c[d + 16 >> 2] | 0) != (e | 0)) {
   b = d + 20 | 0;
   if ((c[b >> 2] | 0) != (e | 0)) {
    c[d + 32 >> 2] = f;
    c[b >> 2] = e;
    f = d + 40 | 0;
    c[f >> 2] = (c[f >> 2] | 0) + 1;
    if ((c[d + 36 >> 2] | 0) == 1) if ((c[d + 24 >> 2] | 0) == 2) a[d + 54 >> 0] = 1;
    c[d + 44 >> 2] = 4;
    break;
   }
  }
  if ((f | 0) == 1) c[d + 32 >> 2] = 1;
 } while (0);
 return;
}

function Hd(a, b) {
 a = a | 0;
 b = b | 0;
 var d = 0, e = 0, f = 0, g = 0, h = 0;
 c[a >> 2] = 0;
 h = a + 4 | 0;
 c[h >> 2] = 0;
 e = a + 8 | 0;
 c[e >> 2] = 0;
 g = b + 4 | 0;
 d = (c[g >> 2] | 0) - (c[b >> 2] | 0) | 0;
 f = (d | 0) / 12 | 0;
 if (!d) return;
 if (f >>> 0 > 357913941) Ze(a);
 d = He(d) | 0;
 c[h >> 2] = d;
 c[a >> 2] = d;
 c[e >> 2] = d + (f * 12 | 0);
 a = c[b >> 2] | 0;
 b = c[g >> 2] | 0;
 if ((a | 0) == (b | 0)) return;
 do {
  Pe(d, a);
  a = a + 12 | 0;
  d = (c[h >> 2] | 0) + 12 | 0;
  c[h >> 2] = d;
 } while ((a | 0) != (b | 0));
 return;
}

function we(a, b, d) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0, i = 0;
 h = k;
 k = k + 48 | 0;
 g = h + 32 | 0;
 f = h + 16 | 0;
 e = h;
 if (!(b & 4194368)) e = 0; else {
  c[e >> 2] = d;
  i = (c[e >> 2] | 0) + (4 - 1) & ~(4 - 1);
  d = c[i >> 2] | 0;
  c[e >> 2] = i + 4;
  e = d;
 }
 c[f >> 2] = a;
 c[f + 4 >> 2] = b | 32768;
 c[f + 8 >> 2] = e;
 e = ta(5, f | 0) | 0;
 if (!((b & 524288 | 0) == 0 | (e | 0) < 0)) {
  c[g >> 2] = e;
  c[g + 4 >> 2] = 2;
  c[g + 8 >> 2] = 1;
  ra(221, g | 0) | 0;
 }
 i = Od(e) | 0;
 k = h;
 return i | 0;
}

function $c(a) {
 a = a | 0;
 var b = 0;
 Ca(37008, 6, 32768, 37031, 1, 4);
 Ca(37039, 1, 35800, 37053, 4, 14);
 Ca(37056, 3, 35804, 37075, 6, 1);
 Ca(37080, 2, 35816, 37093, 1, 1);
 Ca(37097, 4, 32800, 37115, 1, 4);
 kd(37121);
 Ha(35232, 37134, 37139, 1, 37141, 15);
 a = He(4) | 0;
 c[a >> 2] = 12;
 b = He(4) | 0;
 c[b >> 2] = 12;
 Ia(35232, 37144, 35240, 37093, 2, a | 0, 35240, 37154, 2, b | 0);
 b = He(4) | 0;
 c[b >> 2] = 0;
 a = He(4) | 0;
 c[a >> 2] = 0;
 Ia(35232, 37159, 35240, 37093, 2, b | 0, 35240, 37154, 2, a | 0);
 va(35232);
 return;
}

function je(a, b) {
 a = +a;
 b = b | 0;
 var d = 0, e = 0, f = 0;
 h[j >> 3] = a;
 d = c[j >> 2] | 0;
 e = c[j + 4 >> 2] | 0;
 f = fg(d | 0, e | 0, 52) | 0;
 U() | 0;
 switch (f & 2047) {
 case 0:
  {
   if (a != 0.0) {
    a = +je(a * 18446744073709551616.0, b);
    d = (c[b >> 2] | 0) + -64 | 0;
   } else d = 0;
   c[b >> 2] = d;
   break;
  }
 case 2047:
  break;
 default:
  {
   c[b >> 2] = (f & 2047) + -1022;
   c[j >> 2] = d;
   c[j + 4 >> 2] = e & -2146435073 | 1071644672;
   a = +h[j >> 3];
  }
 }
 return +a;
}

function Sd(b) {
 b = b | 0;
 var d = 0, e = 0, f = 0;
 f = b;
 a : do if (!(f & 3)) e = 5; else {
  d = f;
  while (1) {
   if (!(a[b >> 0] | 0)) {
    b = d;
    break a;
   }
   b = b + 1 | 0;
   d = b;
   if (!(d & 3)) {
    e = 5;
    break;
   }
  }
 } while (0);
 if ((e | 0) == 5) {
  while (1) {
   d = c[b >> 2] | 0;
   if (!((d & -2139062144 ^ -2139062144) & d + -16843009)) b = b + 4 | 0; else break;
  }
  if ((d & 255) << 24 >> 24) do b = b + 1 | 0; while ((a[b >> 0] | 0) != 0);
 }
 return b - f | 0;
}

function oe(b, e) {
 b = b | 0;
 e = e | 0;
 var f = 0, g = 0;
 f = 0;
 while (1) {
  if ((d[33328 + f >> 0] | 0) == (b | 0)) {
   g = 4;
   break;
  }
  f = f + 1 | 0;
  if ((f | 0) == 87) {
   b = 87;
   g = 5;
   break;
  }
 }
 if ((g | 0) == 4) if (!f) f = 33424; else {
  b = f;
  g = 5;
 }
 if ((g | 0) == 5) {
  f = 33424;
  do {
   do {
    g = f;
    f = f + 1 | 0;
   } while ((a[g >> 0] | 0) != 0);
   b = b + -1 | 0;
  } while ((b | 0) != 0);
 }
 return pe(f, c[e + 20 >> 2] | 0) | 0;
}

function fd(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0, j = 0;
 f = k;
 k = k + 112 | 0;
 h = f;
 j = f + 80 | 0;
 i = f + 48 | 0;
 g = f + 32 | 0;
 c[b >> 2] = 0;
 c[b + 4 >> 2] = 0;
 c[b + 8 >> 2] = 0;
 Wc(d, j, 32, 0, h) | 0;
 Wc(e, i, 32, 0, h) | 0;
 Uc(j, i, h);
 Yc(g, h, 32, 0);
 a[b >> 0] = 0;
 a[b + 11 >> 0] = 0;
 Ve(b, 0);
 c[b >> 2] = c[g >> 2];
 c[b + 4 >> 2] = c[g + 4 >> 2];
 c[b + 8 >> 2] = c[g + 8 >> 2];
 k = f;
 return;
}

function Qc(a, b) {
 a = a | 0;
 b = b | 0;
 if ((c[9964] | 0) != 1) ha(36722, 36694, 93, 36750);
 c[9964] = 2;
 if (!a) if ((c[9964] | 0) == 2) {
  c[9964] = 1;
  return;
 } else ha(36772, 36694, 98, 36750);
 Kc(40464);
 if (a >>> 0 >= 137) do {
  ig(b | 0, 40464, 136) | 0;
  b = b + 136 | 0;
  a = a + -136 | 0;
  Kc(40464);
 } while (a >>> 0 >= 137);
 ig(b | 0, 40464, a | 0) | 0;
 if ((c[9964] | 0) == 2) {
  c[9964] = 1;
  return;
 } else ha(36772, 36694, 108, 36750);
}

function Yc(b, e, f, g) {
 b = b | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 var h = 0, i = 0, j = 0;
 c[b >> 2] = 0;
 c[b + 4 >> 2] = 0;
 c[b + 8 >> 2] = 0;
 if ((f | 0) == 0 & (g | 0) == 0) return;
 h = 0;
 i = 0;
 do {
  j = e + i | 0;
  Xe(b, a[36991 + ((d[j >> 0] | 0) >>> 4) >> 0] | 0);
  Xe(b, a[36991 + (a[j >> 0] & 15) >> 0] | 0);
  i = $f(i | 0, h | 0, 1, 0) | 0;
  h = U() | 0;
 } while (h >>> 0 < g >>> 0 | (h | 0) == (g | 0) & i >>> 0 < f >>> 0);
 return;
}

function vd(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0;
 i = b + 4 | 0;
 f = c[i >> 2] | 0;
 g = c[b >> 2] | 0;
 h = (f - g | 0) / 12 | 0;
 if (h >>> 0 < d >>> 0) {
  Dd(b, d - h | 0, e);
  return;
 }
 if (h >>> 0 <= d >>> 0) return;
 b = g + (d * 12 | 0) | 0;
 if ((b | 0) != (f | 0)) do {
  f = f + -12 | 0;
  if ((a[f + 11 >> 0] | 0) < 0) Ie(c[f >> 2] | 0);
 } while ((f | 0) != (b | 0));
 c[i >> 2] = b;
 return;
}

function ee(a, b, c, d, e) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0;
 g = k;
 k = k + 256 | 0;
 f = g;
 if ((c | 0) > (d | 0) & (e & 73728 | 0) == 0) {
  e = c - d | 0;
  kg(f | 0, b << 24 >> 24 | 0, (e >>> 0 < 256 ? e : 256) | 0) | 0;
  if (e >>> 0 > 255) {
   b = c - d | 0;
   do {
    Zd(a, f, 256);
    e = e + -256 | 0;
   } while (e >>> 0 > 255);
   e = b & 255;
  }
  Zd(a, f, e);
 }
 k = g;
 return;
}

function Oc() {
 var a = 0, b = 0, d = 0, e = 0, f = 0;
 f = k;
 k = k + 16 | 0;
 e = we(36667, 524544, f) | 0;
 a = ye(e, 40464, 32) | 0;
 if ((a | 0) != 32) {
  b = 32;
  d = 40464;
  do {
   if ((a | 0) >= 0) {
    b = b - a | 0;
    d = (a | 0) == 0 ? d : d + a | 0;
   }
   a = ye(e, d, b) | 0;
  } while ((b | 0) != (a | 0));
 }
 Wd(e) | 0;
 if (!(c[9964] | 0)) {
  c[9964] = 1;
  k = f;
  return;
 } else ha(36680, 36694, 86, 36710);
}

function Sf(b, d, e, f) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 var g = 0, h = 0;
 a : do if (kf(b, c[d + 8 >> 2] | 0, 0) | 0) lf(0, d, e, f); else {
  h = c[b + 12 >> 2] | 0;
  g = b + 16 + (h << 3) | 0;
  Tf(b + 16 | 0, d, e, f);
  if ((h | 0) > 1) {
   h = d + 54 | 0;
   b = b + 24 | 0;
   do {
    Tf(b, d, e, f);
    if (a[h >> 0] | 0) break a;
    b = b + 8 | 0;
   } while (b >>> 0 < g >>> 0);
  }
 } while (0);
 return;
}

function lf(b, d, e, f) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 var g = 0;
 b = d + 16 | 0;
 g = c[b >> 2] | 0;
 do if (!g) {
  c[b >> 2] = e;
  c[d + 24 >> 2] = f;
  c[d + 36 >> 2] = 1;
 } else {
  if ((g | 0) != (e | 0)) {
   f = d + 36 | 0;
   c[f >> 2] = (c[f >> 2] | 0) + 1;
   c[d + 24 >> 2] = 2;
   a[d + 54 >> 0] = 1;
   break;
  }
  b = d + 24 | 0;
  if ((c[b >> 2] | 0) == 2) c[b >> 2] = f;
 } while (0);
 return;
}

function cd(a) {
 a = a | 0;
 var b = 0, d = 0, e = 0;
 b = k;
 k = k + 32 | 0;
 e = b;
 Ub[a & 31](e);
 a = He(24) | 0;
 c[a >> 2] = c[e >> 2];
 c[a + 4 >> 2] = c[e + 4 >> 2];
 c[a + 8 >> 2] = c[e + 8 >> 2];
 c[e >> 2] = 0;
 c[e + 4 >> 2] = 0;
 c[e + 8 >> 2] = 0;
 d = a + 12 | 0;
 e = e + 12 | 0;
 c[d >> 2] = c[e >> 2];
 c[d + 4 >> 2] = c[e + 4 >> 2];
 c[d + 8 >> 2] = c[e + 8 >> 2];
 k = b;
 return a | 0;
}

function Qe(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0;
 g = k;
 k = k + 16 | 0;
 f = g;
 if (e >>> 0 > 4294967279) Oe(b);
 if (e >>> 0 < 11) a[b + 11 >> 0] = e; else {
  i = e + 16 & -16;
  h = He(i) | 0;
  c[b >> 2] = h;
  c[b + 8 >> 2] = i | -2147483648;
  c[b + 4 >> 2] = e;
  b = h;
 }
 De(b, d, e) | 0;
 a[f >> 0] = 0;
 Ee(b + e | 0, f);
 k = g;
 return;
}

function te(b, c) {
 b = b | 0;
 c = c | 0;
 var d = 0, e = 0;
 d = a[b >> 0] | 0;
 e = a[c >> 0] | 0;
 if (d << 24 >> 24 == 0 ? 1 : d << 24 >> 24 != e << 24 >> 24) b = e; else {
  do {
   b = b + 1 | 0;
   c = c + 1 | 0;
   d = a[b >> 0] | 0;
   e = a[c >> 0] | 0;
  } while (!(d << 24 >> 24 == 0 ? 1 : d << 24 >> 24 != e << 24 >> 24));
  b = e;
 }
 return (d & 255) - (b & 255) | 0;
}

function nd(b, d) {
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0;
 d = d + (c[b >> 2] | 0) | 0;
 b = a[d + 11 >> 0] | 0;
 if (b << 24 >> 24 < 0) {
  f = c[d + 4 >> 2] | 0;
  e = Be(f + 4 | 0) | 0;
  c[e >> 2] = f;
  b = c[d >> 2] | 0;
  d = f;
 } else {
  f = b & 255;
  e = Be(f + 4 | 0) | 0;
  c[e >> 2] = f;
  b = d;
  d = f;
 }
 ig(e + 4 | 0, b | 0, d | 0) | 0;
 return e | 0;
}

function ve(b) {
 b = b | 0;
 var d = 0, e = 0;
 d = b + 74 | 0;
 e = a[d >> 0] | 0;
 a[d >> 0] = e + 255 | e;
 d = c[b >> 2] | 0;
 if (!(d & 8)) {
  c[b + 8 >> 2] = 0;
  c[b + 4 >> 2] = 0;
  e = c[b + 44 >> 2] | 0;
  c[b + 28 >> 2] = e;
  c[b + 20 >> 2] = e;
  c[b + 16 >> 2] = e + (c[b + 48 >> 2] | 0);
  b = 0;
 } else {
  c[b >> 2] = d | 32;
  b = -1;
 }
 return b | 0;
}

function qd(b) {
 b = b | 0;
 var d = 0, e = 0, f = 0;
 if (!b) return;
 e = c[b >> 2] | 0;
 if (e | 0) {
  f = b + 4 | 0;
  d = c[f >> 2] | 0;
  if ((d | 0) == (e | 0)) d = e; else {
   do {
    d = d + -12 | 0;
    if ((a[d + 11 >> 0] | 0) < 0) Ie(c[d >> 2] | 0);
   } while ((d | 0) != (e | 0));
   d = c[b >> 2] | 0;
  }
  c[f >> 2] = e;
  Ie(d);
 }
 Ie(b);
 return;
}

function Uc(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0;
 i = k;
 k = k + 592 | 0;
 d = i + 560 | 0;
 e = i + 440 | 0;
 f = i + 280 | 0;
 g = i + 120 | 0;
 h = i;
 if (!(Jc(b) | 0)) {
  Lc(a, 32, d);
  Dc(e, d);
  Cc(f, e);
  kc(g, f);
  Ac(h, b, g);
  yc(c, h);
  k = i;
  return;
 } else ha(36875, 36786, 346, 37056);
}

function Nd(a, b, d) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0;
 f = k;
 k = k + 32 | 0;
 g = f;
 e = f + 20 | 0;
 c[g >> 2] = c[a + 60 >> 2];
 c[g + 4 >> 2] = 0;
 c[g + 8 >> 2] = b;
 c[g + 12 >> 2] = e;
 c[g + 16 >> 2] = d;
 if ((Od(pa(140, g | 0) | 0) | 0) < 0) {
  c[e >> 2] = -1;
  a = -1;
 } else a = c[e >> 2] | 0;
 k = f;
 return a | 0;
}

function Cc(a, b) {
 a = a | 0;
 b = b | 0;
 var c = 0, d = 0, e = 0, f = 0, g = 0, h = 0;
 c = k;
 k = k + 128 | 0;
 d = c;
 hc(a, b);
 b = a + 120 | 0;
 ec(d, a, b);
 h = d + 40 | 0;
 g = a + 40 | 0;
 e = a + 80 | 0;
 ec(h, g, e);
 f = d + 80 | 0;
 ec(f, e, b);
 hc(a, d);
 ec(d, a, b);
 ec(h, g, e);
 ec(f, e, b);
 hc(a, d);
 k = c;
 return;
}

function Sc(b, c) {
 b = b | 0;
 c = c | 0;
 var d = 0, e = 0, f = 0, g = 0, h = 0;
 f = k;
 k = k + 224 | 0;
 g = f;
 d = f + 64 | 0;
 Fe(39860);
 Qc(64, g);
 zc(g);
 e = c;
 h = e + 32 | 0;
 do {
  a[e >> 0] = a[g >> 0] | 0;
  e = e + 1 | 0;
  g = g + 1 | 0;
 } while ((e | 0) < (h | 0));
 vc(d, c);
 tc(b, d);
 Ge(39860);
 k = f;
 return;
}

function yc(b, c) {
 b = b | 0;
 c = c | 0;
 var d = 0, e = 0, f = 0, g = 0, h = 0;
 d = k;
 k = k + 176 | 0;
 e = d + 144 | 0;
 h = d + 96 | 0;
 f = d + 48 | 0;
 g = d;
 uc(h, c + 80 | 0);
 ec(f, c, h);
 ec(g, c + 40 | 0, h);
 sc(b, g);
 sc(e, f);
 c = b + 31 | 0;
 a[c >> 0] = a[c >> 0] ^ a[e >> 0] << 7 & 255;
 k = d;
 return;
}

function tc(b, c) {
 b = b | 0;
 c = c | 0;
 var d = 0, e = 0, f = 0, g = 0, h = 0;
 d = k;
 k = k + 176 | 0;
 e = d + 144 | 0;
 h = d + 96 | 0;
 f = d + 48 | 0;
 g = d;
 uc(h, c + 80 | 0);
 ec(f, c, h);
 ec(g, c + 40 | 0, h);
 sc(b, g);
 sc(e, f);
 c = b + 31 | 0;
 a[c >> 0] = a[c >> 0] ^ a[e >> 0] << 7 & 255;
 k = d;
 return;
}

function Uf(a, b, d, e, f, g) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 var h = 0, i = 0;
 i = c[a + 4 >> 2] | 0;
 h = i >> 8;
 if (i & 1) h = c[(c[e >> 2] | 0) + h >> 2] | 0;
 a = c[a >> 2] | 0;
 Zb[c[(c[a >> 2] | 0) + 20 >> 2] & 7](a, b, d, e + h | 0, (i & 2 | 0) == 0 ? 2 : f, g);
 return;
}

function jg(b, c, d) {
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var e = 0;
 if ((c | 0) < (b | 0) & (b | 0) < (c + d | 0)) {
  e = b;
  c = c + d | 0;
  b = b + d | 0;
  while ((d | 0) > 0) {
   b = b - 1 | 0;
   c = c - 1 | 0;
   d = d - 1 | 0;
   a[b >> 0] = a[c >> 0] | 0;
  }
  b = e;
 } else ig(b, c, d) | 0;
 return b | 0;
}

function Zf(a, b) {
 a = a | 0;
 b = b | 0;
 var c = 0, d = 0, e = 0, f = 0;
 f = a & 65535;
 e = b & 65535;
 c = L(e, f) | 0;
 d = a >>> 16;
 a = (c >>> 16) + (L(e, d) | 0) | 0;
 e = b >>> 16;
 b = L(e, f) | 0;
 return (T((a >>> 16) + (L(e, d) | 0) + (((a & 65535) + b | 0) >>> 16) | 0), a + b << 16 | c & 65535 | 0) | 0;
}

function Vf(a, b, d, e, f) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 var g = 0, h = 0;
 h = c[a + 4 >> 2] | 0;
 g = h >> 8;
 if (h & 1) g = c[(c[d >> 2] | 0) + g >> 2] | 0;
 a = c[a >> 2] | 0;
 Yb[c[(c[a >> 2] | 0) + 24 >> 2] & 3](a, b, d + g | 0, (h & 2 | 0) == 0 ? 2 : e, f);
 return;
}

function ng(a) {
 a = a | 0;
 var b = 0, d = 0;
 d = c[i >> 2] | 0;
 b = d + a | 0;
 if ((a | 0) > 0 & (b | 0) < (d | 0) | (b | 0) < 0) {
  V() | 0;
  oa(12);
  return -1;
 }
 c[i >> 2] = b;
 if ((b | 0) > (S() | 0)) if (!(R() | 0)) {
  c[i >> 2] = d;
  oa(12);
  return -1;
 }
 return d | 0;
}

function Tf(a, b, d, e) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0;
 g = c[a + 4 >> 2] | 0;
 f = g >> 8;
 if (g & 1) f = c[(c[d >> 2] | 0) + f >> 2] | 0;
 a = c[a >> 2] | 0;
 Xb[c[(c[a >> 2] | 0) + 28 >> 2] & 7](a, b, d + f | 0, (g & 2 | 0) == 0 ? 2 : e);
 return;
}

function ae(b, c, e, f) {
 b = b | 0;
 c = c | 0;
 e = e | 0;
 f = f | 0;
 if (!((b | 0) == 0 & (c | 0) == 0)) do {
  e = e + -1 | 0;
  a[e >> 0] = d[33312 + (b & 15) >> 0] | 0 | f;
  b = fg(b | 0, c | 0, 4) | 0;
  c = U() | 0;
 } while (!((b | 0) == 0 & (c | 0) == 0));
 return e | 0;
}

function _d(b) {
 b = b | 0;
 var d = 0, e = 0;
 if (!(Rd(a[c[b >> 2] >> 0] | 0) | 0)) d = 0; else {
  d = 0;
  do {
   e = c[b >> 2] | 0;
   d = (d * 10 | 0) + -48 + (a[e >> 0] | 0) | 0;
   e = e + 1 | 0;
   c[b >> 2] = e;
  } while ((Rd(a[e >> 0] | 0) | 0) != 0);
 }
 return d | 0;
}

function Pe(b, d) {
 b = b | 0;
 d = d | 0;
 c[b >> 2] = 0;
 c[b + 4 >> 2] = 0;
 c[b + 8 >> 2] = 0;
 if ((a[d + 11 >> 0] | 0) < 0) Qe(b, c[d >> 2] | 0, c[d + 4 >> 2] | 0); else {
  c[b >> 2] = c[d >> 2];
  c[b + 4 >> 2] = c[d + 4 >> 2];
  c[b + 8 >> 2] = c[d + 8 >> 2];
 }
 return;
}

function jd(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var e = 0, f = 0, g = 0, h = 0;
 e = k;
 k = k + 96 | 0;
 f = e;
 h = e + 64 | 0;
 g = e + 32 | 0;
 Wc(b, h, 32, 0, f) | 0;
 Wc(d, g, 32, 0, f) | 0;
 Tc(h, c, g, f) | 0;
 Yc(a, f, 32, 0);
 k = e;
 return;
}

function Lc(b, c, d) {
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var e = 0, f = 0;
 e = k;
 k = k + 208 | 0;
 f = e;
 Nc(b, c, f);
 b = f;
 c = d + 32 | 0;
 do {
  a[d >> 0] = a[b >> 0] | 0;
  d = d + 1 | 0;
  b = b + 1 | 0;
 } while ((d | 0) < (c | 0));
 k = e;
 return;
}

function qf(a, b, d, e, f, g) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 if (kf(a, c[b + 8 >> 2] | 0, g) | 0) nf(0, b, d, e, f); else {
  a = c[a + 8 >> 2] | 0;
  Zb[c[(c[a >> 2] | 0) + 20 >> 2] & 7](a, b, d, e, f, g);
 }
 return;
}

function wf() {
 var a = 0, b = 0;
 a = $e() | 0;
 if (a | 0) {
  a = c[a >> 2] | 0;
  if (a | 0) {
   b = a + 48 | 0;
   if ((c[b >> 2] & -256 | 0) == 1126902528 ? (c[b + 4 >> 2] | 0) == 1129074247 : 0) xf(c[a + 12 >> 2] | 0);
  }
 }
 xf(yf() | 0);
}

function Xf(a, b, d) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0;
 f = k;
 k = k + 16 | 0;
 e = f;
 c[e >> 2] = c[d >> 2];
 a = Qb[c[(c[a >> 2] | 0) + 16 >> 2] & 15](a, b, e) | 0;
 if (a) c[d >> 2] = c[e >> 2];
 k = f;
 return a & 1 | 0;
}

function be(b, c, d) {
 b = b | 0;
 c = c | 0;
 d = d | 0;
 if (!((b | 0) == 0 & (c | 0) == 0)) do {
  d = d + -1 | 0;
  a[d >> 0] = b & 7 | 48;
  b = fg(b | 0, c | 0, 3) | 0;
  c = U() | 0;
 } while (!((b | 0) == 0 & (c | 0) == 0));
 return d | 0;
}

function Je(a, b) {
 a = a | 0;
 b = b | 0;
 var d = 0, e = 0;
 e = Sd(b) | 0;
 d = He(e + 13 | 0) | 0;
 c[d >> 2] = e;
 c[d + 4 >> 2] = e;
 c[d + 8 >> 2] = 0;
 d = Ke(d) | 0;
 ig(d | 0, b | 0, e + 1 | 0) | 0;
 c[a >> 2] = d;
 return;
}

function td(a, b) {
 a = a | 0;
 b = b | 0;
 var d = 0, e = 0;
 d = a + 4 | 0;
 e = c[d >> 2] | 0;
 if ((e | 0) == (c[a + 8 >> 2] | 0)) {
  Ed(a, b);
  return;
 } else {
  Pe(e, b);
  c[d >> 2] = (c[d >> 2] | 0) + 12;
  return;
 }
}

function Re(b, d) {
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0;
 if ((b | 0) != (d | 0)) {
  e = a[d + 11 >> 0] | 0;
  f = e << 24 >> 24 < 0;
  Se(b, f ? c[d >> 2] | 0 : d, f ? c[d + 4 >> 2] | 0 : e & 255) | 0;
 }
 return b | 0;
}

function sf(a, b, d, e) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 e = e | 0;
 if (kf(a, c[b + 8 >> 2] | 0, 0) | 0) lf(0, b, d, e); else {
  a = c[a + 8 >> 2] | 0;
  Xb[c[(c[a >> 2] | 0) + 28 >> 2] & 7](a, b, d, e);
 }
 return;
}

function ye(a, b, d) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0;
 e = k;
 k = k + 16 | 0;
 f = e;
 c[f >> 2] = a;
 c[f + 4 >> 2] = b;
 c[f + 8 >> 2] = d;
 d = Od(sa(3, f | 0) | 0) | 0;
 k = e;
 return d | 0;
}

function _f(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var e = 0, f = 0;
 e = a;
 f = c;
 c = Zf(e, f) | 0;
 a = U() | 0;
 return (T((L(b, f) | 0) + (L(d, e) | 0) + a | a & 0 | 0), c | 0 | 0) | 0;
}

function kc(a, b) {
 a = a | 0;
 b = b | 0;
 var c = 0, d = 0, e = 0;
 d = b + 120 | 0;
 ec(a, b, d);
 c = b + 40 | 0;
 e = b + 80 | 0;
 ec(a + 40 | 0, c, e);
 ec(a + 80 | 0, e, d);
 ec(a + 120 | 0, b, c);
 return;
}

function Ad(a, b, d) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 var e = 0, f = 0;
 e = k;
 k = k + 16 | 0;
 f = e;
 Wb[c[a >> 2] & 7](f, b, d);
 La(c[f >> 2] | 0);
 d = c[f >> 2] | 0;
 Ka(d | 0);
 k = e;
 return d | 0;
}

function eg(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 if ((c | 0) < 32) {
  T(b >> c | 0);
  return a >>> c | (b & (1 << c) - 1) << 32 - c;
 }
 T(((b | 0) < 0 ? -1 : 0) | 0);
 return b >> c - 32 | 0;
}

function yd(a, b) {
 a = a | 0;
 b = b | 0;
 var d = 0, e = 0;
 d = c[a >> 2] | 0;
 e = c[a + 4 >> 2] | 0;
 a = b + (e >> 1) | 0;
 if (e & 1) d = c[(c[a >> 2] | 0) + d >> 2] | 0;
 return Ob[d & 7](a) | 0;
}

function He(a) {
 a = a | 0;
 var b = 0;
 b = (a | 0) == 0 ? 1 : a;
 while (1) {
  a = Be(b) | 0;
  if (a | 0) break;
  a = Wf() | 0;
  if (!a) {
   a = 0;
   break;
  }
  Tb[a & 3]();
 }
 return a | 0;
}

function Ef(a) {
 a = a | 0;
 var b = 0, d = 0;
 if (Me(a) | 0) {
  a = Ff(c[a >> 2] | 0) | 0;
  d = a + 8 | 0;
  b = c[d >> 2] | 0;
  c[d >> 2] = b + -1;
  if ((b + -1 | 0) < 0) Ie(a);
 }
 return;
}

function md(b) {
 b = b | 0;
 var d = 0;
 if (!b) return;
 d = b + 12 | 0;
 if ((a[d + 11 >> 0] | 0) < 0) Ie(c[d >> 2] | 0);
 if ((a[b + 11 >> 0] | 0) < 0) Ie(c[b >> 2] | 0);
 Ie(b);
 return;
}

function gg(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 if ((c | 0) < 32) {
  T(b << c | (a & (1 << c) - 1 << 32 - c) >>> 32 - c | 0);
  return a << c;
 }
 T(a << c - 32 | 0);
 return 0;
}

function Wd(a) {
 a = a | 0;
 var b = 0, d = 0;
 b = k;
 k = k + 16 | 0;
 d = b;
 c[d >> 2] = Qd(a) | 0;
 a = ua(6, d | 0) | 0;
 a = Od((a | 0) == -4 ? 0 : a) | 0;
 k = b;
 return a | 0;
}

function mf(a, b, d, e) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 e = e | 0;
 if ((c[b + 4 >> 2] | 0) == (d | 0)) {
  a = b + 28 | 0;
  if ((c[a >> 2] | 0) != 1) c[a >> 2] = e;
 }
 return;
}

function tg(a, b, c, d, e, f, g) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 return Sb[a & 1](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0) | 0;
}

function fg(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 if ((c | 0) < 32) {
  T(b >>> c | 0);
  return a >>> c | (b & (1 << c) - 1) << 32 - c;
 }
 T(0);
 return b >>> c - 32 | 0;
}

function ld() {
 var a = 0;
 a = He(24) | 0;
 c[a >> 2] = 0;
 c[a + 4 >> 2] = 0;
 c[a + 8 >> 2] = 0;
 c[a + 12 >> 2] = 0;
 c[a + 16 >> 2] = 0;
 c[a + 20 >> 2] = 0;
 return a | 0;
}

function pc(a, b) {
 a = a | 0;
 b = b | 0;
 var c = 0, d = 0;
 c = b + 120 | 0;
 ec(a, b, c);
 d = b + 80 | 0;
 ec(a + 40 | 0, b + 40 | 0, d);
 ec(a + 80 | 0, d, c);
 return;
}

function Ld(a) {
 a = a | 0;
 var b = 0, d = 0;
 b = k;
 k = k + 16 | 0;
 d = b;
 c[d >> 2] = Qd(c[a + 60 >> 2] | 0) | 0;
 a = Od(ua(6, d | 0) | 0) | 0;
 k = b;
 return a | 0;
}

function $e() {
 var a = 0, b = 0;
 a = k;
 k = k + 16 | 0;
 if (!(Ta(40452, 2) | 0)) {
  b = Ra(c[10114] | 0) | 0;
  k = a;
  return b | 0;
 } else af(39435, a);
 return 0;
}

function Ag(a, b, c, d, e, f, g) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 Zb[a & 7](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0);
}

function gf(a, b, d, e, f, g) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 g = g | 0;
 if (kf(a, c[b + 8 >> 2] | 0, g) | 0) nf(0, b, d, e, f);
 return;
}

function xe(a) {
 a = a | 0;
 var b = 0, c = 0;
 b = (Sd(a) | 0) + 1 | 0;
 c = Be(b) | 0;
 if (!c) a = 0; else a = ig(c | 0, a | 0, b | 0) | 0;
 return a | 0;
}

function ag(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 d = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (T(d | 0), a - c >>> 0 | 0) | 0;
}

function $f(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 c = a + c >>> 0;
 return (T(b + d + (c >>> 0 < a >>> 0 | 0) >>> 0 | 0), c | 0) | 0;
}

function af(a, b) {
 a = a | 0;
 b = b | 0;
 var d = 0;
 d = k;
 k = k + 16 | 0;
 c[d >> 2] = b;
 b = c[8965] | 0;
 Xd(b, a, d) | 0;
 Ae(10, b) | 0;
 Oa();
}

function zg(a, b, c, d, e, f) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 Yb[a & 3](b | 0, c | 0, d | 0, e | 0, f | 0);
}

function vf(a) {
 a = a | 0;
 var b = 0;
 b = k;
 k = k + 16 | 0;
 Ce(a);
 if (!(Ua(c[10114] | 0, 0) | 0)) {
  k = b;
  return;
 } else af(39534, b);
}

function qe(a, b) {
 a = a | 0;
 b = b | 0;
 if (!b) b = 0; else b = re(c[b >> 2] | 0, c[b + 4 >> 2] | 0, a) | 0;
 return ((b | 0) == 0 ? a : b) | 0;
}

function sg(a, b, c, d, e) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 e = e | 0;
 return Rb[a & 3](b | 0, c | 0, d | 0, e | 0) | 0;
}

function jf(a, b, d, e) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 e = e | 0;
 if (kf(a, c[b + 8 >> 2] | 0, 0) | 0) lf(0, b, d, e);
 return;
}

function Ec(b) {
 b = b | 0;
 var c = 0;
 c = b + 32 | 0;
 do {
  a[b >> 0] = 0;
  b = b + 1 | 0;
 } while ((b | 0) < (c | 0));
 return;
}

function Of(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 if (kf(a, b, 0) | 0) a = 1; else a = kf(b, 35680, 0) | 0;
 return a | 0;
}

function Pc() {
 if ((c[9964] | 0) == 1) {
  c[9964] = 0;
  kg(40464, 0, 200) | 0;
  return;
 } else ha(36722, 36694, 76, 36736);
}

function yg(a, b, c, d, e) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 e = e | 0;
 Xb[a & 7](b | 0, c | 0, d | 0, e | 0);
}

function uf() {
 var a = 0;
 a = k;
 k = k + 16 | 0;
 if (!(Sa(40456, 17) | 0)) {
  k = a;
  return;
 } else af(39484, a);
}

function Gg(a, b, c, d, e, f) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 P(5);
 return 0;
}

function rg(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 return Qb[a & 15](b | 0, c | 0, d | 0) | 0;
}

function Bd(a, b, d) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 Re((c[a >> 2] | 0) + (b * 12 | 0) | 0, d) | 0;
 return 1;
}

function sd() {
 var a = 0;
 a = He(12) | 0;
 c[a >> 2] = 0;
 c[a + 4 >> 2] = 0;
 c[a + 8 >> 2] = 0;
 return a | 0;
}

function Od(a) {
 a = a | 0;
 if (a >>> 0 > 4294963200) {
  c[(Pd() | 0) >> 2] = 0 - a;
  a = -1;
 }
 return a | 0;
}

function hg(a) {
 a = a | 0;
 return (a & 255) << 24 | (a >> 8 & 255) << 16 | (a >> 16 & 255) << 8 | a >>> 24 | 0;
}

function Te(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 if (c | 0) jg(a | 0, b | 0, c | 0) | 0;
 return a | 0;
}

function De(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 if (c | 0) ig(a | 0, b | 0, c | 0) | 0;
 return a | 0;
}

function se(a, b) {
 a = a | 0;
 b = b | 0;
 var c = 0;
 c = hg(a | 0) | 0;
 return ((b | 0) == 0 ? a : c) | 0;
}

function he(a) {
 a = +a;
 var b = 0;
 h[j >> 3] = a;
 b = c[j >> 2] | 0;
 T(c[j + 4 >> 2] | 0);
 return b | 0;
}

function Ng(a, b, c, d, e, f) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 e = e | 0;
 f = f | 0;
 P(12);
}

function Zd(a, b, d) {
 a = a | 0;
 b = b | 0;
 d = d | 0;
 if (!(c[a >> 2] & 32)) ue(b, d, a) | 0;
 return;
}

function Yf(a) {
 a = a | 0;
 if (!a) a = 0; else a = (of(a, 35536, 35640, 0) | 0) != 0 & 1;
 return a | 0;
}

function xg(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 Wb[a & 7](b | 0, c | 0, d | 0);
}

function dg(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 return cg(a, b, c, d, 0) | 0;
}

function fe(a, b) {
 a = a | 0;
 b = b | 0;
 if (!a) a = 0; else a = ke(a, b, 0) | 0;
 return a | 0;
}
function _b(a) {
 a = a | 0;
 var b = 0;
 b = k;
 k = k + a | 0;
 k = k + 15 & -16;
 return b | 0;
}

function Mg(a, b, c, d, e) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 e = e | 0;
 P(11);
}

function qg(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 return Pb[a & 3](b | 0, c | 0) | 0;
}

function xf(a) {
 a = a | 0;
 var b = 0;
 b = k;
 k = k + 16 | 0;
 Tb[a & 3]();
 af(39587, b);
}

function xd(a) {
 a = a | 0;
 return ((c[a + 4 >> 2] | 0) - (c[a >> 2] | 0) | 0) / 12 | 0 | 0;
}

function Ne(a, b) {
 a = a | 0;
 b = b | 0;
 c[a >> 2] = 36344;
 Je(a + 4 | 0, b);
 return;
}

function Le(a, b) {
 a = a | 0;
 b = b | 0;
 c[a >> 2] = 36324;
 Je(a + 4 | 0, b);
 return;
}

function Fg(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 P(4);
 return 0;
}

function kf(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 return (a | 0) == (b | 0) | 0;
}

function wg(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 Vb[a & 3](b | 0, c | 0);
}

function Fe(a) {
 a = a | 0;
 a = lg(a | 0) | 0;
 if (!a) return; else Ye(a, 39142);
}

function Lf(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 return kf(a, b, 0) | 0;
}

function Lg(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 P(10);
}

function bg(a) {
 a = a | 0;
 return (a ? 31 - (O(a ^ a - 1) | 0) | 0 : 32) | 0;
}

function Wf() {
 var a = 0;
 a = c[10115] | 0;
 c[10115] = a + 0;
 return a | 0;
}

function Ee(b, c) {
 b = b | 0;
 c = c | 0;
 a[b >> 0] = a[c >> 0] | 0;
 return;
}

function yf() {
 var a = 0;
 a = c[9058] | 0;
 c[9058] = a + 0;
 return a | 0;
}

function de(a) {
 a = a | 0;
 return oe(a, c[(ne() | 0) + 188 >> 2] | 0) | 0;
}

function Eg(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 P(3);
 return 0;
}

function cc(a, b) {
 a = a | 0;
 b = b | 0;
 if (!m) {
  m = a;
  n = b;
 }
}

function pg(a, b) {
 a = a | 0;
 b = b | 0;
 return Ob[a & 7](b | 0) | 0;
}

function Gf(a) {
 a = a | 0;
 c[a >> 2] = 36344;
 Ef(a + 4 | 0);
 return;
}

function Af(a) {
 a = a | 0;
 c[a >> 2] = 36324;
 Ef(a + 4 | 0);
 return;
}

function Rd(a) {
 a = a | 0;
 return (a + -48 | 0) >>> 0 < 10 | 0;
}

function pe(a, b) {
 a = a | 0;
 b = b | 0;
 return qe(a, b) | 0;
}

function Kg(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 P(9);
}

function vg(a, b) {
 a = a | 0;
 b = b | 0;
 Ub[a & 31](b | 0);
}

function Kd(a) {
 a = a | 0;
 return xe(c[a + 4 >> 2] | 0) | 0;
}

function ie(a, b) {
 a = +a;
 b = b | 0;
 return +(+je(a, b));
}

function Dg(a, b) {
 a = a | 0;
 b = b | 0;
 P(2);
 return 0;
}

function bc(a, b) {
 a = a | 0;
 b = b | 0;
 k = a;
 l = b;
}

function If(a) {
 a = a | 0;
 return Df(a + 4 | 0) | 0;
}

function Cf(a) {
 a = a | 0;
 return Df(a + 4 | 0) | 0;
}

function rd(a) {
 a = a | 0;
 return Nb[a & 3]() | 0;
}

function pf(a) {
 a = a | 0;
 bf(a);
 Ie(a);
 return;
}

function og(a) {
 a = a | 0;
 return Nb[a & 3]() | 0;
}

function cf(a) {
 a = a | 0;
 bf(a);
 Ie(a);
 return;
}

function Pf(a) {
 a = a | 0;
 bf(a);
 Ie(a);
 return;
}

function Mf(a) {
 a = a | 0;
 bf(a);
 Ie(a);
 return;
}

function Kf(a) {
 a = a | 0;
 bf(a);
 Ie(a);
 return;
}

function Jf(a) {
 a = a | 0;
 Af(a);
 Ie(a);
 return;
}

function Hf(a) {
 a = a | 0;
 Gf(a);
 Ie(a);
 return;
}

function Ge(a) {
 a = a | 0;
 mg(a | 0) | 0;
 return;
}

function Bf(a) {
 a = a | 0;
 Af(a);
 Ie(a);
 return;
}

function Zc(a) {
 a = a | 0;
 ja(a | 0) | 0;
 wf();
}

function Df(a) {
 a = a | 0;
 return c[a >> 2] | 0;
}

function Ye(a, b) {
 a = a | 0;
 b = b | 0;
 Oa();
}

function Jg(a, b) {
 a = a | 0;
 b = b | 0;
 P(8);
}

function Kc(a) {
 a = a | 0;
 Mc(a, 24);
 return;
}

function Ff(a) {
 a = a | 0;
 return a + -12 | 0;
}

function Ke(a) {
 a = a | 0;
 return a + 12 | 0;
}

function Cg(a) {
 a = a | 0;
 P(1);
 return 0;
}

function Ie(a) {
 a = a | 0;
 Ce(a);
 return;
}

function pd(a) {
 a = a | 0;
 return 35272;
}

function Qd(a) {
 a = a | 0;
 return a | 0;
}

function ug(a) {
 a = a | 0;
 Tb[a & 3]();
}

function mg(a) {
 a = a | 0;
 return 0;
}

function lg(a) {
 a = a | 0;
 return 0;
}

function Ud(a) {
 a = a | 0;
 return 1;
}

function Me(a) {
 a = a | 0;
 return 1;
}

function zf(a) {
 a = a | 0;
 return;
}

function tf(a) {
 a = a | 0;
 return;
}

function ef(a) {
 a = a | 0;
 return;
}

function df(a) {
 a = a | 0;
 return;
}

function bf(a) {
 a = a | 0;
 return;
}

function Vd(a) {
 a = a | 0;
 return;
}

function ac(a) {
 a = a | 0;
 k = a;
}

function Ze(a) {
 a = a | 0;
 Oa();
}

function Oe(a) {
 a = a | 0;
 Oa();
}

function Ig(a) {
 a = a | 0;
 P(7);
}

function ne() {
 return me() | 0;
}

function le() {
 return me() | 0;
}

function Bg() {
 P(0);
 return 0;
}

function _c() {
 $c(0);
 return;
}

function Id() {
 Jd(0);
 return;
}

function me() {
 return 35988;
}

function Pd() {
 return 39952;
}

function $b() {
 return k | 0;
}

function Rc() {
 return;
}

function Hg() {
 P(6);
}

// EMSCRIPTEN_END_FUNCS

 var Nb = [ Bg, ld, sd, Bg ];
 var Ob = [ Cg, Ld, Cf, If, cd, pd, rd, xd ];
 var Pb = [ Dg, gd, nd, yd ];
 var Qb = [ Eg, Md, Nd, ff, Lf, Nf, ed, Ad, Bd, Eg, Eg, Eg, Eg, Eg, Eg, Eg ];
 var Rb = [ Fg, id, Cd, Fg ];
 var Sb = [ Gg, ad ];
 var Tb = [ Hg, _e, uf, Hg ];
 var Ub = [ Ig, bf, cf, df, ef, pf, Af, Bf, Gf, Hf, Jf, Kf, Mf, Pf, dd, md, qd, vf, Ig, Ig, Ig, Ig, Ig, Ig, Ig, Ig, Ig, Ig, Ig, Ig, Ig, Ig ];
 var Vb = [ Jg, hd, td, Jg ];
 var Wb = [ Kg, fd, od, ud, vd, zd, Kg, Kg ];
 var Xb = [ Lg, jf, sf, Sf, jd, wd, Lg, Lg ];
 var Yb = [ Mg, hf, rf, Rf ];
 var Zb = [ Ng, gf, qf, Qf, bd, Ng, Ng, Ng ];
 return {
  __GLOBAL__sub_I_bind_cpp: Id,
  __GLOBAL__sub_I_crypto_cpp: Rc,
  __GLOBAL__sub_I_turtlecoin_crypto_cpp: _c,
  ___cxa_can_catch: Xf,
  ___cxa_is_pointer_type: Yf,
  ___errno_location: Pd,
  ___getTypeName: Kd,
  ___muldi3: _f,
  ___udivdi3: dg,
  _bitshift64Ashr: eg,
  _bitshift64Lshr: fg,
  _bitshift64Shl: gg,
  _free: Ce,
  _i64Add: $f,
  _i64Subtract: ag,
  _init_random: Oc,
  _llvm_bswap_i32: hg,
  _malloc: Be,
  _memcpy: ig,
  _memmove: jg,
  _memset: kg,
  _pthread_mutex_lock: lg,
  _pthread_mutex_unlock: mg,
  _sbrk: ng,
  dynCall_i: og,
  dynCall_ii: pg,
  dynCall_iii: qg,
  dynCall_iiii: rg,
  dynCall_iiiii: sg,
  dynCall_iiiiiii: tg,
  dynCall_v: ug,
  dynCall_vi: vg,
  dynCall_vii: wg,
  dynCall_viii: xg,
  dynCall_viiii: yg,
  dynCall_viiiii: zg,
  dynCall_viiiiii: Ag,
  establishStackSpace: bc,
  setThrew: cc,
  stackAlloc: _b,
  stackRestore: ac,
  stackSave: $b
 };
})


// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var __GLOBAL__sub_I_crypto_cpp = Module["__GLOBAL__sub_I_crypto_cpp"] = asm["__GLOBAL__sub_I_crypto_cpp"];
var __GLOBAL__sub_I_turtlecoin_crypto_cpp = Module["__GLOBAL__sub_I_turtlecoin_crypto_cpp"] = asm["__GLOBAL__sub_I_turtlecoin_crypto_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _init_random = Module["_init_random"] = asm["_init_random"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
Module["asm"] = asm;
if (memoryInitializer) {
 if (!isDataURI(memoryInitializer)) {
  memoryInitializer = locateFile(memoryInitializer);
 }
 if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL || ENVIRONMENT_IS_REACT_NATIVE) {
  var data = Module["readBinary"](memoryInitializer);
  HEAPU8.set(data, GLOBAL_BASE);
 } else {
  addRunDependency("memory initializer");
  var applyMemoryInitializer = (function(data) {
   if (data.byteLength) data = new Uint8Array(data);
   HEAPU8.set(data, GLOBAL_BASE);
   if (Module["memoryInitializerRequest"]) delete Module["memoryInitializerRequest"].response;
   removeRunDependency("memory initializer");
  });
  function doBrowserLoad() {
   Module["readAsync"](memoryInitializer, applyMemoryInitializer, (function() {
    throw "could not load memory initializer " + memoryInitializer;
   }));
  }
  var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
  if (memoryInitializerBytes) {
   applyMemoryInitializer(memoryInitializerBytes.buffer);
  } else if (Module["memoryInitializerRequest"]) {
   function useRequest() {
    var request = Module["memoryInitializerRequest"];
    var response = request.response;
    if (request.status !== 200 && request.status !== 0) {
     var data = tryParseAsDataURI(Module["memoryInitializerRequestURL"]);
     if (data) {
      response = data.buffer;
     } else {
      console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: " + request.status + ", retrying " + memoryInitializer);
      doBrowserLoad();
      return;
     }
    }
    applyMemoryInitializer(response);
   }
   if (Module["memoryInitializerRequest"].response) {
    setTimeout(useRequest, 0);
   } else {
    Module["memoryInitializerRequest"].addEventListener("load", useRequest);
   }
  } else {
   doBrowserLoad();
  }
 }
}
function ExitStatus(status) {
 this.name = "ExitStatus";
 this.message = "Program terminated with exit(" + status + ")";
 this.status = status;
}
ExitStatus.prototype = new Error;
ExitStatus.prototype.constructor = ExitStatus;
dependenciesFulfilled = function runCaller() {
 if (!Module["calledRun"]) run();
 if (!Module["calledRun"]) dependenciesFulfilled = runCaller;
};
function run(args) {
 args = args || Module["arguments"];
 if (runDependencies > 0) {
  return;
 }
 preRun();
 if (runDependencies > 0) return;
 if (Module["calledRun"]) return;
 function doRun() {
  if (Module["calledRun"]) return;
  Module["calledRun"] = true;
  if (ABORT) return;
  ensureInitRuntime();
  preMain();
  if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
  postRun();
 }
 if (Module["setStatus"]) {
  Module["setStatus"]("Running...");
  setTimeout((function() {
   setTimeout((function() {
    Module["setStatus"]("");
   }), 1);
   doRun();
  }), 1);
 } else {
  doRun();
 }
}
Module["run"] = run;
function abort(what) {
 if (Module["onAbort"]) {
  Module["onAbort"](what);
 }
 if (what !== undefined) {
  out(what);
  err(what);
  what = JSON.stringify(what);
 } else {
  what = "";
 }
 ABORT = true;
 EXITSTATUS = 1;
 throw "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
}
Module["abort"] = abort;
if (Module["preInit"]) {
 if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
 while (Module["preInit"].length > 0) {
  Module["preInit"].pop()();
 }
}
Module["noExitRuntime"] = true;
run();





}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lib")
},{"_process":119,"buffer":48,"crypto":56,"fs":1,"path":112}],165:[function(require,module,exports){
// Copyright (c) 2015, emn178@gmail.com (https://github.com/emn178/js-sha3)
// Copyright (c) 2018, The TurtleCoin Developers
//
// Please see the included LICENSE file for more information.

'use strict'

var HEX_CHARS = '0123456789abcdef'.split('')
var SHAKE_PADDING = [31, 7936, 2031616, 520093696]
var KECCAK_PADDING = [1, 256, 65536, 16777216]
var PADDING = [6, 1536, 393216, 100663296]
var SHIFT = [0, 8, 16, 24]
var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
  0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
  2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
  2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
  2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648]
var BITS = [224, 256, 384, 512]
var SHAKE_BITS = [128, 256]
var OUTPUT_TYPES = ['hex', 'buffer', 'array']

var createOutputMethod = function (bits, padding, outputType) {
  return function (message) {
    return new Keccak(bits, padding, bits).update(message)[outputType]()
  }
}

var createShakeOutputMethod = function (bits, padding, outputType) {
  return function (message, outputBits) {
    return new Keccak(bits, padding, outputBits).update(message)[outputType]()
  }
}

var createMethod = function (bits, padding) {
  var method = createOutputMethod(bits, padding, 'hex')
  method.create = function () {
    return new Keccak(bits, padding, bits)
  }
  method.update = function (message) {
    return method.create().update(message)
  }
  for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
    var type = OUTPUT_TYPES[i]
    method[type] = createOutputMethod(bits, padding, type)
  }
  return method
}

var createShakeMethod = function (bits, padding) {
  var method = createShakeOutputMethod(bits, padding, 'hex')
  method.create = function (outputBits) {
    return new Keccak(bits, padding, outputBits)
  }
  method.update = function (message, outputBits) {
    return method.create(outputBits).update(message)
  }
  for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
    var type = OUTPUT_TYPES[i]
    method[type] = createShakeOutputMethod(bits, padding, type)
  }
  return method
}

var algorithms = [
  { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
  { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
  { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod }
]

var Sha3 = {}

for (var i = 0; i < algorithms.length; ++i) {
  var algorithm = algorithms[i]
  var bits = algorithm.bits
  for (var j = 0; j < bits.length; ++j) {
    var method = algorithm.createMethod(bits[j], algorithm.padding)
    Sha3[algorithm.name + '_' + bits[j]] = method
  }
}

function Keccak (bits, padding, outputBits) {
  this.blocks = []
  this.s = []
  this.padding = padding
  this.outputBits = outputBits
  this.reset = true
  this.block = 0
  this.start = 0
  this.blockCount = (1600 - (bits << 1)) >> 5
  this.byteCount = this.blockCount << 2
  this.outputBlocks = outputBits >> 5
  this.extraBytes = (outputBits & 31) >> 3

  for (var i = 0; i < 50; ++i) {
    this.s[i] = 0
  }
};

Keccak.prototype.update = function (message) {
  var notString = typeof (message) !== 'string'
  if (notString && message.constructor === ArrayBuffer) {
    message = new Uint8Array(message)
  }
  var length = message.length
  var blocks = this.blocks
  var byteCount = this.byteCount
  var blockCount = this.blockCount
  var index = 0
  var s = this.s
  var i
  var code

  while (index < length) {
    if (this.reset) {
      this.reset = false
      blocks[0] = this.block
      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0
      }
    }
    if (notString) {
      for (i = this.start; index < length && i < byteCount; ++index) {
        blocks[i >> 2] |= message[index] << SHIFT[i++ & 3]
      }
    } else {
      for (i = this.start; index < length && i < byteCount; ++index) {
        code = message.charCodeAt(index)
        if (code < 0x80) {
          blocks[i >> 2] |= code << SHIFT[i++ & 3]
        } else if (code < 0x800) {
          blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3]
          blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3]
        } else if (code < 0xd800 || code >= 0xe000) {
          blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3]
          blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3]
          blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3]
        } else {
          code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff))
          blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3]
          blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3]
          blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3]
          blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3]
        }
      }
    }
    this.lastByteIndex = i
    if (i >= byteCount) {
      this.start = i - byteCount
      this.block = blocks[blockCount]
      for (i = 0; i < blockCount; ++i) {
        s[i] ^= blocks[i]
      }
      f(s)
      this.reset = true
    } else {
      this.start = i
    }
  }
  return this
}

Keccak.prototype.finalize = function () {
  var blocks = this.blocks
  var i = this.lastByteIndex
  var blockCount = this.blockCount
  var s = this.s
  blocks[i >> 2] |= this.padding[i & 3]
  if (this.lastByteIndex === this.byteCount) {
    blocks[0] = blocks[blockCount]
    for (i = 1; i < blockCount + 1; ++i) {
      blocks[i] = 0
    }
  }
  blocks[blockCount - 1] |= 0x80000000
  for (i = 0; i < blockCount; ++i) {
    s[i] ^= blocks[i]
  }
  f(s)
}

Keccak.prototype.toString = Keccak.prototype.hex = function () {
  this.finalize()

  var blockCount = this.blockCount
  var s = this.s
  var outputBlocks = this.outputBlocks
  var extraBytes = this.extraBytes
  var i = 0
  var j = 0
  var hex = ''
  var block
  while (j < outputBlocks) {
    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
      block = s[i]
      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F]
    }
    if (j % blockCount === 0) {
      f(s)
    }
  }
  if (extraBytes) {
    block = s[i]
    if (extraBytes > 0) {
      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F]
    }
    if (extraBytes > 1) {
      hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F]
    }
    if (extraBytes > 2) {
      hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F]
    }
  }
  return hex
}

Keccak.prototype.buffer = function () {
  this.finalize()

  var blockCount = this.blockCount
  var s = this.s
  var outputBlocks = this.outputBlocks
  var extraBytes = this.extraBytes
  var i = 0
  var j = 0
  var bytes = this.outputBits >> 3
  var buffer
  if (extraBytes) {
    buffer = new ArrayBuffer((outputBlocks + 1) << 2)
  } else {
    buffer = new ArrayBuffer(bytes)
  }
  var array = new Uint32Array(buffer)
  while (j < outputBlocks) {
    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
      array[j] = s[i]
    }
    if (j % blockCount === 0) {
      f(s)
    }
  }
  if (extraBytes) {
    array[i] = s[i]
    buffer = buffer.slice(0, bytes)
  }
  return buffer
}

Keccak.prototype.digest = Keccak.prototype.array = function () {
  this.finalize()

  var blockCount = this.blockCount
  var s = this.s
  var outputBlocks = this.outputBlocks
  var extraBytes = this.extraBytes
  var i = 0
  var j = 0
  var array = []
  var offset
  var block
  while (j < outputBlocks) {
    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
      offset = j << 2
      block = s[i]
      array[offset] = block & 0xFF
      array[offset + 1] = (block >> 8) & 0xFF
      array[offset + 2] = (block >> 16) & 0xFF
      array[offset + 3] = (block >> 24) & 0xFF
    }
    if (j % blockCount === 0) {
      f(s)
    }
  }
  if (extraBytes) {
    offset = j << 2
    block = s[i]
    if (extraBytes > 0) {
      array[offset] = block & 0xFF
    }
    if (extraBytes > 1) {
      array[offset + 1] = (block >> 8) & 0xFF
    }
    if (extraBytes > 2) {
      array[offset + 2] = (block >> 16) & 0xFF
    }
  }
  return array
}

var f = function (s) {
  var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
    b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
    b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
    b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49
  for (n = 0; n < 48; n += 2) {
    c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40]
    c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41]
    c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42]
    c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43]
    c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44]
    c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45]
    c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46]
    c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47]
    c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48]
    c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49]

    h = c8 ^ ((c2 << 1) | (c3 >>> 31))
    l = c9 ^ ((c3 << 1) | (c2 >>> 31))
    s[0] ^= h
    s[1] ^= l
    s[10] ^= h
    s[11] ^= l
    s[20] ^= h
    s[21] ^= l
    s[30] ^= h
    s[31] ^= l
    s[40] ^= h
    s[41] ^= l
    h = c0 ^ ((c4 << 1) | (c5 >>> 31))
    l = c1 ^ ((c5 << 1) | (c4 >>> 31))
    s[2] ^= h
    s[3] ^= l
    s[12] ^= h
    s[13] ^= l
    s[22] ^= h
    s[23] ^= l
    s[32] ^= h
    s[33] ^= l
    s[42] ^= h
    s[43] ^= l
    h = c2 ^ ((c6 << 1) | (c7 >>> 31))
    l = c3 ^ ((c7 << 1) | (c6 >>> 31))
    s[4] ^= h
    s[5] ^= l
    s[14] ^= h
    s[15] ^= l
    s[24] ^= h
    s[25] ^= l
    s[34] ^= h
    s[35] ^= l
    s[44] ^= h
    s[45] ^= l
    h = c4 ^ ((c8 << 1) | (c9 >>> 31))
    l = c5 ^ ((c9 << 1) | (c8 >>> 31))
    s[6] ^= h
    s[7] ^= l
    s[16] ^= h
    s[17] ^= l
    s[26] ^= h
    s[27] ^= l
    s[36] ^= h
    s[37] ^= l
    s[46] ^= h
    s[47] ^= l
    h = c6 ^ ((c0 << 1) | (c1 >>> 31))
    l = c7 ^ ((c1 << 1) | (c0 >>> 31))
    s[8] ^= h
    s[9] ^= l
    s[18] ^= h
    s[19] ^= l
    s[28] ^= h
    s[29] ^= l
    s[38] ^= h
    s[39] ^= l
    s[48] ^= h
    s[49] ^= l

    b0 = s[0]
    b1 = s[1]
    b32 = (s[11] << 4) | (s[10] >>> 28)
    b33 = (s[10] << 4) | (s[11] >>> 28)
    b14 = (s[20] << 3) | (s[21] >>> 29)
    b15 = (s[21] << 3) | (s[20] >>> 29)
    b46 = (s[31] << 9) | (s[30] >>> 23)
    b47 = (s[30] << 9) | (s[31] >>> 23)
    b28 = (s[40] << 18) | (s[41] >>> 14)
    b29 = (s[41] << 18) | (s[40] >>> 14)
    b20 = (s[2] << 1) | (s[3] >>> 31)
    b21 = (s[3] << 1) | (s[2] >>> 31)
    b2 = (s[13] << 12) | (s[12] >>> 20)
    b3 = (s[12] << 12) | (s[13] >>> 20)
    b34 = (s[22] << 10) | (s[23] >>> 22)
    b35 = (s[23] << 10) | (s[22] >>> 22)
    b16 = (s[33] << 13) | (s[32] >>> 19)
    b17 = (s[32] << 13) | (s[33] >>> 19)
    b48 = (s[42] << 2) | (s[43] >>> 30)
    b49 = (s[43] << 2) | (s[42] >>> 30)
    b40 = (s[5] << 30) | (s[4] >>> 2)
    b41 = (s[4] << 30) | (s[5] >>> 2)
    b22 = (s[14] << 6) | (s[15] >>> 26)
    b23 = (s[15] << 6) | (s[14] >>> 26)
    b4 = (s[25] << 11) | (s[24] >>> 21)
    b5 = (s[24] << 11) | (s[25] >>> 21)
    b36 = (s[34] << 15) | (s[35] >>> 17)
    b37 = (s[35] << 15) | (s[34] >>> 17)
    b18 = (s[45] << 29) | (s[44] >>> 3)
    b19 = (s[44] << 29) | (s[45] >>> 3)
    b10 = (s[6] << 28) | (s[7] >>> 4)
    b11 = (s[7] << 28) | (s[6] >>> 4)
    b42 = (s[17] << 23) | (s[16] >>> 9)
    b43 = (s[16] << 23) | (s[17] >>> 9)
    b24 = (s[26] << 25) | (s[27] >>> 7)
    b25 = (s[27] << 25) | (s[26] >>> 7)
    b6 = (s[36] << 21) | (s[37] >>> 11)
    b7 = (s[37] << 21) | (s[36] >>> 11)
    b38 = (s[47] << 24) | (s[46] >>> 8)
    b39 = (s[46] << 24) | (s[47] >>> 8)
    b30 = (s[8] << 27) | (s[9] >>> 5)
    b31 = (s[9] << 27) | (s[8] >>> 5)
    b12 = (s[18] << 20) | (s[19] >>> 12)
    b13 = (s[19] << 20) | (s[18] >>> 12)
    b44 = (s[29] << 7) | (s[28] >>> 25)
    b45 = (s[28] << 7) | (s[29] >>> 25)
    b26 = (s[38] << 8) | (s[39] >>> 24)
    b27 = (s[39] << 8) | (s[38] >>> 24)
    b8 = (s[48] << 14) | (s[49] >>> 18)
    b9 = (s[49] << 14) | (s[48] >>> 18)

    s[0] = b0 ^ (~b2 & b4)
    s[1] = b1 ^ (~b3 & b5)
    s[10] = b10 ^ (~b12 & b14)
    s[11] = b11 ^ (~b13 & b15)
    s[20] = b20 ^ (~b22 & b24)
    s[21] = b21 ^ (~b23 & b25)
    s[30] = b30 ^ (~b32 & b34)
    s[31] = b31 ^ (~b33 & b35)
    s[40] = b40 ^ (~b42 & b44)
    s[41] = b41 ^ (~b43 & b45)
    s[2] = b2 ^ (~b4 & b6)
    s[3] = b3 ^ (~b5 & b7)
    s[12] = b12 ^ (~b14 & b16)
    s[13] = b13 ^ (~b15 & b17)
    s[22] = b22 ^ (~b24 & b26)
    s[23] = b23 ^ (~b25 & b27)
    s[32] = b32 ^ (~b34 & b36)
    s[33] = b33 ^ (~b35 & b37)
    s[42] = b42 ^ (~b44 & b46)
    s[43] = b43 ^ (~b45 & b47)
    s[4] = b4 ^ (~b6 & b8)
    s[5] = b5 ^ (~b7 & b9)
    s[14] = b14 ^ (~b16 & b18)
    s[15] = b15 ^ (~b17 & b19)
    s[24] = b24 ^ (~b26 & b28)
    s[25] = b25 ^ (~b27 & b29)
    s[34] = b34 ^ (~b36 & b38)
    s[35] = b35 ^ (~b37 & b39)
    s[44] = b44 ^ (~b46 & b48)
    s[45] = b45 ^ (~b47 & b49)
    s[6] = b6 ^ (~b8 & b0)
    s[7] = b7 ^ (~b9 & b1)
    s[16] = b16 ^ (~b18 & b10)
    s[17] = b17 ^ (~b19 & b11)
    s[26] = b26 ^ (~b28 & b20)
    s[27] = b27 ^ (~b29 & b21)
    s[36] = b36 ^ (~b38 & b30)
    s[37] = b37 ^ (~b39 & b31)
    s[46] = b46 ^ (~b48 & b40)
    s[47] = b47 ^ (~b49 & b41)
    s[8] = b8 ^ (~b0 & b2)
    s[9] = b9 ^ (~b1 & b3)
    s[18] = b18 ^ (~b10 & b12)
    s[19] = b19 ^ (~b11 & b13)
    s[28] = b28 ^ (~b20 & b22)
    s[29] = b29 ^ (~b21 & b23)
    s[38] = b38 ^ (~b30 & b32)
    s[39] = b39 ^ (~b31 & b33)
    s[48] = b48 ^ (~b40 & b42)
    s[49] = b49 ^ (~b41 & b43)

    s[0] ^= RC[n]
    s[1] ^= RC[n + 1]
  }
}

module.exports = Sha3

},{}],166:[function(require,module,exports){
(function (process,__filename){
/**
 * Module dependencies.
 */

var fs = require('fs'),
  path = require('path'),
  fileURLToPath = require('file-uri-to-path'),
  join = path.join,
  dirname = path.dirname,
  exists =
    (fs.accessSync &&
      function(path) {
        try {
          fs.accessSync(path);
        } catch (e) {
          return false;
        }
        return true;
      }) ||
    fs.existsSync ||
    path.existsSync,
  defaults = {
    arrow: process.env.NODE_BINDINGS_ARROW || ' → ',
    compiled: process.env.NODE_BINDINGS_COMPILED_DIR || 'compiled',
    platform: process.platform,
    arch: process.arch,
    nodePreGyp:
      'node-v' +
      process.versions.modules +
      '-' +
      process.platform +
      '-' +
      process.arch,
    version: process.versions.node,
    bindings: 'bindings.node',
    try: [
      // node-gyp's linked version in the "build" dir
      ['module_root', 'build', 'bindings'],
      // node-waf and gyp_addon (a.k.a node-gyp)
      ['module_root', 'build', 'Debug', 'bindings'],
      ['module_root', 'build', 'Release', 'bindings'],
      // Debug files, for development (legacy behavior, remove for node v0.9)
      ['module_root', 'out', 'Debug', 'bindings'],
      ['module_root', 'Debug', 'bindings'],
      // Release files, but manually compiled (legacy behavior, remove for node v0.9)
      ['module_root', 'out', 'Release', 'bindings'],
      ['module_root', 'Release', 'bindings'],
      // Legacy from node-waf, node <= 0.4.x
      ['module_root', 'build', 'default', 'bindings'],
      // Production "Release" buildtype binary (meh...)
      ['module_root', 'compiled', 'version', 'platform', 'arch', 'bindings'],
      // node-qbs builds
      ['module_root', 'addon-build', 'release', 'install-root', 'bindings'],
      ['module_root', 'addon-build', 'debug', 'install-root', 'bindings'],
      ['module_root', 'addon-build', 'default', 'install-root', 'bindings'],
      // node-pre-gyp path ./lib/binding/{node_abi}-{platform}-{arch}
      ['module_root', 'lib', 'binding', 'nodePreGyp', 'bindings']
    ]
  };

/**
 * The main `bindings()` function loads the compiled bindings for a given module.
 * It uses V8's Error API to determine the parent filename that this function is
 * being invoked from, which is then used to find the root directory.
 */

function bindings(opts) {
  // Argument surgery
  if (typeof opts == 'string') {
    opts = { bindings: opts };
  } else if (!opts) {
    opts = {};
  }

  // maps `defaults` onto `opts` object
  Object.keys(defaults).map(function(i) {
    if (!(i in opts)) opts[i] = defaults[i];
  });

  // Get the module root
  if (!opts.module_root) {
    opts.module_root = exports.getRoot(exports.getFileName());
  }

  // Ensure the given bindings name ends with .node
  if (path.extname(opts.bindings) != '.node') {
    opts.bindings += '.node';
  }

  // https://github.com/webpack/webpack/issues/4175#issuecomment-342931035
  var requireFunc =
    typeof __webpack_require__ === 'function'
      ? __non_webpack_require__
      : require;

  var tries = [],
    i = 0,
    l = opts.try.length,
    n,
    b,
    err;

  for (; i < l; i++) {
    n = join.apply(
      null,
      opts.try[i].map(function(p) {
        return opts[p] || p;
      })
    );
    tries.push(n);
    try {
      b = opts.path ? requireFunc.resolve(n) : requireFunc(n);
      if (!opts.path) {
        b.path = n;
      }
      return b;
    } catch (e) {
      if (!/not find/i.test(e.message)) {
        throw e;
      }
    }
  }

  err = new Error(
    'Could not locate the bindings file. Tried:\n' +
      tries
        .map(function(a) {
          return opts.arrow + a;
        })
        .join('\n')
  );
  err.tries = tries;
  throw err;
}
module.exports = exports = bindings;

/**
 * Gets the filename of the JavaScript file that invokes this function.
 * Used to help find the root directory of a module.
 * Optionally accepts an filename argument to skip when searching for the invoking filename
 */

exports.getFileName = function getFileName(calling_file) {
  var origPST = Error.prepareStackTrace,
    origSTL = Error.stackTraceLimit,
    dummy = {},
    fileName;

  Error.stackTraceLimit = 10;

  Error.prepareStackTrace = function(e, st) {
    for (var i = 0, l = st.length; i < l; i++) {
      fileName = st[i].getFileName();
      if (fileName !== __filename) {
        if (calling_file) {
          if (fileName !== calling_file) {
            return;
          }
        } else {
          return;
        }
      }
    }
  };

  // run the 'prepareStackTrace' function above
  Error.captureStackTrace(dummy);
  dummy.stack;

  // cleanup
  Error.prepareStackTrace = origPST;
  Error.stackTraceLimit = origSTL;

  // handle filename that starts with "file://"
  var fileSchema = 'file://';
  if (fileName.indexOf(fileSchema) === 0) {
    fileName = fileURLToPath(fileName);
  }

  return fileName;
};

/**
 * Gets the root directory of a module, given an arbitrary filename
 * somewhere in the module tree. The "root directory" is the directory
 * containing the `package.json` file.
 *
 *   In:  /home/nate/node-native-module/lib/index.js
 *   Out: /home/nate/node-native-module
 */

exports.getRoot = function getRoot(file) {
  var dir = dirname(file),
    prev;
  while (true) {
    if (dir === '.') {
      // Avoids an infinite loop in rare cases, like the REPL
      dir = process.cwd();
    }
    if (
      exists(join(dir, 'package.json')) ||
      exists(join(dir, 'node_modules'))
    ) {
      // Found the 'package.json' file or 'node_modules' dir; we're done
      return dir;
    }
    if (prev === dir) {
      // Got to the top
      throw new Error(
        'Could not find module root given file: "' +
          file +
          '". Do you have a `package.json` file? '
      );
    }
    // Try the parent dir next
    prev = dir;
    dir = join(dir, '..');
  }
};

}).call(this,require('_process'),"/node_modules/bindings/bindings.js")
},{"_process":119,"file-uri-to-path":192,"fs":1,"path":112}],167:[function(require,module,exports){
'use strict';

module.exports = require('./es6/crc1').default;

},{"./es6/crc1":178}],168:[function(require,module,exports){
'use strict';

module.exports = require('./es6/crc16').default;

},{"./es6/crc16":179}],169:[function(require,module,exports){
'use strict';

module.exports = require('./es6/crc16ccitt').default;

},{"./es6/crc16ccitt":180}],170:[function(require,module,exports){
'use strict';

module.exports = require('./es6/crc16kermit').default;

},{"./es6/crc16kermit":181}],171:[function(require,module,exports){
'use strict';

module.exports = require('./es6/crc16modbus').default;

},{"./es6/crc16modbus":182}],172:[function(require,module,exports){
'use strict';

module.exports = require('./es6/crc16xmodem').default;

},{"./es6/crc16xmodem":183}],173:[function(require,module,exports){
'use strict';

module.exports = require('./es6/crc24').default;

},{"./es6/crc24":184}],174:[function(require,module,exports){
'use strict';

module.exports = require('./es6/crc32').default;

},{"./es6/crc32":185}],175:[function(require,module,exports){
'use strict';

module.exports = require('./es6/crc8').default;

},{"./es6/crc8":186}],176:[function(require,module,exports){
'use strict';

module.exports = require('./es6/crc81wire').default;

},{"./es6/crc81wire":187}],177:[function(require,module,exports){
'use strict';

module.exports = require('./es6/crcjam').default;

},{"./es6/crcjam":188}],178:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _buffer = require('buffer');

var _create_buffer = require('./create_buffer');

var _create_buffer2 = _interopRequireDefault(_create_buffer);

var _define_crc = require('./define_crc');

var _define_crc2 = _interopRequireDefault(_define_crc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var crc1 = (0, _define_crc2.default)('crc1', function (buf, previous) {
  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);

  var crc = ~~previous;
  var accum = 0;

  for (var index = 0; index < buf.length; index++) {
    var byte = buf[index];
    accum += byte;
  }

  crc += accum % 256;
  return crc % 256;
});

exports.default = crc1;

},{"./create_buffer":189,"./define_crc":190,"buffer":48}],179:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _buffer = require('buffer');

var _create_buffer = require('./create_buffer');

var _create_buffer2 = _interopRequireDefault(_create_buffer);

var _define_crc = require('./define_crc');

var _define_crc2 = _interopRequireDefault(_define_crc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by `./pycrc.py --algorithm=table-driven --model=crc-16 --generate=c`
// prettier-ignore
var TABLE = [0x0000, 0xc0c1, 0xc181, 0x0140, 0xc301, 0x03c0, 0x0280, 0xc241, 0xc601, 0x06c0, 0x0780, 0xc741, 0x0500, 0xc5c1, 0xc481, 0x0440, 0xcc01, 0x0cc0, 0x0d80, 0xcd41, 0x0f00, 0xcfc1, 0xce81, 0x0e40, 0x0a00, 0xcac1, 0xcb81, 0x0b40, 0xc901, 0x09c0, 0x0880, 0xc841, 0xd801, 0x18c0, 0x1980, 0xd941, 0x1b00, 0xdbc1, 0xda81, 0x1a40, 0x1e00, 0xdec1, 0xdf81, 0x1f40, 0xdd01, 0x1dc0, 0x1c80, 0xdc41, 0x1400, 0xd4c1, 0xd581, 0x1540, 0xd701, 0x17c0, 0x1680, 0xd641, 0xd201, 0x12c0, 0x1380, 0xd341, 0x1100, 0xd1c1, 0xd081, 0x1040, 0xf001, 0x30c0, 0x3180, 0xf141, 0x3300, 0xf3c1, 0xf281, 0x3240, 0x3600, 0xf6c1, 0xf781, 0x3740, 0xf501, 0x35c0, 0x3480, 0xf441, 0x3c00, 0xfcc1, 0xfd81, 0x3d40, 0xff01, 0x3fc0, 0x3e80, 0xfe41, 0xfa01, 0x3ac0, 0x3b80, 0xfb41, 0x3900, 0xf9c1, 0xf881, 0x3840, 0x2800, 0xe8c1, 0xe981, 0x2940, 0xeb01, 0x2bc0, 0x2a80, 0xea41, 0xee01, 0x2ec0, 0x2f80, 0xef41, 0x2d00, 0xedc1, 0xec81, 0x2c40, 0xe401, 0x24c0, 0x2580, 0xe541, 0x2700, 0xe7c1, 0xe681, 0x2640, 0x2200, 0xe2c1, 0xe381, 0x2340, 0xe101, 0x21c0, 0x2080, 0xe041, 0xa001, 0x60c0, 0x6180, 0xa141, 0x6300, 0xa3c1, 0xa281, 0x6240, 0x6600, 0xa6c1, 0xa781, 0x6740, 0xa501, 0x65c0, 0x6480, 0xa441, 0x6c00, 0xacc1, 0xad81, 0x6d40, 0xaf01, 0x6fc0, 0x6e80, 0xae41, 0xaa01, 0x6ac0, 0x6b80, 0xab41, 0x6900, 0xa9c1, 0xa881, 0x6840, 0x7800, 0xb8c1, 0xb981, 0x7940, 0xbb01, 0x7bc0, 0x7a80, 0xba41, 0xbe01, 0x7ec0, 0x7f80, 0xbf41, 0x7d00, 0xbdc1, 0xbc81, 0x7c40, 0xb401, 0x74c0, 0x7580, 0xb541, 0x7700, 0xb7c1, 0xb681, 0x7640, 0x7200, 0xb2c1, 0xb381, 0x7340, 0xb101, 0x71c0, 0x7080, 0xb041, 0x5000, 0x90c1, 0x9181, 0x5140, 0x9301, 0x53c0, 0x5280, 0x9241, 0x9601, 0x56c0, 0x5780, 0x9741, 0x5500, 0x95c1, 0x9481, 0x5440, 0x9c01, 0x5cc0, 0x5d80, 0x9d41, 0x5f00, 0x9fc1, 0x9e81, 0x5e40, 0x5a00, 0x9ac1, 0x9b81, 0x5b40, 0x9901, 0x59c0, 0x5880, 0x9841, 0x8801, 0x48c0, 0x4980, 0x8941, 0x4b00, 0x8bc1, 0x8a81, 0x4a40, 0x4e00, 0x8ec1, 0x8f81, 0x4f40, 0x8d01, 0x4dc0, 0x4c80, 0x8c41, 0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641, 0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040];

if (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);

var crc16 = (0, _define_crc2.default)('crc-16', function (buf, previous) {
  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);

  var crc = ~~previous;

  for (var index = 0; index < buf.length; index++) {
    var byte = buf[index];
    crc = (TABLE[(crc ^ byte) & 0xff] ^ crc >> 8) & 0xffff;
  }

  return crc;
});

exports.default = crc16;

},{"./create_buffer":189,"./define_crc":190,"buffer":48}],180:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _buffer = require('buffer');

var _create_buffer = require('./create_buffer');

var _create_buffer2 = _interopRequireDefault(_create_buffer);

var _define_crc = require('./define_crc');

var _define_crc2 = _interopRequireDefault(_define_crc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by `./pycrc.py --algorithm=table-driven --model=ccitt --generate=c`
// prettier-ignore
var TABLE = [0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7, 0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef, 0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6, 0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de, 0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d, 0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc, 0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823, 0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b, 0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12, 0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a, 0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41, 0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49, 0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70, 0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f, 0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067, 0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e, 0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256, 0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d, 0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634, 0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3, 0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a, 0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0];

if (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);

var crc16ccitt = (0, _define_crc2.default)('ccitt', function (buf, previous) {
  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);

  var crc = typeof previous !== 'undefined' ? ~~previous : 0xffff;

  for (var index = 0; index < buf.length; index++) {
    var byte = buf[index];
    crc = (TABLE[(crc >> 8 ^ byte) & 0xff] ^ crc << 8) & 0xffff;
  }

  return crc;
});

exports.default = crc16ccitt;

},{"./create_buffer":189,"./define_crc":190,"buffer":48}],181:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _buffer = require('buffer');

var _create_buffer = require('./create_buffer');

var _create_buffer2 = _interopRequireDefault(_create_buffer);

var _define_crc = require('./define_crc');

var _define_crc2 = _interopRequireDefault(_define_crc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by `./pycrc.py --algorithm=table-driven --model=kermit --generate=c`
// prettier-ignore
var TABLE = [0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf, 0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7, 0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e, 0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876, 0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd, 0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5, 0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c, 0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974, 0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb, 0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3, 0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a, 0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72, 0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9, 0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1, 0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738, 0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70, 0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7, 0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff, 0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036, 0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e, 0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5, 0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd, 0xb58b, 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134, 0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c, 0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3, 0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb, 0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232, 0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a, 0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1, 0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9, 0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330, 0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78];

if (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);

var crc16kermit = (0, _define_crc2.default)('kermit', function (buf, previous) {
  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);

  var crc = typeof previous !== 'undefined' ? ~~previous : 0x0000;

  for (var index = 0; index < buf.length; index++) {
    var byte = buf[index];
    crc = (TABLE[(crc ^ byte) & 0xff] ^ crc >> 8) & 0xffff;
  }

  return crc;
});

exports.default = crc16kermit;

},{"./create_buffer":189,"./define_crc":190,"buffer":48}],182:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _buffer = require('buffer');

var _create_buffer = require('./create_buffer');

var _create_buffer2 = _interopRequireDefault(_create_buffer);

var _define_crc = require('./define_crc');

var _define_crc2 = _interopRequireDefault(_define_crc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by `./pycrc.py --algorithm=table-driven --model=crc-16-modbus --generate=c`
// prettier-ignore
var TABLE = [0x0000, 0xc0c1, 0xc181, 0x0140, 0xc301, 0x03c0, 0x0280, 0xc241, 0xc601, 0x06c0, 0x0780, 0xc741, 0x0500, 0xc5c1, 0xc481, 0x0440, 0xcc01, 0x0cc0, 0x0d80, 0xcd41, 0x0f00, 0xcfc1, 0xce81, 0x0e40, 0x0a00, 0xcac1, 0xcb81, 0x0b40, 0xc901, 0x09c0, 0x0880, 0xc841, 0xd801, 0x18c0, 0x1980, 0xd941, 0x1b00, 0xdbc1, 0xda81, 0x1a40, 0x1e00, 0xdec1, 0xdf81, 0x1f40, 0xdd01, 0x1dc0, 0x1c80, 0xdc41, 0x1400, 0xd4c1, 0xd581, 0x1540, 0xd701, 0x17c0, 0x1680, 0xd641, 0xd201, 0x12c0, 0x1380, 0xd341, 0x1100, 0xd1c1, 0xd081, 0x1040, 0xf001, 0x30c0, 0x3180, 0xf141, 0x3300, 0xf3c1, 0xf281, 0x3240, 0x3600, 0xf6c1, 0xf781, 0x3740, 0xf501, 0x35c0, 0x3480, 0xf441, 0x3c00, 0xfcc1, 0xfd81, 0x3d40, 0xff01, 0x3fc0, 0x3e80, 0xfe41, 0xfa01, 0x3ac0, 0x3b80, 0xfb41, 0x3900, 0xf9c1, 0xf881, 0x3840, 0x2800, 0xe8c1, 0xe981, 0x2940, 0xeb01, 0x2bc0, 0x2a80, 0xea41, 0xee01, 0x2ec0, 0x2f80, 0xef41, 0x2d00, 0xedc1, 0xec81, 0x2c40, 0xe401, 0x24c0, 0x2580, 0xe541, 0x2700, 0xe7c1, 0xe681, 0x2640, 0x2200, 0xe2c1, 0xe381, 0x2340, 0xe101, 0x21c0, 0x2080, 0xe041, 0xa001, 0x60c0, 0x6180, 0xa141, 0x6300, 0xa3c1, 0xa281, 0x6240, 0x6600, 0xa6c1, 0xa781, 0x6740, 0xa501, 0x65c0, 0x6480, 0xa441, 0x6c00, 0xacc1, 0xad81, 0x6d40, 0xaf01, 0x6fc0, 0x6e80, 0xae41, 0xaa01, 0x6ac0, 0x6b80, 0xab41, 0x6900, 0xa9c1, 0xa881, 0x6840, 0x7800, 0xb8c1, 0xb981, 0x7940, 0xbb01, 0x7bc0, 0x7a80, 0xba41, 0xbe01, 0x7ec0, 0x7f80, 0xbf41, 0x7d00, 0xbdc1, 0xbc81, 0x7c40, 0xb401, 0x74c0, 0x7580, 0xb541, 0x7700, 0xb7c1, 0xb681, 0x7640, 0x7200, 0xb2c1, 0xb381, 0x7340, 0xb101, 0x71c0, 0x7080, 0xb041, 0x5000, 0x90c1, 0x9181, 0x5140, 0x9301, 0x53c0, 0x5280, 0x9241, 0x9601, 0x56c0, 0x5780, 0x9741, 0x5500, 0x95c1, 0x9481, 0x5440, 0x9c01, 0x5cc0, 0x5d80, 0x9d41, 0x5f00, 0x9fc1, 0x9e81, 0x5e40, 0x5a00, 0x9ac1, 0x9b81, 0x5b40, 0x9901, 0x59c0, 0x5880, 0x9841, 0x8801, 0x48c0, 0x4980, 0x8941, 0x4b00, 0x8bc1, 0x8a81, 0x4a40, 0x4e00, 0x8ec1, 0x8f81, 0x4f40, 0x8d01, 0x4dc0, 0x4c80, 0x8c41, 0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641, 0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040];

if (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);

var crc16modbus = (0, _define_crc2.default)('crc-16-modbus', function (buf, previous) {
  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);

  var crc = typeof previous !== 'undefined' ? ~~previous : 0xffff;

  for (var index = 0; index < buf.length; index++) {
    var byte = buf[index];
    crc = (TABLE[(crc ^ byte) & 0xff] ^ crc >> 8) & 0xffff;
  }

  return crc;
});

exports.default = crc16modbus;

},{"./create_buffer":189,"./define_crc":190,"buffer":48}],183:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _buffer = require('buffer');

var _create_buffer = require('./create_buffer');

var _create_buffer2 = _interopRequireDefault(_create_buffer);

var _define_crc = require('./define_crc');

var _define_crc2 = _interopRequireDefault(_define_crc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var crc16xmodem = (0, _define_crc2.default)('xmodem', function (buf, previous) {
  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);

  var crc = typeof previous !== 'undefined' ? ~~previous : 0x0;

  for (var index = 0; index < buf.length; index++) {
    var byte = buf[index];
    var code = crc >>> 8 & 0xff;

    code ^= byte & 0xff;
    code ^= code >>> 4;
    crc = crc << 8 & 0xffff;
    crc ^= code;
    code = code << 5 & 0xffff;
    crc ^= code;
    code = code << 7 & 0xffff;
    crc ^= code;
  }

  return crc;
});

exports.default = crc16xmodem;

},{"./create_buffer":189,"./define_crc":190,"buffer":48}],184:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _buffer = require('buffer');

var _create_buffer = require('./create_buffer');

var _create_buffer2 = _interopRequireDefault(_create_buffer);

var _define_crc = require('./define_crc');

var _define_crc2 = _interopRequireDefault(_define_crc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by `./pycrc.py --algorithm=table-drive --model=crc-24 --generate=c`
// prettier-ignore
var TABLE = [0x000000, 0x864cfb, 0x8ad50d, 0x0c99f6, 0x93e6e1, 0x15aa1a, 0x1933ec, 0x9f7f17, 0xa18139, 0x27cdc2, 0x2b5434, 0xad18cf, 0x3267d8, 0xb42b23, 0xb8b2d5, 0x3efe2e, 0xc54e89, 0x430272, 0x4f9b84, 0xc9d77f, 0x56a868, 0xd0e493, 0xdc7d65, 0x5a319e, 0x64cfb0, 0xe2834b, 0xee1abd, 0x685646, 0xf72951, 0x7165aa, 0x7dfc5c, 0xfbb0a7, 0x0cd1e9, 0x8a9d12, 0x8604e4, 0x00481f, 0x9f3708, 0x197bf3, 0x15e205, 0x93aefe, 0xad50d0, 0x2b1c2b, 0x2785dd, 0xa1c926, 0x3eb631, 0xb8faca, 0xb4633c, 0x322fc7, 0xc99f60, 0x4fd39b, 0x434a6d, 0xc50696, 0x5a7981, 0xdc357a, 0xd0ac8c, 0x56e077, 0x681e59, 0xee52a2, 0xe2cb54, 0x6487af, 0xfbf8b8, 0x7db443, 0x712db5, 0xf7614e, 0x19a3d2, 0x9fef29, 0x9376df, 0x153a24, 0x8a4533, 0x0c09c8, 0x00903e, 0x86dcc5, 0xb822eb, 0x3e6e10, 0x32f7e6, 0xb4bb1d, 0x2bc40a, 0xad88f1, 0xa11107, 0x275dfc, 0xdced5b, 0x5aa1a0, 0x563856, 0xd074ad, 0x4f0bba, 0xc94741, 0xc5deb7, 0x43924c, 0x7d6c62, 0xfb2099, 0xf7b96f, 0x71f594, 0xee8a83, 0x68c678, 0x645f8e, 0xe21375, 0x15723b, 0x933ec0, 0x9fa736, 0x19ebcd, 0x8694da, 0x00d821, 0x0c41d7, 0x8a0d2c, 0xb4f302, 0x32bff9, 0x3e260f, 0xb86af4, 0x2715e3, 0xa15918, 0xadc0ee, 0x2b8c15, 0xd03cb2, 0x567049, 0x5ae9bf, 0xdca544, 0x43da53, 0xc596a8, 0xc90f5e, 0x4f43a5, 0x71bd8b, 0xf7f170, 0xfb6886, 0x7d247d, 0xe25b6a, 0x641791, 0x688e67, 0xeec29c, 0x3347a4, 0xb50b5f, 0xb992a9, 0x3fde52, 0xa0a145, 0x26edbe, 0x2a7448, 0xac38b3, 0x92c69d, 0x148a66, 0x181390, 0x9e5f6b, 0x01207c, 0x876c87, 0x8bf571, 0x0db98a, 0xf6092d, 0x7045d6, 0x7cdc20, 0xfa90db, 0x65efcc, 0xe3a337, 0xef3ac1, 0x69763a, 0x578814, 0xd1c4ef, 0xdd5d19, 0x5b11e2, 0xc46ef5, 0x42220e, 0x4ebbf8, 0xc8f703, 0x3f964d, 0xb9dab6, 0xb54340, 0x330fbb, 0xac70ac, 0x2a3c57, 0x26a5a1, 0xa0e95a, 0x9e1774, 0x185b8f, 0x14c279, 0x928e82, 0x0df195, 0x8bbd6e, 0x872498, 0x016863, 0xfad8c4, 0x7c943f, 0x700dc9, 0xf64132, 0x693e25, 0xef72de, 0xe3eb28, 0x65a7d3, 0x5b59fd, 0xdd1506, 0xd18cf0, 0x57c00b, 0xc8bf1c, 0x4ef3e7, 0x426a11, 0xc426ea, 0x2ae476, 0xaca88d, 0xa0317b, 0x267d80, 0xb90297, 0x3f4e6c, 0x33d79a, 0xb59b61, 0x8b654f, 0x0d29b4, 0x01b042, 0x87fcb9, 0x1883ae, 0x9ecf55, 0x9256a3, 0x141a58, 0xefaaff, 0x69e604, 0x657ff2, 0xe33309, 0x7c4c1e, 0xfa00e5, 0xf69913, 0x70d5e8, 0x4e2bc6, 0xc8673d, 0xc4fecb, 0x42b230, 0xddcd27, 0x5b81dc, 0x57182a, 0xd154d1, 0x26359f, 0xa07964, 0xace092, 0x2aac69, 0xb5d37e, 0x339f85, 0x3f0673, 0xb94a88, 0x87b4a6, 0x01f85d, 0x0d61ab, 0x8b2d50, 0x145247, 0x921ebc, 0x9e874a, 0x18cbb1, 0xe37b16, 0x6537ed, 0x69ae1b, 0xefe2e0, 0x709df7, 0xf6d10c, 0xfa48fa, 0x7c0401, 0x42fa2f, 0xc4b6d4, 0xc82f22, 0x4e63d9, 0xd11cce, 0x575035, 0x5bc9c3, 0xdd8538];

if (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);

var crc24 = (0, _define_crc2.default)('crc-24', function (buf, previous) {
  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);

  var crc = typeof previous !== 'undefined' ? ~~previous : 0xb704ce;

  for (var index = 0; index < buf.length; index++) {
    var byte = buf[index];
    crc = (TABLE[(crc >> 16 ^ byte) & 0xff] ^ crc << 8) & 0xffffff;
  }

  return crc;
});

exports.default = crc24;

},{"./create_buffer":189,"./define_crc":190,"buffer":48}],185:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _buffer = require('buffer');

var _create_buffer = require('./create_buffer');

var _create_buffer2 = _interopRequireDefault(_create_buffer);

var _define_crc = require('./define_crc');

var _define_crc2 = _interopRequireDefault(_define_crc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by `./pycrc.py --algorithm=table-driven --model=crc-32 --generate=c`
// prettier-ignore
var TABLE = [0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d];

if (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);

var crc32 = (0, _define_crc2.default)('crc-32', function (buf, previous) {
  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);

  var crc = previous === 0 ? 0 : ~~previous ^ -1;

  for (var index = 0; index < buf.length; index++) {
    var byte = buf[index];
    crc = TABLE[(crc ^ byte) & 0xff] ^ crc >>> 8;
  }

  return crc ^ -1;
});

exports.default = crc32;

},{"./create_buffer":189,"./define_crc":190,"buffer":48}],186:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _buffer = require('buffer');

var _create_buffer = require('./create_buffer');

var _create_buffer2 = _interopRequireDefault(_create_buffer);

var _define_crc = require('./define_crc');

var _define_crc2 = _interopRequireDefault(_define_crc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by `./pycrc.py --algorithm=table-driven --model=crc-8 --generate=c`
// prettier-ignore
var TABLE = [0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15, 0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d, 0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65, 0x48, 0x4f, 0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d, 0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2, 0xf5, 0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd, 0x90, 0x97, 0x9e, 0x99, 0x8c, 0x8b, 0x82, 0x85, 0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd, 0xc7, 0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2, 0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4, 0xed, 0xea, 0xb7, 0xb0, 0xb9, 0xbe, 0xab, 0xac, 0xa5, 0xa2, 0x8f, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9d, 0x9a, 0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32, 0x1f, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0d, 0x0a, 0x57, 0x50, 0x59, 0x5e, 0x4b, 0x4c, 0x45, 0x42, 0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a, 0x89, 0x8e, 0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c, 0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3, 0xa4, 0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec, 0xc1, 0xc6, 0xcf, 0xc8, 0xdd, 0xda, 0xd3, 0xd4, 0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c, 0x51, 0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44, 0x19, 0x1e, 0x17, 0x10, 0x05, 0x02, 0x0b, 0x0c, 0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34, 0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b, 0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63, 0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b, 0x06, 0x01, 0x08, 0x0f, 0x1a, 0x1d, 0x14, 0x13, 0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83, 0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3];

if (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);

var crc8 = (0, _define_crc2.default)('crc-8', function (buf, previous) {
  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);

  var crc = ~~previous;

  for (var index = 0; index < buf.length; index++) {
    var byte = buf[index];
    crc = TABLE[(crc ^ byte) & 0xff] & 0xff;
  }

  return crc;
});

exports.default = crc8;

},{"./create_buffer":189,"./define_crc":190,"buffer":48}],187:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _buffer = require('buffer');

var _create_buffer = require('./create_buffer');

var _create_buffer2 = _interopRequireDefault(_create_buffer);

var _define_crc = require('./define_crc');

var _define_crc2 = _interopRequireDefault(_define_crc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by `./pycrc.py --algorithm=table-driven --model=dallas-1-wire --generate=c`
// prettier-ignore
var TABLE = [0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83, 0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41, 0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e, 0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc, 0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0, 0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62, 0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d, 0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff, 0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5, 0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07, 0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58, 0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a, 0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6, 0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24, 0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b, 0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9, 0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f, 0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd, 0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92, 0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50, 0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c, 0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee, 0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1, 0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73, 0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49, 0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b, 0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4, 0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16, 0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a, 0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8, 0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7, 0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35];

if (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);

var crc81wire = (0, _define_crc2.default)('dallas-1-wire', function (buf, previous) {
  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);

  var crc = ~~previous;

  for (var index = 0; index < buf.length; index++) {
    var byte = buf[index];
    crc = TABLE[(crc ^ byte) & 0xff] & 0xff;
  }

  return crc;
});

exports.default = crc81wire;

},{"./create_buffer":189,"./define_crc":190,"buffer":48}],188:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _buffer = require('buffer');

var _create_buffer = require('./create_buffer');

var _create_buffer2 = _interopRequireDefault(_create_buffer);

var _define_crc = require('./define_crc');

var _define_crc2 = _interopRequireDefault(_define_crc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by `./pycrc.py --algorithm=table-driven --model=jam --generate=c`
// prettier-ignore
var TABLE = [0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d];

if (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);

var crcjam = (0, _define_crc2.default)('jam', function (buf) {
  var previous = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);

  var crc = previous === 0 ? 0 : ~~previous;

  for (var index = 0; index < buf.length; index++) {
    var byte = buf[index];
    crc = TABLE[(crc ^ byte) & 0xff] ^ crc >>> 8;
  }

  return crc;
});

exports.default = crcjam;

},{"./create_buffer":189,"./define_crc":190,"buffer":48}],189:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _buffer = require('buffer');

var createBuffer = _buffer.Buffer.from && _buffer.Buffer.alloc && _buffer.Buffer.allocUnsafe && _buffer.Buffer.allocUnsafeSlow ? _buffer.Buffer.from : // support for Node < 5.10
function (val) {
  return new _buffer.Buffer(val);
};

exports.default = createBuffer;

},{"buffer":48}],190:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (model, calc) {
  var fn = function fn(buf, previous) {
    return calc(buf, previous) >>> 0;
  };
  fn.signed = calc;
  fn.unsigned = fn;
  fn.model = model;

  return fn;
};

},{}],191:[function(require,module,exports){
'use strict';

module.exports = {
  crc1: require('./crc1'),
  crc8: require('./crc8'),
  crc81wire: require('./crc8_1wire'),
  crc16: require('./crc16'),
  crc16ccitt: require('./crc16_ccitt'),
  crc16modbus: require('./crc16_modbus'),
  crc16xmodem: require('./crc16_xmodem'),
  crc16kermit: require('./crc16_kermit'),
  crc24: require('./crc24'),
  crc32: require('./crc32'),
  crcjam: require('./crcjam')
};

},{"./crc1":167,"./crc16":168,"./crc16_ccitt":169,"./crc16_kermit":170,"./crc16_modbus":171,"./crc16_xmodem":172,"./crc24":173,"./crc32":174,"./crc8":175,"./crc8_1wire":176,"./crcjam":177}],192:[function(require,module,exports){

/**
 * Module dependencies.
 */

var sep = require('path').sep || '/';

/**
 * Module exports.
 */

module.exports = fileUriToPath;

/**
 * File URI to Path function.
 *
 * @param {String} uri
 * @return {String} path
 * @api public
 */

function fileUriToPath (uri) {
  if ('string' != typeof uri ||
      uri.length <= 7 ||
      'file://' != uri.substring(0, 7)) {
    throw new TypeError('must pass in a file:// URI to convert to a file path');
  }

  var rest = decodeURI(uri.substring(7));
  var firstSlash = rest.indexOf('/');
  var host = rest.substring(0, firstSlash);
  var path = rest.substring(firstSlash + 1);

  // 2.  Scheme Definition
  // As a special case, <host> can be the string "localhost" or the empty
  // string; this is interpreted as "the machine from which the URL is
  // being interpreted".
  if ('localhost' == host) host = '';

  if (host) {
    host = sep + sep + host;
  }

  // 3.2  Drives, drive letters, mount points, file system root
  // Drive letters are mapped into the top of a file URI in various ways,
  // depending on the implementation; some applications substitute
  // vertical bar ("|") for the colon after the drive letter, yielding
  // "file:///c|/tmp/test.txt".  In some cases, the colon is left
  // unchanged, as in "file:///c:/tmp/test.txt".  In other cases, the
  // colon is simply omitted, as in "file:///c/tmp/test.txt".
  path = path.replace(/^(.+)\|/, '$1:');

  // for Windows, we need to invert the path separators from what a URI uses
  if (sep == '\\') {
    path = path.replace(/\//g, '\\');
  }

  if (/^.+\:/.test(path)) {
    // has Windows drive at beginning of path
  } else {
    // unix path…
    path = sep + path;
  }

  return host + path;
}

},{"path":112}],193:[function(require,module,exports){
var window = require('global/window');
var nodeCrypto = require('crypto');

function getRandomValues(buf) {
  if (window.crypto && window.crypto.getRandomValues) {
    return window.crypto.getRandomValues(buf);
  }
  if (typeof window.msCrypto === 'object' && typeof window.msCrypto.getRandomValues === 'function') {
    return window.msCrypto.getRandomValues(buf);
  }
  if (nodeCrypto.randomBytes) {
    if (!(buf instanceof Uint8Array)) {
      throw new TypeError('expected Uint8Array');
    }
    if (buf.length > 65536) {
      var e = new Error();
      e.code = 22;
      e.message = 'Failed to execute \'getRandomValues\' on \'Crypto\': The ' +
        'ArrayBufferView\'s byte length (' + buf.length + ') exceeds the ' +
        'number of bytes of entropy available via this API (65536).';
      e.name = 'QuotaExceededError';
      throw e;
    }
    var bytes = nodeCrypto.randomBytes(buf.length);
    buf.set(bytes);
    return buf;
  }
  else {
    throw new Error('No secure random number generator available.');
  }
}

module.exports = getRandomValues;

},{"crypto":19,"global/window":194}],194:[function(require,module,exports){
(function (global){
var win;

if (typeof window !== "undefined") {
    win = window;
} else if (typeof global !== "undefined") {
    win = global;
} else if (typeof self !== "undefined"){
    win = self;
} else {
    win = {};
}

module.exports = win;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],195:[function(require,module,exports){
/*! @preserve
 * numeral.js
 * version : 2.0.6
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */

(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(factory);
    } else if (typeof module === 'object' && module.exports) {
        module.exports = factory();
    } else {
        global.numeral = factory();
    }
}(this, function () {
    /************************************
        Variables
    ************************************/

    var numeral,
        _,
        VERSION = '2.0.6',
        formats = {},
        locales = {},
        defaults = {
            currentLocale: 'en',
            zeroFormat: null,
            nullFormat: null,
            defaultFormat: '0,0',
            scalePercentBy100: true
        },
        options = {
            currentLocale: defaults.currentLocale,
            zeroFormat: defaults.zeroFormat,
            nullFormat: defaults.nullFormat,
            defaultFormat: defaults.defaultFormat,
            scalePercentBy100: defaults.scalePercentBy100
        };


    /************************************
        Constructors
    ************************************/

    // Numeral prototype object
    function Numeral(input, number) {
        this._input = input;

        this._value = number;
    }

    numeral = function(input) {
        var value,
            kind,
            unformatFunction,
            regexp;

        if (numeral.isNumeral(input)) {
            value = input.value();
        } else if (input === 0 || typeof input === 'undefined') {
            value = 0;
        } else if (input === null || _.isNaN(input)) {
            value = null;
        } else if (typeof input === 'string') {
            if (options.zeroFormat && input === options.zeroFormat) {
                value = 0;
            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {
                value = null;
            } else {
                for (kind in formats) {
                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;

                    if (regexp && input.match(regexp)) {
                        unformatFunction = formats[kind].unformat;

                        break;
                    }
                }

                unformatFunction = unformatFunction || numeral._.stringToNumber;

                value = unformatFunction(input);
            }
        } else {
            value = Number(input)|| null;
        }

        return new Numeral(input, value);
    };

    // version number
    numeral.version = VERSION;

    // compare numeral object
    numeral.isNumeral = function(obj) {
        return obj instanceof Numeral;
    };

    // helper functions
    numeral._ = _ = {
        // formats numbers separators, decimals places, signs, abbreviations
        numberToFormat: function(value, format, roundingFunction) {
            var locale = locales[numeral.options.currentLocale],
                negP = false,
                optDec = false,
                leadingCount = 0,
                abbr = '',
                trillion = 1000000000000,
                billion = 1000000000,
                million = 1000000,
                thousand = 1000,
                decimal = '',
                neg = false,
                abbrForce, // force abbreviation
                abs,
                min,
                max,
                power,
                int,
                precision,
                signed,
                thousands,
                output;

            // make sure we never format a null value
            value = value || 0;

            abs = Math.abs(value);

            // see if we should use parentheses for negative number or if we should prefix with a sign
            // if both are present we default to parentheses
            if (numeral._.includes(format, '(')) {
                negP = true;
                format = format.replace(/[\(|\)]/g, '');
            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {
                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;
                format = format.replace(/[\+|\-]/g, '');
            }

            // see if abbreviation is wanted
            if (numeral._.includes(format, 'a')) {
                abbrForce = format.match(/a(k|m|b|t)?/);

                abbrForce = abbrForce ? abbrForce[1] : false;

                // check for space before abbreviation
                if (numeral._.includes(format, ' a')) {
                    abbr = ' ';
                }

                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');

                if (abs >= trillion && !abbrForce || abbrForce === 't') {
                    // trillion
                    abbr += locale.abbreviations.trillion;
                    value = value / trillion;
                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {
                    // billion
                    abbr += locale.abbreviations.billion;
                    value = value / billion;
                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {
                    // million
                    abbr += locale.abbreviations.million;
                    value = value / million;
                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {
                    // thousand
                    abbr += locale.abbreviations.thousand;
                    value = value / thousand;
                }
            }

            // check for optional decimals
            if (numeral._.includes(format, '[.]')) {
                optDec = true;
                format = format.replace('[.]', '.');
            }

            // break number and format
            int = value.toString().split('.')[0];
            precision = format.split('.')[1];
            thousands = format.indexOf(',');
            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;

            if (precision) {
                if (numeral._.includes(precision, '[')) {
                    precision = precision.replace(']', '');
                    precision = precision.split('[');
                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
                } else {
                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);
                }

                int = decimal.split('.')[0];

                if (numeral._.includes(decimal, '.')) {
                    decimal = locale.delimiters.decimal + decimal.split('.')[1];
                } else {
                    decimal = '';
                }

                if (optDec && Number(decimal.slice(1)) === 0) {
                    decimal = '';
                }
            } else {
                int = numeral._.toFixed(value, 0, roundingFunction);
            }

            // check abbreviation again after rounding
            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {
                int = String(Number(int) / 1000);

                switch (abbr) {
                    case locale.abbreviations.thousand:
                        abbr = locale.abbreviations.million;
                        break;
                    case locale.abbreviations.million:
                        abbr = locale.abbreviations.billion;
                        break;
                    case locale.abbreviations.billion:
                        abbr = locale.abbreviations.trillion;
                        break;
                }
            }


            // format number
            if (numeral._.includes(int, '-')) {
                int = int.slice(1);
                neg = true;
            }

            if (int.length < leadingCount) {
                for (var i = leadingCount - int.length; i > 0; i--) {
                    int = '0' + int;
                }
            }

            if (thousands > -1) {
                int = int.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + locale.delimiters.thousands);
            }

            if (format.indexOf('.') === 0) {
                int = '';
            }

            output = int + decimal + (abbr ? abbr : '');

            if (negP) {
                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');
            } else {
                if (signed >= 0) {
                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');
                } else if (neg) {
                    output = '-' + output;
                }
            }

            return output;
        },
        // unformats numbers separators, decimals places, signs, abbreviations
        stringToNumber: function(string) {
            var locale = locales[options.currentLocale],
                stringOriginal = string,
                abbreviations = {
                    thousand: 3,
                    million: 6,
                    billion: 9,
                    trillion: 12
                },
                abbreviation,
                value,
                i,
                regexp;

            if (options.zeroFormat && string === options.zeroFormat) {
                value = 0;
            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {
                value = null;
            } else {
                value = 1;

                if (locale.delimiters.decimal !== '.') {
                    string = string.replace(/\./g, '').replace(locale.delimiters.decimal, '.');
                }

                for (abbreviation in abbreviations) {
                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\)|(\\' + locale.currency.symbol + ')?(?:\\))?)?$');

                    if (stringOriginal.match(regexp)) {
                        value *= Math.pow(10, abbreviations[abbreviation]);
                        break;
                    }
                }

                // check for negative number
                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;

                // remove non numbers
                string = string.replace(/[^0-9\.]+/g, '');

                value *= Number(string);
            }

            return value;
        },
        isNaN: function(value) {
            return typeof value === 'number' && isNaN(value);
        },
        includes: function(string, search) {
            return string.indexOf(search) !== -1;
        },
        insert: function(string, subString, start) {
            return string.slice(0, start) + subString + string.slice(start);
        },
        reduce: function(array, callback /*, initialValue*/) {
            if (this === null) {
                throw new TypeError('Array.prototype.reduce called on null or undefined');
            }

            if (typeof callback !== 'function') {
                throw new TypeError(callback + ' is not a function');
            }

            var t = Object(array),
                len = t.length >>> 0,
                k = 0,
                value;

            if (arguments.length === 3) {
                value = arguments[2];
            } else {
                while (k < len && !(k in t)) {
                    k++;
                }

                if (k >= len) {
                    throw new TypeError('Reduce of empty array with no initial value');
                }

                value = t[k++];
            }
            for (; k < len; k++) {
                if (k in t) {
                    value = callback(value, t[k], k, t);
                }
            }
            return value;
        },
        /**
         * Computes the multiplier necessary to make x >= 1,
         * effectively eliminating miscalculations caused by
         * finite precision.
         */
        multiplier: function (x) {
            var parts = x.toString().split('.');

            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);
        },
        /**
         * Given a variable number of arguments, returns the maximum
         * multiplier that must be used to normalize an operation involving
         * all of them.
         */
        correctionFactor: function () {
            var args = Array.prototype.slice.call(arguments);

            return args.reduce(function(accum, next) {
                var mn = _.multiplier(next);
                return accum > mn ? accum : mn;
            }, 1);
        },
        /**
         * Implementation of toFixed() that treats floats more like decimals
         *
         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
         * problems for accounting- and finance-related software.
         */
        toFixed: function(value, maxDecimals, roundingFunction, optionals) {
            var splitValue = value.toString().split('.'),
                minDecimals = maxDecimals - (optionals || 0),
                boundedPrecision,
                optionalsRegExp,
                power,
                output;

            // Use the smallest precision value possible to avoid errors from floating point representation
            if (splitValue.length === 2) {
              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);
            } else {
              boundedPrecision = minDecimals;
            }

            power = Math.pow(10, boundedPrecision);

            // Multiply up by precision, round accurately, then divide and use native toFixed():
            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);

            if (optionals > maxDecimals - boundedPrecision) {
                optionalsRegExp = new RegExp('\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');
                output = output.replace(optionalsRegExp, '');
            }

            return output;
        }
    };

    // avaliable options
    numeral.options = options;

    // avaliable formats
    numeral.formats = formats;

    // avaliable formats
    numeral.locales = locales;

    // This function sets the current locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    numeral.locale = function(key) {
        if (key) {
            options.currentLocale = key.toLowerCase();
        }

        return options.currentLocale;
    };

    // This function provides access to the loaded locale data.  If
    // no arguments are passed in, it will simply return the current
    // global locale object.
    numeral.localeData = function(key) {
        if (!key) {
            return locales[options.currentLocale];
        }

        key = key.toLowerCase();

        if (!locales[key]) {
            throw new Error('Unknown locale : ' + key);
        }

        return locales[key];
    };

    numeral.reset = function() {
        for (var property in defaults) {
            options[property] = defaults[property];
        }
    };

    numeral.zeroFormat = function(format) {
        options.zeroFormat = typeof(format) === 'string' ? format : null;
    };

    numeral.nullFormat = function (format) {
        options.nullFormat = typeof(format) === 'string' ? format : null;
    };

    numeral.defaultFormat = function(format) {
        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';
    };

    numeral.register = function(type, name, format) {
        name = name.toLowerCase();

        if (this[type + 's'][name]) {
            throw new TypeError(name + ' ' + type + ' already registered.');
        }

        this[type + 's'][name] = format;

        return format;
    };


    numeral.validate = function(val, culture) {
        var _decimalSep,
            _thousandSep,
            _currSymbol,
            _valArray,
            _abbrObj,
            _thousandRegEx,
            localeData,
            temp;

        //coerce val to string
        if (typeof val !== 'string') {
            val += '';

            if (console.warn) {
                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);
            }
        }

        //trim whitespaces from either sides
        val = val.trim();

        //if val is just digits return true
        if (!!val.match(/^\d+$/)) {
            return true;
        }

        //if val is empty return false
        if (val === '') {
            return false;
        }

        //get the decimal and thousands separator from numeral.localeData
        try {
            //check if the culture is understood by numeral. if not, default it to current locale
            localeData = numeral.localeData(culture);
        } catch (e) {
            localeData = numeral.localeData(numeral.locale());
        }

        //setup the delimiters and currency symbol based on culture/locale
        _currSymbol = localeData.currency.symbol;
        _abbrObj = localeData.abbreviations;
        _decimalSep = localeData.delimiters.decimal;
        if (localeData.delimiters.thousands === '.') {
            _thousandSep = '\\.';
        } else {
            _thousandSep = localeData.delimiters.thousands;
        }

        // validating currency symbol
        temp = val.match(/^[^\d]+/);
        if (temp !== null) {
            val = val.substr(1);
            if (temp[0] !== _currSymbol) {
                return false;
            }
        }

        //validating abbreviation symbol
        temp = val.match(/[^\d]+$/);
        if (temp !== null) {
            val = val.slice(0, -1);
            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {
                return false;
            }
        }

        _thousandRegEx = new RegExp(_thousandSep + '{2}');

        if (!val.match(/[^\d.,]/g)) {
            _valArray = val.split(_decimalSep);
            if (_valArray.length > 2) {
                return false;
            } else {
                if (_valArray.length < 2) {
                    return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx));
                } else {
                    if (_valArray[0].length === 1) {
                        return ( !! _valArray[0].match(/^\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
                    } else {
                        return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
                    }
                }
            }
        }

        return false;
    };


    /************************************
        Numeral Prototype
    ************************************/

    numeral.fn = Numeral.prototype = {
        clone: function() {
            return numeral(this);
        },
        format: function(inputString, roundingFunction) {
            var value = this._value,
                format = inputString || options.defaultFormat,
                kind,
                output,
                formatFunction;

            // make sure we have a roundingFunction
            roundingFunction = roundingFunction || Math.round;

            // format based on value
            if (value === 0 && options.zeroFormat !== null) {
                output = options.zeroFormat;
            } else if (value === null && options.nullFormat !== null) {
                output = options.nullFormat;
            } else {
                for (kind in formats) {
                    if (format.match(formats[kind].regexps.format)) {
                        formatFunction = formats[kind].format;

                        break;
                    }
                }

                formatFunction = formatFunction || numeral._.numberToFormat;

                output = formatFunction(value, format, roundingFunction);
            }

            return output;
        },
        value: function() {
            return this._value;
        },
        input: function() {
            return this._input;
        },
        set: function(value) {
            this._value = Number(value);

            return this;
        },
        add: function(value) {
            var corrFactor = _.correctionFactor.call(null, this._value, value);

            function cback(accum, curr, currI, O) {
                return accum + Math.round(corrFactor * curr);
            }

            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;

            return this;
        },
        subtract: function(value) {
            var corrFactor = _.correctionFactor.call(null, this._value, value);

            function cback(accum, curr, currI, O) {
                return accum - Math.round(corrFactor * curr);
            }

            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;

            return this;
        },
        multiply: function(value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = _.correctionFactor(accum, curr);
                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);
            }

            this._value = _.reduce([this._value, value], cback, 1);

            return this;
        },
        divide: function(value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = _.correctionFactor(accum, curr);
                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);
            }

            this._value = _.reduce([this._value, value], cback);

            return this;
        },
        difference: function(value) {
            return Math.abs(numeral(this._value).subtract(value).value());
        }
    };

    /************************************
        Default Locale && Format
    ************************************/

    numeral.register('locale', 'en', {
        delimiters: {
            thousands: ',',
            decimal: '.'
        },
        abbreviations: {
            thousand: 'k',
            million: 'm',
            billion: 'b',
            trillion: 't'
        },
        ordinal: function(number) {
            var b = number % 10;
            return (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
        },
        currency: {
            symbol: '$'
        }
    });

    

(function() {
        numeral.register('format', 'bps', {
            regexps: {
                format: /(BPS)/,
                unformat: /(BPS)/
            },
            format: function(value, format, roundingFunction) {
                var space = numeral._.includes(format, ' BPS') ? ' ' : '',
                    output;

                value = value * 10000;

                // check for space before BPS
                format = format.replace(/\s?BPS/, '');

                output = numeral._.numberToFormat(value, format, roundingFunction);

                if (numeral._.includes(output, ')')) {
                    output = output.split('');

                    output.splice(-1, 0, space + 'BPS');

                    output = output.join('');
                } else {
                    output = output + space + 'BPS';
                }

                return output;
            },
            unformat: function(string) {
                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);
            }
        });
})();


(function() {
        var decimal = {
            base: 1000,
            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
        },
        binary = {
            base: 1024,
            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']
        };

    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {
            return decimal.suffixes.indexOf(item) < 0;
        }));
        var unformatRegex = allSuffixes.join('|');
        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)
        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';

    numeral.register('format', 'bytes', {
        regexps: {
            format: /([0\s]i?b)/,
            unformat: new RegExp(unformatRegex)
        },
        format: function(value, format, roundingFunction) {
            var output,
                bytes = numeral._.includes(format, 'ib') ? binary : decimal,
                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',
                power,
                min,
                max;

            // check for space before
            format = format.replace(/\s?i?b/, '');

            for (power = 0; power <= bytes.suffixes.length; power++) {
                min = Math.pow(bytes.base, power);
                max = Math.pow(bytes.base, power + 1);

                if (value === null || value === 0 || value >= min && value < max) {
                    suffix += bytes.suffixes[power];

                    if (min > 0) {
                        value = value / min;
                    }

                    break;
                }
            }

            output = numeral._.numberToFormat(value, format, roundingFunction);

            return output + suffix;
        },
        unformat: function(string) {
            var value = numeral._.stringToNumber(string),
                power,
                bytesMultiplier;

            if (value) {
                for (power = decimal.suffixes.length - 1; power >= 0; power--) {
                    if (numeral._.includes(string, decimal.suffixes[power])) {
                        bytesMultiplier = Math.pow(decimal.base, power);

                        break;
                    }

                    if (numeral._.includes(string, binary.suffixes[power])) {
                        bytesMultiplier = Math.pow(binary.base, power);

                        break;
                    }
                }

                value *= (bytesMultiplier || 1);
            }

            return value;
        }
    });
})();


(function() {
        numeral.register('format', 'currency', {
        regexps: {
            format: /(\$)/
        },
        format: function(value, format, roundingFunction) {
            var locale = numeral.locales[numeral.options.currentLocale],
                symbols = {
                    before: format.match(/^([\+|\-|\(|\s|\$]*)/)[0],
                    after: format.match(/([\+|\-|\)|\s|\$]*)$/)[0]
                },
                output,
                symbol,
                i;

            // strip format of spaces and $
            format = format.replace(/\s?\$\s?/, '');

            // format the number
            output = numeral._.numberToFormat(value, format, roundingFunction);

            // update the before and after based on value
            if (value >= 0) {
                symbols.before = symbols.before.replace(/[\-\(]/, '');
                symbols.after = symbols.after.replace(/[\-\)]/, '');
            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {
                symbols.before = '-' + symbols.before;
            }

            // loop through each before symbol
            for (i = 0; i < symbols.before.length; i++) {
                symbol = symbols.before[i];

                switch (symbol) {
                    case '$':
                        output = numeral._.insert(output, locale.currency.symbol, i);
                        break;
                    case ' ':
                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);
                        break;
                }
            }

            // loop through each after symbol
            for (i = symbols.after.length - 1; i >= 0; i--) {
                symbol = symbols.after[i];

                switch (symbol) {
                    case '$':
                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));
                        break;
                    case ' ':
                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));
                        break;
                }
            }


            return output;
        }
    });
})();


(function() {
        numeral.register('format', 'exponential', {
        regexps: {
            format: /(e\+|e-)/,
            unformat: /(e\+|e-)/
        },
        format: function(value, format, roundingFunction) {
            var output,
                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',
                parts = exponential.split('e');

            format = format.replace(/e[\+|\-]{1}0/, '');

            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);

            return output + 'e' + parts[1];
        },
        unformat: function(string) {
            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),
                value = Number(parts[0]),
                power = Number(parts[1]);

            power = numeral._.includes(string, 'e-') ? power *= -1 : power;

            function cback(accum, curr, currI, O) {
                var corrFactor = numeral._.correctionFactor(accum, curr),
                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);
                return num;
            }

            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);
        }
    });
})();


(function() {
        numeral.register('format', 'ordinal', {
        regexps: {
            format: /(o)/
        },
        format: function(value, format, roundingFunction) {
            var locale = numeral.locales[numeral.options.currentLocale],
                output,
                ordinal = numeral._.includes(format, ' o') ? ' ' : '';

            // check for space before
            format = format.replace(/\s?o/, '');

            ordinal += locale.ordinal(value);

            output = numeral._.numberToFormat(value, format, roundingFunction);

            return output + ordinal;
        }
    });
})();


(function() {
        numeral.register('format', 'percentage', {
        regexps: {
            format: /(%)/,
            unformat: /(%)/
        },
        format: function(value, format, roundingFunction) {
            var space = numeral._.includes(format, ' %') ? ' ' : '',
                output;

            if (numeral.options.scalePercentBy100) {
                value = value * 100;
            }

            // check for space before %
            format = format.replace(/\s?\%/, '');

            output = numeral._.numberToFormat(value, format, roundingFunction);

            if (numeral._.includes(output, ')')) {
                output = output.split('');

                output.splice(-1, 0, space + '%');

                output = output.join('');
            } else {
                output = output + space + '%';
            }

            return output;
        },
        unformat: function(string) {
            var number = numeral._.stringToNumber(string);
            if (numeral.options.scalePercentBy100) {
                return number * 0.01;
            }
            return number;
        }
    });
})();


(function() {
        numeral.register('format', 'time', {
        regexps: {
            format: /(:)/,
            unformat: /(:)/
        },
        format: function(value, format, roundingFunction) {
            var hours = Math.floor(value / 60 / 60),
                minutes = Math.floor((value - (hours * 60 * 60)) / 60),
                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));

            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);
        },
        unformat: function(string) {
            var timeArray = string.split(':'),
                seconds = 0;

            // turn hours and minutes into seconds and add them all up
            if (timeArray.length === 3) {
                // hours
                seconds = seconds + (Number(timeArray[0]) * 60 * 60);
                // minutes
                seconds = seconds + (Number(timeArray[1]) * 60);
                // seconds
                seconds = seconds + Number(timeArray[2]);
            } else if (timeArray.length === 2) {
                // minutes
                seconds = seconds + (Number(timeArray[0]) * 60);
                // seconds
                seconds = seconds + Number(timeArray[1]);
            }
            return Number(seconds);
        }
    });
})();

return numeral;
}));

},{}],196:[function(require,module,exports){
var crypto = require('crypto');

function srs(options, cb) {
	if (typeof(options) === 'function') {
		cb = options;
		options = {};
	} else {
		options = options || {};
	}

	var length = options['length'] || 32;
	var alphanumeric = options['alphanumeric'] || false;
	// async path
	if (cb) {
		crypto.randomBytes(length, function(err, buf) {
			if (err) {
				return cb(err);
			}
			return cb(null, _finish(buf));
		});
	}
	// sync path
	else {
		return _finish(crypto.randomBytes(length));
	}

	function _finish(buf) {
		var string = buf.toString('base64');
		if (alphanumeric === true) {
			string = string.replace(/[\W_]+/g, '');
		} else {
			string = string.replace(/\//g, '_').replace(/\+/g, '-');
		}
		return string.substr(0, length);
	}
};



module.exports = srs;

},{"crypto":56}],197:[function(require,module,exports){
'use strict'

module.exports = require('bindings')('turtlecoin-crypto.node')

},{"bindings":166}],198:[function(require,module,exports){
(function (Buffer){
'use strict'

const varint = require('varint')

module.exports = (buf) => {
  if (!Buffer.isBuffer(buf)) {
    throw new Error('arg needs to be a buffer')
  }

  let result = []

  while (buf.length > 0) {
    const num = varint.decode(buf)
    result.push(num)
    buf = buf.slice(varint.decode.bytes)
  }

  return result
}

}).call(this,{"isBuffer":require("C:/Users/Brandon/AppData/Roaming/npm/node_modules/browserify/node_modules/is-buffer/index.js")})
},{"C:/Users/Brandon/AppData/Roaming/npm/node_modules/browserify/node_modules/is-buffer/index.js":101,"varint":201}],199:[function(require,module,exports){
module.exports = read

var MSB = 0x80
  , REST = 0x7F

function read(buf, offset) {
  var res    = 0
    , offset = offset || 0
    , shift  = 0
    , counter = offset
    , b
    , l = buf.length

  do {
    if (counter >= l) {
      read.bytes = 0
      throw new RangeError('Could not decode varint')
    }
    b = buf[counter++]
    res += shift < 28
      ? (b & REST) << shift
      : (b & REST) * Math.pow(2, shift)
    shift += 7
  } while (b >= MSB)

  read.bytes = counter - offset

  return res
}

},{}],200:[function(require,module,exports){
module.exports = encode

var MSB = 0x80
  , REST = 0x7F
  , MSBALL = ~REST
  , INT = Math.pow(2, 31)

function encode(num, out, offset) {
  out = out || []
  offset = offset || 0
  var oldOffset = offset

  while(num >= INT) {
    out[offset++] = (num & 0xFF) | MSB
    num /= 128
  }
  while(num & MSBALL) {
    out[offset++] = (num & 0xFF) | MSB
    num >>>= 7
  }
  out[offset] = num | 0
  
  encode.bytes = offset - oldOffset + 1
  
  return out
}

},{}],201:[function(require,module,exports){
module.exports = {
    encode: require('./encode.js')
  , decode: require('./decode.js')
  , encodingLength: require('./length.js')
}

},{"./decode.js":199,"./encode.js":200,"./length.js":202}],202:[function(require,module,exports){

var N1 = Math.pow(2,  7)
var N2 = Math.pow(2, 14)
var N3 = Math.pow(2, 21)
var N4 = Math.pow(2, 28)
var N5 = Math.pow(2, 35)
var N6 = Math.pow(2, 42)
var N7 = Math.pow(2, 49)
var N8 = Math.pow(2, 56)
var N9 = Math.pow(2, 63)

module.exports = function (value) {
  return (
    value < N1 ? 1
  : value < N2 ? 2
  : value < N3 ? 3
  : value < N4 ? 4
  : value < N5 ? 5
  : value < N6 ? 6
  : value < N7 ? 7
  : value < N8 ? 8
  : value < N9 ? 9
  :              10
  )
}

},{}]},{},[158])(158)
});
